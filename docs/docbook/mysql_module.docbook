<?xml version="1.0" encoding="UTF-8" ?>

<sect1 id="mysql_Module">
  <title>mysql Module</title>

  <para>The mysql module provides a MySQL driver to Qore's DBI system, allowing Qore programs to access MySQL databases through the <link linkend="Qore::SQL::Datasource_Class">Datasource Class</link>.</para>

    <para>Example of creating a MySQL Datasource:</para>

    <programlisting>$db = new Datasource(SQL::DSMySQL, $user, $pass, $db, $charset, $hostname);</programlisting>

  <para>This driver supports the following DBI capabilities when compiled against MySQL 4 or better: <code>DBI_CAP_TRANSACTION_MANAGEMENT, DBI_CAP_CHARSET_SUPPORT, DBI_CAP_LOB_SUPPORT</code>.</para>
  
  <para>When compiled against MySQL 5, the following additional capabilities are available: <code>DBI_CAP_STORED_PROCEDURES</code>.</para>
  
  <para>The driver uses MySQL's prepared statement interface when it is available (must be compiled with MySQL 4 or better).</para>

  <para>If a connection times out while not in a transaction, the connection will be automatically reconnected.</para>

  <para>All column names are manually converted to lower case if necessary before being returned to the user.</para>

  <para>This driver sets new connections to use ISO transaction level &quot;read committed&quot; explicitly for every new connection to conform to Qore's default transaction management style.  The transaction level can be changed manually, however, using the <link linkend="Qore::SQL::Datasource::exec">Datasource::exec()</link> method.  Aditionally the CLIENT_FOUND_ROWS option is set for each connection, so <link linkend="Qore::SQL::Datasource::exec">Datasource::exec()</link> will return the number of rows affected by insert/update queries, etc in a manner consistent with other Qore DBI drivers (when this row is not set and a single row is updated with the same values, 0 is returned instead of 1 as with other Qore DBI drivers).</para>
  
  <para>Note that is is not necessary to give buffer types when binding placeholder values; the mysql driver will determine the needed type in advance and create the placeholder buffer automatically.  Qore placeholder buffer specifications are ignored when the mysql driver is used.</para>
  
  <para>As mentioned above, with appropriate versions of MySQL (version 5+), stored procedure execution is supported; the following is an example of a stored procedure call:</para>
  
  <para>Example MySQL function:</para>
  
  <programlisting>delimiter //
create procedure get_family (in id int, out fname varchar(32))
begin
   select name into fname from family where family_id = id;
end;
//</programlisting>

  <para>Qore code to call this function:</para>
  
  <programlisting>$result = $db.exec(&quot;call get_family(%v, :name)&quot;, 1);
printf(&quot;%N\n&quot;, $result);</programlisting>

  <para>Resulting in:</para>

  <programlisting>hash: (1 member)
  name : "Smith"</programlisting>
  
  <para>The following table describes the mapping from MySQL data types to Qore types.  All other MySQL types not listed are converted to strings.</para>

  <table>
    <title>MySQL to Qore Type Mappings</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>MySQL Type</para></entry>
	  <entry><para>Qore Type</para></entry>
	  <entry><para>Notes</para></entry>
	</row>
      </thead>
      <tbody>
        <row>
          <entry><para><code>TINYINT</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion (note that <code>BOOL</code> and <code>BOOLEAN</code> are synonyms for this type in MySQL)</para></entry>
        </row>
        <row>
          <entry><para><code>SMALLINT</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>MEDIUMINT</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>INT</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>BIGINT</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>YEAR</code></para></entry>
          <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>DECIMAL</code></para></entry>
          <entry><para><link linkend="String"><code>Type::String</code></link></para></entry>
          <entry><para>value is converted to a string to avoid a loss of precision</para></entry>
        </row>
        <row>
          <entry><para><code>FLOAT</code></para></entry>
          <entry><para><link linkend="Float"><code>Type::Float</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>DOUBLE</code></para></entry>
          <entry><para><link linkend="Float"><code>Type::Float</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>DATETIME</code></para></entry>
          <entry><para><link linkend="Date"><code>Type::Date</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>DATE</code></para></entry>
          <entry><para><link linkend="Date"><code>Type::Date</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>TIME</code></para></entry>
          <entry><para><link linkend="Date"><code>Type::Date</code></link></para></entry>
          <entry><para>direct conversion; the date portion will be set to January 1, 1970 (start of Qore's 64-bit epoch)</para></entry>
        </row>
        <row>
          <entry><para><code>TIMESTAMP</code></para></entry>
          <entry><para><link linkend="Date"><code>Type::Date</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>BLOB</code></para></entry>
          <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>TINYBLOB</code></para></entry>
          <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>MEDIUMBLOB</code></para></entry>
          <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>BINARY</code></para></entry>
          <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
        <row>
          <entry><para><code>VARBINARY</code></para></entry>
          <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
          <entry><para>direct conversion</para></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>The following table gives data mapping when binding qore types by value.  Data types not listed here cannot be bound by value.</para>

  <table>
    <title>Qore to MySQL Type Mappings for Binding by Value</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Qore Type</para></entry>
	  <entry><para>MySQL Type</para></entry>
	  <entry><para>Notes</para></entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry><para><link linkend="String"><code>Type::String</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_STRING</code></para></entry>
	  <entry><para>string data is mapped directly after any character set conversions (if necessary)</para></entry>
	</row>
        <row>
	  <entry><para><link linkend="Date"><code>Type::Date</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_DATETIME</code></para></entry>
	  <entry><para>direct mapping of data</para></entry>
	</row>
        <row>
	  <entry><para><link linkend="Binary"><code>Type::Binary</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_BLOB</code></para></entry>
	  <entry><para>direct mapping of data</para></entry>
	</row>
        <row>
	  <entry><para><link linkend="Boolean"><code>Type::Boolean</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_LONG</code></para></entry>
	  <entry><para>True=1, False=0</para></entry>
	</row>
        <row>
	  <entry><para><link linkend="Integer"><code>Type::Int</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_LONGLONG</code></para></entry>
	  <entry><para>direct mapping of data</para></entry>
	</row>
        <row>
	  <entry><para><link linkend="Float"><code>Type::Float</code></link></para></entry>
	  <entry><para><code>MYSQL_TYPE_DOUBLE</code></para></entry>
	  <entry><para>direct mapping of data</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

</sect1>
