
#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int yylex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[696] =
    {   0,
        0,    0,    0,    0,    0,    0,   19,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  190,  188,  186,  187,  188,   22,
       81,  188,  188,  188,  188,  188,  188,  188,  188,  144,
      144,  188,  188,  188,  154,  154,  188,  188,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  188,  188,   34,   24,   23,  189,
       79,   76,   75,  189,   20,   19,  189,   19,   74,   69,
       72,   74,   74,   74,   44,   41,   40,  189,   39,   36,
       35,  189,  189,   80,   18,   16,   68,   59,   57,   58,

      189,   56,   47,   45,   46,  189,  186,    0,  162,  185,
        0,  153,    0,  157,  178,  155,    0,  168,  176,    0,
      159,    0,  179,    0,  172,  174,    0,  173,  175,    0,
       21,  180,    0,  143,  144,  147,  146,  145,  148,  149,
      150,    0,    0,  171,  160,  163,    0,  166,  184,    0,
      161,  170,  154,    0,  154,  154,    0,  181,    0,  158,
      154,  154,  123,  154,  154,  154,  154,   90,  154,  154,
      154,  154,   92,   96,  154,  103,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,    0,  177,  169,  155,  155,  155,  155,

      155,   34,   32,   33,   25,   26,   30,   31,   27,   29,
       28,   79,   78,   77,   20,   19,   19,   69,   71,   70,
        0,   44,   43,   42,   39,   38,   37,    0,   80,   18,
       16,   68,   67,   65,   66,   63,   64,   60,   62,   61,
       56,   55,   53,   54,   51,   52,   48,   50,   49,    0,
      165,  152,  153,  155,    0,  142,  143,  144,    0,  151,
        0,  183,    0,  167,    0,  164,    0,  182,    0,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,   94,  154,  154,  154,  154,   87,  104,
      129,  154,  154,  154,  154,  154,  154,   99,  154,  154,

      154,  154,  107,  154,  154,  154,  155,  155,  155,  155,
      155,   25,   26,   73,  152,  156,  143,  144,    0,    0,
      140,  154,   83,  154,  154,  125,  154,  154,  154,  154,
      154,  154,  154,   93,  154,  154,  112,  154,  154,  154,
       98,  154,    0,  133,  154,  128,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      155,  155,  155,    0,  155,   25,  156,    0,  143,  144,
        0,    0,  140,  154,  154,  105,  110,   85,  100,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,    0,  132,  154,  154,   88,  154,  154,  154,  154,

      154,  154,  154,  154,  108,  154,   82,   91,  155,  155,
      155,    0,    0,    0,    0,    0,    0,    0,  155,    0,
        0,  141,  154,  154,  154,  154,  154,  113,  154,  117,
      154,  154,  154,  154,  154,  154,  154,  102,    0,  135,
      121,  154,  130,  154,  154,  124,  154,  154,  154,    0,
      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  155,    0,    0,  141,   84,  154,  118,
      154,  126,  154,  111,   95,  154,  154,  154,   86,  109,
      154,    0,  134,  154,  154,  154,  154,   89,    0,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  155,    0,  139,  154,  106,   97,  127,  154,
      154,  154,  154,  154,  154,  154,    0,  136,    0,  155,
        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,  155,    0,  154,  154,  101,  154,  154,
      119,  154,  154,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,  138,  114,
      131,  154,  120,  154,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  154,
      154,  116,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  154,  115,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,  154,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
      154,    0,    0,    5,    0,    0,    0,    0,    0,    0,
        0,  122,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,  137,    0,    0,    0,    6,
        0,    0,    0,    0,    0,    9,    0,    2,    0,    0,
        7,    0,    0,   12,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
        1,   13,   14,    1,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,    1,   22,
       23,   24,    1,    1,   25,   26,   25,   27,   25,   25,
       28,   29,   30,   31,   31,   32,   33,   34,   35,   31,
       31,   31,   31,   36,   37,   31,   31,   31,   38,   31,
        1,   39,    1,   40,   41,   42,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   31,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,   68,    1,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    6,    4,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   10,   10,
       11,    1,    4,    1,   12,   12,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,    1,
       15,    1,   12,   12,   12,   12,   12,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1
    } ;

static yyconst flex_int16_t yy_base[739] =
    {   0,
        0, 1679,   67,   68,   69,   72,   74,   77,   80,   83,
       85,   87,   88,   92, 1684, 1683,   90,   96,  110,  112,
      113,  118,  133,  136, 1685, 1689,   92, 1689,   99, 1689,
     1689, 1668,  154,  115, 1672,  143,  157,  158,  163,  171,
      195,  195,  201,  206, 1661,  148,  230, 1639,  157,  205,
       99,   89,  128,  172,  149,  108,  216,  102,  185,  191,
      218,  214,  221,  219,  248,  258,    0, 1689, 1689,  274,
        0, 1689, 1689, 1663,    0,  190, 1689,  252, 1689,  281,
     1689, 1662, 1661, 1618,    0, 1689, 1689, 1659,    0, 1689,
     1689, 1658, 1671, 1689,    0,    0,    0, 1689, 1689, 1689,

      283,    0, 1689, 1689, 1689,  284,  286,  287,  300, 1689,
        0,    0,  317, 1689, 1689, 1652,  344, 1689, 1689, 1661,
     1689,  332, 1689,  345, 1689, 1689,  348, 1689, 1689,  349,
     1689, 1689,  277,  355,  183, 1689, 1689, 1689, 1689, 1689,
     1689,    0,  356,  360,  380, 1689,  383,  384, 1689,  387,
     1689,  390, 1650, 1649,  230,  225,  391, 1689, 1627, 1689,
      258,  251, 1647,  305,  222,  257,  348, 1646,  356,  286,
      335,  340, 1645,  376,  304, 1644,  287,  293,  360,  377,
      379,  381,  384,  387,  388,  391,  396,  397,  394,  400,
      401,  402,  404,  429, 1689, 1689,  403,  406,   62,  407,

      411,    0, 1689, 1689,  446,  451, 1689, 1689, 1689, 1689,
     1689,    0, 1689, 1689,    0,  433,  452,  470, 1689, 1689,
     1647,    0, 1689, 1689,    0, 1689, 1689, 1660, 1689,    0,
        0,    0, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
        0, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,  471,
     1689,    0,    0, 1641,    0,  458,  463,  487,  466,    0,
      485, 1689,  491, 1689,  496, 1689,  507, 1689, 1653,  459,
      421,  278,  478,  471,  481,  483,  489,  491,  495,  470,
      501,  506,  508,  510,  511,  507,  512,  514, 1639, 1638,
      534,  518,  519,  523,  531,  532,  524,  535,  538,  539,

      541,  542, 1637,  544,  543,  546,  549,  550,  556,  167,
      553,  564,  585, 1689,    0,    0,  594,  569,  588, 1641,
     1635,  285, 1634,  408,  569, 1633,  570,  557,  555,  576,
      589,  597,  598, 1632,  601,  603, 1631,  604,  605,  607,
     1630,  608,  628, 1689,  610,  631,  613,  615,  616,  628,
      618,  617,  623,  620,  621,  627,  625,  636,  638,  639,
      646,  640,  648,  635,  654,  679,    0,  683,  688,  712,
     1629,    0, 1628,  660,  655, 1627, 1626, 1625, 1624,  657,
      658,  667,  662,  689,  691,  684,  690,  696,  697,  698,
      702,  752, 1689,  703,  706,  756,  704,  720,  722,  719,

      712,  715,  725,  732, 1623,  728, 1622, 1621,  758,  713,
      765,  732, 1576, 1587,  277, 1580, 1576,  731,  762,  771,
      774,    0,  418,  774,  736,  775,  777, 1616,  778, 1615,
      779,  781,  780,  782,  783,  785,  784, 1614,  805, 1689,
     1613,  787,  808,  790,  793, 1612,  794,  795,  797, 1587,
      800, 1575, 1579, 1586, 1573, 1566, 1570, 1571, 1560, 1567,
     1578, 1562, 1563,  798, 1604,  804,    0, 1597,  804, 1596,
      807, 1595,  812, 1594, 1593,  813,  814,  819, 1592, 1591,
      822,  851, 1689,  821,  828,  831,  835,  858, 1558,  838,
     1553, 1556, 1548, 1547, 1559, 1561, 1557,  872, 1558, 1543,

     1554, 1585,  844,  869, 1689,  848, 1578, 1577, 1576,  850,
      857,  860,  856,  862,  859,  863,  888, 1689, 1553,  892,
     1534, 1548, 1533, 1531, 1532, 1547, 1529,  895, 1689, 1541,
     1531, 1543, 1532,  887,  896,  872,  884, 1563,  880,  890,
     1562,  891,  898, 1522,  918, 1530, 1565, 1564, 1535, 1522,
     1523, 1518, 1514, 1511, 1526, 1524, 1514, 1548, 1553, 1546,
     1545,  896, 1544,  903,  902, 1504, 1507, 1503, 1515, 1505,
     1516, 1543, 1514, 1496, 1494, 1494, 1490, 1490,  907,  908,
      909, 1530, 1689, 1495, 1502, 1501, 1486, 1493, 1481, 1496,
     1523, 1481,  934, 1482, 1466,  921,  910, 1503, 1463, 1462,

     1473, 1503, 1500, 1469, 1459, 1458, 1430,  941, 1689, 1427,
      950, 1457,  912,  964, 1413, 1395, 1404, 1391, 1385, 1414,
     1372, 1367,  967,  970, 1689,  957,  936,  976, 1689, 1354,
      979, 1337, 1321, 1315, 1323, 1299, 1335,  982, 1689,  969,
      925, 1294,  990, 1689, 1291, 1268,  993, 1276, 1248, 1259,
     1279, 1273, 1230, 1206, 1219,  996, 1689, 1197, 1164, 1175,
      983, 1150, 1002,  943,  904,  904,  908,  989,  897, 1008,
     1689,  874, 1011,  676,  400, 1689,  387,  147, 1014, 1689,
     1017, 1020,  140, 1023, 1026, 1689, 1029, 1689,   72, 1032,
     1689, 1035, 1038, 1689, 1689, 1042, 1057, 1072, 1087, 1102,

     1117, 1132, 1147, 1162, 1177, 1192, 1200, 1212, 1225, 1231,
     1246, 1261, 1276, 1291, 1306, 1321, 1336, 1351, 1366, 1381,
     1396, 1411, 1426, 1441, 1456, 1471, 1486, 1197, 1492, 1498,
     1205, 1504, 1206, 1514, 1518, 1524, 1208, 1530
    } ;

static yyconst flex_int16_t yy_def[739] =
    {   0,
      695,    1,  696,  696,  697,  697,  698,  698,  699,  699,
      700,  700,  701,  701,  702,  702,  703,  703,  704,  704,
      705,  705,  706,  706,  695,  695,  695,  695,  695,  695,
      695,  707,  708,  695,  709,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  710,  710,  695,  711,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  695,  708,  712,  695,  695,  713,
      714,  695,  695,  715,  716,  695,  695,  716,  695,  695,
      695,  695,  695,  695,  717,  695,  695,  718,  719,  695,
      695,  720,  721,  695,  722,  723,  724,  695,  695,  695,

      725,  726,  695,  695,  695,  727,  695,  695,  695,  695,
      728,  729,  695,  695,  695,  730,  695,  695,  695,  709,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,   40,  134,  695,  695,  695,  695,  695,
      695,  731,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  710,  695,  710,  710,  695,  695,  711,  695,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  695,  695,  695,  730,  730,  730,  730,

      730,  712,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  714,  695,  695,  716,  695,  716,  695,  695,  695,
      695,  717,  695,  695,  719,  695,  695,  721,  695,  722,
      723,  724,  695,  695,  695,  695,  695,  695,  695,  695,
      726,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  732,  729,  730,  733,  695,  695,  695,  695,  731,
      695,  695,  695,  695,  695,  695,  695,  695,  734,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  730,  730,  730,  730,
      730,  695,  695,  695,  732,  735,  134,  317,  695,  695,
      736,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  695,  695,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      730,  730,  730,  695,  730,  695,  735,  695,  695,  695,
      695,  737,  736,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  695,  695,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  710,  730,  730,
      730,  695,  695,  695,  695,  695,  695,  695,  730,  695,
      695,  738,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  695,  695,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  695,
      730,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  730,  695,  695,  738,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  695,  695,  710,  710,  710,  710,  710,  695,  730,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  730,  695,  695,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  695,  695,  695,  730,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  730,  695,  710,  710,  710,  710,  710,
      710,  710,  710,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  730,  695,  710,
      710,  710,  710,  710,  710,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  710,
      710,  710,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  710,  710,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  710,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  710,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      710,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  710,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,    0,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst flex_int16_t yy_nxt[1759] =
    {   0,
       26,   27,   28,   27,   29,   30,   31,   32,   33,   34,
       35,   26,   36,   37,   38,   26,   39,   40,   41,   41,
       26,   42,   43,   44,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   46,   45,   45,   45,   45,   26,   47,
       26,   48,   45,   49,   50,   51,   52,   53,   45,   45,
       54,   55,   45,   56,   57,   58,   59,   45,   60,   61,
       62,   63,   45,   64,   45,   45,   45,   65,   26,   68,
       68,   72,   69,   69,   72,   76,   77,   78,   76,   77,
       78,   80,  255,   80,   80,   73,   80,   86,   73,   86,
       90,   77,   77,  107,   90,  107,   81,   77,   77,   81,

      108,   87,  108,   87,   91,   70,   70,   74,   91,  154,
       74,   77,   77,   77,   77,   98,  117,  309,  117,  154,
       98,  109,  154,   88,  118,   88,   92,   99,  154,  100,
       92,  692,   99,   82,  100,  103,   82,  119,  103,   83,
       84,  169,   83,   84,  122,  167,  122,  104,  154,  105,
      104,  101,  105,  170,  168,  113,  101,  113,  124,  127,
      124,  127,  114,  179,  130,  123,  130,  110,  154,  154,
      125,  106,  128,  176,  106,  131,  115,  154,  171,  126,
      129,  364,  155,  172,  156,  132,  133,  255,  134,  134,
      135,  216,  154,  216,  689,  175,  143,  136,  143,  161,

      258,  258,  147,  137,  147,  154,  684,  150,  138,  150,
      133,  154,  135,  135,  135,  162,  144,  145,  146,  173,
      139,  136,  163,  148,  140,  154,  174,  137,  151,  152,
      141,  157,  138,  157,  154,  142,  154,  183,  154,  154,
      180,  154,  154,  181,  139,  154,  182,  164,  140,  194,
      154,  194,  158,  216,  141,  217,  271,  165,  177,  113,
      166,  113,  178,  190,  276,  270,  114,  184,  193,  149,
      195,  154,  191,  185,  186,  192,  204,  154,  154,  187,
      115,  188,  218,  189,  218,  234,  243,  107,  108,  107,
      108,  205,  205,  206,  256,  256,  256,  273,  154,  235,

      244,  250,  272,  250,  197,  154,  154,  154,  198,  109,
      199,  277,  200,  154,  374,  196,  201,  207,  113,  458,
      113,  208,  251,  459,  154,  154,  236,  245,  209,  324,
      237,  246,  210,  122,  211,  122,  282,  238,  247,  115,
      288,  239,  248,  240,  249,  117,  124,  117,  124,  127,
      130,  127,  130,  118,  123,  154,  289,  143,  125,  143,
      154,  261,  128,  261,  274,  275,  119,  126,  154,  287,
      129,  132,  257,  257,  258,  259,  154,  144,  145,  146,
      154,  263,  262,  263,  147,  265,  147,  265,  150,  283,
      150,  267,  157,  267,  157,  278,  154,  154,  284,  154,

      279,  154,  280,  264,  154,  148,  266,  154,  154,  151,
      152,  154,  268,  158,  154,  281,  154,  154,  290,  695,
      154,  154,  154,  255,  154,  285,  255,  255,  154,  292,
      194,  255,  194,  291,  216,  286,  216,  295,  154,  298,
      293,  154,  683,  297,  294,  468,  296,  300,  301,  299,
      305,  195,  323,  216,  306,  217,  375,  311,  302,  682,
      308,  304,  310,  312,  312,  313,  303,  307,  313,  313,
      313,  218,  250,  218,  250,  256,  256,  256,  133,  154,
      317,  317,  318,  319,  319,  319,  261,  322,  261,  136,
      154,  154,  263,  251,  263,  137,  196,  265,  154,  265,

      138,  154,  133,  154,  318,  318,  318,  262,  267,  154,
      267,  154,  139,  136,  264,  154,  140,  326,  266,  137,
      325,  154,  141,  333,  138,  327,  154,  154,  154,  268,
      154,  154,  154,  331,  154,  343,  139,  343,  154,  154,
      140,  332,  328,  154,  154,  344,  141,  334,  329,  330,
      336,  154,  154,  337,  154,  154,  338,  339,  154,  154,
      342,  154,  154,  154,  154,  335,  154,  340,  346,  255,
      255,  341,  347,  255,  351,  154,  255,  154,  349,  352,
      345,  366,  366,  313,  348,  355,  370,  370,  356,  154,
      154,  353,  350,  358,  362,  361,  154,  357,  360,  354,

      363,  359,  313,  313,  313,  371,  371,  371,  368,  154,
      365,  369,  369,  370,  695,  379,  378,  154,  154,  377,
      376,  154,  380,  154,  154,  154,  381,  154,  154,  343,
      154,  343,  392,  154,  392,  154,  154,  154,  154,  344,
      154,  154,  393,  154,  384,  154,  387,  154,  154,  389,
      382,  154,  391,  397,  398,  386,  154,  383,  154,  154,
      255,  385,  399,  388,  402,  401,  255,  390,  255,  404,
      403,  394,  400,  395,  255,  154,  396,  154,  154,  412,
      154,  413,  154,  414,  407,  408,  406,  154,  405,  415,
      409,  416,  410,  423,  417,  418,  313,  313,  313,  411,

      420,  420,  420,  133,  154,  369,  369,  370,  428,  154,
      154,  154,  426,  424,  136,  419,  154,  154,  154,  427,
      137,  425,  154,  154,  154,  138,  154,  133,  681,  370,
      370,  370,  154,  255,  432,  154,  431,  139,  136,  154,
      154,  140,  154,  429,  137,  154,  433,  141,  154,  138,
      430,  434,  154,  392,  435,  392,  154,  439,  437,  439,
      438,  139,  436,  393,  446,  140,  442,  440,  443,  441,
      445,  141,  450,  444,  451,  449,  154,  448,  255,  452,
      462,  453,  255,  447,  454,  255,  463,  455,  465,  465,
      465,  466,  466,  466,  154,  154,  470,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  439,  154,  439,  482,
      154,  482,  464,  154,  154,  154,  440,  154,  255,  483,
      255,  505,  505,  505,  154,  478,  477,  154,  154,  469,
      475,  479,  154,  154,  154,  487,  471,  472,  473,  154,
      476,  154,  154,  485,  474,  490,  481,  480,  154,  486,
      484,  154,  482,  507,  482,  154,  503,  488,  255,  517,
      510,  517,  483,  511,  255,  506,  512,  513,  154,  518,
      154,  508,  509,  528,  529,  528,  154,  154,  154,  154,
      154,  516,  154,  154,  520,  515,  535,  535,  535,  517,
      534,  517,  154,  545,  514,  545,  528,  529,  528,  518,

      154,  557,  536,  538,  154,  537,  539,  255,  541,  542,
      154,  154,  255,  559,  559,  559,  154,  560,  154,  545,
      540,  545,  154,  154,  596,  596,  596,  543,  154,  154,
      154,  561,  154,  678,  562,  608,  609,  608,  612,  612,
      612,  580,  608,  609,  608,  154,  558,  677,  565,  581,
      563,  624,  625,  624,  598,  675,  154,  564,  597,  674,
      627,  641,  582,  673,  613,  628,  629,  628,  638,  639,
      638,  624,  625,  624,  640,  640,  640,  628,  629,  628,
      643,  644,  643,  638,  639,  638,  651,  651,  651,  672,
      652,  643,  644,  643,  656,  657,  656,  656,  657,  656,

      668,  668,  668,  670,  671,  670,  676,  676,  676,  670,
      671,  670,  679,  680,  679,  679,  680,  679,  685,  686,
      685,  687,  688,  687,  690,  691,  690,  685,  686,  685,
      687,  688,  687,  690,  691,  690,  693,  694,  693,  693,
      694,  693,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  112,  252,  252,
      669,  112,  112,  116,  260,  116,  260,  316,  316,  422,
      422,  667,  666,  116,  116,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      153,  153,  153,  153,  665,  153,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  202,  202,  664,  202,  663,  202,  202,  202,  202,
      202,  202,  202,  202,  662,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  212,  212,  154,  212,  212,  212,  212,  212,  661,

      212,  212,  212,  212,  660,  212,  213,  213,  659,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  215,  658,  655,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  222,  222,  654,  222,
      222,  222,  222,  222,  653,  222,  222,  222,  222,  650,
      222,  223,  223,  649,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  225,  225,  648,  225,
      225,  225,  225,  225,  647,  225,  225,  225,  225,  646,
      225,  226,  226,  645,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  230,  642,  637,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  231,  636,  635,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  232,  232,  634,  232,  232,  232,  633,  232,  632,
      232,  232,  232,  232,  631,  232,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  241,  241,  630,  241,  241,  241,  626,  241,  623,
      241,  241,  241,  241,  622,  241,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  253,  621,  253,  253,  620,  253,  254,  254,  254,
      254,  619,  254,  315,  618,  315,  315,  617,  315,  321,
      616,  615,  614,  154,  611,  321,  321,  367,  610,  367,
      367,  607,  367,  373,  373,  373,  373,  606,  373,  467,
      605,  467,  467,  604,  467,  603,  602,  601,  600,  599,
      154,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  154,  154,  154,  579,  255,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  154,  154,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  544,  154,  154,  154,  533,

      532,  531,  530,  527,  526,  525,  524,  523,  522,  521,
      519,  154,  154,  154,  154,  154,  154,  154,  504,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  489,  154,  154,  154,  154,  154,  461,  460,  457,
      456,  154,  154,  154,  154,  154,  154,  154,  154,  421,
      154,  154,  154,  154,  154,  154,  372,  154,  154,  154,
      320,  255,  229,  314,  154,  154,  154,  154,  160,  269,
      154,  121,  255,  229,  227,  224,  221,  220,  219,  214,
      160,  154,  121,  111,  695,   94,   94,   66,   25,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst flex_int16_t yy_chk[1759] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    3,    4,    6,    7,    7,    7,    8,    8,
        8,    9,  199,    9,   10,    5,   10,   11,    6,   12,
       13,   17,   17,   27,   14,   27,    9,   18,   18,   10,

       29,   11,   29,   12,   13,    3,    4,    5,   14,   52,
        6,   19,   19,   20,   20,   21,   34,  199,   34,   51,
       22,   29,   58,   11,   34,   12,   13,   21,   56,   21,
       14,  689,   22,    9,   22,   23,   10,   34,   24,    9,
        9,   52,   10,   10,   36,   51,   36,   23,   53,   23,
       24,   21,   24,   52,   51,   33,   22,   33,   37,   38,
       37,   38,   33,   58,   39,   36,   39,   29,   46,   55,
       37,   23,   38,   56,   24,   39,   33,   49,   53,   37,
       38,  310,   46,   53,   46,   39,   40,  310,   40,   40,
       40,   76,   54,   76,  683,   55,   42,   40,   42,   49,

      135,  135,   43,   40,   43,   59,  678,   44,   40,   44,
       41,   60,   41,   41,   41,   49,   42,   42,   42,   54,
       40,   41,   49,   43,   40,   50,   54,   41,   44,   44,
       40,   47,   41,   47,   62,   40,   57,   60,   61,   64,
       59,   63,  165,   59,   41,  156,   59,   50,   41,   65,
      155,   65,   47,   78,   41,   78,  156,   50,   57,   66,
       50,   66,   57,   62,  165,  155,   66,   61,   64,   43,
       65,  162,   62,   61,   61,   63,   70,  166,  161,   61,
       66,   61,   80,   61,   80,  101,  106,  107,  108,  107,
      108,   70,   70,   70,  133,  133,  133,  162,  272,  101,

      106,  109,  161,  109,   66,  322,  170,  177,   66,  108,
       66,  166,   66,  178,  322,   65,   66,   70,  113,  415,
      113,   70,  109,  415,  175,  164,  101,  106,   70,  272,
      101,  106,   70,  122,   70,  122,  170,  101,  106,  113,
      177,  101,  106,  101,  106,  117,  124,  117,  124,  127,
      130,  127,  130,  117,  122,  171,  178,  143,  124,  143,
      172,  144,  127,  144,  164,  164,  117,  124,  167,  175,
      127,  130,  134,  134,  134,  134,  169,  143,  143,  143,
      179,  145,  144,  145,  147,  148,  147,  148,  150,  171,
      150,  152,  157,  152,  157,  167,  174,  180,  172,  181,

      167,  182,  169,  145,  183,  147,  148,  184,  185,  150,
      150,  186,  152,  157,  189,  169,  187,  188,  179,  134,
      190,  191,  192,  197,  193,  174,  198,  200,  324,  181,
      194,  201,  194,  180,  216,  174,  216,  184,  423,  187,
      182,  271,  677,  186,  183,  423,  185,  188,  189,  187,
      193,  194,  271,  217,  193,  217,  324,  201,  190,  675,
      198,  192,  200,  205,  205,  205,  191,  197,  206,  206,
      206,  218,  250,  218,  250,  256,  256,  256,  257,  270,
      257,  257,  257,  259,  259,  259,  261,  270,  261,  257,
      280,  274,  263,  250,  263,  257,  194,  265,  273,  265,

      257,  275,  258,  276,  258,  258,  258,  261,  267,  277,
      267,  278,  257,  258,  263,  279,  257,  274,  265,  258,
      273,  281,  257,  280,  258,  275,  282,  286,  283,  267,
      284,  285,  287,  278,  288,  291,  258,  291,  292,  293,
      258,  279,  276,  294,  297,  291,  258,  281,  277,  277,
      283,  295,  296,  283,  291,  298,  284,  285,  299,  300,
      288,  301,  302,  305,  304,  282,  306,  286,  293,  307,
      308,  287,  294,  311,  297,  329,  309,  328,  295,  298,
      292,  312,  312,  312,  294,  301,  318,  318,  302,  325,
      327,  299,  296,  304,  308,  307,  330,  302,  306,  300,

      309,  305,  313,  313,  313,  319,  319,  319,  317,  331,
      311,  317,  317,  317,  317,  329,  328,  332,  333,  327,
      325,  335,  330,  336,  338,  339,  330,  340,  342,  343,
      345,  343,  346,  347,  346,  348,  349,  352,  351,  343,
      354,  355,  346,  353,  333,  357,  338,  356,  350,  340,
      331,  346,  345,  350,  350,  336,  358,  332,  359,  360,
      362,  335,  351,  339,  354,  353,  361,  342,  363,  356,
      355,  347,  352,  348,  365,  375,  349,  380,  381,  364,
      374,  364,  383,  364,  359,  360,  358,  382,  357,  364,
      361,  364,  362,  374,  364,  364,  366,  366,  366,  363,

      368,  368,  368,  369,  386,  369,  369,  369,  383,  384,
      387,  385,  381,  375,  369,  365,  388,  389,  390,  382,
      369,  380,  391,  394,  397,  369,  395,  370,  674,  370,
      370,  370,  401,  410,  387,  402,  386,  369,  370,  400,
      398,  369,  399,  384,  370,  403,  388,  369,  406,  370,
      385,  389,  404,  392,  390,  392,  425,  396,  394,  396,
      395,  370,  391,  392,  402,  370,  398,  396,  399,  397,
      401,  370,  409,  400,  410,  406,  396,  404,  409,  411,
      418,  412,  419,  403,  412,  411,  418,  412,  420,  420,
      420,  421,  421,  421,  424,  426,  425,  427,  429,  431,

      433,  432,  434,  435,  437,  436,  439,  442,  439,  443,
      444,  443,  419,  445,  447,  448,  439,  449,  464,  443,
      451,  466,  466,  466,  469,  435,  434,  471,  443,  424,
      432,  436,  473,  476,  477,  448,  426,  427,  429,  478,
      433,  484,  481,  445,  431,  451,  442,  437,  485,  447,
      444,  486,  482,  471,  482,  487,  464,  449,  490,  488,
      477,  488,  482,  478,  503,  469,  481,  484,  506,  488,
      510,  473,  476,  498,  498,  498,  513,  511,  488,  515,
      512,  487,  514,  516,  490,  486,  504,  504,  504,  517,
      503,  517,  536,  520,  485,  520,  528,  528,  528,  517,

      539,  534,  506,  511,  537,  510,  512,  534,  514,  515,
      540,  542,  520,  535,  535,  535,  562,  536,  543,  545,
      513,  545,  565,  564,  579,  579,  579,  516,  580,  581,
      597,  537,  613,  672,  539,  593,  593,  593,  596,  596,
      596,  562,  608,  608,  608,  641,  534,  669,  543,  564,
      540,  611,  611,  611,  581,  667,  627,  542,  580,  666,
      613,  627,  565,  665,  597,  614,  614,  614,  623,  623,
      623,  624,  624,  624,  626,  626,  626,  628,  628,  628,
      631,  631,  631,  638,  638,  638,  640,  640,  640,  664,
      641,  643,  643,  643,  647,  647,  647,  656,  656,  656,

      661,  661,  661,  663,  663,  663,  668,  668,  668,  670,
      670,  670,  673,  673,  673,  679,  679,  679,  681,  681,
      681,  682,  682,  682,  684,  684,  684,  685,  685,  685,
      687,  687,  687,  690,  690,  690,  692,  692,  692,  693,
      693,  693,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  707,  728,  728,
      662,  707,  707,  708,  731,  708,  731,  733,  733,  737,
      737,  660,  659,  708,  708,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  658,  710,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  655,  712,  654,  712,  712,  712,  712,
      712,  712,  712,  712,  653,  712,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  652,  714,  714,  714,  714,  714,  651,

      714,  714,  714,  714,  650,  714,  715,  715,  649,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  716,  648,  646,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  717,  717,  645,  717,
      717,  717,  717,  717,  642,  717,  717,  717,  717,  637,
      717,  718,  718,  636,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  719,  719,  635,  719,
      719,  719,  719,  719,  634,  719,  719,  719,  719,  633,
      719,  720,  720,  632,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  722,  630,  622,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  723,  621,  620,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  619,  724,  724,  724,  618,  724,  617,
      724,  724,  724,  724,  616,  724,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  615,  726,  726,  726,  612,  726,  610,
      726,  726,  726,  726,  607,  726,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  729,  606,  729,  729,  605,  729,  730,  730,  730,
      730,  604,  730,  732,  603,  732,  732,  602,  732,  734,
      601,  600,  599,  598,  595,  734,  734,  735,  594,  735,
      735,  592,  735,  736,  736,  736,  736,  591,  736,  738,
      590,  738,  738,  589,  738,  588,  587,  586,  585,  584,
      582,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  563,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  544,  541,  538,  533,  532,  531,  530,  527,  526,
      525,  524,  523,  522,  521,  519,  509,  508,  507,  502,

      501,  500,  499,  497,  496,  495,  494,  493,  492,  491,
      489,  480,  479,  475,  474,  472,  470,  468,  465,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  450,  446,  441,  438,  430,  428,  417,  416,  414,
      413,  408,  407,  405,  379,  378,  377,  376,  373,  371,
      341,  337,  334,  326,  323,  321,  320,  303,  290,  289,
      269,  254,  228,  221,  176,  173,  168,  163,  159,  154,
      153,  120,  116,   93,   92,   88,   84,   83,   82,   74,
       48,   45,   35,   32,   25,   16,   15,    2,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.ll"
#line 2 "scanner.ll"
/*
  scanner.ll

  Qore Programming Language

  Copyright (C) David Nichols 2003, 2004, 2005

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Flex scanner: no string length limits, no include file depth limits, thread-safe
  
  requires flex 2.5.31 or better (2.5.4 will not work) so a thread-safe scanner can
  be generated
  see: http://lex.sourceforge.net/
*/

#include <qore/config.h>
#include <qore/common.h>
#include <qore/QoreNode.h>
#include <qore/support.h>
#include <qore/Function.h>
#include <qore/params.h>
#include <qore/QoreProgram.h>
#include <qore/DateTime.h>
#include <qore/QoreString.h>
#include <qore/common.h>
#include <qore/ParserSupport.h>
#include <qore/RegexSubst.h>
#include <qore/RegexTrans.h>
#include <qore/ModuleManager.h>
#include <qore/QoreRegex.h>

#include "parser.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int yyparse(yyscan_t yyscanner);

static inline class QoreString *getIncludeFileName(char *file)
{
   //printd(5, "getIncludeFileName(%s)\n", file);
   // FIXME: UNIX-specific
   if (file[0] == '/')
      return new QoreString(file);

   QoreString *rv;
   rv = findFileInEnvPath(file, "QORE_INCLUDE_DIR");
   if (!rv)
      rv = new QoreString(file);
   return rv;
}

static inline char *remove_quotes(char *str)
{
   str[strlen(str) - 1] = '\0';
   return str + 1;
}

static inline class DateTime *makeYears(int years)
{
   class DateTime *dt = new DateTime();
   dt->year = years;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeMonths(int months)
{
   class DateTime *dt = new DateTime();
   dt->month = months;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeDays(int days)
{
   class DateTime *dt = new DateTime();
   dt->day = days;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeHours(int hours)
{
   class DateTime *dt = new DateTime();
   dt->hour = hours;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeMinutes(int minutes)
{
   class DateTime *dt = new DateTime();
   dt->minute = minutes;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeSeconds(int seconds)
{
   class DateTime *dt = new DateTime();
   dt->second = seconds;
   dt->relative = 1;
   return dt;
}

//2005-03-29-10:19:27
//0123456789012345678
static inline class DateTime *makeDateTime(char *str)
{
   // move string to middle to form date string
   // move day to middle
   memmove(str+9, str+8, 2);
   // move month to middle
   memmove(str+7, str+5, 2);
   // move year to middle
   memmove(str+3, str, 4);
   // move minute to middle
   memmove(str+13, str+14, 2);
   // move second and null to middle
   memmove(str+15, str+17, 3);
   //printf("new date: %s\n", str + 3);
   return new DateTime(str + 3);
}

//2005-03-29
//0123456789
static inline class DateTime *makeDate(char *str)
{
   // move month
   memmove(str+4, str+5, 2);
   // move day and null
   memmove(str+6, str+8, 3);
   //printf("new date: %d:%s\n", strlen(str), str);
   return new DateTime(str);
}

//16:03:29
//01234567
static inline class DateTime *makeTime(char *str)
{
   // move minute back
   memmove(str+2, str+3, 2);
   // move seconds and null
   memmove(str+4, str+6, 3);
   //printf("new time: %d:%s\n", strlen(str), str);
   class DateTime *dt = new DateTime(str);
   if (!dt->year)
      dt->year = 1970;
   return dt;
}

static inline char *trim(char *str)
{
   while ((*str) == ' ' || (*str) == '\t')
      str++;
   // duplicate string
   char *n = strdup(str);
   // find end of string
   int l = strlen(n);
   if (l)
   {
      char *e = n + l - 1;
      while ((*e) == ' ' || (*e) == '\t')
	 *(e--) = '\0';
   }
   if (!n[0])
   {
      free(n);
      n = NULL;
   }
   return n;
}

static inline bool isRegexModifier(class QoreRegex *qr, int c)
{
   if (c == 'i')
      qr->setCaseInsensitive();
   else if (c == 's')
      qr->setDotAll();
   else if (c == 'x')
      qr->setExtended();
   else if (c == 'm')
      qr->setMultiline();
   else
      return false;
   return true;
}

static inline bool isRegexSubstModifier(class RegexSubst *qr, int c)
{
   if (c == 'g')
      qr->setGlobal();
   else if (c == 'i')
      qr->setCaseInsensitive();
   else if (c == 's')
      qr->setDotAll();
   else if (c == 'x')
      qr->setExtended();
   else if (c == 'm')
      qr->setMultiline();
   else
      return false;
   return true;
}


#line 1273 "scanner.cc"

#define INITIAL 0
#define str_state 1
#define regex_state 2
#define incl 3
#define check_regex 4
#define regex_subst1 5
#define regex_subst2 6
#define line_comment 7
#define exec_class 8
#define requires 9
#define regex_trans1 10
#define regex_trans2 11

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 241 "scanner.ll"

#line 1516 "scanner.cc"

    yylval = yylval_param;

	if ( yyg->yy_init )
		{
		yyg->yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 696 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1689 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_GLOBAL_VARS);
	YY_BREAK
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_SUBROUTINE_DEFS);
	YY_BREAK
case 3:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_THREADS);
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_TOP_LEVEL_STATEMENTS);
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 246 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CLASS_DEFS);
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_NAMESPACE_DEFS);
	YY_BREAK
case 7:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_EXTERNAL_PROCESS);
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "scanner.ll"
getProgram()->lockOptions();
	YY_BREAK
case 9:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_PROCESS_CONTROL);
	YY_BREAK
case 10:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 251 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CONSTANT_DEFS);
	YY_BREAK
case 11:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_NEW);
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CHILD_PO_RESTRICTIONS);
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "scanner.ll"
getProgram()->parseSetParseOptions(PO_REQUIRE_OUR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 255 "scanner.ll"
BEGIN(exec_class);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 256 "scanner.ll"
BEGIN(requires);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 257 "scanner.ll"
{
                                           char *cn = trim(yytext);
					   //printd(5, "scanner requesting feature: '%s'\n", cn);
					   if (MM.loadModule(cn, getProgram()))
					      parse_error("cannot provide feature '%s'", cn);
					   free(cn);
					   BEGIN(INITIAL);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 265 "scanner.ll"
BEGIN(incl);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 266 "scanner.ll"
{
                                           char *cn = trim(yytext);
					   //printf("setting class name to: '%s'\n", cn);
					   getProgram()->setExecClass(cn);
					   free(cn);
					   BEGIN(INITIAL);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 273 "scanner.ll"
// ignore white space
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 274 "scanner.ll"
{
                                           FILE *save_yyin = yyin;
					   QoreString *fname = getIncludeFileName(yytext);
					   yyin = fopen(fname->getBuffer(), "r");
					   
					   if (!yyin)
					   {
					      parse_error("cannot open include file \"%s\"", yytext);
					      yyin = save_yyin;
					      BEGIN(INITIAL);
					   }
					   else
					   {
					      // save file name string in QoreProgram's list
					      getProgram()->fileList.insert(fname->getBuffer());
					      // "give away" string - it will be deleted when the QoreProgram object
					      // is deleted
					      beginParsing(fname->giveBuffer(), (void *)YY_CURRENT_BUFFER);
					      yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE,yyscanner),yyscanner);
					      BEGIN(INITIAL);
					   }
					   delete fname;
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str_state):
case YY_STATE_EOF(regex_state):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(check_regex):
case YY_STATE_EOF(regex_subst1):
case YY_STATE_EOF(regex_subst2):
case YY_STATE_EOF(line_comment):
case YY_STATE_EOF(exec_class):
case YY_STATE_EOF(requires):
case YY_STATE_EOF(regex_trans1):
case YY_STATE_EOF(regex_trans2):
#line 297 "scanner.ll"
{
					   // delete current buffer
					   yy_delete_buffer(YY_CURRENT_BUFFER,yyscanner);
					   // get last parse state
					   YY_BUFFER_STATE yybs = (YY_BUFFER_STATE)endParsing();
					   if (yybs)
					   {
					      // need to close file and switch to previous buffer
					      fclose(yyin);
					      if (yybs)
						 yy_switch_to_buffer(yybs,yyscanner);
					   }
					   else
					      yyterminate();
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 312 "scanner.ll"
{
                                            int c;
                                            while ((c = yyinput(yyscanner)))
					       if (c == '\n')
						  increment_pgm_counter();
					       else if (c == '*')
					       {
						  if (yyinput(yyscanner) == '/') break;
						  else unput(c);
					       }
                                               else if (c == EOF)
                                               {
						  parse_error("EOF reached in block comment");
						  break;
					       }
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 328 "scanner.ll"
yylval->String = new QoreString(); BEGIN(str_state);
	YY_BREAK

case 23:
YY_RULE_SETUP
#line 330 "scanner.ll"
BEGIN(INITIAL); return QUOTED_WORD;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 331 "scanner.ll"
{
                                           increment_pgm_counter();
					   yylval->String->concat('\n');
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 335 "scanner.ll"
{
					   int result;
					   sscanf(yytext + 1, "%o", &result);
					   if (result > 0xff)
					      parse_error("octal constant out of bounds\n");
					   yylval->String->concat((char)result);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 342 "scanner.ll"
parse_error("bad escape sequence");
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 343 "scanner.ll"
yylval->String->concat('\n');
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 344 "scanner.ll"
yylval->String->concat('\t');
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 345 "scanner.ll"
yylval->String->concat('\r');
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 346 "scanner.ll"
yylval->String->concat('\b');
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 347 "scanner.ll"
yylval->String->concat('\f');
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 348 "scanner.ll"
yylval->String->concat(yytext[1]);
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 349 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->String->concat('\n');
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 353 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->String->concat(*(yptr++));
					}
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 360 "scanner.ll"
{
                                           // get regex modifiers
	                                   int c;
	                                   do {
					      c = yyinput(yyscanner);
					   } while (isRegexSubstModifier(yylval->RegexSubst, c));
					   unput(c);
					   BEGIN(INITIAL); 
					   yylval->RegexSubst->parse(); 
					   return REGEX_SUBST;
                                        }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 371 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexSubst->concatTarget('\n');
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 375 "scanner.ll"
yylval->RegexSubst->concatTarget('/');
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 376 "scanner.ll"
{ yylval->RegexSubst->concatTarget('\\'); yylval->RegexSubst->concatTarget(yytext[1]); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 377 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexSubst->concatTarget(*(yptr++));
					}
	YY_BREAK


case 40:
YY_RULE_SETUP
#line 384 "scanner.ll"
BEGIN(regex_subst2);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 385 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexSubst->concatSource('\n');
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 389 "scanner.ll"
yylval->RegexSubst->concatSource('/');
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 390 "scanner.ll"
{ yylval->RegexSubst->concatSource('\\'); yylval->RegexSubst->concatSource(yytext[1]); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 391 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexSubst->concatSource(*(yptr++));
					}
	YY_BREAK


case 45:
YY_RULE_SETUP
#line 398 "scanner.ll"
yylval->RegexTrans->setTargetRange();
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 399 "scanner.ll"
{
					   BEGIN(INITIAL); 
					   yylval->RegexTrans->finishTarget(); 
					   return REGEX_TRANS;
                                        }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 404 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexTrans->concatTarget('\n');
                                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 408 "scanner.ll"
yylval->RegexTrans->concatTarget('\n');
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 409 "scanner.ll"
yylval->RegexTrans->concatTarget('\t');
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 410 "scanner.ll"
yylval->RegexTrans->concatTarget('\r');
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 411 "scanner.ll"
yylval->RegexTrans->concatTarget('\b');
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 412 "scanner.ll"
yylval->RegexTrans->concatTarget('\f');
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 413 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexTrans->concatTarget('\n');
                                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 417 "scanner.ll"
yylval->RegexTrans->concatTarget('/');
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 418 "scanner.ll"
yylval->RegexTrans->concatTarget(yytext[1]);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 419 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexTrans->concatTarget(*(yptr++));
					}
	YY_BREAK


case 57:
YY_RULE_SETUP
#line 426 "scanner.ll"
yylval->RegexTrans->setSourceRange();
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 427 "scanner.ll"
BEGIN(regex_trans2); yylval->RegexTrans->finishSource();
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 428 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexTrans->concatSource('\n');
                                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 432 "scanner.ll"
yylval->RegexTrans->concatSource('\n');
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 433 "scanner.ll"
yylval->RegexTrans->concatSource('\t');
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 434 "scanner.ll"
yylval->RegexTrans->concatSource('\r');
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 435 "scanner.ll"
yylval->RegexTrans->concatSource('\b');
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 436 "scanner.ll"
yylval->RegexTrans->concatSource('\f');
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 437 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexTrans->concatSource('\n');
                                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 443 "scanner.ll"
yylval->RegexTrans->concatSource('/');
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 444 "scanner.ll"
yylval->RegexTrans->concatSource(yytext[1]);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 445 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexTrans->concatSource(*(yptr++));
					}
	YY_BREAK


case 69:
YY_RULE_SETUP
#line 452 "scanner.ll"
// ignore 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 453 "scanner.ll"
yylval->RegexSubst = new RegexSubst(); BEGIN(regex_subst1);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 454 "scanner.ll"
yylval->Regex = new QoreRegex(); BEGIN(regex_state);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 455 "scanner.ll"
yylval->Regex = new QoreRegex(); BEGIN(regex_state);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 456 "scanner.ll"
yylval->RegexTrans = new RegexTrans(); BEGIN(regex_trans1);
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 457 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 460 "scanner.ll"
{
                                           // get regex modifiers
	                                   int c;
	                                   do {
					      c = yyinput(yyscanner);
					   } while (isRegexModifier(yylval->Regex, c));
					   unput(c);
					   BEGIN(INITIAL); 
					   yylval->Regex->parse(); 
					   return REGEX;
                                        }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 471 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->Regex->concat('\n');
                                        }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 475 "scanner.ll"
yylval->Regex->concat('/');
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 476 "scanner.ll"
{ yylval->Regex->concat('\\'); yylval->Regex->concat(yytext[1]); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 477 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->Regex->concat(*(yptr++));
					}
	YY_BREAK


case 80:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 484 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK

case 81:
YY_RULE_SETUP
#line 486 "scanner.ll"
BEGIN(line_comment);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 487 "scanner.ll"
return TOK_WHERE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 488 "scanner.ll"
return TOK_NULL;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 489 "scanner.ll"
return TOK_NOTHING;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 490 "scanner.ll"
return TOK_CLASS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 491 "scanner.ll"
return TOK_PRIVATE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 492 "scanner.ll"
return TOK_NEW;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 493 "scanner.ll"
return TOK_SHIFT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 494 "scanner.ll"
return TOK_UNSHIFT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 495 "scanner.ll"
return TOK_DO;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 496 "scanner.ll"
return TOK_WHILE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 497 "scanner.ll"
return TOK_IF;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 498 "scanner.ll"
return TOK_ELSE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 499 "scanner.ll"
return TOK_FOR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 500 "scanner.ll"
return TOK_FOREACH;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 501 "scanner.ll"
return TOK_IN;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 502 "scanner.ll"
return TOK_ELEMENTS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 503 "scanner.ll"
return TOK_KEYS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 504 "scanner.ll"
return TOK_SUB;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 505 "scanner.ll"
return TOK_CONST;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 506 "scanner.ll"
return TOK_NAMESPACE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 507 "scanner.ll"
return TOK_RETURN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 508 "scanner.ll"
return TOK_MY;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 509 "scanner.ll"
return TOK_OUR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 510 "scanner.ll"
return TOK_BREAK;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 511 "scanner.ll"
return TOK_CONTINUE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 512 "scanner.ll"
return TOK_TRY;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 513 "scanner.ll"
return TOK_THROW;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 514 "scanner.ll"
return TOK_RETHROW;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 515 "scanner.ll"
return TOK_CATCH;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 516 "scanner.ll"
return TOK_FINALLY;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 517 "scanner.ll"
return TOK_FIND;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 518 "scanner.ll"
return TOK_DELETE;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 519 "scanner.ll"
return TOK_BACKGROUND;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 520 "scanner.ll"
return TOK_SYNCHRONIZED;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 521 "scanner.ll"
return TOK_THREAD_EXIT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 522 "scanner.ll"
return TOK_EXISTS;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 523 "scanner.ll"
return TOK_CONTEXT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 524 "scanner.ll"
return TOK_SUMMARIZE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 525 "scanner.ll"
return TOK_SUB_CONTEXT;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 526 "scanner.ll"
return TOK_SORT_BY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 527 "scanner.ll"
return TOK_SORT_DESCENDING_BY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 528 "scanner.ll"
return TOK_BY;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 529 "scanner.ll"
return TOK_SWITCH;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 530 "scanner.ll"
return TOK_CASE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 531 "scanner.ll"
return TOK_DEFAULT;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 532 "scanner.ll"
return TOK_INHERITS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 533 "scanner.ll"
return TOK_PUSH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 534 "scanner.ll"
return TOK_POP;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 535 "scanner.ll"
return TOK_SPLICE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 536 "scanner.ll"
return TOK_INSTANCEOF;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 537 "scanner.ll"
yylval->string = strdup("push"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 538 "scanner.ll"
yylval->string = strdup("pop"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 539 "scanner.ll"
yylval->string = strdup("splice"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 540 "scanner.ll"
yylval->string = strdup("shift"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 541 "scanner.ll"
yylval->string = strdup("unshift"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 542 "scanner.ll"
yylval->datetime = makeDateTime(yytext); return DATETIME;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 543 "scanner.ll"
yylval->datetime = makeDate(yytext); return DATETIME;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 544 "scanner.ll"
yylval->datetime = makeTime(yytext); return DATETIME;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 545 "scanner.ll"
yylval->string = strdup(yytext); return SCOPED_REF;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 546 "scanner.ll"
yylval->nscope = new NamedScope(strdup(yytext)); yylval->nscope->fixBCCall(); return BASE_CLASS_CALL;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 547 "scanner.ll"
yylval->decimal = strtod(yytext, NULL); return FLOAT;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 548 "scanner.ll"
yylval->integer = strtoll(yytext+1, NULL, 8); return INTEGER;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 549 "scanner.ll"
yylval->integer = strtoll(yytext, NULL, 10); return INTEGER;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 550 "scanner.ll"
yylval->datetime = makeYears(strtol(yytext, NULL, 10));   return DATETIME;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 551 "scanner.ll"
yylval->datetime = makeMonths(strtol(yytext, NULL, 10));  return DATETIME;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 552 "scanner.ll"
yylval->datetime = makeDays(strtol(yytext, NULL, 10));    return DATETIME;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 553 "scanner.ll"
yylval->datetime = makeHours(strtol(yytext, NULL, 10));   return DATETIME;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 554 "scanner.ll"
yylval->datetime = makeMinutes(strtol(yytext, NULL, 10)); return DATETIME;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 555 "scanner.ll"
yylval->datetime = makeSeconds(strtol(yytext, NULL, 10)); return DATETIME;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 556 "scanner.ll"
yylval->integer = strtoll(yytext, NULL, 16); return INTEGER;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 557 "scanner.ll"
yylval->string = strdup(yytext + 2); return SELF_REF;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 558 "scanner.ll"
yylval->string = strdup(yytext + 1); return VAR_REF;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 559 "scanner.ll"
yylval->string = strdup(yytext); return IDENTIFIER;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 560 "scanner.ll"
yylval->string = strdup(yytext + 1); return CONTEXT_REF;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 561 "scanner.ll"
yylval->string = strdup(yytext + 1); return COMPLEX_CONTEXT_REF;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 562 "scanner.ll"
return TOK_CONTEXT_ROW;
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 563 "scanner.ll"
yylval->string = strdup(remove_quotes(yytext)); return BACKQUOTE;
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 564 "scanner.ll"
yylval->String = new QoreString(remove_quotes(yytext)); return QUOTED_WORD;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 565 "scanner.ll"
return LOGICAL_LE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 566 "scanner.ll"
return LOGICAL_GE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 567 "scanner.ll"
return LOGICAL_NE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 568 "scanner.ll"
return LOGICAL_NE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 569 "scanner.ll"
return ABSOLUTE_EQ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 570 "scanner.ll"
return ABSOLUTE_NE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 571 "scanner.ll"
return LOGICAL_EQ;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 572 "scanner.ll"
return LOGICAL_CMP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 573 "scanner.ll"
return LOGICAL_AND;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 574 "scanner.ll"
return LOGICAL_OR;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 575 "scanner.ll"
return SHIFT_RIGHT;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 576 "scanner.ll"
return SHIFT_LEFT;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 577 "scanner.ll"
return P_INCREMENT;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 578 "scanner.ll"
return P_DECREMENT;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 579 "scanner.ll"
return PLUS_EQUALS;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 580 "scanner.ll"
return MINUS_EQUALS;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 581 "scanner.ll"
return AND_EQUALS;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 582 "scanner.ll"
return OR_EQUALS;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 583 "scanner.ll"
return MODULA_EQUALS;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 584 "scanner.ll"
return MULTIPLY_EQUALS;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 585 "scanner.ll"
return DIVIDE_EQUALS;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 586 "scanner.ll"
return XOR_EQUALS;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 587 "scanner.ll"
return SHIFT_RIGHT_EQUALS;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 588 "scanner.ll"
return SHIFT_LEFT_EQUALS;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 589 "scanner.ll"
BEGIN(check_regex); return REGEX_MATCH;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 590 "scanner.ll"
BEGIN(check_regex); return REGEX_NMATCH;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 591 "scanner.ll"
/* ignore whitespace */
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 592 "scanner.ll"
{
                                           increment_pgm_counter();
                                        }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 595 "scanner.ll"
return yytext[0];
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 596 "scanner.ll"
ECHO;
	YY_BREAK
#line 2780 "scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 696 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 696 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 695);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(str,strlen(str) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
       This function is called once per scanner lifetime. */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 1;
    yyg->yy_start = 0;
    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack = (int *) 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 596 "scanner.ll"



