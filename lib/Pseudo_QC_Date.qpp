/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Date.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QC_TimeZone.h>

//! Methods in this pseudo-class can be executed on @ref date "date/time value types"
/** 
 */
qclass <date> [arg=const DateTimeNode *dt;vparent=<value>];

//! Returns Qore::NT_DATE
/** 
    @return Qore::NT_DATE

    @par Example:
    @code
switch ($d.typeCode()) {
    case NT_DATE:
        printf("%y: is a date\n", $d);
	break;
}
    @endcode
 */
int <date>::typeCode() {
   return NT_DATE;
}

//! Returns @ref True if the date is an @ref absolute_dates "absolute date/time value"
/** 
    @return @ref True if the date is an @ref absolute_dates "absolute date/time value"

    @par Example:
    @code
my bool $b = $d.absolute();
    @endcode
*/
bool <date>::absolute() {
   return dt->isAbsolute();
}

//! Returns @ref True if the date is a @ref relative_dates "relative date/time value"
/** 
    @return @ref True if the date is a @ref relative_dates "relative date/time value"

    @par Example:
    @code
my bool $b = $d.relative();
    @endcode
*/
bool <date>::relative() {
   return dt->isRelative();
}

//! Returns an integer corresponding to the literal year value in the date (does not calculate a duration)
/** 
    @return an integer corresponding to the literal year value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.years();
    @endcode

    @note equivalent to get_years(date)
*/
int <date>::years() [flags=CONSTANT] {
   return dt->getYear();
}

//! Returns an integer corresponding to the literal month value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal month value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.months();
    @endcode

    @note equivalent to get_months(date)
*/
int <date>::months() [flags=CONSTANT] {
   return dt->getMonth();
}

//! Returns an integer corresponding to the literal day value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal day value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.days();
    @endcode

    @note equivalent to get_days(date)
*/
int <date>::days() [flags=CONSTANT] {
   return dt->getDay();
}

//! Returns an integer corresponding to the literal hour value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal hour value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.hours();
    @endcode

    @note equivalent to get_hours(date)
*/
int <date>::hours() [flags=CONSTANT] {
   return dt->getHour();
}

//! Returns an integer corresponding to the literal minute value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal minute value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.minutes();
    @endcode

    @note equivalent to get_minutes(date)
*/
int <date>::minutes() [flags=CONSTANT] {
   return dt->getMinute();
}

//! Returns an integer corresponding to the literal second value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal second value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.seconds();
    @endcode

    @note
    - equivalent to get_seconds(date)
    - to get the number of seconds of duration in a date/time value, use @ref <date>::durationSeconds() instead
*/
int <date>::seconds() [flags=CONSTANT] {
   return dt->getSecond();
}

//! Returns an integer corresponding to the literal millisecond value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal millisecond value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.milliseconds();
    @endcode

    @note
    - equivalent to get_milliseconds(date)
    - to get the number of milliseconds of duration in a date/time value, use @ref <date>::durationMilliseconds() instead
*/
int <date>::milliseconds() [flags=CONSTANT] {
   return dt->getMillisecond();
}

//! Returns an integer corresponding to the literal microsecond value in the date (does not calculate a duration)
/** 
    The date value can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date.

    @return an integer corresponding to the literal microsecond value in the date (does not calculate a duration)

    @par Example:
    @code
my int $n = $d.microseconds();
    @endcode

    @note
    - equivalent to get_microseconds(date)
    - to get the number of microseconds of duration in a date/time value, use @ref <date>::durationMicroseconds() instead
*/
int <date>::microseconds() [flags=CONSTANT] {
   return dt->getMicrosecond();
}

//! Returns an integer value representing the the number of seconds of time duration in the date value (can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date)
/** The duration in seconds is calculated and any fractional seconds are truncated (no rounding is performed)

    @return an integer value representing the the number of seconds in the date value; if the value is a
    @ref relative_dates "relative date", the value is normalized to seconds and the integer seconds value is returned,
    if the value is an @ref absolute_dates "absolute date", the duration in seconds is calculated from the present time;
    so if the present time is sent as an argument, 0 is returned, if a future date is used, the number of seconds
    from the present time to the future date is returned, if an @ref absolute_dates "absolute date" in the past is used,
    also 0 is returned (the pseudo-method does not calculate second differences for @ref absolute_dates "absolute dates" in the past (for
    this use @ref date_time_arithmetic instead); this function can only return a negative value if passed a relative date/time value

    @par Example:
    @code
my int $us = PT2M15S3u.durationSeconds(); # returns 135
    @endcode

    @note
    - equivalent to get_duration_seconds()
    - to get the literal seconds integer value from a date/time value without calculating a duration, use @ref <date>::seconds()

    @see
    - <date>::durationMilliseconds()
    - <date>::durationMicroseconds()

    @since %Qore 0.8.7
*/
int <date>::durationSeconds() [flags=CONSTANT] {
   return dt->getRelativeSeconds();
}

//! Returns an integer value representing the the number of milliseconds of time duration in the date value (can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date)
/** The duration in milliseconds is calculated and any fractional milliseconds are truncated (no rounding is performed)

    @return an integer value representing the the number of milliseconds in the date value; if the value is a
    @ref relative_dates "relative date", the value is normalized to milliseconds and the integer milliseconds value is returned,
    if the value is an @ref absolute_dates "absolute date", the duration in milliseconds is calculated from the present time;
    so if the present time is sent as an argument, 0 is returned, if a future date is used, the number of milliseconds
    from the present time to the future date is returned, if an @ref absolute_dates "absolute date" in the past is used,
    also 0 is returned (the pseudo-method does not calculate millisecond differences for @ref absolute_dates "absolute dates" in the past (for
    this use @ref date_time_arithmetic instead); this function can only return a negative value if passed a relative date/time value

    @par Example:
    @code
my int $us = PT2M15S3u.durationMilliseconds(); # returns 135000
    @endcode

    @note
    - equivalent to get_duration_milliseconds()
    - to get the literal milliseconds integer value from a date/time value without calculating a duration, use @ref <date>::milliseconds()

    @see
    - <date>::durationSeconds()
    - <date>::durationMicroseconds()

    @since %Qore 0.8.7
*/
int <date>::durationMilliseconds() [flags=CONSTANT] {
   return dt->getRelativeMilliseconds();
}

//! Returns an integer value representing the the number of microseconds of time duration in the date value (can be either a @ref relative_dates "relative" or @ref absolute_dates "absolute" date)
/** @return an integer value representing the the number of microseconds in the date value; if the value is a
    @ref relative_dates "relative date", the value is normalized to microseconds and the integer microseconds value is returned,
    if the value is an @ref absolute_dates "absolute date", the duration in microseconds is calculated from the present time;
    so if the present time is sent as an argument, 0 is returned, if a future date is used, the number of microseconds
    from the present time to the future date is returned, if an @ref absolute_dates "absolute date" in the past is used,
    also 0 is returned (the pseudo-method does not calculate microsecond differences for @ref absolute_dates "absolute dates" in the past (for
    this use @ref date_time_arithmetic instead); this function can only return a negative value if passed a relative date/time value

    @par Example:
    @code
my int $us = PT2M15S3u.durationMicroseconds(); # returns 135000003
    @endcode

    @note
    - equivalent to get_duration_microseconds()
    - to get the literal microseconds integer value from a date/time value without calculating a duration, use @ref <date>::microseconds()

    @see
    - <date>::durationSeconds()
    - <date>::durationMilliseconds()

    @since %Qore 0.8.7
*/
int <date>::durationMicroseconds() [flags=CONSTANT] {
   return dt->getRelativeMicroseconds();
}

//! Returns a formatted string for the date value
/** 
    @param format a string giving the format for the date; see @ref date_formatting for more information about this string

    @return a formatted string for a date argument passed

    @par Example:
    @code
my string $str = $d.format("Day, Mon D, YYYY-MM-DD HH:mm:SS");
    @endcode

    @bug there is no locale support; day and month names and abbreviations are only returned in English

    @note equivalent to format_date(string, date)
*/
string <date>::format(string format) [flags=CONSTANT] {
   QoreStringNode *rv = new QoreStringNode;
   dt->format(*rv, format->getBuffer());
   return rv;
}

//! Returns @ref True if the current date/time value is currently in daylight savings time
/** 
    @return @ref True if the current date/time value is currently in daylight savings time; always returns @ref False for @ref relative_dates "relative date/time values"

    @par Example:
    @code
my bool $b = $d.isDst();
    @endcode
 */
bool <date>::isDst() [flags=CONSTANT] {
   bool is_dst;

   dt->getZone()->getUTCOffset(dt->getEpochSecondsUTC(), is_dst);
   return is_dst;
}

//! Returns a Qore::TimeZone object for the time zone of the date/time value; returns @ref nothing for @ref relative_dates "relative date/time values"
/** 
    @return a Qore::TimeZone object for the time zone of the date/time value; returns @ref nothing for @ref relative_dates "relative date/time values"

    @par Example:
    @code
my *TimeZone $zone = $d.zone();
    @endcode
 */
*TimeZone <date>::zone() [flags=CONSTANT] {
   return dt->isAbsolute() ? new QoreObject(QC_TIMEZONE, 0, new TimeZoneData(dt->getZone())) : 0;
}

//! Returns the name of the current time zone for the current @ref absolute_dates "absolute date/time value" (ex: \c "CEST" for Central European Summer Time for a time during summer time or \c "CET" for Central European Time for the same time zone while daylight savings time is not active) or a UTC offset (like \c "+01") or \c "UTC" or @ref nothing for @ref relative_dates "relative date/time values"
/** 
    @return the name of the current time zone for the current @ref absolute_dates "absolute date/time value" (ex: \c "CEST" for Central European Summer Time for a time during summer time or \c "CET" for Central European Time for the same time zone while daylight savings time is not active) or a UTC offset (like \c "+01") or \c "UTC" or @ref nothing for @ref relative_dates "relative date/time values"

    @par Example:
    @code
my *string $zn = $d.currentZoneName();
    @endcode
 */
*string <date>::currentZoneName() [flags=CONSTANT] {
   if (dt->isRelative())
      return 0;

   bool is_dst;
   const char *zone_name;

   dt->getZone()->getUTCOffset(dt->getEpochSecondsUTC(), is_dst, zone_name);
   return new QoreStringNode(zone_name);
}

//! Returns the time zone offset for the current time in seconds east of UTC or -1 for @ref relative_dates "relative date/time values"
/** 
    @return the time zone offset for the current time in seconds east of UTC or -1 for @ref relative_dates "relative date/time values"

    @par Example:
    @code
my int $utcoffset = $d.getUtcOffset();
    @endcode
 */
int <date>::getUtcOffset() [flags=CONSTANT] {
   return dt->getZone()->getUTCOffset();
}

//! Returns @ref False if the date value is all zeros, @ref True if not
/** @return @ref False if the date value is all zeros, @ref True if not

    @par Example:
    @code
my bool $b = $d.val();
    @endcode

    @see
    - @ref perl-bool-eval "%perl-bool-eval"
    - @ref strict-bool-eval "%strict-bool-eval"
*/
bool <date>::val() [flags=CONSTANT] {
   return dt->hasValue();
}

//! Returns @ref True because date values can be converted to integers
/**
    @return @ref True because date values can be converted to integers

    @par Example:
    @code
if ($n.intp())
    printf("%y: can be converted to an integer: %d\n", $n, int($n));
    @endcode
*/
bool <date>::intp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True because boolean values can be converted to strings
/**
    @return @ref True because boolean values can be converted to strings

    @par Example:
    @code
if ($n.strp())
    printf("%y: can be converted to a string: '%s'\n", $n, string($n));
    @endcode
*/
bool <date>::strp() [flags=CONSTANT] {
   return true;
}

//! Returns midnight on the given date (strips the time component on the new value)
/**
    @return midnight on the given date (strips the time component on the new value)

    @par Example:
    @code
my date $midnight = $dt.midnight();
    @endcode

    @note equivalent to get_midnight()

    @since %Qore 0.8.5
*/
date <date>::midnight() [flags=CONSTANT] {
   DateTimeNode* rv = new DateTimeNode(*dt);
   rv->setTime(0, 0, 0);
   return rv;
}
