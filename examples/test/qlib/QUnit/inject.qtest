#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/FixedLengthUtil.qm

%include ../../../../qlib/QUnit.qm

%exec-class DIJClass

public class A {
    constructor() {
        throw "TEST-EXCEPTION", "This should never happen!";
    }

    public bool test() {
        return False;
    }
}

public class Aalt {
    constructor() {
    }

    public bool test() {
        return True;
    }
}

public class B inherits A {
    public bool test() {
        return A::test();
    }
}

public class FixedLengthAbstractIteratorFake inherits Qore::AbstractIterator {
    private {
        hash m_opts;
    }
    constructor(AbstractLineIterator li, hash spec, *hash opts) {
        throw "TEST-EXCEPTION", "this signifies that it actually works";
    }
    bool next() {
        return False;
    }

    *string getValue() {
        return "";
    }
}
/*
public class FileLineIteratorFake {
    constructor(string file_unused, *string h, *string g) {
        throw "TEST-EXCEPTION", "this signifies that it actually works";
    }
    bool next() {
        return False;
    }

    *string getValue() {
        return "";
    }
}*/

public class DIJClass inherits QUnit::DependencyInjectedTest {
    constructor() : DependencyInjectedTest("Inject", "1.0") {
        addTestCase("Directly instantiate injected classes", \testDirectlyInjectedClass(), NOTHING);
        addTestCase("Instantiate classes with an injected ancestor", \testInheritedInjectedClass(), NOTHING);
        addTestCase("Instantiate class from a module with injected ancestor", \testModuleInjectedClass(), NOTHING);

        setScriptPath(get_script_path());
        set_return_value(main());
    }

    performModuleInjections() {
        injectIntoModule("../../../../qlib/FixedLengthUtil.qm");
    }

    performInjections(Program p) {
        p.importClass("Aalt", "A", True);
        p.importClass("FixedLengthAbstractIteratorFake", "FixedLengthUtil::FixedLengthAbstractIterator", True);
    }

    testDirectlyInjectedClass() {
        A a();
        testAssertion("run test", \a.test(), list());
    }

    testInheritedInjectedClass() {
        B b();
        testAssertion("run test", \b.test(), list());
    }

    bool createIterator() {
        FixedLengthUtil::FixedLengthDataIterator it("", ("wrong": False), ("unknown": "????"));
        return True;
    }

    testModuleInjectedClass() {
        # Since FixedLengthAbstract validated options in the constructor, this will succeed as soon as our constructor of FixedLengthAbstractIteratorFake is called
        testAssertion("instantiate iterator", \createIterator(), list(), new QUnit::TestResultExceptionRegexp("TEST-EXCEPTION", "this signifies that it actually works"));
    }
}
