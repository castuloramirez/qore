# -*- mode: qore; indent-tabs-mode: nil -*-
# @file MysqlSqlUtil.qm Qore user module for working with MySQL SQL data

/*  MysqlSqlUtil.qm Copyright 2013 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.8 or better
%requires qore >= 0.8.8

# requires the SqlUtil module
%requires SqlUtil >= 1.0

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

module MysqlSqlUtil {
    version = "1.0";
    desc = "user module for working with MySQL SQL data";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
}

/*  Version History
    * 2013-xx-xx v1.0: David Nichols <david@qore.org>
      + the initial version of the MysqlSqlUtil module
*/

/** @mainpage MysqlSqlUtil Module

    @section intro Introduction

    The %MysqlSqlUtil module provides a high level API for working with MySQL database objects.

    Usually this module is loaded on demand from the SqlUtil module, however to use this module
    directly, use \c "%requires MysqlSqlUtil" in your code.
    
    All the public symbols in the module are defined in the MysqlSqlUtil namespace
*/

#! the MysqlSqlUtil namespace contains all the objects in the MysqlSqlUtil module
public namespace MysqlSqlUtil {
    #! returns a MysqlTable object corresponding to the arguments
    public MysqlTable sub get_table(AbstractDatasource nds, string nname, *hash opts) {
        return new MysqlTable(nds, nname, opts);
    }

    #! returns a MysqlDatabase object corresponding to the arguments
    public MysqlDatabase sub get_database(AbstractDatasource nds, *hash opts) {
	return new MysqlDatabase(nds, opts);
    }

    #! represents a MySQL-specific index
    public class MysqlIndex inherits SqlUtil::AbstractIndex {
        public {
            string type;
        }

        #! creates the object from the arguments
	constructor(string n_name, bool n_unique, hash n_cols, string n_type = "BTREE") : AbstractIndex(n_name, n_unique, n_cols) {
            type = n_type;
        }

        #! returns a string that can be used to create the index in the database
        string getCreateSql(string table_name, *hash opt) {
            return sprintf("create %sindex %s on %s (%s)", unique ? "unique " : "", name, table_name, (foldl $1 + ", " + $2, columns.keyIterator()));
        }

        #! returns @ref Qore::True "True" if the argument is equal to the current index, @ref Qore::False "False" if not
        private bool equalImpl(AbstractIndex ix) {
            return type == cast<MysqlIndex>(ix).type;
        }

        #! returns a string that can be used to rename the index in the database; hwoever mysql does not support renaming indexes, so the index is dropped and recreated :(
        string getRenameSql(string table_name, string new_name) {
            return sprintf("alter table %s drop index %s, add %sindex %s (%s)", table_name, name, unique ? "unique " : "", new_name, (foldl $1 + ", " + $2, columns.keyIterator()));
        }

        #! returns a string that can be used to drop the index from the table
        string getDropSql(string table_name) {
            return sprintf("alter table %s drop index %s", table_name, name);
        }
    }

    #! represents a MySQL-specific foreign constraint
    public class MysqlForeignConstraint inherits SqlUtil::AbstractForeignConstraint {
        constructor(string n, Columns c, ForeignConstraintTarget t) : AbstractForeignConstraint(n, c, t) {
        }

        string getCreateSql(string table_name, *hash opt) {
            return getCreateSql(name, table_name, opt);
        }

        #! returns a string that drops the constraint and re-adds it, since MySQL does not support renaming constraints
        softlist getRenameSql(string table_name, string new_name) {
            return getDropSql(table_name) + ", " + getAddSql(new_name, table_name);
        }

        string getCreateSql(string name, string table_name, *hash opt) {
            return sprintf("alter table %s ", table_name) + getAddSql(name, table_name, opt);
        }

        string getAddSql(string name, string table_name, *hash opt) {
            return sprintf("add constraint %s foreign key (%s) references %s (%s)", name, (foldl $1 + ", " + $2, columns.keys()), target.table, (foldl $1 + ", " + $2, target.columns.keys()));
        }

        #! returns a string that can be used to drop the foreign constraint from the database
        string getDropSql(string table_name) {
            return sprintf("alter table %s drop foreign key %s", table_name, name);
        }
    }

    #! represents a MySQL-specific check constraint
    public class MysqlCheckConstraint inherits SqlUtil::AbstractCheckConstraint {
        constructor(string n, string n_src) : AbstractCheckConstraint(n, n_src) {
        }        

        string getCreateSql(string table_name, *hash opt) {
            return getCreateSql(name, table_name, opt);
        }

        #! returns a string that can be used to drop the check constraint from the table
        string getDropSql(string table_name) {
            return sprintf("alter table %s drop check %s", table_name, name);
        }

        #! returns a string that drops the constraint and re-adds it, since MySQL does not support renaming constraints
        softlist getRenameSql(string table_name, string new_name) {
            return getDropSql(table_name) + ", " + getAddSql(new_name, table_name);
        }

        string getCreateSql(string name, string table_name, *hash opt) {
            return sprintf("alter table %s %s", table_name, getAddSql(name, table_name, opt));
        }

        string getAddSql(string name, string table_name, *hash opt) {
            return sprintf("add constraint %s check (%s)", name, src);
        }
    }

    #! represents a MySQL-specific column
    public class MysqlColumn inherits SqlUtil::AbstractColumn {
        public {
            #! byte size of the column
            int byte_size;
        }

        constructor(string n, string nt, *string qt, int sz, bool nul, *string dv, *string cm, softint bs) : AbstractColumn(n, nt, qt, sz, nul, dv, cm) {
            byte_size = bs;
        }

        #! returns a list of sql strings that can be used to add the column to an existing table
        /** @par Example:
            @code
my list $l = $col.getCreateSql($t);
            @endcode

            @param t the AbstractTable object to modify
         */
        softlist getCreateSql(AbstractTable t) {
            string sql = sprintf("alter table %s add %s", t.getSqlName(), AbstractColumn::getCreateSql());
	    if (comment)
		sql += " comment " + t.getSqlValue(comment);
            return sql;
        }

        #! returns a list of sql strings that can be used to modify the column to the new definition; if the column definitions are identical then an empty list is returned
        /** @par Example:
            @code
my list $l = $col.getModifySql($t, $newcol);
            @endcode

            The column names are assumed to be equal.

            @param t the AbstractTable object to modify
            @param col the new column definition

            @return a list of sql strings that can be used to modify the column to the new definition; if the column definitions are identical then an empty list is returned
         */
        softlist getModifySql(AbstractTable t, AbstractColumn col) {
            MysqlColumn c = col;

            string ntd = c.getCreateSql();
            if (ntd == getCreateSql() && c.comment == comment)
                return;

            #printf("L: %s\nL: comment: %y\nXXXXXXXXXX\nR: %s\nR: comment: %y\n", getCreateSql(), comment, ntd, c.comment);

            string sql = sprintf("alter table %s modify %s", t.getSqlName(), ntd);
            if (c.comment)
		sql += " comment " + t.getSqlValue(c.comment);
            return sql;
        }

        #! returns a string that can be used to rename the column
        /** @par Example:
            @code
my string $str = $col.getRenameSql($t, "new_name");
            @endcode

            @param t the AbstractTable object to modify
            @param new_name the new name for the column

            @return a string that can be used to rename the column
        */
        string getRenameSql(AbstractTable t, string new_name) {
            string sql = getCreateSql();
            int i = sql.find(" ");
            splice sql, 0, i + 1;
            return sprintf("alter table %s change %s %s %s", t.getSqlName(), name, new_name, sql);
        }

        #! returns @ref Qore::True "True" if the argument is equal to the current object, @ref Qore::False "False" if not
        private bool equalImpl(AbstractColumn c) {
            return True;
        }
    }

    #! represents a MySQL-specific numeric column
    public class MysqlNumericColumn inherits MysqlColumn, SqlUtil::NumericColumnInfo {
        public {
            bool unsigned;
        }

        constructor(string n, string nt, *string qt, int sz, bool nul, *string dv, *string cm, softint bs, softint n_scale, bool n_unsigned = False) : MysqlColumn(n, nt, qt, sz, nul, dv, cm, bs), NumericColumnInfo(n_scale) {
            unsigned = n_unsigned;
        }

        string getNativeTypeString() {
            string str = NumericColumnInfo::getNativeTypeString(native_type, size);
            if (unsigned)
                str += " unsigned";
            return str;
        }
    }

    public class MysqlUniqueConstraintCommon inherits SqlUtil::AbstractUniqueConstraint {
        constructor() {
        }

        bool setIndexBase(string ix) {
            if (index && index != ix)
                return False;
            index = ix;
            return True;
        }

        #! clears any index base for the constraint
        clearIndex() {
            delete index;
        }

        abstract AbstractIterator keyIterator();

        #! adds index options onto the sql creation string
        getIndexSql(reference sql, string name, *hash opts) {
            sql += sprintf("(%s)", (foldl $1 + ", " + $2, keyIterator()));
        }
    }

    public class MysqlUniqueConstraint inherits SqlUtil::AbstractUniqueConstraint, MysqlUniqueConstraintCommon {
        constructor(string n, hash n_cols) : AbstractUniqueConstraint(n, n_cols) {
        }

        #! returns the MysqlColumn value of the given key if it exists, otherwise throws a \c KEY-ERROR exception
        /** @par Example:
            @code
my any $v = $c.name;
            @endcode

            @param k the name of the key to access

            @return the value of the given key in the contained hash if it exists

            @throw KEY-ERROR the given key does not exist in the contained hash

            @note this method is called automatically when an unknown or inaccessible member name is accessed from outside the class
            
            @see @ref memberGate_methods
        */
        MysqlColumn memberGate(string k) {
            if (!h.hasKey(k))
                throw "KEY-ERROR", sprintf("cannot access unknown %s %y; expecting one of: %y", getElementName(), k, h.keys());
            return h{k};
        }

        string getCreateSql(string table_name, *hash opts) {
            return getCreateSql(name, table_name, opts);
        }

        list getRenameSql(string table_name, string new_name) {
            # the following is only valid with MySQL 9.2+
            #return sprintf("alter table %s rename constraint %s to %s", table_name, name, new_name);
            list l += getDropSql(table_name);
            l += getCreateSql(new_name, table_name);
            return l;
        }

        string getCreateSql(string name, string table_name, *hash opts) {
            string sql = sprintf("alter table %s add constraint %s unique ", table_name, name);
            getIndexSql(\sql, name, opts);
            return sql;
        }

        #! returns a string that can be used to drop the constraint from the database
        string getDropSql(string table_name) {
            return sprintf("alter table %s drop index %s", table_name, name);
        }
    }

    #! represents a MySQL-specific primary key constraint
    public class MysqlPrimaryKey inherits SqlUtil::AbstractPrimaryKey, MysqlUniqueConstraintCommon {
        constructor(*hash c) : AbstractPrimaryKey("PRIMARY", c) {
        }

        #! returns the MysqlColumn value of the given key if it exists, otherwise throws a \c KEY-ERROR exception
        /** @par Example:
            @code
my any $v = $c.name;
            @endcode

            @param k the name of the key to access

            @return the value of the given key in the contained hash if it exists

            @throw KEY-ERROR the given key does not exist in the contained hash

            @note this method is called automatically when an unknown or inaccessible member name is accessed from outside the class
            
            @see @ref memberGate_methods
        */
        MysqlColumn memberGate(string k) {
            if (!h.hasKey(k))
                throw "KEY-ERROR", sprintf("cannot access unknown %s %y; expecting one of: %y", getElementName(), k, h.keys());
            return h{k};
        }

        string getCreateSql(string table_name, *hash opts) {
            string sql = sprintf("alter table %s add primary key", table_name);
            getIndexSql(\sql, name, opts);
            return sql;
        }

        #! primary keys have no name in MySQL so this method returns an empty list
        softlist getRenameSql(string table_name, string new_name) {
            return ();
        }

        #! returns a string that can be used to drop the constraint from the database
        string getDropSql(string table_name) {
            return sprintf("alter table %s drop primary key", table_name);
        }

        #! returns @ref Qore::False "False" since primary key constraints in MySQL have no name
        bool supportsName() {
            return False;
        }
    }

    #! represents a MySQL-specific trigger
    public class MysqlTrigger inherits SqlUtil::AbstractTrigger {
        #! creates the object and sets its name and the trigger source
        constructor(string n, string n_src) : AbstractTrigger(n, n_src) {
        }

        #! returns a string that can be used to create the trigger in the database
        softlist getCreateSql(string table_name, *hash opt) {
            return sprintf("create trigger %s %s", name, src);
        }

        #! returns a string that can be used to drop the trigger from the database
        softlist getDropSql(string table_name) {
            return sprintf("drop trigger %s", name);
        }

        #! returns @ref Qore::True "True" if the argument is equal to the current object, @ref Qore::False "False" if not
        private bool equalImpl(AbstractFunctionBase t) {
            return True;
        }

        #! returns a string that can be used to rename the trigger in the database
	softlist getRenameSql(string table_name, string new_name) {
	    return sprintf("alter trigger %s on %s rename to %s", name, table_name, new_name);
	}
    }

    #! represents a MySQL-specific function
    public class MysqlFunction inherits SqlUtil::AbstractFunction {
        constructor(string n, string n_src) : AbstractFunction(n, "function", n_src) {
        }

        #! returns a string that can be used to create the function in the database
        softlist getCreateSql(*hash opt) {
            return sprintf("create function %s", src);
        }

        #! returns a string that can be used to drop the function from the database
        string getDropSql() {
            return sprintf("drop function %s", name);
        }

        #! returns @ref Qore::True "True" if the argument is equal to the current object, @ref Qore::False "False" if not
        private bool equalImpl(AbstractFunctionBase t) {
            return True;
        }

        #! returns a string that can be used to rename the function in the database
	softlist getRenameSql(string new_name) {
	    return sprintf("alter function %s rename to %s", name, new_name);
	}
    }
    
    #! class for MySQL sequences based on a sequence table and autonomous transactions
    public class MysqlSequence inherits SqlUtil::AbstractSequence {
        private {
            string table_name;
        }

        #! creates the object from the arguments
        constructor(string n_table_name, string n_name, number n_start = 1, number n_increment = 1, *softnumber n_end) : AbstractSequence(n_name, n_start, n_increment, n_end) {
            if (increment != 1)
                throw "MYSQL-SEQUENCE-ERROR", sprintf("cannot create a MySQL simulated sequence with any increment value other than 1");
            table_name = n_table_name;
        }

        #! returns a string that can be used to create the sequence in the database
        string getCreateSql(*hash opt) {
            return sprintf("insert into %s (name, id) values ('%s', %d)", table_name, name, start);
        }

        #! returns a string that can be used to rename the sequence in the database
        string getRenameSql(string new_name) {
            return sprintf("update %s set name = '%s' where name = '%s'", table_name, new_name, name);
        }

        #! returns a string that can be used to drop the sequence from the database
        string getDropSql() {
            return sprintf("delete from %s where name = '%s'", table_name, name);
        }
    }

    #! provides the MySQL-specific implementation of the AbstractDatabase interface
    public class MysqlDatabase inherits SqlUtil::AbstractDatabase {
        public {
            #! MySQL-specific schema description keys
            const MysqlSchemaDescriptionOptions = AbstractDatabase::SchemaDescriptionOptions + (
                "sequence_table": Type::String,
                "sequence_function": Type::String,
                );


            #! MySQL sequence emulation table
            const MysqlSequenceTable = (
                "columns": (
                    "name": (
                        "qore_type": SqlUtil::VARCHAR,
                        "size": 40,
                        "notnull": True,
                    ),
                    "id": (
                        "qore_type": Type::Number,
                        "size": 14,
                        "notnull": True,
                    ),
                ),
                );

            #! MySQL sequence function
            const MysqlSequenceFunction = "%s(seq_name varchar(40)) returns decimal(14)
begin
  update %s set id = last_insert_id(id + 1) where name = seq_name;
  return last_insert_id();
end";
        }

        private {
            string schema;

            #! separate datasource dedicated for our sequence implementation with autonomous transactions
            Datasource seqds;

            string sequence_table = "sqlutil_sequences";
            string sequence_function = "sqlutil_nextval";
        }

        constructor(AbstractDatasource nds, *hash opts) : AbstractDatabase(nds, opts) {
            schema = opts.schema ? opts.schema : ds.getDBName();

            if (opts.sequence_table)
                sequence_table = opts.sequence_table;

            if (opts.sequence_function)
                sequence_function = opts.sequence_function;

            seqds = new Datasource(ds.getConfigString());
        }

        string getSchemaName() {
            return schema;
        }

        private AbstractSequence makeSequenceImpl(string name, number start = 1, number increment = 1, *softnumber end, *hash opts) {
            return new MysqlSequence(sequence_table, name, start, increment, end);
        }

        private *AbstractSequence getSequenceImpl(string name) {
            *AbstractTable t = getTable(sequence_table);
            if (!t)
                return;
            *string str = ds.selectRow("select name from %s where name = %v", sequence_table, name).name;
            if (!str)
                return;
            return new MysqlSequence(sequence_table, name);
        }

        private MysqlFunction makeFunctionImpl(string name, string src, *hash opts) {
            trim src;
            return new MysqlFunction(name, src);
        }

        private MysqlFunction makeProcedureImpl(string name, string src, *hash opts) {
            return makeFunctionImpl(name, src, opts);
        }

        private *AbstractFunction getFunctionImpl(string name) {
            *string sm = (name =~ x/^(\w+)\.\w+$/[0]);
            if (sm)
                splice name, 0, sm.size() + 1;
            else
                sm = schema;
            *hash qh = ds.selectRow("select * from information_schema.routines where routine_name = %v and routine_schema = %v", name, sm);
            if (!qh)
                return;

            # get arguments
            *list al = ds.selectRows("select * from information_schema.parameters where specific_name = %v and specific_schema = %v order by ordinal_position", name, sm);

            string rt;
            list params = ();
            if (al) {
                rt = MysqlDatabase::makeParameter(shift al);
                
                map params += MysqlDatabase::makeParameter($1), al;
            }

            string src = sprintf("%s(%s) returns %s\n%s", name, (foldl $1 + ", " + $2, params), rt, qh.routine_definition);
            return new MysqlFunction(name, src);
        }

        private static string makeParameter(hash row) {
            string str;
            if (row.parameter_name)
                str = row.parameter_name + " ";
            str += row.data_type;
            if (row.character_maximum_length)
                str += sprintf("(%d)", row.character_maximum_length);
            else if (row.numeric_precision) {
                str += sprintf("(%d", row.numeric_precision);
                if (row.numeric_scale)
                    str += sprintf(",%d", row.numeric_scale);
                str += ")";
            }
            return str;
        }

        private AbstractFunction getProcedureImpl(string name) {
            return getFunctionImpl(name);
        }

        private list getDropSchemaSqlImpl(hash schema_hash, *hash opt) {
            list l = ();

            if (opt.start) {
                return l;
            }
            
            return l;
        }

        private list getAlignSqlImpl(hash schema_hash, *hash opt) {
            list l = ();

            if (opt.start) {
                # if there are any sequences, then we need to make sure the sequence table and function exist
                if (schema_hash.sequences) {
                    # first create / align table
                    Table st(ds, MysqlSequenceTable, sequence_table, opt{MysqlTable::MysqlTableCreationOptions.keys()});
                    Table dbst(ds, sequence_table);
                    list tl = dbst.getAlignSql(st, opt{MysqlTable::MysqlAlignTableOptions.keys()});
                    if (tl)
                        l += tl;

                    # create / align function
                    string fstr = sprintf(MysqlSequenceFunction, sequence_function, sequence_table);
                    tl = getAlignFunctionSql(new MysqlFunction(sequence_function, fstr));
                    if (tl)
                        l += tl;
                }
                return l;
            }

            return l;
        }

        #! returns a list of string table names in the database
        private list listTablesImpl() {
            return ds.select("select table_name from information_schema.tables where table_schema = %v", schema).table_name;
        }

        #! returns a list of string function names in the database
        /** The function names will include arguments in parentheses after the names

            @return a list of string function names in the database
        */
        private list listFunctionsImpl() {
            *hash qh = ds.select("select routine_name from information_schema.routines where routine_schema = %v and routine_type = 'FUNCTION'");
            return qh.routine_name;
        }

        #! returns a list of string procedure names in the database
        /** The procedure names will include arguments in parentheses after the names

            @return a list of string procedure names in the database
        */
        private list listProceduresImpl() {
            *hash qh = ds.select("select routine_name from information_schema.routines where routine_schema = %v and routine_type = 'PROCEDURE'");
            return qh.routine_name;
        }

        private list listSequencesImpl() {
            *AbstractTable t = getTable(sequence_table);
            if (!t)
                return ();
            return ds.select("select name from %s", sequence_table).name;
        }

        private list listViewsImpl() {
            return ds.select("select table_name from information_schema.views where table_schema = %v", schema).table_name;
        }

        private string getCreateSqlImpl(list l) {
            return MysqlDatabase::getCreateSql(l);
        }

        static string getCreateSql(list l) {
            return !l ? "" : foldl $1 + "\n" + $2, (map sprintf("%s%s", $1, $1 =~ /(;|\$)$/ ? "" : ";"), l);
        }

        #! returns driver-specific options to the base abstract class
        private hash getSchemaDescriptionOptions() {
            return MysqlSchemaDescriptionOptions;
        }

        #! returns the next value in the given sequence
        private softint getNextSequenceValueImpl(string name) {
            return seqds.selectRow("select nextval(%s)", name).nextval;
        }

        #! returns @ref Qore::True "True" since we have a workaround implementation for sequences in MySQL
        private bool supportsSequencesImpl() {
            return False;
        }
    }

    #! provides the MySQL-specific implementation of the AbstractTable interface
    public class MysqlTable inherits SqlUtil::AbstractTable {
        public {
            #! maps mysql type names to type configurations
            const MysqlTypeMap = (
                "decimal": ("qore": Type::Number, "size": SZ_NUM,),
                "tinyint": ("qore": Type::Int,),
                "smallint": ("qore": Type::Int,),
                "mediumint": ("qore": Type::Int,),
                "int": ("qore": Type::Int,),
                "bigint": ("qore": Type::Int,),
                "float": ("qore": Type::Float,),
                "double": ("qore": Type::Float,),

                "date": ("qore": Type::Date,),
                "datetime": ("qore": Type::Date,),
                "timestamp": ("qore": Type::Date, "size": SZ_OPT, "size_range": (0, 6),"default_size": 6,),
                "time": ("qore": Type::Date, "size": SZ_OPT, "size_range": (0, 6),"default_size": 6,),
                "year": ("qore": Type::Int,),

                "char": ("qore": Type::String, "size": SZ_MAND,),
                "varchar": ("qore": Type::String, "size": SZ_MAND,),

                "binary": ("qore": Type::Binary,),
                "varbinary": ("qore": Type::Binary,),

                "tinytext": ("qore": Type::String,),
                "text": ("qore": Type::String,),
                "mediumtext": ("qore": Type::String,),
                "longtext": ("qore": Type::String,),

                "tinyblob": ("qore": Type::Binary,),
                "blob": ("qore": Type::Binary,),
                "mediumblob": ("qore": Type::Binary,),
                "longblob": ("qore": Type::Binary,),

                "bit": ("qore": Type::Int,),
                );

            #! maps qore type names to postgresql type names
            const QoreTypeMap = (
                "integer": "bigint",
                "float": "double",
                "number": "decimal",
                "string": "varchar",
                "date": "datetime",
                "binary": "varbinary",
                "bool": "tinyint",
                SqlUtil::CHAR: "char",
                SqlUtil::CLOB: "mediumtext",
                SqlUtil::BLOB: "mediumblob",
                );

            #! extends @ref SqlUtil::AbstractTable::TableDescriptionHashOptions with \c "engine" for the DB engine behind the table (default: \c innodb")
            const MysqlTableDescriptionHashOptions = AbstractTable::TableDescriptionHashOptions + (
                "engine": Type::String,
                );

            const MysqlColumnOptions = AbstractTable::ColumnOptions;

            const MysqlIndexOptions = AbstractTable::IndexOptions;

            const MysqlConstraintOptions = AbstractTable::ConstraintOptions + MysqlIndexOptions + (
                "index": Type::String,
                );

            const MysqlTableCreationOptions = AbstractTable::TableCreationOptions + MysqlConstraintOptions;

            const MysqlAlignTableOptions = AbstractTable::AlignTableOptions + MysqlTableCreationOptions;
        }

        private {
            string schema;
            string engine = "innodb";
        }

        constructor(AbstractDatasource nds, string nname, *hash opts) : AbstractTable(nds, nname, opts) {
            # see if there is a schema in the name
            *string sstr = (nname =~ x/^(\w+)\.\w+/)[0];
            if (sstr) {
                schema = sstr;
                splice nname, 0, schema.size() + 1;
                name = nname;
            }
            else
                schema = ds.getUserName();

            if (opts.engine)
                engine = opts.engine;
        }

        #! returns the name of the table to be used in SQL (with a possible qualifiers for schema, etc)
        string getSqlName() {
            return schema + "." + name;
        }

        private hash getTableCreationOptions() {
            return MysqlTableCreationOptions;
        }

        private hash getTableDescriptionHashOptions() {
            return MysqlTableDescriptionHashOptions;
        }

        private hash getColumnOptions() {
            return MysqlColumnOptions;
        }

        private hash getIndexOptions() {
            return MysqlIndexOptions;
        }

        private hash getConstraintOptions() {
            return MysqlConstraintOptions;
        }

        private hash getAlignTableOptions() {
            return MysqlAlignTableOptions;
        }

        private bool checkExistenceImpl() {
            *hash qh = ds.selectRow("select * from information_schema.tables where table_name = %v and table_schema = %v", name, schema);
            if (qh)
                return inDb = True;
            return False;
        }

        private Columns describeImpl() {
            # get column descriptions
            *hash qh = ds.select("select * from information_schema.columns where table_name = %v and table_schema = %v order by ordinal_position", name, schema);
            if (!qh.column_name)
                throw "TABLE-ERROR", sprintf("cannot retrieve table information for table %y in %y", name, dsdesc);

            hash rv;
            foreach hash row in (qh.contextIterator()) {
                #printf("%y: %s\n", row.column_name, row.column_type);
                bool unsigned = False;
                if (row.column_type =~ / unsigned$/) {
                    unsigned = True;
                    row.column_type =~ s/ unsigned$//;
                }

                softint size = row.character_maximum_length ? row.character_maximum_length : row.numeric_precision;

                if (row.column_type == "year(2)")
                    size = 2;

                # remove size from type name
                row.column_type =~ s/\(.*\)$//;

                *hash th = MysqlTypeMap.(row.column_type);
                switch (row.column_type) {
                    case "tinyint":
                    case "smallint":
                    case "mediumint":
                    case "int":
                    case "bigint":
                    case "double":
                    case "float": 
                    case /text$/:
                    case /blob$/: {
                        row.numeric_precision = 0;
                        size = 0;
                        break;
                    }
                }

                MysqlColumn c;
                any defval = exists row.column_default && row.column_default !== NULL ? row.column_default : NOTHING;
                if (exists defval) {
                    # process default value according to column type
                    switch (th.qore) {
                        case Type::Int: defval = defval.toInt(); break;
                        case Type::Float: defval = defval.toFloat(); break;
                        case Type::Number: defval = defval.toNumber(); break;
                        case Type::Date: defval = date(defval); break;
                        # don't know what to do with Type::Binary ???
                        default: break;
                    }
                    defval = getSqlValue(defval);
                }
                if (row.numeric_precision || unsigned) {
                    c = new MysqlNumericColumn(row.column_name, row.column_type, th.qore, row.numeric_precision, row.is_nullable == "YES", defval, row.column_comment ? row.column_comment : NOTHING, 0, row.numeric_scale, unsigned);
                }
                else
                    c = new MysqlColumn(row.column_name, row.column_type, th.qore, exists size ? size : 0, row.is_nullable == "YES", defval, row.column_comment ? row.column_comment : NOTHING, row.character_octet_length);

                rv.(row.column_name) = c;
            }

            return new Columns(rv);
        }

        private *MysqlPrimaryKey getPrimaryKeyImpl() {
            hash rv;

            # get primary key description
            *hash qh = ds.select("select column_name from information_schema.key_column_usage k where constraint_name = 'PRIMARY' and table_name = %v and table_schema = %v order by ordinal_position", name, schema);
            if (!qh.column_name)
                return;

            #printf("MysqlTable::getPrimaryKeyImpl(): %s: %N\n", getName(), qh);
            foreach string col in (qh.column_name)
                rv{col} = columns{col};

            return new MysqlPrimaryKey(rv);
        }

        private Indexes getIndexesImpl() {
            hash rv;

            # get index descriptions
            *hash qh = ds.select("select index_name, non_unique, column_name, index_type from information_schema.statistics s where index_name != 'PRIMARY' and table_name = %v and table_schema = %v order by index_name, seq_in_index", name, schema);

            if (qh.index_name) {
                hash ih;
                foreach hash row in (qh.contextIterator()) {
                    if (!ih.(row.index_name)) {
                        ih.(row.index_name) = (
                            "unique": !row.non_unique,
                            "type": row.index_type,
                        );
                    }
                    # send "blank" column for function index
                    if (row.column_name =~ /\(.*\)/ || !columns.hasKey(row.column_name))
                        ih.(row.index_name).columns{row.column_name} = hash();
                    else
                        ih.(row.index_name).columns{row.column_name} = columns{row.column_name};
                }

                foreach hash i in (ih.pairIterator()) {
                    rv.(i.key) = new MysqlIndex(i.key, i.value.unique, i.value.columns, i.value.index_type);
                }
            }

            return new Indexes(rv);
        }

        private ForeignConstraints getForeignConstraintsImpl(*hash opts) {
            hash rv;
            # get foreign referential constraints 
            # FIXME: use schema name
            *hash qh = ds.select("select t.constraint_name, column_name source_column, referenced_table_name target_table, referenced_column_name target_column from information_schema.table_constraints t inner join information_schema.key_column_usage k on (t.constraint_schema = k.constraint_schema and t.table_name = k.table_name and t.table_schema = k.table_schema and t.constraint_name = k.constraint_name) where constraint_type = 'FOREIGN KEY' and t.table_name = %v and t.table_schema = %v order by position_in_unique_constraint", name, schema);
            if (qh.constraint_name) {
                hash ch;
                foreach hash row in (qh.contextIterator()) {
                    reference c = \ch.(row.constraint_name); 
                    c.columns.(row.source_column) = columns{row.source_column};
                    c.target.table = row.target_table;
                    c.target.columns.(row.target_column) = True;
                }
                
                foreach hash c in (ch.pairIterator()) {
                    # get a description of the target table's columns
                    Columns targ_columns = getReferencedTableColumnsUnlocked(c.value.target.table, opts.table_cache);
                    ForeignConstraintTarget fct(c.value.target.table, targ_columns.subset(c.value.target.columns.keys()));
                    rv.(c.key) = new MysqlForeignConstraint(c.key, new Columns(c.value.columns), fct);
                }
            }

            return new ForeignConstraints(rv);
        }

        private Constraints getConstraintsImpl() {
            # get check constraints
            #*hash qh = ds.select("", name);
            hash rv;
            #foreach hash row in (qh.contextIterator())
            #    rv.(row.constraint_name) = new MysqlCheckConstraint(row.constraint_name, row.consrc);

            Constraints c = new Constraints(rv);

            # get unique constraints
            my *hash qh = ds.select("select t.constraint_name, column_name from information_schema.table_constraints t inner join information_schema.key_column_usage k on (t.constraint_schema = k.constraint_schema and t.table_name = k.table_name and t.table_schema = k.table_schema and t.constraint_name = k.constraint_name) where constraint_type = 'UNIQUE' and t.table_name = %v and t.table_schema = %v order by ordinal_position", name, schema);
            delete rv;
            foreach hash row in (qh.contextIterator()) {
                reference ch = \rv.(row.constraint_name);
                if (!ch)
                    ch = new MysqlUniqueConstraint(row.constraint_name, hash());
                ch.add(row.column_name, columns{row.column_name});
            }
            
            # add unique constraints to constraint hash
            map c.add($1.key, $1.value), rv.pairIterator();

            return c;
        }

        private Triggers getTriggersImpl() {
            hash rv;

            # get trigger description
            *hash qh = ds.select("select * from information_schema.triggers where event_object_table = %v and event_object_schema = %v", name, schema);

            foreach hash row in (qh.contextIterator()) {
                string src = sprintf("%s %s on %s for each %s %s", row.action_timing.lwr(), row.event_manipulation.lwr(), name, row.action_orientation.lwr(), row.action_statement);
                rv{row.trigger_name} = new MysqlTrigger(row.trigger_name, src);
            }

            return new Triggers(rv);
        }

        string getCreateTableSqlImpl(*hash opt) {
            string sql = sprintf("create table %s (\n", name);

            sql += foldl $1 + ",\n" + $2, (map "  " + $1.getCreateSql(), columns.iterator());
            sql += sprintf("\n) engine %s", engine);            

            return sql;
        }

        *list getCreateMiscSqlImpl(*hash opt, bool cache) {
        }

        private *list getAlignSqlImpl(AbstractTable table, *hash opt) {
        }

        private string getCreateSqlImpl(list l) {
            return MysqlDatabase::getCreateSql(l);
        }

        private string getRenameSqlImpl(string new_name) {
            return sprintf("alter table %s rename to %s", getSqlName(), new_name);
        }

        private AbstractColumn addColumnImpl(string cname, hash opt, bool nullable = True) {
            if (opt.precision)
                return new MysqlNumericColumn(cname, opt.native_type, opt.qore_type, opt.precision, nullable, opt.default_value, opt.comment, 0, opt.scale, opt.unsigned);
            return new MysqlColumn(cname, opt.native_type, opt.qore_type, opt.size, nullable, opt.default_value, opt.comment, 0);
        }

        private AbstractPrimaryKey addPrimaryKeyImpl(string cname, hash ch, *hash opt) {
            return new MysqlPrimaryKey(ch);
        }

        private AbstractIndex addIndexImpl(string iname, bool enabled, hash ch, *hash opt) {
            return new MysqlIndex(iname, enabled, ch, opt.index_type);
        }

        private AbstractForeignConstraint addForeignConstraintImpl(string cname, hash ch, string table, hash tch, *hash opt) {
            ForeignConstraintTarget fct(table, new Columns(tch));
            return new MysqlForeignConstraint(cname, new Columns(ch), fct);
        }

        private AbstractCheckConstraint addCheckConstraintImpl(string cname, string src, *hash opt) {
            return new MysqlCheckConstraint(cname, src);
        }

        private AbstractUniqueConstraint addUniqueConstraintImpl(string cname, hash ch, *hash opt) {
            return new MysqlUniqueConstraint(cname, ch);
        }

        private AbstractTrigger addTriggerImpl(string tname, string src, *hash opt) {
            return new MysqlTrigger(tname, src);
        }

        private bool tryInsertImpl(string sql, hash row) {
            try {
                ds.vexec(sql, row.values());
            }
            catch (hash ex) {
                if (ex.desc =~ /^Duplicate entry /)
                    return False;
                rethrow;
            }
            return True;
        }

        private hash getQoreTypeMapImpl() {
            return QoreTypeMap;
        }

        private hash getTypeMapImpl() {
            return MysqlTypeMap;
        }

        private string getColumnOperatorPrepend(string cv, string arg) {
            return sprintf("concat(%s,%s)", getSqlValueImpl(arg), cv);
        }

        private string getColumnOperatorAppend(string cv, string arg) {
            return sprintf("concat(%s,%s)", cv, getSqlValueImpl(arg));
        }

        #! returns a string for use in SQL queries representing the DB-specific value of the argument; returns NOTHING if the type cannot be converted to an SQL string
        private *string getSqlValueImpl(any v) {
            switch (v.typeCode()) {
                case NT_FLOAT:
                case NT_INT: return v.toString();

                case NT_NUMBER: return string(v);

                # double any single quotes in strings
                case NT_STRING: v =~ s/'/''/g; return "'" + v + "'";

                case NT_NULL:
                case NT_NOTHING: return "null";

                case NT_BOOLEAN: return v ? "true" : "false";

                case NT_DATE: return v.format("'YYYY-MM-DD HH:mm:SS.us'");
            }
        }

        private bool emptyImpl() {
            return True;
        }

        private setupTableImpl(hash desc, *hash opt) {
        }

        #! returns @ref Qore::True "True" if the database links constraints to indexes (ie dropping the constraint drops the index, etc)
        private bool constraintsLinkedToIndexesImpl() {
            return True;
        }

        #! returns @ref Qore::True "True" if the database automatically creates a unique constraint when a unique index is created (ex: mysql)
        private bool uniqueIndexCreatesConstraintImpl() {
            return True;
        }

        #! returns @ref Qore::True "True" if the database support tablespaces
        private bool supportsTablespacesImpl() {
            return False;
        }

        #! processes a string for use in SQL select statements when there is a "limit" argument, but no "orderby" or "offset" arguments
        private doSelectLimitOnlyUnlockedImpl(reference sql, reference args, *hash qh) {
           sql += " limit %v";
           args += qh.limit;
        }

        #! processes a string for use in SQL select statements when there is an "order by" and "offset" argument
        private doSelectOrderByWithOffsetSqlUnlockedImpl(reference sql, reference args, *hash qh) {
            doSelectOrderBySqlUnlocked(\sql, \args, qh);
            if (qh.limit) {
                sql += " limit %v";
                args += qh.limit;
            }

            if (qh.offset) {
                sql += " offset %v";
                args += qh.offset;
            }
        }

        #! db-specific copy actions
        private copyImpl(AbstractTable old) {
        }
    }
}
