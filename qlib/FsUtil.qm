# -*- mode: qore; indent-tabs-mode: nil -*-
# @file FsUtil.qm Qore user module providing file system related functionality

/*  FsUtil.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.13

# assume local var scope, do not use "$" for vars, members, and method calls
%new-style
%strict-args
%require-types
%enable-all-warnings

module FsUtil {
    version = "1.0";
    desc = "user module providing file system related functionality";
    author = "Tomas Heger";
    url = "http://qore.org";
    license = "MIT";
    init    = sub () { init(); };
}

/* see release notes below for version history
*/

/** @mainpage FsUtil Module

    @tableofcontents

    @section fsutilintro Introduction to the FsUtil Module

    The %FsUtil module provides functionality for file system operations.

    To use this module, use \c "%requires FsUtil" in your code.

    All the public symbols in the module are defined in the FsUtil namespace

    Currently the module provides the following multiplatform functions:
    @ref FsUtil::basename()

    Also classes for platform specific operations are available:
    @ref FsUtil::PosixPathHandler
    @ref FsUtil::WinPathHandler


    @section fsutil_relnotes Release Notes

    @subsection fsutil_v1_0 Version 1.0
    - initial version of module
*/

namespace Init {

    sub init() {
        #! handler for the current platform
        our FsUtil::PathHandler local_handler;
        if (Platform.Windows)
            local_handler = new FsUtil::WinPathHandler();
        else if (Platform.Unix)
            local_handler = new FsUtil::PosixPathHandler();
        else
            throw "UNKNOWN-PLATFORM-ERROR",
                  sprintf("Unknown platform: %s.\n", PlatformOS);
    }
}

#! the FsUtil namespace contains all the objects in the FsUtil module
public namespace FsUtil {

    #! generic path handler implementing functionality common for both platforms
    class PathHandler {
        public {
            #! path delimiters - to be set by platform specific path handlers
            list Delimiters;
        }

        #! returns the segment of given path after the last delimiter
        /** @param path the path to be processed

            @return everything after the last delimiter

            Delimiter for the current platform is used.
        */
        public string basename(string path) {
            string tail = path;
            foreach string delim in (self.Delimiters) {
                int index = tail.rfind(delim) + 1;
                tail = tail.substr(index);
            }
            return tail;
        }
    }

    #! path handler implementing Windows specific functionality
    public class WinPathHandler inherits PathHandler {

        #! creates the object and sets the delimiter
        constructor() {
            # both slashes can be used as path delimiters on Windows
            Delimiters = ("\\", "/");
        }
    }

    #! path handler implementing POSIX specific functionality
    public class PosixPathHandler inherits PathHandler {

        #! creates the object and sets the delimiter
        constructor() {
            Delimiters = ("/",);
        }
    }

    #! this function returns the segment of given path after the last delimiter
    /** @param path the path to be processed

        @return the last part of the path - everything after the last delimiter

        Delimiters for the current platform are used.
    */
    public string sub basename(string path) {
        return local_handler.basename(path);
    }

} # FsUtil namespace
