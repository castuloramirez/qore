/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_String.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

#include <ctype.h>

//! Methods in this pseudo-class can be executed on @ref string "strings"
/** 
 */
qclass <string> [arg=QoreStringNode* str;vparent=<value>];

//! Returns Qore::NT_STRING
/** 
    @return Qore::NT_STRING

    @par Example:
    @code
switch ($str.typeCode()) {
    case NT_STRING:
        printf("%y: is a string\n", $str);
        break;
}
    @endcode
*/
int <string>::typeCode() [flags=CONSTANT] {
   return NT_STRING;
}

//! Returns the number of bytes in the string (not including the terminating null character (\c '\0')
/** 
    @return the number of bytes in the string (not including the terminating null character (\c '\0')

    @par Example:
    @code
my int $len = $str.strlen();
    @endcode

    @note equivalent to <string>::size()

    @see <string>::length()
*/
int <string>::strlen() [flags=CONSTANT] {
   return str->strlen();
}

//! Returns the number of bytes in the string (not including the terminating null character (\c '\0')
/** 
    @return the number of bytes in the string (not including the terminating null character (\c '\0')

    @par Example:
    @code
my int $len = $str.size();
    @endcode

    @note equivalent to <string>::strlen()

    @see <string>::length()
*/
int <string>::size() [flags=CONSTANT] {
   return str->size();
}

//! Returns the number of characters in the string; may not be equal to the byte length (returned by <string>::strlen() and <string>::size()) for @ref character_encoding "multi-byte character encodings"
/** 
    @return the number of characters in the string; may not be equal to the byte length (returned by <string>::strlen() and <string>::size()) for @ref character_encoding "multi-byte character encodings"

    @par Example:
    @code
my int $len = $str.length();
    @endcode

    @see
    - <string>::strlen()
    - <string>::size()
*/
int <string>::length() [flags=CONSTANT] {
   return str->length();
}

//! Returns @ref True if the string is empty, @ref False if not
/** The opposite of <string>::val()

    @return @ref True if the string is empty, @ref False if not

    @par Example:
    @code
my bool $b = $str.empty();
    @endcode
*/
bool <string>::empty() [flags=CONSTANT] {
   return str->empty();
}

//! Returns the name of the string's @ref character_encoding "character encoding"
/** 
    @return the name of the string's @ref character_encoding "character encoding"

    @par Example:
    @code
my string $enc = $str.encoding();
    @endcode

    @note equivalent to get_encoding(string)
*/
string <string>::encoding() [flags=CONSTANT] {
   return new QoreStringNode(str->getEncoding()->getCode());
}

//! Returns the string in lower case
/**
    @return the string in lower case

    @par Example:
    @code
my string $lwr = $str.lwr();
    @endcode

    @note
    - this function only processes ASCII characters
    - equivalent to tolower(string)

    @see
    - <string>::upr()
    - tolower()
    - toupper()
*/
string <string>::lwr() [flags=CONSTANT] {
   QoreStringNode* rv = str->copy();
   rv->tolwr();
   return rv;
}

//! Returns the string in upper case
/**
    @return the string in upper case

    @par Example:
    @code
my string $upr = $str.upr();
    @endcode

    @note
    - this function only processes ASCII characters
    - equivalent to toupper(string)

    @see
    - <string>::lwr()
    - tolower()
    - toupper()
*/
string <string>::upr() [flags=CONSTANT] {
   QoreStringNode* rv = str->copy();
   rv->toupr();
   return rv;
}

//! Retrieves the character position of a substring within a string
/** The \a pos argument and the return value are in character positions; byte offsets may differ from the character offsets with multi-byte @ref character_encoding "character encodings".

    @param substr the substring to find in the string; if the @ref character_encoding "character encoding" of this string does not match \a str, then it will be converted to <em>str</em>'s @ref character_encoding "character encoding" before processing
    @param pos the starting character position for the search

    @return the character position of a substring within a string, -1 is returned if the substring is not found

    @par Example:
    @code
my int $i = $str.find($substr);
if ($i == -1)
    printf("could not find %y in %y\n", $substr, $str);
    @endcode

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string arguments have different @ref character_encoding "character encodings" and an error occurs during encoding conversion
    @throw INVALID-ENCODING this exception could be thrown if a character offset calculation fails due to invalid encoding of multi-byte character data

    @note equivalent to index(softstring, softstring, softint)

    @see
    - <string>::rfind(softstring, softint)
    - rindex(softstring, softstring, softint)
    - bindex(softstring, softstring, softint)
    - brindex(softstring, softstring, softint)
 */
int <string>::find(softstring substr, softint pos = 0) [flags=RET_VALUE_ONLY] {
   return str->index(*substr, pos, xsink);
}

//! Retrieves the character position of a substring within a string, starting the search from the end of the string
/** The \a pos argument and the return value are in character positions; byte offsets may differ from the character offsets with multi-byte @ref character_encoding "character encodings".

    @param substr the substring to find in \a str; if the @ref character_encoding "character encoding" of this string does not match \a str, then it will be converted to <em>str</em>'s @ref character_encoding "character encoding" before processing
    @param pos the starting character position for the search, -1 means start from the end of the string

    @return the character position of a substring within a string, -1 is returned if the substring is not found

    @par Example:
    @code
my int $i = $str.rfind($substr);
if ($i == -1)
    printf("could not find %y in %y\n", $substr, $str);
    @endcode

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string arguments have different @ref character_encoding "character encodings" and an error occurs during encoding conversion
    @throw INVALID-ENCODING this exception could be thrown if a character offset calculation fails due to invalid encoding of multi-byte character data

    @note equivalent to rindex(softstring, softstring, softint)

    @see
    - <string>::find(softstring, softint)
    - index(softstring, softstring, softint)
    - bindex(softstring, softstring, softint)
    - brindex(softstring, softstring, softint)
 */
int <string>::rfind(softstring substr, softint pos = -1) [flags=RET_VALUE_ONLY] {
   return str->rindex(*substr, (qore_offset_t)pos, xsink);
}

//! Returns @ref False if the string is empty, @ref True if not
/** The opposite of <string>::empty()

    @return @ref False if the string is empty, @ref True if not

    @par Example:
    @code
my bool $b = $str.val();
    @endcode
*/
bool <string>::val() [flags=CONSTANT] {
   return !str->empty();
}

//! Returns @ref True if the string can be converted to an integer, @ref False if not, this depends on the first (or possibly second) character of the string, if it's 0 - 9 (possibly preceded by \c "-"), then the method returns @ref True
/**
    @return @ref True if the string can be converted to an integer, @ref False if not, this depends on the first (or possibly second) character of the string, if it's 0 - 9 (possibly preceded by \c "-"), then the method returns @ref True

    @par Example:
    @code
if ($n.intp())
    printf("%y: can be converted to an integer: %d\n", $n, int($n));
    @endcode
*/
bool <string>::intp() [flags=CONSTANT] {
   if (str->empty())
      return false;
   char c = (*str)[0];
   if (c == '-')
      c = (*str)[1];
   return (isdigit(c)) ? true : false;
}

//! Returns @ref True by default
/**
    @return @ref True by default

    @par Example:
    @code
if ($n.strp())
    printf("%y: can be converted to a string: '%s'\n", $n, string($n));
    @endcode
*/
bool <string>::strp() [flags=CONSTANT] {
   return true;
}

//! Returns a portion of a string starting from an integer offset
/** Arguments can be negative, giving offsets from the end of the string. All offsets are character positions, not byte positions.

    @param start The starting character for the substring where the first character is at offset 0; if the offset is negative, it designates the number of characters from the end of the string.  If the offset is 0, then the entire string is returned.

    @return the substring of the string starting from an integer character offset; the rest of the string is returned after this offset

    @par Example:
    @code
# get the last 10 characters of a string
my string $substr = $str.substr(-10);
    @endcode

    @throw INVALID-ENCODING this exception could be thrown if a character offset calculation fails due to invalid encoding of multi-byte character data

    @note equivalent to substr(softstring, softint)
 */
string <string>::substr(softint start) [flags=RET_VALUE_ONLY] {
   return str->substr(start, xsink);
}

//! Returns a portion of a string starting from an integer offset, with a length parameter
/** Arguments can be negative, giving offsets from the end of the string. All offsets are character positions, not byte positions.

    @param start The starting character for the substring where the first character is at offset 0; if the offset is negative, it designates the number of characters from the end of the string
    @param len The maximum number of characters to copy; if this value is negative, the rest of the string from \a start will be copied to the substring, except without - \a len characters from the end of the string

    @return the substring of the string according to the arguments passed

    @par Example:
    @code
# get a substring 10 characters into the string except omitting the last 2 characters of the string
my string $substr = $str.substr(10, -2);
    @endcode

    @throw INVALID-ENCODING this exception could be thrown if a character offset calculation fails due to invalid encoding of multi-byte character data

    @note equivalent to substr(softstring, softint, softint)
 */
string <string>::substr(softint start, softint len) [flags=RET_VALUE_ONLY] {
   return str->substr(start, len, xsink);
}

//! Splits a string into a list of components based on a separator string
/**
    @param sep the separator string; if the separator string is not found in the string to split, then a list with only one element containing the entire string argument is returned'; if this string has a different @ref character_encoding "character encoding" than \a str, then it will be converted to <em>str</em>'s @ref character_encoding "character encoding"
    @param with_separator include the separator string in every element

    @return a list of each component of a string separated by a separator string, with the separator removed; the separator pattern will not be included in the elements of the list returned unless the \a with_separator argument is @ref True

    @par Example:
    @code
my string $str = "some:text:here";
my list $list = $str.split(":"); # returns ("some", "text", "here")
    @endcode

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string arguments have different @ref character_encoding "character encodings" and an error occurs during encoding conversion

    @note equivalent to split(string, string, bool)
 */
list <string>::split(string sep, bool with_separator = False) [flags=RET_VALUE_ONLY] {
   // convert pattern encoding to string if necessary
   TempEncodingHelper temp(sep, str->getEncoding(), xsink);
   if (*xsink)
      return 0;

   return split_intern(temp->getBuffer(), temp->strlen(), str->getBuffer(), str->strlen(), str->getEncoding(), with_separator);
}

//! Splits a string into a list of components based on a separator string and a quote character
/** The quote character can appear as the first part of a field, in which case it is assumed to designate the entire field. If instances of the quote character are found in the field preceded by a backquote character (\c "\"), then these quote characters are included as part of the field's text and not treated as quote characters

    @param sep the separator string; if the separator string is not found in the string to split, then a list with only one element containing the entire string argument is returned'; if this string has a different @ref character_encoding "character encoding" than \a str, then it will be converted to <em>str</em>'s @ref character_encoding "character encoding"
    @param quote the quote character

    @return a list of each component of a string separated by a separator string, with the separator and any enclosing quote characters removed

    @par Example:
    @code
my list $list = "some,'text with spaces',here".split(",", "'"); # returns ("some", "text with spaces", "here")
    @endcode

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string arguments have different @ref character_encoding "character encodings" and an error occurs during encoding conversion
    @throw SPLIT-ERROR field missing closing quote character; extra text following quoted field

    @note equivalent to split(string, string)
 */
list <string>::split(string sep, string quote) [flags=RET_VALUE_ONLY] {
   return split_with_quote(sep, str, quote, xsink);
}

//! Returns @ref True if the regular expression matches the string passed, otherwise returns @ref False
/** Strings are converted to UTF-8 for pattern-matching; if any invalid encodings are encountered, an ENCODING-CONVERSION-ERROR is raised

    @param regex the regular expression pattern
    @param options regular expression options; see @ref regex_constants for possible values

    @return @ref True if the regular expression matches the string passed, otherwise returns @ref False

    @par Example:
    @code
my bool $b = "hello".regex("^hel"); # returns True
    @endcode

    @throw REGEX-COMPILATION-ERROR There was an error compiling the regular expression
    @throw REGEX-OPTION-ERROR the option argument contains invalid option bits
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given strings to UTF-8

    @note equivalent to regex(string, string, int)

    @see @ref qore_regex for more information about regular expression support in Qore
 */
bool <string>::regex(string regex, int options = 0) [flags=RET_VALUE_ONLY] {
   QoreRegexNode qr(*regex, options, xsink);
   if (*xsink)
      return 0;

   return qr.exec(str, xsink);
}

//! Returns a list of substrings in a string based on matching patterns defined by a regular expression
/** Strings are converted to UTF-8 for pattern-matching; if any invalid encodings are encountered, an ENCODING-CONVERSION-ERROR is raised

    @param regex the regular expression to use for matching, elements should be given in parentheses
    @param options regular expression options; see @ref regex_constants for possible values

    @return a list of substrings in a string based on matching patterns defined by a regular expression or @ref nothing if no match was made

    @par Example:
    @code
my *list $rv = regex_extract("ns:element", "(\\w+):(\\w+)");
    @endcode

    @throw REGEX-COMPILATION-ERROR There was an error compiling the regular expression
    @throw REGEX-OPTION-ERROR the option argument contains invalid option bits
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given strings to UTF-8

    @note equivalent regex_extract(string, string, int)

    @see @ref qore_regex for more information about regular expression support in Qore
 */
*list <string>::regexExtract(string regex, int options = 0) [flags=RET_VALUE_ONLY] {
   QoreRegexNode qr(*regex, options, xsink);
   if (*xsink)
      return 0;

   return qr.extractSubstrings(str, xsink);
}

