#!/usr/bin/env qore

%requires ../../../../qlib/FsUtil.qm
%requires ../../../../qlib/QUnit.qm

%new-style
%require-types
%enable-all-warnings

%exec-class BasenameTest

public class BasenameTest inherits QUnit::Test {

    private {
        list results_win = (
            ('C:\path\to\file.txt', "file.txt"),
            ("D:/path/to/file.txt", "file.txt"),
            ('E:\path/to\file.txt', "file.txt"),
            ('\path\to\file.txt', "file.txt"),
            ('\\path\to\file.txt', "file.txt"),
            ('\\path/to/file.txt', "file.txt"),
            ('path\to\file.txt', "file.txt"),
            ('e:path\to\file.txt', "file.txt"),
            ("F:../file.txt", "file.txt"),
            ('..\file.txt', "file.txt"),
            ("../../file.txt", "file.txt"),
            ("d:/path/to/", ""),
            ('..\', ""),
            ('c:\', ""),
            ("f:/path/to/dir", "dir"),
            ("file.txt", "file.txt"));
        list results_posix = (
            ("/path/to/file.txt", "file.txt"),
            ("path/to/file.txt", "file.txt"),
            ('C:\path\to\file.txt', 'C:\path\to\file.txt'),
            ('path\to\file.txt', 'path\to\file.txt'),
            ("/file.txt", "file.txt"),
            ("../file.txt", "file.txt"),
            ("/path/to/", ""),
            ("../", ""),
            ("./", ""),
            ("/", ""),
            ("/path/to/dir", "dir"),
            ("file.txt", "file.txt"));
    }

    constructor() : Test ("BasenameTest", "1.0") {
        addTestCase ("Basename test", \test_basename());
        addTestCase ("Basename test Posix", \test_basename_posix());
        addTestCase ("Basename test Windows", \test_basename_win());
        set_return_value(main());
    }

    test_basename() {
        list results;
        if (Platform.Windows)
            results = results_win;
        else
            results = results_posix;

        foreach list res in (results)
            assertEq(res[1], basename(res[0]));
    }

    test_basename_posix() {
        PosixPathHandler ph = new PosixPathHandler();
        foreach list res in (results_posix) {
            assertEq(res[1], ph.basename(res[0]));
        }
    }

    test_basename_win() {
        WinPathHandler ph = new WinPathHandler();
        foreach list res in (results_win) {
            assertEq(res[1], ph.basename(res[0]));
        }
    }
}
