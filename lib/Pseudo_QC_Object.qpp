/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Object.cpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QoreObjectIntern.h>
#include <qore/intern/QoreObjectIterator.h>

//! Methods in this pseudo-class can be executed on @ref object "objects"
/** 
 */
qclass <object> [arg=QoreObject* obj;vparent=<value>];

//! Returns Qore::NT_OBJECT
/** 
    @return Qore::NT_OBJECT

    @par Example:
    @code
switch ($o.typeCode()) {
    case Qore::NT_OBJECT:
        printf("%y: is an object\n", $o);
        break;
}
    @endcode
 */
int <object>::typeCode() [flags=CONSTANT] {
   return NT_OBJECT;
}

//! Returns a list of member names of the object; if called from outside the object, only public members are returned
/** 
    @return a list of member names of the object; if called from outside the object, only public members are returned

    @par Example:
    @code
my list $l = $o.keys();
    @endcode
 */
list <object>::keys() [flags=RET_VALUE_ONLY] {
   return obj->getMemberList(xsink);
}

//! Returns the first member name in the object or @ref nothing if the object has no members; if called from outside the object, the first public member name is returned (if any)
/** 
    @return the first member name in the object or @ref nothing if the object has no members; if called from outside the object, the first public member name is returned (if any)

    @par Example:
    @code
my *string $n = $o.firstKey();
    @endcode

    @see <object>::lastKey()
 */
*string <object>::firstKey() [flags=RET_VALUE_ONLY] {
   return qore_object_private::firstKey(obj, xsink);
}

//! Returns the last member name in the object or @ref nothing if the object has no members; if called from outside the object, the last public member name is returned (if any)
/** 
    @return the last member name in the object or @ref nothing if the object has no members; if called from outside the object, the last public member name is returned (if any)

    @par Example:
    @code
my *string $n = $o.lastKey();
    @endcode

    @see <object>::firstKey()
 */
*string <object>::lastKey() [flags=RET_VALUE_ONLY] {
   return qore_object_private::lastKey(obj, xsink);
}

//! Returns @ref True if the object has no public or private members, @ref False if it does
/** The opposite of <object>::val()

    @return @ref True if the object has no public or private members, @ref False if it does

    @par Example:
    @code
my bool $b = $o.empty();
    @endcode
 */
bool <object>::empty() [flags=RET_VALUE_ONLY] {
   return !obj->size(xsink);
}

//! Returns the number of members in the object, public and private
/** 
    @return the number of members in the object, public and private

    @par Example:
    @code
my int $num = $o.size();
    @endcode
 */
int <object>::size() [flags=RET_VALUE_ONLY] {
   return obj->size(xsink);
}

//! Returns the class name of the object
/** 
    @return the class name of the object

    @par Example:
    @code
my string $cn = $o.className();
    @endcode
 */
string <object>::className() [flags=CONSTANT] {
   return new QoreStringNode(obj->getClassName());
}

//! Returns @ref True if the object is a system object (ie a constant object like @ref stdin, etc), @ref False if not
/** 
    @return @ref True if the object is a system object (ie a constant object like @ref stdin, etc), @ref False if not

    @par Example:
    @code
my bool $b = $i.isSystem();
    @endcode
 */
bool <object>::isSystem() [flags=CONSTANT] {
   return get_bool_node(obj->isSystemObject());
}

//! Returns @ref False if the object has no public or private members, @ref True if it does
/** The opposite of <object>::empty()

    @return @ref False if the object has no public or private members, @ref True if it does

    @par Example:
    @code
my bool $b = $o.val();
    @endcode

    @see @ref perl-bool-eval "%perl-bool-eval"
 */
bool <object>::val() [flags=RET_VALUE_ONLY] {
   return (bool)obj->size(xsink);
}

// bool <object>::hasKey(softstring $key) [flags=RET_VALUE_ONLY] {}
// bool <object>::hasKeyValue(softstring $key) [flags=RET_VALUE_ONLY] {}

//! Returns a @ref Qore::ObjectIterator "ObjectIterator" object for the hash
/** @return a @ref Qore::ObjectIterator "ObjectIterator" object for the hash

    @par Example:
    @code
map printf("+ %s: %y\n", $1.getKey(), $1.getValue()), $obj.iterator();
    @endcode

    @since %Qore 0.8.6
 */
AbstractIterator <object>::iterator() [flags=CONSTANT] {
   return new QoreObject(QC_OBJECTITERATOR, 0, new QoreObjectIterator(obj));
}
