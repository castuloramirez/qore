# -*- mode: qore; indent-tabs-mode nil -*-
# @file Mime.qm Mime module definition

/*  Mime.qm Copyright 2012 David Nichols

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 0.8.4

module Mime {
    version = "1.0";
    desc = "Mime module giving MIME-related definitions";
    author = "David Nichols";
    url = "http://qore.org";
}

/*  Version History
    * 1.0: David Nichols <david@qore.org>: pulled MIME implementation out of other code and made a user module to aggregate MIME definitions and functions

    based on:
    - http://tools.ietf.org/html/rfc1521: quoted printable & base 64 transfer encodings
    - http://tools.ietf.org/html/rfc2045: mime headers, content types, etc
    - http://tools.ietf.org/html/rfc2047: "Q" and "B" encoded words (implemented by the Mime module)
*/

/** @mainpage Mime Module

    The %Mime module provides definitions and functions related to MIME processing.  MIME concepts are used in HTTP and SMTP communications, among others.

    To use this module, use \c "%requires Mime" in your code.  See the SmtpClient and the HttpServer modules for examples of %Qore code using this module.
    
    All the public symbols in the module are defined in the Mime namespace

    The main definitions and functions are:
    - @ref MimeTypeDefinitions "MimeTypeDefinitions": constant for common MIME types
    - @ref Mime::MimeTypes "MimeTypes": a map of common file name extensions to the default MIME type
    - @ref MimeEncodingFunctions "MimeEncodingFunctions": functions for encoding MIME data
 */

#! public Mime namespace defines constants and functions relevant to MIME
public namespace Mime {
    /** @defgroup MimeTypeDefinitions MIME Type Definitions
	These are constants for common MIME types
     */
    #@{
    #! MIME type for unknown file types
    public const MimeTypeUnknown = "application/octet-stream";

    #! MIME type for text
    public const MimeTypeText = "text/plain";

    #! MIME type for HTML
    public const MimeTypeHtml = "text/html";

    #! MIME type for csv files (http://tools.ietf.org/html/rfc4180)
    public const MimeTypeCsv = "text/csv";

    #! MIME type for jpeg images
    public const MimeTypeJpeg = "image/jpeg";

    #! MIME type for png images
    public const MimeTypePng = "image/png";

    #! Mime type for SOAP XML messages (XML MIME type reference: http://tools.ietf.org/html/rfc3023)
    public const MimeTypeSoapXml = "application/soap+xml";

    #! Mime type for yaml data files
    public const MimeTypeYaml = "text/x-yaml";

    #! Mime type for plain (human-readable) xml files
    public const MimeTypeXml = "text/xml";

    #! Mime type for more complicated (not human-readable) xml files
    public const MimeTypeXmlApp = "application/xml";

    #! Mime type for JSON-RPC
    public const MimeTypeJsonRpc = "application/json";

    #! Mime type for XML-RPC
    public const MimeTypeXmlRpc = MimeTypeXml;

    #! Mime type for YAML-RPC
    public const MimeTypeYamlRpc = "application/x-yaml";

    #! A map of default mime types per file extension; the hash keys are file extensions in lower-case without the dot (ex: \c "txt")
    public const MimeTypes = (
	"7z": "application/x-7z-compressed",
	"ai": "application/postscript",
	"aif": "audio/x-aiff",
	"aifc": "audio/x-aiff",
	"aiff": "audio/x-aiff",
	"asc": MimeTypeText,
	"atom": "application/atom+xml",
	"au": "audio/basic",
	"avi": "video/x-msvideo",
	"bcpio": "application/x-bcpio",
	"bin": MimeTypeUnknown,
	"bmp": "image/bmp",
	"bz2": "application/x-bzip",
	"cc": MimeTypeText,
	"cdf": "application/x-netcdf",
	"cgm": "image/cgm",
	"class": MimeTypeUnknown,
	"cpio": "application/x-cpio",
	"cpp": MimeTypeText,
	"cpt": "application/mac-compactpro",
	"csh": "application/x-csh",
	"css": "text/css",
	"csv": MimeTypeCsv,
	"dcr": "application/x-director",
	"dif": "video/x-dv",
	"dir": "application/x-director",
	"djv": "image/vnd.djvu",
	"djvu": "image/vnd.djvu",
	"dll": MimeTypeUnknown,
	"dmg": MimeTypeUnknown,
	"dms": MimeTypeUnknown,
	"doc": "application/msword",
	"dtd": "application/xml-dtd",
	"dv": "video/x-dv",
	"dvi": "application/x-dvi",
	"dxr": "application/x-director",
	"eps": "application/postscript",
	"etx": "text/x-setext",
	"exe": MimeTypeUnknown,
	"ez": "application/andrew-inset",
	"gif": "image/gif",
	"gram": "application/srgs",
	"grxml": "application/srgs+xml",
	"gtar": "application/x-gtar",
	"gz": "application/x-gzip",
	"h": MimeTypeText,
	"hdf": "application/x-hdf",
	"hh": MimeTypeText,
	"hpp": MimeTypeText,
	"hqx": "application/mac-binhex40",
	"htm": MimeTypeHtml,
	"html": MimeTypeHtml,
	"ice": "x-conference/x-cooltalk",
	"ico": "image/x-icon",
	"ics": "text/calendar",
	"ief": "image/ief",
	"ifb": "text/calendar",
	"iges": "model/iges",
	"igs": "model/iges",
	"jar": "application/java-archive",
	"java": MimeTypeText,
	"jnlp": "application/x-java-jnlp-file",
	"jp2": "image/jp2",
	"jpe": MimeTypeJpeg,
	"jpeg": MimeTypeJpeg,
	"jpg": MimeTypeJpeg,
	"js": "application/x-javascript",
	"kar": "audio/midi",
	"latex": "application/x-latex",
	"lha": MimeTypeUnknown,
	"lzh": MimeTypeUnknown,
	"m3u": "audio/x-mpegurl",
	"m4a": "audio/mp4a-latm",
	"m4b": "audio/mp4a-latm",
	"m4p": "audio/mp4a-latm",
	"m4u": "video/vnd.mpegurl",
	"m4v": "video/x-m4v",
	"mac": "image/x-macpaint",
	"man": "application/x-troff-man",
	"mathml": "application/mathml+xml",
	"me": "application/x-troff-me",
	"mesh": "model/mesh",
	"mid": "audio/midi",
	"midi": "audio/midi",
	"mif": "application/vnd.mif",
	"mov": "video/quicktime",
	"movie": "video/x-sgi-movie",
	"mp2": "audio/mpeg",
	"mp3": "audio/mpeg",
	"mp4": "video/mp4",
	"mpe": "video/mpeg",
	"mpeg": "video/mpeg",
	"mpg": "video/mpeg",
	"mpga": "audio/mpeg",
	"ms": "application/x-troff-ms",
	"msh": "model/mesh",
	"mxu": "video/vnd.mpegurl",
	"nc": "application/x-netcdf",
	"oda": "application/oda",
	"ogg": "application/ogg",
	"pbm": "image/x-portable-bitmap",
	"pct": "image/pict",
	"pdb": "chemical/x-pdb",
	"pdf": "application/pdf",
	"pgm": "image/x-portable-graymap",
	"pgn": "application/x-chess-pgn",
	"pic": "image/pict",
	"pict": "image/pict",
	"png": MimeTypePng,
	"pnm": "image/x-portable-anymap",
	"pnt": "image/x-macpaint",
	"pntg": "image/x-macpaint",
	"ppm": "image/x-portable-pixmap",
	"ppt": "application/vnd.ms-powerpoint",
	"ps": "application/postscript",
	"qt": "video/quicktime",
	"qti": "image/x-quicktime",
	"qtif": "image/x-quicktime",
	"ra": "audio/x-pn-realaudio",
	"ram": "audio/x-pn-realaudio",
	"ras": "image/x-cmu-raster",
	"rdf": "application/rdf+xml",
	"rgb": "image/x-rgb",
	"rm": "application/vnd.rn-realmedia",
	"roff": "application/x-troff",
	"rtf": "text/rtf",
	"rtx": "text/richtext",
	"sgm": "text/sgml",
	"sgml": "text/sgml",
	"sh": "application/x-sh",
	"shar": "application/x-shar",
	"silo": "model/mesh",
	"sit": "application/x-stuffit",
	"skd": "application/x-koan",
	"skm": "application/x-koan",
	"skp": "application/x-koan",
	"skt": "application/x-koan",
	"smi": "application/smil",
	"smil": "application/smil",
	"snd": "audio/basic",
	"so": MimeTypeUnknown,
	"spl": "application/x-futuresplash",
	"src": "application/x-wais-source",
	"sv4cpio": "application/x-sv4cpio",
	"sv4crc": "application/x-sv4crc",
	"svg": "image/svg+xml",
	"swf": "application/x-shockwave-flash",
	"t": "application/x-troff",
	"tar": "application/x-tar",
	"tar.bz2": "application/x-bzip-compressed-tar",
	"tar.gz": "application/x-tar-gz",	
	"tbz": "application/x-bzip-compressed-tar",
	"tcl": "application/x-tcl",
	"tex": "application/x-tex",
	"texi": "application/x-texinfo",
	"texinfo": "application/x-texinfo",
	"text": MimeTypeText,
	"tgz": "application/x-tar-gz",	
	"tif": "image/tiff",
	"tiff": "image/tiff",
	"tr": "application/x-troff",
	"tsv": "text/tab-separated-values",
	"txt": MimeTypeText,
	"ustar": "application/x-ustar",
	"vcd": "application/x-cdlink",
	"vrml": "model/vrml",
	"vxml": "application/voicexml+xml",
	"wav": "audio/x-wav",
	"wbmp": "image/vnd.wap.wbmp",
	"wbmxl": "application/vnd.wap.wbxml",
	"wml": "text/vnd.wap.wml",
	"wmlc": "application/vnd.wap.wmlc",
	"wmls": "text/vnd.wap.wmlscript",
	"wmlsc": "application/vnd.wap.wmlscriptc",
	"wrl": "model/vrml",
	"xbm": "image/x-xbitmap",
	"xht": "application/xhtml+xml",
	"xhtml": "application/xhtml+xml",
	"xls": "application/vnd.ms-excel",
	"xml": MimeTypeXml,
	"xpm": "image/x-xpixmap",
	"xsl": "application/xml",
	"xslt": "application/xslt+xml",
	"xul": "application/vnd.mozilla.xul+xml",
	"xwd": "image/x-xwindowdump",
	"xyz": "chemical/x-xyz",
	"yaml": MimeTypeYaml,
	"zip": "application/zip",
	);
    #@}

    #! maximum line length for quoted-printable encoding
    /** <a href="http://tools.ietf.org/html/rfc2045#section-6.7>RFC 2045 section 6.7</a>
     */
    public const MimeQuotedPrintableLineLen = 76;

    /** @defgroup MimeEncodingFunctions MIME Encoding Functions
     */
    #@{    
    #! returns a string in "BASE64" encoding according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>
    /** @param str the string to encode
	@param len the maximum line length

	@note this function is basically just a wrapper for the standard %Qore function makeBase64String()
     */
    public string sub mime_encode_base64(data $str, int $len = 76) {
	return makeBase64String($str, $len);
    }

    #! returns a string in "quoted-printable" (or "QP") encoding according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>
    /** @param str the string to encode
	@param hdr use rules for a MIME header (<a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>)
     */
    public string sub mime_encode_quoted_printable(string $str, bool $hdr = False) {
	my string $rv;
	my int $lp = 0;

	for (my int $i = 0; $i < $str.size(); ++$i) {
	    my int $c = get_byte($str, $i);

	    # check if we're processing a UNIX '\n' line break
	    if ($c == 10) {
		# we MUST encode this as a CRLF sequence (we assume it's a UNIX line break)
		$rv += "\r\n";
		$lp = 0;
		continue;
	    }

	    # check if we're processing a CRLF line break
	    if ($c == 13 && get_byte($str, $i + 1) == 10) {
		$rv += "\r\n";
		$lp = 0;
		++$i;
		continue;
	    }

	    # new string to append
	    my string $nc;
	    # if we are enconding a header and we have a space, transform to "_"
	    if ($hdr && $c == 32)
		$nc = "_";
	    # check if the high bit is set or if it's an ASCII control character or '=', or we are enconding a header and the char is not '?' and '_', encode
	    else if (!($c & 0x80) || $c < 32 || $c == 61 || ($hdr && ($c == 63 || $c == 95)))
		$nc = chr($c);
	    else
		$nc = sprintf("=%02x", $c).upr();

	    # we MUST break up lines longer than 76 characters (the line length includes the '=' but not the CRLF
	    if (($nc.size() + $lp) >= (MimeQuotedPrintableLineLen - 1)) {
		# insert soft line break
		$rv += "=\r\n";
		$lp = 0;
	    }

	    $rv += $nc;
	    $lp += $nc.size();
	}
	return $rv;
    }

    #! returns a string in "B" ("BASE64") encoding for MIME header string words according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>
    public string sub mime_encode_header_word_b(string $str) {
	return makeBase64String(sprintf("=?%s?B?%s?=", get_encoding($str), $str, 76));
    }

    #! returns a string in "Q" ("quoted-printable") encoding for MIME header string words according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>
    public string sub mime_encode_header_word_q(string $str) {
	return mime_encode_quoted_printable(sprintf("=?%s?Q?%s?=", get_encoding($str), $str), True);
    }
    #@}
}
