# -*- mode: qore; indent-tabs-mode: nil -*-
# @file TextUtil.qm Qore user module for working with different kind of data

/*  TextUtil.qm Copyright 2012 - 2015 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.12
%requires Util
%require-types
%enable-all-warnings
%new-style

module TextUtil {
    version = "1.0";
    desc    = "abstract module for iterating various kinds of text data";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage TextUtil Module

    @tableofcontents

    @section textutilintro Introduction to the TextUtil Module

    The %TextUtil module provides functionality for parsing different kinds of files.

    To use this module, use \c "%requires TextUtil" in your code.

    All the public symbols in the module are defined in the TextUtil namespace

    Currently the module provides the following classes:
    - @ref TextUtil::AbstractTextIterator "AbstractTextIterator": iterator class allowing different kind of data to be processed line by line on a record basis
    - @ref TextUtil::AbstractTextWriter "AbstractTextWriter": iterator class allowing writing different kind of data

    @section textutilglobaloptions TextUtil Global Options

    Valid options are:
    - \c "timezone": a string giving a time zone region name or an integer offset in seconds east of UTC
    - \c "ignore-empty": if @ref Qore::True "True" then ignore empty lines
    - \c "encoding": the output encoding for strings parsed or returned
    - \c "number_format": the default number format for \c "float" or \c "number" fields
    - \c "date_format": the default date format for \c "date" fields

    @section textutil_relnotes Release Notes

    @subsection textutil_v1_0 Version 1.0
    - initial version of module
*/

#! the TextUtil namespace contains all the definitions in the TextUtil module
public namespace TextUtil {
    #! Unix end of line character sequence (for new OS X too)
    public const EOL_UNIX = "\n";
    #! MS DOS/Windows end of line character sequence
    public const EOL_WIN = "\r\n";
    #! Old (pre-OSX) Macintosh end of line character sequence
    public const EOL_MACINTOSH = "\r";

    # helper list of end of line values
    const EOLS = (EOL_UNIX, EOL_WIN, EOL_MACINTOSH);
}

#! structured line iterator for abstract data allowing efficient "pipelined" processing
public class TextUtil::AbstractTextIterator {
    private {
        *hash m_opts; # encoding, eol, ignore-empty, timezone
    }

    #! creates the AbstractTextIterator object
    /**
        @param g global options; see @ref textutilglobaloptions for valid values
    */
    constructor(hash g) {
        m_opts = checkOptions(g);
    }

    #! creates the AbstractTextIterator object with default options
    constructor() {
    }

    #abstract *string getValue();

    private *hash checkOptions(*hash opts) {
        string errname = 'RECORD-ITERATOR-ERROR';

        foreach my hash i in (opts.pairIterator()) {
            switch (i.key) {
                case "eol": {
                    if (i.value.typeCode() != NT_STRING) {
                        throw errname, sprintf("expecting a string value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    if (!inlist(i.value, EOLS)) {
                        throw errname, sprintf("expecting a known end of line value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    opts.eol = i.value;
                    break;
                }
                case "timezone": {
                    opts.timezone = new TimeZone(opts.timezone);
                    break;
                }
                case "ignore-empty": {
                    opts."ignore-empty" = boolean(opts."ignore-empty");
                    break;
                }
                case "encoding": {
                    # TODO: check encoding name here
                    break;
                }
                case "number_format": {
                    # TODO: check here
                    break;
                }
                case "date_format": {
                    # TODO: check here
                    break;
                }
            }
        }

        return opts;
    }

    any transform(any value, hash type) {
        switch (type.type) {
            case "int": {
                return int(value);
            }

            case NOTHING:
            case "string": {
                if (value.typeCode() == NT_STRING)
                    return m_opts.encoding ? convert_encoding(value, m_opts.encoding) : value;
                return string(value);
            }

            case "float": {
                if (value.typeCode() == NT_STRING) {
                    my *string nf = type.format ? type.format : m_opts.number_format;
                    return nf ? parse_float(value, nf) : float(value);
                }
                return float(value);
            }
            case "number": {
                if (value.typeCode() == NT_STRING) {
                    my *string nf = type.format ? type.format : m_opts.number_format;
                    return nf ? parse_number(value, nf) : number(value);
                }
                return number(value);
            }
            case "date": {
                if (value.empty()) {
                    return 1970-01-01;
                }
                my TimeZone tz;
                if (type.timezone)
                    tz = new TimeZone(type.timezone);
                else if (m_opts.timezone)
                    tz = m_opts.timezone;

                my int t = value.typeCode();
                if (t == NT_STRING) {
                    my *string fmt = type.format;
                    if (!fmt)
                        fmt = m_opts.date_format;

                    return tz ? tz.date(value, fmt) : date(value, fmt);
                }
                if (t != NT_DATE && tz)
                    value = date(value);
                return tz ? tz.date(value) : date(value);
            }
            default: {
              throw "FIELD-TYPE-ERROR", sprintf("output type %y not supported", type.type);
            }
        }
    }
}

#! structured writer
public class TextUtil::AbstractTextWriter {
    private {
        hash m_opts; # eol
    }

    #! creates the AbstractTextWriter object
    /**
    @param g global options
    */
    constructor(*hash g) {
        m_opts = checkOptions(g);
    }

#    abstract write();

    private *hash checkOptions(*hash opts) {
        string errname = 'RECORD-WRITER-ERROR';

        foreach my hash i in (opts.pairIterator()) {
            switch (i.key) {
                case "eol": {
                    if (i.value.typeCode() != NT_STRING) {
                        throw errname, sprintf("expecting a string value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    if (!inlist(i.value, EOLS)) {
                        throw errname, sprintf("expecting a known end of line value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    opts.eol = i.value;
                    break;
                }
            }
        }

        return opts;
    }
}
