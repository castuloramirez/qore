/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashKeyReverseIterator.qpp HashKeyReverseIterator class definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QoreHashIterator.h>

//! This class an iterator class for hashes
/** Call HashKeyReverseIterator::next() to iterate through the hash in reverse order; do not use the iterator if HashKeyReverseIterator::next() returns @ref False.
    A hash can be iterated in reverse order by calling HashKeyReverseIterator::prev() instead of HashKeyReverseIterator::next()

    @note
    - In general, the HashKeyReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - HashKeyReverseIterator is functionally equivalent to HashKeyIterator, but the effect of HashKeyReverseIterator::next() and HashKeyReverseIterator::prev()
      are the opposite of HashKeyIterator::next() and HashKeyIterator::prev(); that is HashKeyReverseIterator::next() will
      iterate through the hash in reverse order, while HashKeyReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for HashKeyReverseIterator::first() and HashKeyReverseIterator::last()
      are swapped in respect to HashKeyIterator::first() and HashKeyIterator::last().

    @see HashKeyIterator
 */
qclass HashKeyReverseIterator [arg=QoreHashReverseIterator* i; ns=Qore; vparent=HashReverseIterator];

//! Creates the hash iterator object
/** @param h the hash to iterate

    @par Example:
    @code
my HashKeyReverseIterator $hi($h);
    @endcode
 */
HashKeyReverseIterator::constructor(hash h) {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator(h));
}

//! Creates an empty iterator object
/** @par Example:
    @code
my *hash $h = get_hash_or_nothing();
my HashKeyReverseIterator $hi($h);
    @endcode
 */
HashKeyReverseIterator::constructor() {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator);
}

//! Creates a copy of the HashKeyReverseIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code
my HashKeyReverseIterator $ni = $i.copy();
    @endcode
 */
HashKeyReverseIterator::copy() {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator(*i));
}

//! returns the current key value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current key value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
my HashKeyReverseIterator $hi($hash);
while ($hi.next())
    printf("key: %s\n", $hi.getValue());
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
string HashKeyReverseIterator::getValue() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return 0;
   return i->getKey(xsink);
}
