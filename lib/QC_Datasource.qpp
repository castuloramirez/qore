/* -*- mode: c++; indent-tabs-mode: nil -*- */
/* @file QC_Datasource.qpp Datasource class definition

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.
  
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QC_Datasource.h>

static const char *DSC_ERR = "DATASOURCE-CONSTRUCTOR-ERROR";

/** @defgroup database_driver_constants Database Driver Constants
    These are contants that stand for database driver names known to Qore
*/
//@{ 
//! for the \c "oracle" driver
const DSOracle = "oracle";

//! for the \c "mysql" driver
const DSMySQL = "mysql";

//! for the \c "sybase" driver
const DSSybase = "sybase";

//! for the \c "pgsql" driver
const DSPGSQL = "pgsql";

//! for the \c "freetds" driver
const DSFreeTDS = "freetds";

//! another constant for the \c "freetds" driver
const DSMSSQL = "freetds";

//! for the \c "sqlite3" driver
const DSSQLite3 = "sqlite3";

//! for the \c "db2" driver
const DSDB2 = "db2";

// the following have no drivers yet
//const DSInformix = "informix";
//const DSTimesTen = "timesten";
//@}

/** @defgroup dbi_capabilities DBI Capability Constants
    These are contants that define the meaning of bits in the capability mask such as returned by Datasource::getCapabilities()
*/
//@{ 
//! Indicates that the DBI driver supports time zones in times
const DBI_CAP_TIME_ZONE_SUPPORT = DBI_CAP_TIME_ZONE_SUPPORT;

//! Indicates that the DBI driver supports proper character encoding conversions
const DBI_CAP_CHARSET_SUPPORT = DBI_CAP_CHARSET_SUPPORT;

//! Indicates that the DBI driver supports transaction management
const DBI_CAP_TRANSACTION_MANAGEMENT = DBI_CAP_TRANSACTION_MANAGEMENT;

//! Indicates that the DBI driver supports stored procedure execution
const DBI_CAP_STORED_PROCEDURES = DBI_CAP_STORED_PROCEDURES;

//! Indicates that the DBI driver supports LOB columns (BLOBs and CLOBs, for example)
const DBI_CAP_LOB_SUPPORT = DBI_CAP_LOB_SUPPORT;

//! Indicates that the DBI driver supports directly binding qore values into queries using the <tt>%v</tt> placeholder in the query string
const DBI_CAP_BIND_BY_VALUE = DBI_CAP_BIND_BY_VALUE;

//! Indicates that the DBI driver supports binding placeholder buffers when executing %SQL to retrieve data from queries and procedures, etc
const DBI_CAP_BIND_BY_PLACEHOLDER = DBI_CAP_BIND_BY_PLACEHOLDER;

//! Indicates that the DBI driver supports the Datasource::execRaw() and DatasourcePool::execRaw() methods
const DBI_CAP_HAS_EXECRAW = DBI_CAP_HAS_EXECRAW;
//@}

//! This class provides the %Qore interface to databases
/** This class provides the main direct interface to DBI drivers (along with the SQLStatement and DatasourcePool classes).

    The %Datasource class will attempt to load any DBI driver that is not currently loaded in the constructor. For connection pooling support, see the DatasourcePool class.

    %Datasource objects will implicitly call Datasource::open() if no connection has yet been established and a method is called requiring a connection to the database server. Therefore any method that requires communication with the database server can also throw any exception that the open method can throw.

    Most %Qore DBI drivers allow "select" queries to be executed through the Datasource::exec() method, and allow %SQL commands (procedure calls, etc) to be executed through the Datasource::select() method, and some DBI drivers do not (depends on the underlying DB API). At any rate, the transaction lock is set when auto-commit is disabled and when the Datasource::exec() or Datasource::beginTransaction() methods are executed as documented above. Therefore executing a transaction relevant command through the Datasource::select() method while auto-commit mode is disabled and a transaction has not yet started will not result in the transaction lock being allocated to the current thread and therefore could cause transaction errors when sharing the %Datasource object between multiple threads.

    Only databases with an existing %Qore DBI driver can be accessed through the %Datasource class.

    All %Qore DBI drivers set new connections to use transaction isolation level \c "read committed".

    The %Datasource class provides high-level, per-connection locking on requests at a level above the DBI drivers to ensure that the communication between clients and servers is properly serialized.

    %Datasource objects also have a default character encoding; all requests to the server will be made in this encoding, and all responses will be returned in the given encoding.  If no encoding is specifically given to the %Datasource object, the %Datasource object will use the @ref default_encoding.

    @anchor sql_binding
    <b>%Datasource Binding By Value and By Placeholder</b>

    All %Datasource methods accepting %SQL strings to execute understand a special syntax used in the query string to bind %Qore data by value and to specify placeholders for output variables (for example, when executing a stored procedure or database function). Placeholder binding is DBI driver specific, but binding by value is supported with the same syntax in all drivers. Additionally, the \c %d numeric specifier is supported equally in all %Qore DBI drivers.

    <b>%Datasource Format Specifiers</b>
    |!Format Specification|!Description
    |\c %d|If any value other than @ref nothing or @ref null is given, then the value is converted to an integer and this value is substituted in the string at this position; if the value is @ref nothing or @ref null, then a literal \c "null" is substituted instead.
    |\c %s|The argument is converted to a string and the string is inserted literally without any conversion or escape sequences in the string; this is useful for table or schema prefixes, etc
    |\c %v|The argument is bound by value according to the DBI driver's implementation.

    To bind %Qore data values directly in a binary format in an %SQL command, use <tt>%v</tt> in the command string, and include the value as an argument after the string. Binding by value allows the DBI driver to take care of formatting the data properly for use in the query with the database server. When binding by value, strings do not need to be quoted, date/time values do not need special formatting, binary objects (with BLOB columns, for example) can be used directly in queries, etc.

    Here is an example:
    @code
my int $rows = $db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", $string, now(), $binary, 100);
    @endcode

    To insert a numeric value or a literal \c "null" in a query, use \c %d in the command string, and include the value as an argument after the string. If the value is @ref nothing or @ref null, a literal \c "null" will be written to the string; otherwise the argument is converted to a floating-point value or integer if necessary and written to the string. This is useful for working with \c DECIMAL (\c NUMERIC, \c NUMBER) types in a database-independent way; for example PostgreSQL servers do not do type conversions to \c DECIMAL types when a string, integer, or float is bound by value, therefore to ensure that integral decimal values can be used in a database-independent way (with \c "null" substitution when no value is bound), a valid approach is to use the \c %d code in the command string instead of \c %v.  However please note that \c %v is normally preferred to keep the statement cache a managable size, in the previous example using the int() or float() functions to convert string values before binding with \c %v may be better.

    For binding placeholders for output variables, write a unique name in the string and prefix it with a colon (ex: \c ":code"). In this case the method will return a hash of the output variables using the placeholder names as keys, but without the colon prefix. By default, a string type will be bound to the position. To bind other variable types to placeholder positions, include the type constant (see @ref sql_type_constants) as an argument after the command string. For BLOBs, use Binary, for CLOBs, use the string "clob" (constants will be provided in a future release). Not all DBI drivers require placeholder buffer specifications; see the documentation for the DBI driver in question for more information and examples regarding placeholder buffer specifications.

    @anchor transaction_lock
    <b>%Datasource Transaction Locks</b>

    %Datasource objects have an internal transaction lock which will be grabbed when the Datasource::exec(), Datasource::vexec() Datasource::execRaw(), or Datasource::beginTransaction() methods are executed and autocommit is not enabled. This enables a single datasource to be safely used for transaction management by several threads simultaneously. Note that an exception in a %Datasource method that would acquire the lock (such as the Datasource::exec() method) when it's not already held, will have the effect that the transaction lock is not acquired.

    Any thread attempting to do transaction-relevant actions on a %Datasource with auto-commit disabled while a transaction is in progress by another thread will block until the thread currently executing a transaction executes the Datasource::commit() or Datasource::rollback() methods (or the %Datasource is deleted, reset, or closed, in which case the lock is released and an exception is raised as well).

    There is a timeout associated with the transaction lock; if a thread waits for the transaction lock for more than the timeout period, then an exception will be raised in the waiting thread. The timeout value can be read and changed with the Datasource::getTransactionLockTimeout() and Datasource::setTransactionLockTimeout() methods, respectively. The default transaction lock timeout value is 120 seconds.

    Note that the SQLStatement class also grabs the transaction lock when executing if it is created using a %Datasource object in the constructor; for more information see the SQLStatement class.

    @note This class is not available with the @ref PO_NO_DATABASE parse option
 */
qclass Datasource [dom=DATABASE; arg=ManagedDatasource* ds; ns=Qore::SQL];

//! Creates the Datasource object; attempts to load a DBI driver if the driver is not already present in %Qore
/** @param driver The name of the DBI driver for the Datasource. See @ref sql_constants for builtin constants for DBI drivers shipped with %Qore, or see the DBI driver documentation to use an add-on driver (this string should be the name of the driver to be loaded)
    @param user The user name for the new connection. Also see Datasource::setUserName() for a method that allows this parameter to be set after the constructor.
    @param pass The password for the new connection. Also see Datasource::setPassword() for a method that allows this parameter to be set after the constructor.
    @param db The database name for the new connection. Also see Datasource::setDBName() for a method that allows this parameter to be set after the constructor.
    @param encoding The database-specific name of the @ref character_encoding "character encoding" to use for the new connection. Also see Datasource::setDBCharset() for a method that allows this parameter to be set after the constructor. If no value is passed for this parameter, then the database character encoding corresponding to the @ref default_encoding "default character encoding" will be used instead.
    @param host The host name for the new connection. Also see Datasource::setHostName() for a method that allows this parameter to be set after the constructor.
    @param port The port number for the new connection. Also see Datasource::setPort() for a method that allows this parameter to be set after the constructor.

    @par Example:
    @code
my Datasource $db(DSPGSQL, "user", "pass", "database", "utf8", "localhost", 5432);
    @endcode

    @throw DATASOURCE-UNSUPPORTED-DATABASE DBI driver cannot be loaded
    @throw DATASOURCE-CONSTRUCTOR-ERROR port value is \<= 0
 */
Datasource::constructor(string driver, *string user, *string pass, *string db, *string encoding, *string host, softint port = 0) {
   DBIDriver *db_driver = DBI.find(driver->getBuffer(), xsink);
   if (!db_driver) {
      if (!*xsink)
	 xsink->raiseException("DATASOURCE-UNSUPPORTED-DATABASE", "DBI driver '%s' cannot be loaded", driver->getBuffer());
      return;
   }

   ReferenceHolder<ManagedDatasource> ds(new ManagedDatasource(db_driver), xsink);

   if (user && !user->empty())
      ds->setPendingUsername(user->getBuffer());

   if (pass && !pass->empty())
      ds->setPendingPassword(pass->getBuffer());

   if (db && !db->empty())
      ds->setPendingDBName(db->getBuffer());

   if (encoding && !encoding->empty())
      ds->setPendingDBEncoding(encoding->getBuffer());
   
   if (host && !host->empty())
      ds->setPendingHostName(host->getBuffer());
   
   if (port) {
      if (port < 0) {
	 xsink->raiseException(DSC_ERR, "port value must be zero (meaning use the default port) or positive (value given: %d)", port);
	 return;
      }
      ds->setPendingPort(port);
   }

   self->setPrivate(CID_DATASOURCE, ds.release());
}

//! Creates a Datasource object from a hash argument giving parameters for the constructor
/** @param opts a hash giving parameters for the new datasource with the following possible keys (the \c "type" key is mandatory, also usable with the output of the parseDatasource() function):
    - \c type: (@ref string_or_nothing_type "*string") The name of the database driver to use; this key is mandatory; if not present, an exception will be raised. See @ref sql_constants for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver (this string should be the name of the driver to be loaded)
    - \c user: (@ref string_or_nothing_type "*string") The user name for the new connection. Also see Datasource::setUserName() for a method that allows this parameter to be set after the constructor.
    - \c pass: (@ref string_or_nothing_type "*string") The password for the new connection. Also see Datasource::setPassword() for a method that allows this parameter to be set after the constructor.
    - \c db: (@ref string_or_nothing_type "*string") The database name for the new connection. Also see Datasource::setDBName() for a method that allows this parameter to be set after the constructor.
    - \c charset: (@ref string_or_nothing_type "*string") The database-specific name of the character encoding to use for the new connection. Also see Datasource::setDBCharset() for a method that allows this parameter to be set after the constructor. If no value is passed for this parameter, then the database character encoding corresponding to the default character encoding for the %Qore process will be used instead.
    - \c host: (@ref string_or_nothing_type "*string") The host name for the new connection. Also see Datasource::setHostName() for a method that allows this parameter to be set after the constructor.
    - \c port: (@ref softint_type "softint") The port number for the new connection. Also see Datasource::setPort() for a method that allows this parameter to be set after the constructor. If this key is present and is 0 then an exception will be raised.

    @par Example:
    @code
my Datasource $db(("type": DSPGSQL, "user": "username", "pass": "password", "db": "database", "charset": "utf8", "host": "localhost", "port": 5432);
    @endcode

    @throw DATASOURCE-UNSUPPORTED-DATABASE DBI driver cannot be loaded
    @throw DATASOURCE-CONSTRUCTOR-ERROR missing or invalid \c "driver" key, other key name not assigned to a string; port value is \<= 0
 */
Datasource::constructor(hash opts) {   
   const char *str = check_hash_key(opts, "type", DSC_ERR, xsink);
   if (*xsink) return;
   
   if (!str) {
      xsink->raiseException(DSC_ERR, "expecting a string value with the 'type' key giving the driver name");
      return;
   }
   
   DBIDriver *db_driver = DBI.find(str, xsink);
   if (!db_driver) {
      if (!*xsink)
         xsink->raiseException("DATASOURCE-UNSUPPORTED-DATABASE", "DBI driver '%s' cannot be loaded", str);
      return;
   }
   
   ReferenceHolder<ManagedDatasource> ds(new ManagedDatasource(db_driver), xsink);

   str = check_hash_key(opts, "user", DSC_ERR, xsink);
   if (*xsink) return;
   if (str) ds->setPendingUsername(str);

   str = check_hash_key(opts, "pass", DSC_ERR, xsink);
   if (*xsink) return;
   if (str) ds->setPendingPassword(str);

   str = check_hash_key(opts, "db", DSC_ERR, xsink);
   if (*xsink) return;
   if (str) ds->setPendingDBName(str);

   str = check_hash_key(opts, "charset", DSC_ERR, xsink);
   if (*xsink) return;
   if (str) ds->setPendingDBEncoding(str);

   str = check_hash_key(opts, "host", DSC_ERR, xsink);
   if (*xsink) return;
   if (str) ds->setPendingHostName(str);

   bool found;
   int port = (int)opts->getKeyAsBigInt("port", found);
   if (port) {
      if (port < 0) {
	 xsink->raiseException(DSC_ERR, "port value must be zero (meaning use the default port) or positive (value given: %d)", port);
	 return;
      }

      ds->setPendingPort(port);
   }

   self->setPrivate(CID_DATASOURCE, ds.release());
}

//! Closes the datasource if it's open (if any operations are in progress, will block until the operations complete) and destroys the object
/** 
    @par Example:
    @code
delete $db;
    @endcode

    @throw DATASOURCE-TRANSACTION-EXCEPTION The Datasource was destroyed while a transaction was still in progress; the transaction will be automatically rolled back
 */
Datasource::destructor() {
   ds->destructor(xsink);
   ds->deref(xsink);
}

//! Creates a new Datasource object with the same driver as the original and copies of all the connection parameters
/** 
    @par Example:
    @code
my Datasource $new_ds = $ds.copy();
    @endcode
 */
Datasource::copy() {
   self->setPrivate(CID_DATASOURCE, ds->copy());
}

//! Opens a connection to the datasouce, using the connection parameters already set; an exception is thrown if any errors occur
/** If the connection is already open, then no action is taken.

    @par Example:
    @code
$db.open();
    @endcode

    @note see the documentation for the DBI driver being used for possible exceptions

    @see Datasource::reset()
 */
nothing Datasource::open() {
   ds->open(xsink);
}

//! Closes the connection to the database; if any actions are in progress on the database, the close call will block until the actions complete. If any errors are encountered, an exception is raised
/** 
    @par Example:
    @code
$db.close();
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
*/
nothing Datasource::close() {
   ds->close(xsink);
}

//! Commits the current transaction and releases the @ref transaction_lock "transaction lock"
/** 
    @par Example:
    @code
$db.commit();
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
nothing Datasource::commit() {
   ds->commit(xsink);
}

//! Rolls the current transaction back and releases the @ref transaction_lock "transaction lock"
/** 
    @par Example:
    @code
$db.rollback();
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
nothing Datasource::rollback() {
   ds->rollback(xsink);
}

//! Turns autocommit on or off for this object
/** @param ac @ref True to turn on autocommit (a commit will be executed after every %SQL call to the server), @ref False to turn off autocommit (commits must be manually triggered)
    @par Example:
    @code
$db.setAutoCommit(False);
    @endcode
 */
nothing Datasource::setAutoCommit(bool ac = True) {
   ds->setAutoCommit(ac, xsink);
}

//! Returns the autocommit status for the object
/** @return the autocommit status for the object

    @par Example:
    @code
my bool $b = $db.getAutoCommit();
    @endcode
 */
bool Datasource::getAutoCommit() [flags=CONSTANT] {
   return ds->getAutoCommit();
}

//! Grabs the transaction lock (if autocommit is disabled) and executes an %SQL command on the server and returns either the integer row count (for example, for updates, inserts, and deletes) or the data retrieved (for example, if a stored procedure is executed that returns values).
/** @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code
my int $rows = $db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", $string, now(), $binary, 100);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
any Datasource::exec(string sql, ...) {
   ReferenceHolder<QoreListNode> argl((args->size() > 1 ? args->copyListFrom(1) : 0), xsink);
   return ds->exec(sql, *argl, xsink);
}

//! Grabs the transaction lock (if autocommit is disabled) and executes %SQL code on the DB connection, taking a list for all bind arguments
/** Same as Datasource::exec() except takes an explicit list for bind arguments

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code
my int $rows = $db.vexec("insert into example_table value (%v, %v, %v)", $arg_list);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
any Datasource::vexec(string sql, *softlist vargs) {
   return ds->exec(sql, vargs, xsink);
}

//! Grabs the transaction lock (if autocommit is disabled) and executes an %SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values)
/** This method does not do any variable binding, so it's useful for example for DDL statements etc
    
    @par Warning:
    Using this method to execute pure dynamic %SQL many times with different %SQL strings (as opposed to using the same string and binding by value instead of dynamic %SQL) can affect application performance by prohibiting the efficient usage of the DB server's statement cache. See DB server documentation for variable binding and the %SQL statement cache for more information.

    @param sql The %SQL command to execute on the server; this string will not be subjected to any transformations for variable binding

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code
$db.exec("create table my_tab (id number, some_text varchar2(30))");
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
any Datasource::execRaw(string sql) {
   return ds->execRaw(sql, xsink);
}

//! Executes an %SQL select statement on the server and returns the result as a hash (column names) of lists (column values per row)
/** The return format of this method is suitable for use with @ref context "context statements", for easy iteration and processing of query results.

    Additionally, this format is a more efficient format than that returned by the Datasource::selectRows() method, because the column names are not repeated for each row returned. Therefore, for retrieving anything greater than small amounts of data, it is recommended to use this method instead of Datasource::selectRows().

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method returns a hash (the keys are the column names) of lists (the column data per row) when executed with an %SQL select statement, however some DBI drivers allow any %SQL to be executed through this method, in which case other data types can be returned (such as an integer for a row count or a hash for output parameters when executing a stored procedure)

    @par Example:
    @code
# bind a string and a date/time value by value in a query
$query = $db.select("select * from table where varchar_column = %v and timestamp_column > %v", $string, 2007-10-11T15:31:26.289);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
any Datasource::select(string sql, ...) {
   ReferenceHolder<QoreListNode> argl((args->size() > 1 ? args->copyListFrom(1) : 0), xsink);
   return ds->select(sql, *argl, xsink);
}

//! Executes an %SQL select statement on the server and returns the first row as a hash (the column values)
/** If more than one row is returned, then it is treated as an error and a \c DBI-SELECT-ROW-ERROR is returned (however the DBI driver should raise its own exception here to avoid retrieving more than one row from the server). For a similar method taking a list for all bind arguments, see Datasource::vselectRow().

    This method also accepts all bind parameters (<tt>%d</tt>, <tt>%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method normally returns a hash (the keys are the column names) of row data or @ref nothing if no row is found for the query when executed with an %SQL select statement, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code
my *hash $h = $db.selectRow("select * from example_table where id = 1");
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock
    @throw DBI-SELECT-ROW-ERROR more than 1 row retrieved from the server

    @note see the documentation for the DBI driver being used for additional possible exceptions    
 */
any Datasource::selectRow(string sql, ...) {
   ReferenceHolder<QoreListNode> argl((args->size() > 1 ? args->copyListFrom(1) : 0), xsink);
   return ds->selectRow(sql, *argl, xsink);
}

//! Executes an %SQL select statement on the server and returns the result as a list (rows) of hashes (the column values)
/** The return format of this method is not as memory efficient as that returned by the Datasource::select() method, therefore for larger amounts of data, it is recommended to use Datasource::select().

   This method also accepts all bind parameters (<tt>%d</tt>, <tt>%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a list (rows) of hash (where the keys are the column names of each row) or @ref nothing if no rows are found for the query, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code
my *list $list = $db.selectRows("select * from example_table");
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    

    @see Datasoure::select()
 */
any Datasource::selectRows(string sql, ...) {
   ReferenceHolder<QoreListNode> argl((args->size() > 1 ? args->copyListFrom(1) : 0), xsink);
   return ds->selectRows(sql, *argl, xsink);
}

//! Executes a select statement on the server and returns the results in a hash (column names) of lists (column values per row), taking a list for all bind arguments
/** This method also accepts all bind parameters (<tt>%d</tt>, <tt>%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a hash (the keys are the column names) of list (each hash key's value is a list giving the row data), however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code
my *hash $query = $db.vselect("select * from example_table where id = %v and name = %v", $arg_list);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    

    @see Datasoure::select()
 */
any Datasource::vselect(string sql, *softlist vargs) {
   return ds->select(sql, vargs, xsink);
}

//! Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments
/** This method is the same as the Datasource::selectRow() method, except this method takes a single argument after the %SQL command giving the list of bind value parameters

    This method also accepts all bind parameters (<tt>%d</tt>, <tt>%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method normally returns a hash (the keys are the column names) of row data or @ref nothing if no row is found for the query when executed with an %SQL select statement, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code
my *hash $h = $db.vselectRow("select * from example_table where id = %v and type = %v", $arg_list);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    

    @see Datasoure::selectRow()
 */
any Datasource::vselectRow(string sql, *softlist vargs) {
   return ds->selectRow(sql, vargs, xsink);
}

//! Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments
/** Same as the Datasource::selectRows() method, except this method takes a single argument after the %SQL command giving the list of bind value parameters.

    The return format of this method is not as memory efficient as that returned by the Datasource::select() method, therefore for larger amounts of data, it is recommended to use Datasource::select().

   This method also accepts all bind parameters (<tt>%d</tt>, <tt>%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    This method does not retain the transaction lock if it was not already acquired before this method is called, so to execute select statements that begin a transaction (such as \c "select for update"), execute Datasource::beginTransaction() first to ensure that the transaction lock is dedicated to the calling thread.

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a list (rows) of hash (where the keys are the column names of each row) or @ref nothing if no rows are found for the query, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code
my *list $list = $db.vselectRows("select * from example_table where id = %v and type = %v", $arg_list);
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    

    @see Datasoure::selectRows()
 */
any Datasource::vselectRows(string sql, *softlist vargs) {
   return ds->selectRows(sql, vargs, xsink);
}

//! Manually grabs the transaction lock
/** This method should be called when the Datasource object will be shared between more than 1 thread, and a transaction will be started with a Datasource::select() method or the like.

    This method does not make any communication with the server to start a transaction; it only allocates the transaction lock to the current thread in %Qore.

    It is an error to call this method when autocommit is enabled for the Datasource.

    @par Example:
    @code
$db.beginTransaction();
    @endcode

    @throw AUTOCOMMIT-ERROR Cannot start a transaction when autocommit is enabled
    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock
 */
nothing Datasource::beginTransaction() {
   ds->beginTransaction(xsink);
}

//! Closes and reopens the Datasource
/** 
    @par Example:
    @code
$db.reset();
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    
 */
nothing Datasource::reset() {
   ds->reset(xsink);
}

//! Returns an integer bitfield of DBI driver capabilities
/** @return an integer bitfield of DBI driver capabilities; see @ref dbi_capabilities for the meaning of each bit

    @par Example:
    @code
my int $caps = $db.getCapabilities();
if (!($caps & DBI_CAP_TRANSACTION_MANAGEMENT))
    throw "DATASOURCE-ERROR", sprintf("DBI driver %y does not support transaction management", $db.getDriverName());
    @endcode
 */
int Datasource::getCapabilities() [flags=CONSTANT] {
   return ds->getCapabilities();
}

//! Returns a list of strings giving the capabilities of the current DBI driver
/** @return a list of strings giving the capabilities of the current DBI driver

    @par Example:
    @code
printf("driver %y has the following capabilities:\n", $db.getDriverName());
foreach my string $cap in ($db.getCapabilityList())
    printf("- %s\n", $cap);
    @endcode
 */
list Datasource::getCapabilityList() [flags=CONSTANT] {
   return ds->getCapabilityList();
}

//! Sets the username parameter for the time a connection to the server is established
/** Invalid usernames will cause an exception to be thrown when the connection is opened

    @param user the username parameter for the time a connection to the server is established

    @par Example:
    @code
$db.setUserName($user);
    @endcode
 */
nothing Datasource::setUserName(string user) {
   ds->setPendingUsername(user->getBuffer());
}

//! Sets the password parameter for the time a connection to the server is established
/** Invalid passwords will cause an exception to be thrown when the connection is opened

    @param pass the password parameter for the time a connection to the server is established

    @par Example:
    @code
$db.setPassword($pass);
    @endcode
 */
nothing Datasource::setPassword(string pass) {
   ds->setPendingPassword(pass->getBuffer());
}

//! Sets the database name parameter for the time a connection to the server is established
/** Invalid database names will cause an exception to be thrown when the connection is opened

    @param db the database name parameter for the time a connection to the server is established

    @par Example:
    @code
$db.setDBName($db);
    @endcode
 */
nothing Datasource::setDBName(string db) {
   ds->setPendingDBName(db->getBuffer());
}

//! Sets the database-specific character encoding name for the next connection to the server
/** This is a method synonym for the Datasource::setDBEncoding() method, kept for backwards-compatibility.

    Invalid character encoding names will cause an exception to be thrown when the connection is opened.

    @param encoding the database-specific character encoding name for the next connection to the server

    @par Example:
    @code
$db.setDBCharset($encoding);
    @endcode
 */
nothing Datasource::setDBCharset(string encoding) {
   ds->setPendingDBEncoding(encoding->getBuffer());
}

//! Sets the database-specific character encoding name for the next connection to the server
/** Invalid character encoding names will cause an exception to be thrown when the connection is opened.

    @param encoding the database-specific character encoding name for the next connection to the server

    @par Example:
    @code
$db.setDBEncoding($encoding);
    @endcode
 */
nothing Datasource::setDBEncoding(string encoding) {
   ds->setPendingDBEncoding(encoding->getBuffer());
}

//! Sets the hostname to use for the next connection to the server
/** Invalid hostnames will cause an exception to be thrown when the connection is opened.

    @param host the hostname to use for the next connection to the server

    @par Example:
    @code
$db.setHostName($host);
    @endcode
 */
nothing Datasource::setHostName(string host) {
   ds->setPendingHostName(host->getBuffer());
}

//! Sets the port number to use for the connection
/** Invalid port numbers will cause an exception to be thrown when the connection is opened

    @param port the port number to use for the connection

    @par Example:
    @code
$db.setPort($port);
    @endcode
 */
nothing Datasource::setPort(softint port = 0) {
   ds->setPendingPort((int)port);
}

//! Returns the username parameter as a string or @ref nothing if none is set
/** @return the username parameter as a string or @ref nothing if none is set

    @par Example:
    @code
my *string $user = $db.getUserName();
    @endcode
 */
*string Datasource::getUserName() [flags=CONSTANT] {
   return ds->getPendingUsername();
}

//! Returns the password parameter as a string or @ref nothing if none is set
/** @return the password parameter as a string or @ref nothing if none is set

    @par Example:
    @code
my *string $pass = $db.getPassword();
    @endcode
 */
*string Datasource::getPassword() [flags=CONSTANT] {
   return ds->getPendingPassword();
}

//! Returns the database name parameter as a string or @ref nothing if none is set
/** @return the database name parameter as a string or @ref nothing if none is set

    @par Example:
    @code
my *string $db = $db.getDBName();
    @endcode
 */
*string Datasource::getDBName() [flags=CONSTANT] {
   return ds->getPendingDBName();
}

//! Retrieves the database-specific charset set encoding for the current connection
/** A method synonym for Datasource::getDBEncoding() kept for backwards-compatibility.

    @return the database-specific charset set encoding for the current connection

    @par Example:
    @code
my string $enc = $db.getDBCharset();
    @endcode
 */
string Datasource::getDBCharset() [flags=CONSTANT] {
   return ds->getPendingDBEncoding();
}

//! Retrieves the database-specific charset set encoding for the current connection
/** @return the database-specific charset set encoding for the current connection

    @par Example:
    @code
my string $enc = $db.getDBEncoding();
    @endcode

    @see Datasource::getOSEncoding();
 */
string Datasource::getDBEncoding() [flags=CONSTANT] {
   return ds->getPendingDBEncoding();
}

//! Returns the %Qore character encoding name for the current connection as a string or \c "(unknown)" if none is set
/** @return the %Qore character encoding name for the current connection as a string or \c "(unknown)" if none is set

    @par Example:
    @code
my string $enc = $db.getOSCharset();
    @endcode

    @see Datasource::getOSEncoding()
 */
string Datasource::getOSCharset() [flags=CONSTANT] {
   const QoreEncoding *enc = ds->getQoreEncoding();
   return new QoreStringNode(enc ? enc->getCode() : "(unknown)");
}

//! Returns the %Qore character encoding name for the current connection as a string or @ref nothing if none is set
/** @return the %Qore character encoding for the current connection as a string or @ref nothing if none is set

    @par Example:
    @code
my *string $enc = $db.getOSEncoding();
    @endcode
 */
*string Datasource::getOSEncoding() [flags=CONSTANT] {
   const QoreEncoding *enc = ds->getQoreEncoding();
   return enc ? new QoreStringNode(enc->getCode()) : 0;
}

//! Returns the hostname parameter as a string or @ref nothing if none is set
/** @return the hostname parameter as a string or @ref nothing if none is set

    @par Example:
    @code
my *string $host = $db.getHostName();
    @endcode
 */
*string Datasource::getHostName() [flags=CONSTANT] {
   return ds->getPendingHostName();
}

//! Gets the port number that will be used for the next connection to the server
/** Invalid port numbers will cause an exception to be thrown when the connection is opened

    @par Example:
    @code
my *int $port = $db.getPort();
    @endcode
 */
*int Datasource::getPort() [flags=CONSTANT] {
   int port = ds->getPort();
   return port ? new QoreBigIntNode(port) : 0;
}

//! Sets the transaction lock timeout value in milliseconds; set to 0 for no timeout
/** @param timeout_ms the transaction lock timeout value in milliseconds; set to 0 for no timeout.  Like all %Qore functions and methods taking timeout values, a @ref relative_dates "relative date/time value" may be passed instead of an integer to make the timeout units clear (ex: \c 2500ms for 2.5 seconds).

    @par Example:
    @code
$db.setTransactionLockTimeout(4s);
    @endcode
 */
nothing Datasource::setTransactionLockTimeout(timeout timeout_ms = 0) {
   ds->setTransactionLockTimeout((int)timeout_ms);
}

//! Retrieves the transaction lock timeout value as an integer in milliseconds
/** @return the transaction lock timeout value as an integer in milliseconds

    @par Example:
    @code
my int $to_ms = $db.getTransactionLockTimeout();
    @endcode
 */
int Datasource::getTransactionLockTimeout() [flags=CONSTANT] {
   return ds->getTransactionLockTimeout();
}

//! Returns the name of the driver used for the object
/** @return the name of the driver used for the object

    @par Example:
    @code
my string $driver = $db.getDriverName();
    @endcode
 */
string Datasource::getDriverName() [flags=CONSTANT] {
   return new QoreStringNode(ds->getDriver()->getName());
}

//! Returns the driver-specific server version data for the current connection
/** @return the driver-specific server version data for the current connection; see the DBI driver documentation for the return data type and format

    @par Example:
    @code
my any $ver = $db.getServerVersion();
    @endcode

    @throw TRANSACTION-LOCK-TIMEOUT Timeout trying to acquire the transaction lock

    @note see the documentation for the DBI driver being used for additional possible exceptions    
 */
any Datasource::getServerVersion() {
   return ds->getServerVersion(xsink);
}

//! Retrieves the driver-specific client library version information; this method may not be implemented for all drivers
/** @return the driver-specific client library version information; this method may not be implemented for all drivers; see the DBI driver documentation for the return data type and format

    @par Example:
    @code
my any $ver = $db.getClientVersion();
    @endcode

    @note see the documentation for the DBI driver being used for possible exceptions    
 */
any Datasource::getClientVersion() {
   return ds->getClientVersion(xsink);
}

//! Returns @ref True if a transaction is currently in progress, @ref False if not
/** @return @ref True if a transaction is currently in progress, @ref False if not

    @par Example:
    @code
my bool $b = $db.inTransaction();
    @endcode
 */
bool Datasource::inTransaction() [flags=CONSTANT] {
   return ds->isInTransaction();
}
