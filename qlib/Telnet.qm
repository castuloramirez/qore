# -*- mode: qore; indent-tabs-mode nil -*-
# @file Telnet.qm Telnet module definition

module Telnet {
       version = "1.0";
       desc = "allows connections to a Telnet server, to remotely execute commands and read their output";
       author = "unknown";
       url = "http://qore.org";
}

public namespace Telnet {
    # default telnet port
    public const TelnetPort = 23;

    # default connection timeout
    public const DefaultConnTimeout = 15s;

    # default poll timeout
    const DefaultTimeout = 100ms;

    # default terminal type
    const DefaultTerminalType = "xterm";

    # default terminal speed
    const DefaultTerminalSpeed = "38400,38400";

    # telnet protocol codes
    public const IAC  = 255;
    public const DONT = 254;
    public const DO   = 253;
    public const WONT = 252;
    public const WILL = 251;
    public const theNULL = 0;
    public const SE  = 240;  # Subnegotiation End
    public const NOP = 241;  # No Operation
    public const DM  = 242;  # Data Mark
    public const BRK = 243;  # Break
    public const IP  = 244;  # Interrupt process
    public const AO  = 245;  # Abort output
    public const AYT = 246;  # Are You There
    public const EC  = 247;  # Erase Character
    public const EL  = 248;  # Erase Line
    public const GA  = 249;  # Go Ahead
    public const SB =  250;  # Subnegotiation Begin

    # command name map
    public const CmdMap = (
	IAC : "IAC", 
        DONT : "DONT",
        DO : "DO",
        WONT : "WONT",
        WILL: "WILL",
        theNULL : "theNULL",
        SE : "SubnegotiationEnd",
        NOP : "NoOperation",
        DM: "DataMark",
        BRK : "Break",
        IP : "Interruptprocess",
        AO : "Abortoutput",
        AYT : "AreYouThere",
        EC : "EraseCharacter",
        EL : "EraseLine",
        GA : "GoAhead",
        SB : "SubnegotiationBegin",
	);
    
    public const SUPDUP_OPT = 21; # SUPDUP_OPT display protocol
    
    # telnet option codes
    public const TOPT_BIN = 0;
    public const TOPT_ECHO = 1;
    public const TOPT_RECN = 2;
    public const TOPT_SUPP = 3;
    public const TOPT_APRX = 4;
    public const TOPT_STAT = 5;
    public const TOPT_TIM = 6;
    public const TOPT_REM = 7;
    public const TOPT_OLW = 8;
    public const TOPT_OPS = 9;
    public const TOPT_OCRD = 10;
    public const TOPT_OHT = 11;
    public const TOPT_OHTD = 12;
    public const TOPT_OFD = 13;
    public const TOPT_OVT = 14;
    public const TOPT_OVTD = 15;
    public const TOPT_OLD = 16;
    public const TOPT_EXT = 17;
    public const TOPT_LOGO = 18;
    public const TOPT_BYTE = 19;
    public const TOPT_DATA = 20;
    public const TOPT_SUP = 21;
    public const TOPT_SUPO = 22;
    public const TOPT_SNDL = 23;
    public const TOPT_TERM = 24;
    public const TOPT_EOR = 25;
    public const TOPT_TACACS = 26;
    public const TOPT_OM = 27;
    public const TOPT_TLN = 28;
    public const TOPT_3270 = 29;
    public const TOPT_X3 = 30;
    public const TOPT_NAWS = 31;
    public const TOPT_TS = 32;
    public const TOPT_RFC = 33;
    public const TOPT_LINE = 34;
    public const TOPT_XDL = 35;
    public const TOPT_ENVIR = 36;
    public const TOPT_AUTH = 37;
    public const TOPT_ENVIR_NEW = 39;
    public const TOPT_TN3270 = 40;
    public const TOPT_X_AUTH = 41;
    public const TOPT_CHARSET = 42;
    public const TOPT_RSP = 43;
    public const TOPT_COMPORT = 44;
    public const TOPT_SLE = 45;
    public const TOPT_STARTTLS = 46;
    public const TOPT_KERMIT = 47;
    public const TOPT_SEND_URL = 48;
    public const TOPT_EXTOP = 255;

    # option map
    public const OptMap = (
	TOPT_BIN : "BinaryTransmission",
	TOPT_ECHO : "Echo|Is|Send",
        TOPT_RECN : "Reconnection",
        TOPT_SUPP : "SuppressGoAhead",
        TOPT_APRX : "ApproxMessageSizeNegotiation",
        TOPT_STAT : "Status",
        TOPT_TIM : "TimingMark",
        TOPT_REM : "RemoteControlledTransandEcho",
        TOPT_OLW : "OutputLineWidth",
        TOPT_OPS : "OutputPageSize",
        TOPT_OCRD : "OutputCarriage-ReturnDisposition",
        TOPT_OHT : "OutputHorizontalTabstops",
        TOPT_OHTD : "OutputHorizontalTabDisposition",
        TOPT_OFD : "OutputFormfeedDisposition",
        TOPT_OVT : "OutputVerticalTabstops",
        TOPT_OVTD : "OutputVerticalTabDisposition",
        TOPT_OLD : "OutputLinefeedDisposition",
        TOPT_EXT : "ExtendedASCII",
        TOPT_LOGO : "Logout",
        TOPT_BYTE : "ByteMacro",
        TOPT_DATA : "DataEntryTerminal",
        TOPT_SUP : "SUPDUP",
        TOPT_SUPO : "SUPDUPOutput",
        TOPT_SNDL : "SendLocation",
	TOPT_TERM : "TerminalType",
	TOPT_EOR : "EndofRecord",
        TOPT_TACACS : "TACACSUserIdent",
        TOPT_OM : "OutputMarking",
        TOPT_TLN : "TerminalLocationNumber",
        TOPT_3270 : "Telnet3270Regime",
        TOPT_X3 : "X.3PAD",
        TOPT_NAWS : "NegotiateAboutWindowSize",
        TOPT_TS : "TerminalSpeed",
        TOPT_RFC : "RemoteFlowControl",
        TOPT_LINE : "Linemode",
        TOPT_XDL : "XDisplayLocation",
        TOPT_ENVIR : "TelnetEnvironmentOption",
        TOPT_AUTH : "TelnetAuthenticationOption",
        TOPT_ENVIR_NEW : "TelnetNewEnvironmentOption",
        TOPT_TN3270 : "TN3270Enhancements",
        TOPT_X_AUTH : "TelnetXAUTH",
        TOPT_CHARSET : "TelnetCHARSET",
        TOPT_RSP : "TelnetRemoteSerialPort",
        TOPT_COMPORT : "TelnetComPortControl",
        TOPT_SLE : "TelnetSuppressLocalEcho",
        TOPT_STARTTLS : "TelnetStartTLS",
        TOPT_KERMIT : "TelnetKERMIT",
        TOPT_SEND_URL : "Send-URL",
        TOPT_EXTOP : "Extended-Options-List",
	);

    public class Telnet {
  	private {
	    # the connection string
	    string $.connect;

	    # the socket for all communication with the server
	    Socket $.conn();

	    # to manage contention on the Socket
	    Mutex $.m();
	    
	    bool $.terminalOpened = False; 

	    # login user
	    *string $.user;

	    # logging closures
	    *code $.log_info;
	    *code $.log_debug;

	    # hash of features the telnet server has asked for
	    hash $.fh;
	}

	#! no public members
	public {}

	#! creates the Telnet object
	/** @param host the hostname of the telnet server (use [hostname] to explicitly specify an ipv6 connection)
	    @param port the port number of the telnet server
	    @param log a closure for log messages
	    @param dbglog a closure for debugging/technical log messages
	 */
  	constructor(string $host, softint $port, *code $log, *code $dbgLog) {
	    if ($host.empty())
		throw "TELNET-CONSTRUCTOR-ERROR", "the host parameter may not be empty";

	    $.log_info = $log;
	    $.log_debug = $dbgLog;

	    $.connect = sprintf("%s:%d", $host, $port);
	    $.logDbg("server: %y", $.connect);
	}

	#! creates the Telnet object
	/** @param connect the hostname of the Telnet server or a hostname:port specification (use [hostname] or [address] for ipv6 connections)
	    @param log a closure for log messages
	    @param dbglog a closure for debugging/technical log messages
	 */
	constructor(string $connect, *code $log, *code $dbglog) {
	    $.log_info = $log;
	    $.log_debug = $dbglog;

	    # add default port if the connect string has no port number and:
	    # 1) is not a path (for a UNIX domain socket)
	    # 2) is not an ipv6 address enclosed in '[]' (ex '[2001:0db8:85a3:0000:0000:8a2e:0370:7334]')
	    if ($connect !~ /^\//) {
		my *softint $p = ($connect =~ x/:([0-9]+)$/)[0];
		if (!$p)
		    $connect += ":" + TelnetPort;
	    }

	    $.connect = $connect;
	    $.logDbg("server: %y", $.connect);
	}
  	
  	destructor() {
	    $.disconnect();
  	}
  	
	private log(string $msg) {
	    if ($.log_info.val())
		call_function($.log_info, "Telnet INFO: " + trim(vsprintf($msg, $argv)));
	}

	private logDbg(string $msg) {
	    if ($.log_debug.val())
		call_function($.log_debug, "Telnet DEBUG: " + trim(vsprintf($msg, $argv)));
	}

	#! connects to the Telnet server
  	connect(timeout $timeout = DefaultConnTimeout) {
	    my AutoLock $al($.m);
	    if ($.isConnected())
		$.disconnectIntern();
	    $.logDbg("connecting to %s (timeout %y)", $.connect, milliseconds($timeout));
	    $.conn.connect($.connect, $timeout);
	    my hash $h = $.conn.getSocketInfo();
	    $.log("connected to %s (%s)%s", $h.hostname, $h.address_desc, $h.port ? sprintf(" port %d", $h.port) : "");
  	}
  	
	bool isConnected() {
	    return $.conn.isOpen();
  	}

	setUser(*string $user) {
	    my AutoLock $al($.m);
	    $.user = $user;
	}

	*string getUser() {
	    return $.user;
	}

  	#! disconnects from the Telnet server
  	disconnect() {
	    my AutoLock $al($.m);
	    if ($.isConnected())
		$.disconnectIntern();
	}

  	private disconnectIntern() {
	    my hash $h = $.conn.getSocketInfo();
	    $.conn.close();
	    $.conn.shutdown();
	    $.log("disconnected from %s (%s)%s", $h.hostname, $h.address_desc, $h.port ? sprintf(" port %d", $h.port) : "");
  	}
  	
  	private checkConnIntern() {
	    if (!$.isConnected())
		throw "NOT-CONNECTED-EXCEPTION", "Cannot perform the operation without being connected to server!";
  	}
  	
  	private list strToByteList(string $str, bool $double = False, bool $enc = False) {
	    my list $result = ();
	    for (my int $x = 0; $x < $str.size(); ++$x) {
		my int $e = ord($str[$x]); 
		$result += $e;
		if ($double && $e == IAC)
		    $result += $e;
	    }
	    return $result;
  	}
  	
  	private string byteListToStr(list $arr) {
	    my string $result = "";
	    for (my int $x = 0; $x < elements $arr; $x++)
		$result += chr($arr[$x]);
	    return $result;
  	}
  	
  	sendData(softlist $arr) {
	    my AutoLock $al($.m);
	    $.checkConnIntern();
	    $.sendDataIntern($arr);
	}

  	private sendDataIntern(softlist $arr, bool $double_aic = False) {
	    foreach my any $val in ($arr) {
		switch ($val.typeCode()) {
		    case NT_STRING: { 
		        $.conn.sendBinary2($val);
		        break;
		    }
		    
		    case NT_INT: {
			$.conn.sendi1($val);
			if ($double_aic && $val == IAC)
			    $.conn.sendi1(IAC);
			break;
		    }

		    default: {
			throw "SEND-ERROR", sprintf("don't know how to send type %y value: %y", $val.type(), $val);
		    }
		}
	    }
  	}

  	private sendTextDataIntern(string $str) {	
	    $.conn.send($str);
	}

  	sendTextData(string $str) {
	    my AutoLock $al($.m);
	    $.checkConnIntern();
	    $.sendTextDataIntern($str);
  	}

  	string openDumbTerminal(string $username, string $password, bool $executeSetupCommands = False, bool $doubleEntries = False) {
	    my AutoLock $al($.m);
	    $.checkConnIntern();
	    
	    # perform initial handshaking
	    $.getAvailableDataIntern(); 		
	    
	    if ($executeSetupCommands) {
		$.logDbg("--> sending SGA flag and DONT ECHO to server");
		# set Suppress Go Ahead flag and do not echo the commands (do not echo password on terminal)
		$.sendDataIntern((IAC,DO,TOPT_SUPP, IAC,DONT,TOPT_ECHO));
	    }
	    
	    $.logDbg("--> sending USERNAME to server");
	    $.sendTextDataIntern($username + "\r\n");
	    my string $replyStr = $.getAvailableDataIntern();
	    
	    if ($doubleEntries) {
		$.logDbg("--> sending DOUBLED USERNAME to server");
		$.sendTextDataIntern($username + "\r\n");
		$replyStr = $.getAvailableDataIntern();
	    }
	    
	    $.logDbg("--> sending PASSWORD to server\n");
	    $.sendTextDataIntern($password + "\r\n");
	    $replyStr = $.getAvailableDataIntern();

	    if ($doubleEntries) {	    
		$.logDbg("--> sending DOUBLED PASSWORD to server\n");
		$.sendTextDataIntern($password + "\r\n");
		$replyStr = $.getAvailableDataIntern();
	    }
	    
	    $.terminalOpened = True;
	    return $replyStr; 
  	}
  	
  	string sendCommand(string $cmd, bool $supressEcho = False) {
	    my AutoLock $al($.m);
	    $.checkConnIntern();
	    if (!$.terminalOpened)
		throw "TERMINAL-NOT-OPENED", "Dumb terminal not opened, please call Telnet::openDumbTerminal() first";
	    
	    if ($supressEcho) {
		$.logDbg("requesting echo supress from server");
		$.sendDataIntern((IAC,DONT,TOPT_ECHO));
	    }

	    $.sendTextDataIntern($cmd + "\r\n");	    
	    return $.getAvailableDataIntern();
  	}

	#! returns all data available as a string (which could be an empty string if no data is available in the timeout period) or NOTHING if the connection was closed by the remote end
  	*string getAvailableData(timeout $t = DefaultTimeout) {
	    my AutoLock $al($.m);
	    return $.getAvailableDataIntern($t);
	}

  	private *string getAvailableDataIntern(timeout $t = DefaultTimeout) {
	    my string $rv = "";

	    while ($.conn.isDataAvailable($t)) {
		# only use the timeout on the first read, otherwise return immediately when data is not available
		if ($t)
		    $t = 0;

		my int $char;
		try {
		    $char = $.conn.recvu1(0);
		}
		catch (hash $ex) {
		    if ($ex.err == "SOCKET-CLOSED") {
			$.disconnectIntern();
			return;
		    }
		    rethrow;
		}
		
		if ($char == IAC)
		    $.processCmd(\$rv);
		else if (!$char || $char == SUPDUP_OPT) {
		    #$.logDbg("ignoring char: %d", $char);
		    # ignore?
		}
		else
		    $rv += chr($char);
	    }
	
	    #$.logDbg("rv: %y", $rv);
	    return $rv;
	}

	bool hasFeature(softstring $fc) {
	    return boolean($.fh.$fc);
	}

	windowSizeUpdated() {
	    my hash $wh = $.getWindowSize();
	    my AutoLock $al($.m);
	    $.updateWindowSizeIntern($wh);
	}

	private updateWindowSizeIntern(hash $wh) {
	    $.logDbg("SND: %s %s [%d,%d,%d,%d]", CmdMap{SB}, OptMap{TOPT_NAWS},($wh.columns & 0xff00),($wh.columns & 0xff),($wh.rows & 0xff00),($wh.rows & 0xff));
	    $.sendDataIntern((IAC,SB,TOPT_NAWS));
	    $.sendDataIntern((($wh.columns & 0xff00),($wh.columns & 0xff),($wh.rows & 0xff00),($wh.rows & 0xff)), True);
	    $.sendDataIntern((IAC, SE));
	}

	private processCmd(reference $rv) {
	    # read all data with no timeout; we assume that commands are pushed in their entirety
	    my int $cmd = $.conn.recvu1(0);
	    if ($cmd == IAC) {
		$rv += chr(IAC);
		return;
	    }

	    switch ($cmd) {
		case SB: {
		    $.logDbg("RCV: %s (%d) starting subnegotiation", CmdMap.$cmd, $cmd);
		    $.doSubNegotiation();
		    break;
		}

		case DO: {
		    my int $opt = $.conn.recvu1(0);
		    $.logDbg("RCV: %s %s (%s %d)", CmdMap.$cmd, OptMap.$opt, $cmd, $opt);

		    switch ($opt) {
			case TOPT_TS:
			case TOPT_XDL:
			case TOPT_TERM:
			case TOPT_ENVIR_NEW: 
			case TOPT_SUPP: {
			    # set feature to True
			    $.fh.$opt = True;
			    $.logDbg("SND: WILL %s (%d %d)", OptMap.$opt, WILL, $opt);
			    $.sendDataIntern((IAC,WILL,$opt));
			    break;
			}

			# RFC 1073: http://www.ietf.org/rfc/rfc1073.txt
			case TOPT_NAWS: {
			    $.logDbg("SND: WILL %s (%d %d)", OptMap.$opt, WILL, $opt);
			    # set feature to True
			    $.fh.$opt = True;
			    $.sendDataIntern((IAC,WILL,$opt));			    
			    $.updateWindowSizeIntern($.getWindowSize());
			    break;
			}

		        default: {
			    $.logDbg("SND: WONT %s (%d %d)", OptMap.$opt, WONT, $opt);
			    $.sendDataIntern((IAC,WONT,$opt));
			    $.logDbg("SND: DONT %s (%d %d)", OptMap.$opt, DONT, $opt);
			    $.sendDataIntern((IAC,DONT,$opt));
			    break;
			}
		    }
		    break;
		}

		case DONT: {
		    my int $opt = $.conn.recvu1(0);
		    $.logDbg("RCV: %s %s (%s %d)", CmdMap.$cmd, OptMap.$opt, $cmd, $opt);

		    if ($opt == TOPT_LINE) {
			$.logDbg("SND: WILL %s (%d %d)", OptMap.$opt, WILL, $opt);
			$.sendDataIntern((IAC,WILL,$opt));
		    }
		    else {
			$.logDbg("SND: WONT %s (%d %d)", OptMap.$opt, WONT, $opt);
			$.sendDataIntern((IAC,WONT,$opt));
		    }
		    break;
		}

		case WILL: {
		    my int $opt = $.conn.recvu1(0);
		    $.logDbg("RCV: %s %s (%s %d)", CmdMap.$cmd, OptMap.$opt, $cmd, $opt);

		    $.logDbg("SND: DO %s (%d %d)", OptMap.$opt, DO, $opt);
		    $.sendDataIntern((IAC,DO,$opt));
		    break;
		}

		case WONT: {
		    my int $opt = $.conn.recvu1(0);
		    $.logDbg("RCV: %s %s (%s %d)", CmdMap.$cmd, OptMap.$opt, $cmd, $opt);

		    $.logDbg("SND: DONT %s (%d %d)", OptMap.$opt, DONT, $opt);
		    $.sendDataIntern((IAC,DONT,$opt));
		    break;
		}

	        default: {
		    $.log("PROTOCOL ERROR: unknown AIC code received from server: %d (ignoring)", $cmd);
		    break;
		}
	    }
	}

	#! this method provides the value that will be given as the DISPLAY value in protocol negotiation
	/** override this method in a subclass to provide a different value
	  */
	private *string getDisplay() {
	    my *string $rv = $ENV.DISPLAY;
	    # do not use UNIX socket path
	    return exists $rv && $rv !~ /^\// ? $rv : gethostname() + ":0";
	}

	#! this method provides the value that will be given as the terminal type in protocol negotiation
	/** override this method in a subclass to provide a different value
	  */
	private *string getTerminalType() {
	    return $ENV.TERM.val() ? $ENV.TERM : DefaultTerminalType;
	}

	#! this method provides the value that will be given as the user's environment in protocol negotiation
	/** override this method in a subclass to provide a different value
	  */
	private hash getEnvironment() {
	    # by default we only return the DISPLAY and PRINTER env variables to the other side
	    return $ENV.(list("PRINTER")) + ("DISPLAY": $.getDisplay());
	}

	#! this method provides the value that will be given as the terminal speed in protocol negotiation
	/** override this method in a subclass to provide a different value
	  */
	private string getTerminalSpeed() {
	    return DefaultTerminalSpeed;
	}

	#! this method provides the value that will be given as the terminal window size in protocol negotiation
	/** override this method in a subclass to provide a different value

	    @return a hash with the following keys: 
	    - \c rows: the number of rows in the display
	    - \c columns: the number of columns in the display
	  */
	private hash getWindowSize() {
	    return TermIOS::getWindowSize();
	}

	private doSubNegotiation() {
	    my bool $gotiac = False;

	    while (True) {
		# read in option code
		my int $sbOpt;
		if ($gotiac) {
		    $sbOpt = IAC;
		    $gotiac = False;
		}
		else
		    $sbOpt = $.conn.recvu1(1);

		# read in code
		my int $sbCode = $.conn.recvu1(1);

		# exit if subnegotiation is over
		if ($sbOpt == IAC && $sbCode == SE) {
		    $.logDbg("RCV %s (%d) ended subnegotiation", CmdMap.$sbCode, $sbCode);
		    return;
		}

		if ($sbCode != 1) {
		    $.log("PROTOCOL ERROR: unknown subnegotiation code: %d, ignoring", $sbCode);
		    continue;
		}

		$.logDbg("RCV: OPT %s (%s)", OptMap.$sbOpt, $sbOpt);

		# server requests us to SEND (code 1) the subnegotiation answer
		switch ($sbOpt) {
		    case TOPT_TS: {
			# send terminal speed string
			my string $val = $.getTerminalSpeed();
			$.logDbg("SND: %s %y", OptMap{TOPT_TS}, $val);
			$.sendDataIntern((IAC,SB,TOPT_TS, 0, $val, IAC,SE));
			break;
		    }
		    
		    case TOPT_XDL: {
			# display location
			my *string $display = $.getDisplay();
			$.logDbg("SND: %s %y", OptMap{TOPT_XDL}, $display);
			$.sendDataIntern((IAC,SB,TOPT_XDL, 0, $display, IAC, SE));
			break;
		    }
		    
		    # RFC 1572: http://www.ietf.org/rfc/rfc1572.txt
		    case TOPT_ENVIR_NEW: { 
			# get requested list of options to send
			my list $req = ();
			while (True) {
			    $sbOpt = $.conn.recvu1(0);
			    if ($sbOpt == IAC) {
				$gotiac = True;
				break;
			    }
			    $req += $sbOpt;
			}

			# FIXME: we send everything anyway...
			$.logDbg("RCV: new environment options: %y", $req);

			# set telnet environment vars
			$.sendDataIntern((IAC,SB,TOPT_ENVIR_NEW, 0));  # first 0=IS, second 0=VAR, see RFC 1572

			my *string $display = $.getDisplay();
			$.logDbg("SND: %s VAR DISPLAY %y", OptMap{TOPT_ENVIR_NEW}, $display);
			# send 0=VAR "DISPLAY" 1=VALUE ...value...
			$.sendDataIntern((0, "DISPLAY", 1, $display));

			# send USER if present
			if (!$.user.empty()) {
			    $.logDbg("SND: %s VAR USER %y", OptMap{TOPT_ENVIR_NEW}, $.user);
			    # send 0=VAR "USER" 1=VALUE ...value...
			    $.sendDataIntern((0, "USER", 1, $.user));
			    $.logDbg("SND: %s VAR ACCT %y", OptMap{TOPT_ENVIR_NEW}, $.user);
			    # send 0=VAR "ACCT" 1=VALUE ...value...
			    $.sendDataIntern((0, "ACCT", 1, $.user));
			}

			# send user environment to server
			my hash $env = $.getEnvironment();
			foreach my string $k in (select keys $env, $env.$1.val()) {
			    $.logDbg("SND: %s USERVAR %y = %y", OptMap{TOPT_ENVIR_NEW}, $k, $env.$k);
			    # send 3=USERVAR ...key... 1=VALUE ...value...
			    $.sendDataIntern((3, $k, 1, $env.$k));
			}

			$.sendDataIntern((IAC,SE)); 
			break;
		    }

		    # see telnet RFC 1091
		    case TOPT_TERM: {
			# terminal type
			my *string $term = $.getTerminalType();
			$.logDbg("SND: %s %y", OptMap{TOPT_TERM}, $term);
			$.sendDataIntern((IAC,SB,TOPT_TERM, 0, $term, IAC, SE)); 
			break;
		    }

		    default: {
		      $.logDbg("unsupported subnegotiation option: %d %s, ignoring\n", $sbOpt, OptMap.$sbOpt);
		      break;
		    }
		}
	    }
	}
    }
} 
