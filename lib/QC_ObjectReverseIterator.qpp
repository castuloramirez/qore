/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashReverseIterator.qpp HashReverseIterator class definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QoreObjectIterator.h>

// internal reverse iterator class implementation only for the getName() function - the iterators remain
// forwards and are used in the reverse sense by the Qore language class implementation below
class QoreObjectReverseIterator : public QoreObjectIterator {
public:
   DLLLOCAL QoreObjectReverseIterator(const QoreObject* o, bool gvh = false) : QoreObjectIterator(o, gvh) {
   }

   DLLLOCAL QoreObjectReverseIterator() {
   }

   DLLLOCAL QoreObjectReverseIterator(const QoreObjectReverseIterator& old) : QoreObjectIterator(old) {
   }

   DLLLOCAL virtual const char* getName() const {
      return "ObjectReverseIterator";
   }
};

//! This class an iterator class for objects
/** Call ObjectReverseIterator::next() to iterate through the object in reverse order; do not use the iterator if ObjectReverseIterator::next() returns @ref False.
    An object can be iterated in reverse order by calling ObjectReverseIterator::prev() instead of ObjectReverseIterator::next()

    @note
    - In general, the ObjectReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - ObjectReverseIterator is functionally equivalent to ObjectIterator, but the effect of ObjectReverseIterator::next() and ObjectReverseIterator::prev()
      are the opposite of ObjectIterator::next() and ObjectIterator::prev(); that is ObjectReverseIterator::next() will
      iterate through the object in reverse order, while ObjectReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for ObjectReverseIterator::first() and ObjectReverseIterator::last()
      are swapped in respect to ObjectIterator::first() and ObjectIterator::last().

    @see ObjectIterator
 */
qclass ObjectReverseIterator [arg=QoreObjectReverseIterator* i; ns=Qore; vparent=ObjectIterator];

//! Creates the object iterator object
/** @param o the object to iterate
    @param value_hash if @ref True "True", @ref getValue() returns a hash with 2 keys: \c "key" and \c "value" (making it easier to iterate hashes with constructions where only @ref getValue() is available, such as the @ref foreach "foreach statement"); the default is @ref Qore::False "False"

    @par Example:
    @code
my ObjectReverseIterator $i($obj);
    @endcode
 */
ObjectReverseIterator::constructor(object o, bool value_hash = False) {
   self->setPrivate(CID_OBJECTREVERSEITERATOR, new QoreObjectReverseIterator(o, value_hash));
}

//! Creates an empty iterator object
/** @par Example:
    @code
my *object $obj = get_object_or_nothing();
my ObjectReverseIterator $i($obj);
    @endcode
 */
ObjectReverseIterator::constructor() {
   self->setPrivate(CID_OBJECTREVERSEITERATOR, new QoreObjectReverseIterator);
}

//! Creates a new ObjectReverseIterator object, based on the same object being iterated in the original object
/** @par Example:
    @code
my ObjectReverseIterator $ni = $i.copy();
    @endcode
 */
ObjectReverseIterator::copy() {
   self->setPrivate(CID_OBJECTREVERSEITERATOR, new QoreObjectReverseIterator(*i));
}

//! Moves the current position to the previous element in the object; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the object if the object is not empty
/** This method will return @ref True again after it returns @ref False once if the object is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the object (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.prev()) {
    printf(" + %y\n", $i.getValue());
}
    @endcode

    @note ObjectReverseIterator::next() is the opposite of ObjectIterator::next(); it is functionally equivalent to ObjectIterator::prev();
    ObjectReverseIterator::next() iterates through the object in reverse order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ObjectReverseIterator::next() {
   if (i->check(xsink))
      return false;
   return i->prev();
}

//! Moves the current position to the next element in the object; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the object if the object is not empty
/** This method will return @ref True again after it returns @ref False once if object is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the object (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.next()) {
    printf(" + %y\n", $i.getValue());
}
    @endcode

    @note ObjectReverseIterator::prev() is the opposite of ObjectIterator::prev(); it is functionally equivalent to ObjectIterator::next();
    ObjectReverseIterator::prev() iterates through the object in forward order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ObjectReverseIterator::prev() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! returns @ref True if on the last element of the object
/** @return @ref True if on the last element of the object

    @par Example:
    @code
while ($i.next()) {
    if ($i.first())
        printf("START:\n");
}
    @endcode
 */
bool ObjectReverseIterator::first() [flags=CONSTANT] {
   return i->last();
}

//! returns @ref True if on the first element of the object
/** @return @ref True if on the first element of the object

    @par Example:
    @code
while ($i.next()) {
    if ($i.last())
        printf("END.\n");
}
    @endcode
 */
bool ObjectReverseIterator::last() [flags=CONSTANT] {
   return i->first();
}
