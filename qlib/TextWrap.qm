# -*- mode: qore; indent-tabs-mode: nil -*-
# @file TextWrap.qm Text wrapping and filling

/*  TextWrap.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.12

%new-style
%require-types
%enable-all-warnings

module TextWrap {
    version = "0.1";
    desc    = "Text wrapping and filling";
    author  = "Martin Otto <martin@qore.org>";
    url     = "https://qore.org";
    license = "MIT";
    init    = sub () { init(); };
}

namespace Init {
    sub init() {
    }
}

public namespace TextWrap {

const c_whitespace = "\t\n\r ";

# -- Private helpers ---------------------------------------------------

string sub expandtabs (string text, int tabsize = 8) {
    return replace (text, "\t", strmul(' ', tabsize));
}

any sub sum (list la, *any start) {
    map start += $1, la;
    return start ?? 0;
}

string sub translate (string text, hash table) {
    foreach hash x in (table.pairIterator())
        text = replace (text, chr(int(x.key)), chr(int(x.value)));
    return text;
}

string sub xsprintf (string fmt, hash args) {
    list fmtlist;
    list arglist;
    int len = fmt.length();
    int i = 0;

    while (i < len) {
        int s = fmt.find('%', i);
        if (s < 0) {
            fmtlist += fmt.substr(i, len - i);
            break;
        }
        else if (fmt[s+1] == '%') {
            fmtlist += '%%';
            i = s+2;
        }
        else if (fmt[s+1] == '(') {
            int e = fmt.find(')', s+2);
            if (e < 0)
                throw "VALUE-ERROR", "incomplete format key";
            string kw = fmt.substr(s+2, e-s-2);
            fmtlist += fmt.substr(i, s-i+1);
            arglist += args.(kw);
            i = e+1;
        }
        else
            throw "VALUE-ERROR", "incomplete format";
    }
    return vsprintf (fmtlist.join(''), arglist);
}

# -- Loosely related functionality -------------------------------------

#! Adds 'prefix' to the beginning of selected lines in 'text'.
/**
    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True.  If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
*/
public string sub indent (string text, string prefix, *code predicate) {
    if (!exists predicate)
        predicate = bool sub (string line) { return boolean(trim(line)); };
    list prefixed_lines;

    foreach string line in (text.split("\n", True))
        prefixed_lines += predicate(line) ? prefix + line : line;
    return prefixed_lines.join('');
}

} # namespace TextWrap

# vim:et:sw=4:ts=4:sts=4:
