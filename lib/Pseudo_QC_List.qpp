/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_List.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

//! Methods in this pseudo-class can be executed on @ref list "lists"
/** 
 */
qclass <list> [arg=QoreListNode* l;vparent=<value>];

//! Returns Qore::NT_LIST
/** 
    @return Qore::NT_LIST

    @par Example:
    @code
switch ($l.typeCode()) {
    case NT_LIST:
        printf("%y: is a list\n", $l);
        break;
}
    @endcode
*/
int <list>::typeCode() [flags=CONSTANT] {
   return NT_LIST;
}

//! Returns the number of elements in the list
/** 
    @return the number of elements in the list

    @par Example:
    @code
my int $len = $l.size();
    @endcode
*/
int <list>::size() [flags=CONSTANT] {
   return l->size();
}

//! Returns @ref True if the list is empty (size = 0), @ref False if not
/** The opposite of <list>::val()
 
    @return @ref True if the list is empty (size = 0), @ref False if not

    @par Example:
    @code
my bool $b = $l.empty();
    @endcode
*/
bool <list>::empty() [flags=CONSTANT] {
   return l->empty();
}

//! Returns @ref False if the list is empty (size = 0), @ref True if not
/** The opposite of <list>::empty()
 
    @return @ref False if the list is empty (size = 0), @ref True if not

    @par Example:
    @code
my bool $b = $l.val();
    @endcode
*/
bool <list>::val() [flags=CONSTANT] {
   return !l->empty();
}

//! Returns the first entry in the list
/** @return the first entry in the list

    @par Example:
    @code
my any $e = $l.first();
    @endcode

    @see <list>::last()

    @since %Qore 0.8.5
 */
any <list>::first() [flags=CONSTANT] {
   return l->get_referenced_entry(0);
}

//! Returns the last entry in the list
/** @return the last entry in the list

    @par Example:
    @code
my any $e = $l.last();
    @endcode

    @see <list>::first()

    @since %Qore 0.8.5
 */
any <list>::last() [flags=CONSTANT] {
   return l->get_referenced_entry((qore_size_t)(l->size() - 1));
}

//! Creates a string from the list and a separator string given as an argument
/** Each element in the list will be converted to a string if necessary to be concatenated to the return value string; additionally if any string argument has a different @ref character_encoding "character encoding" than \a str, then it will be converted to <em>str</em>'s @ref character_encoding "character encoding" before concatentation to the return value string

    @param str the separator string

    @return a string created from a list and a separator string, each element in the list will be present in the return value separated by the separator string; the string returned with have the same @ref character_encoding "character encoding" as \a str

    @par Example:
    @code
my string $str = ("a", "b", "c").join(":"); # returns "a:b:c"
    @endcode

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string arguments have different @ref character_encoding "character encodings" and an error occurs during encoding conversion

    @note equivalent to join(string, list)

    @since %Qore 0.8.5
 */
string <list>::join(string str) [flags=RET_VALUE_ONLY] {
   return join_intern(str, l, 0, xsink);
}

//! Returns the number of elements in the list
/** For this type, this method is equivalent to size()

    @return the number of elements in the list

    @par Example:
    @code
printf("iterating %d element%s\n", $val.lsize(), $val.lsize() == 1 ? "" : "s");
foreach my any $element in ($val) {
    do_something($element);
}
    @endcode
*/
int <list>::lsize() [flags=CONSTANT] {
   return l->size();
}
