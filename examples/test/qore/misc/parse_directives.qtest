#!/usr/bin/env qr
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%no-child-restrictions

%requires ../../../../qlib/QUnit.qm

%exec-class ParseDirectiveTest

public class ParseDirectiveTest inherits QUnit::Test {

    constructor() : Test("ParseDirectiveTest", "1.0") {
        addTestCase("missing arg to %append-include-path", \missingArgAppendIncludePath(), NOTHING);
        addTestCase("missing arg to %append-module-path", \missingArgAppendModulePath(), NOTHING);
        addTestCase("missing arg to %set-time-zone", \missingArgSetTimeZone(), NOTHING);
        addTestCase("missing arg to %enable-warning", \missingArgEnableWarning(), NOTHING);

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    missingArgAppendIncludePath() {
        Program p();
        p.replaceParseOptions(PO_DEFAULT);
        assertThrows("PARSE-EXCEPTION", "missing argument to %append-include-path",
            \p.parse(), ("%append-include-path\nprint();", ""));
    }

    missingArgAppendModulePath() {
        Program p();
        p.replaceParseOptions(PO_DEFAULT);
        assertThrows("PARSE-EXCEPTION", "missing argument to %append-module-path",
            \p.parse(), ("%append-module-path\nprint();", ""));
    }

    missingArgSetTimeZone() {
        Program p();
        p.replaceParseOptions(PO_DEFAULT);
        assertThrows("PARSE-EXCEPTION", "missing argument to %set-time-zone",
            \p.parse(), ("%set-time-zone\nprint();", ""));
    }

    missingArgEnableWarning() {
        Program p();
        p.replaceParseOptions(PO_DEFAULT);
        assertThrows("PARSE-EXCEPTION", "missing argument to %enable-warning",
            \p.parse(), ("%enable-warning\nprint();", ""));
    }
}
