/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_ListReverseIterator.qpp ListReverseIterator class definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

// the c++ object
class QoreListReverseIterator : public QoreIteratorBase, public ConstListIterator {
protected:
   DLLLOCAL virtual ~QoreListReverseIterator() {
   }

public:
   DLLLOCAL QoreListReverseIterator(const QoreListNode* l) : ConstListIterator(l->listRefSelf()) {
   }

   using QoreIteratorBase::deref;
   DLLLOCAL virtual void deref(ExceptionSink* xsink) {
      if (ROdereference()) {
         const_cast<QoreListNode*>(l)->deref(xsink);
         delete this;
      }
   }

   DLLLOCAL AbstractQoreNode* getReferencedValue(ExceptionSink* xsink) const {
      if (pos == -1) {
         xsink->raiseException("ITERATOR-ERROR", "the ListReverseIterator is not pointing at a valid element; make sure ListReverseIterator::next() returns True before calling this method");
         return 0;
      }
      return ConstListIterator::getReferencedValue();
   }

   DLLLOCAL virtual const char* getName() const { return "ListReverseIterator"; }
};

//! This class an iterator class for lists
/** Call ListReverseIterator::next() to iterate through the list in reverse order; do not use the iterator if ListReverseIterator::next() returns @ref False.
    A list can be iterated in reverse order by calling ListReverseIterator::prev() instead of ListReverseIterator::next()

    @note
    - In general, the ListReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - ListReverseIterator is functionally equivalent to ListIterator, but the effect of ListReverseIterator::next() and ListReverseIterator::prev()
      are the opposite of ListIterator::next() and ListIterator::prev(); that is ListReverseIterator::next() will
      iterate through the list in reverse order, while ListReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for ListReverseIterator::first() and ListReverseIterator::last()
      are swapped in respect to ListIterator::first() and ListIterator::last().

    @see ListIterator
 */
qclass ListReverseIterator [arg=QoreListReverseIterator* i; ns=Qore; vparent=AbstractQuantifiedBidirectionalIterator];

//! Creates the list iterator object
/** @param l the list to iterate

    @par Example:
    @code
ListReverseIterator li($l);
    @endcode
 */
ListReverseIterator::constructor(list l) {
   self->setPrivate(CID_LISTREVERSEITERATOR, new QoreListReverseIterator(l));
}

//! Moves the current position to the previous element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if the list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.prev()) {
    printf(" + %y\n", $i.getValue());
}
    @endcode

    @note ListReverseIterator::next() is the opposite of ListIterator::next(); it is functionally equivalent to ListIterator::prev();
    ListReverseIterator::next() iterates through the list in reverse order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListReverseIterator::next() {
   if (i->check(xsink))
      return false;
   return i->prev();
}

//! Moves the current position to the next element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.next()) {
    printf(" + %y\n", $i.getValue());
}
    @endcode

    @note ListReverseIterator::prev() is the opposite of ListIterator::prev(); it is functionally equivalent to ListIterator::next();
    ListReverseIterator::prev() iterates through the list in forward order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListReverseIterator::prev() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! returns @ref True if the list is empty; @ref False if not
/** @return @ref True if the list is empty; @ref False if not

    @par Example:
    @code
if ($i.empty())
    printf("the list is empty\n");
    @endcode
 */
bool ListReverseIterator::empty() [flags=CONSTANT] {
   return i->empty();
}

//! returns @ref True if on the last element of the list (which is the first element to be iterated with this iterator)
/** @return @ref True if on the last element of the list (which is the first element to be iterated with this iterator)

    @par Example:
    @code
while ($i.next()) {
    if ($i.first())
        printf("START:\n");
}
    @endcode
 */
bool ListReverseIterator::first() [flags=CONSTANT] {
   return i->last();
}

//! returns @ref True if on the first element of the list (which is the last element to be iterated with this iterator)
/** @return @ref True if on the first element of the list (which is the last element to be iterated with this iterator)

    @par Example:
    @code
while ($i.next()) {
    if ($i.last())
        printf("END.\n");
}
    @endcode
 */
bool ListReverseIterator::last() [flags=CONSTANT] {
   return i->first();
}

//! returns the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
while ($i.next()) {
    printf("+ %y\n", $i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
any ListReverseIterator::getValue() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return 0;
   return i->getReferencedValue(xsink);
}

//! returns the current iterator position in the list or -1 if not pointing at a valid element
/** @return the current iterator position in the list or -1 if not pointing at a valid element

    @par Example:
    @code
while ($i.next()) {
    printf("+ %d/%d: %y\n", $i.index(), $i.max(), $i.getValue());
}
    @endcode
 */
int ListReverseIterator::index() [flags=CONSTANT] {
   return i->index();
}

//! returns the number of elements in the list
/** @return the number of elements in the list

    @par Example:
    @code
while ($i.next()) {
    printf("+ %d/%d: %y\n", $i.index(), $i.max(), $i.getValue());
}
    @endcode
 */
int ListReverseIterator::max() [flags=CONSTANT] {
   return i->max();
}

//! sets the new absolute position in the list; if the position is invalid then the method returns @ref False, meaning the iterator is not valid, otherwise it returns @ref True
/** @param pos the new position for the iterator with 0 as the first element

    @return @ref False, meaning the iterator is not valid, otherwise it returns @ref True

    @par Example:
    @code
if (!$i.set($pos))
    throw "INVALID-POSITION", sprintf("%d is an invalid position", $pos);
    @endcode

    @note that the \c pos argument is the absolute position of the list, with 0 as the first element in the list, which is the last element iterated by this
    iterator when using ListReverseIterator::next()

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListReverseIterator::set(int pos) {
   if (i->check(xsink))
      return false;
   return !i->set(pos);
}
