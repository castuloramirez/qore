
#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int yylex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[661] =
    {   0,
        0,    0,    0,    0,    0,    0,   19,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      165,  163,  161,  162,  163,   22,   56,  163,  163,  163,
      163,  163,  163,  163,  163,  119,  119,  163,  163,  163,
      129,  129,  163,  163,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      163,  163,   34,   24,   23,  164,   54,   51,   50,  164,
       20,   19,  164,   19,   49,   45,   48,   49,   49,   44,
       41,   40,  164,   39,   36,   35,  164,  164,   55,   18,
       16,  161,    0,  137,  160,    0,  128,    0,  132,  153,

      130,    0,  143,  151,    0,  134,    0,  154,    0,  147,
      149,    0,  148,  150,    0,   21,  155,    0,  118,  119,
      122,  121,  120,  123,  124,  125,    0,    0,  146,  135,
      138,    0,  141,  159,    0,  136,  145,  129,    0,  129,
      129,    0,  156,    0,  133,  129,  129,   98,  129,  129,
      129,  129,   65,  129,  129,  129,  129,   67,   71,  129,
       78,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,    0,  152,
      144,  130,  130,  130,  130,  130,   34,   32,   33,   25,
       26,   30,   31,   27,   29,   28,   54,   53,   52,   20,

       19,   19,   45,   47,   46,   44,   43,   42,   39,   38,
       37,    0,   55,   18,   16,    0,  140,  127,  128,  130,
        0,  117,  118,  119,    0,  126,    0,  158,    0,  142,
        0,  139,    0,  157,    0,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,   69,
      129,  129,  129,  129,   62,   79,  104,  129,  129,  129,
      129,  129,  129,   74,  129,  129,  129,  129,   82,  129,
      129,  129,  130,  130,  130,  130,  130,   25,   26,  127,
      131,  118,  119,    0,    0,  115,  129,   58,  129,  129,
      100,  129,  129,  129,  129,  129,  129,  129,   68,  129,

      129,   87,  129,  129,  129,   73,  129,    0,  108,  129,
      103,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  130,  130,  130,    0,  130,
       25,  131,    0,  118,  119,    0,    0,  115,  129,  129,
       80,   85,   60,   75,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,    0,  107,  129,  129,
       63,  129,  129,  129,  129,  129,  129,  129,  129,   83,
      129,   57,   66,  130,  130,  130,    0,    0,    0,    0,
        0,    0,    0,  130,    0,    0,  116,  129,  129,  129,
      129,  129,   88,  129,   92,  129,  129,  129,  129,  129,

      129,  129,   77,    0,  110,   96,  129,  105,  129,  129,
       99,  129,  129,  129,    0,  130,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,  116,   59,  129,   93,  129,  101,  129,   86,   70,
      129,  129,  129,   61,   84,  129,    0,  109,  129,  129,
      129,  129,   64,    0,  130,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,  114,
      129,   81,   72,  102,  129,  129,  129,  129,  129,  129,
      129,    0,  111,    0,  130,    0,    0,    0,    0,    0,
        0,    0,    0,   11,    0,    0,    0,    0,  130,    0,

      129,  129,   76,  129,  129,   94,  129,  129,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,  113,   89,  106,  129,   95,  129,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,  129,   91,   14,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  129,   90,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    0,  129,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,  129,    0,    8,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    4,    0,  129,    0,    0,    5,    0,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
        0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    0,    0,    0,    0,
      112,    0,    0,    0,    6,    0,    0,    0,    0,    0,
        9,    0,    2,    0,    0,    7,    0,    0,   12,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
        1,   13,   14,    1,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,    1,   22,
       23,   24,    1,    1,   25,   26,   25,   27,   25,   25,
       28,   29,   30,   31,   31,   32,   33,   34,   35,   31,
       31,   31,   31,   36,   37,   31,   31,   31,   38,   31,
        1,   39,    1,   40,   41,   42,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   31,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,   68,    1,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    6,    4,    1,
        1,    1,    1,    1,    1,    7,    8,    9,    9,    9,
       10,    1,    4,    1,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   13,    1,
       14,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1
    } ;

static yyconst flex_int16_t yy_base[698] =
    {   0,
        0, 1540,   67,   68,   69,   72,   74,   77,   80,   81,
       84,   85,   87,   88, 1545, 1544,   90,   92,   97,  107,
     1546, 1550,  110, 1550,  113, 1550, 1550, 1529,  116,  127,
     1533,  126,  140,  141,  144,  167,  142,  149,  166,  174,
     1522,  144,  186, 1500,  156,  163,  182,  172,   82,  111,
       75,  170,  183,  180,  187,  100,  191,  174,  189,  190,
      216,  250,    0, 1550, 1550,  247,    0, 1550, 1550, 1524,
        0,  254, 1550,  258, 1550,  259, 1550, 1523, 1522,    0,
     1550, 1550, 1521,    0, 1550, 1550, 1520, 1533, 1550,    0,
        0,  266,  267,  270, 1550,    0,    0,  273, 1550, 1550,

     1514,  276, 1550, 1550, 1523, 1550,  277, 1550,  290, 1550,
     1550,  308, 1550, 1550,  312, 1550, 1550,  269,  299,  195,
     1550, 1550, 1550, 1550, 1550, 1550,    0,  320,  323,  324,
     1550,  328,  332, 1550,  335, 1550,  343, 1512, 1511,  262,
      202,  348, 1550, 1489, 1550,  186,  264, 1509,  300,  131,
      286,  317, 1508,  328,  312,  319,  294, 1507,  333,  335,
     1506,  308,  336,  346,   98,  347,  348,  351,  352,  355,
      356,  363,  359,  358,  357,  360,  361,  364,  395, 1550,
     1550,  365,  368,  366,  369,  373,    0, 1550, 1550,  409,
      413, 1550, 1550, 1550, 1550, 1550,    0, 1550, 1550,    0,

      400,  432,  433, 1550, 1550,    0, 1550, 1550,    0, 1550,
     1550, 1523, 1550,    0,    0,  436, 1550,    0,    0, 1504,
        0,  423,  428,  452,  431,    0,  450, 1550,  456, 1550,
      460, 1550,  463, 1550, 1516,  424,  374,  224,  448,  453,
      436,  435,  454,  455,  456,  370,  463,  466,  473,  471,
      475,  468,  472,  476, 1502, 1501,  509,  478,  483,  484,
      371,  486,  480,  499,  488,  487,  504,  496, 1500,  503,
      506,  507,  514,  517,  518,  530,  515,  536,  539,    0,
        0,  549,  553,  556, 1504, 1498,  556, 1497,  529,  230,
     1496,  516,  519,  559,  560,  561,  563,  562, 1495,  564,

      566, 1494,  567,  568,  569, 1493,  570,  590, 1550,  572,
      593,  575,  577,  578,  595,  583,  579,  597,  587,  592,
      605,  375,  580,  582,  596,  612,  585,  616,  604,  620,
      626,    0,  636,  651,  675, 1492,    0, 1491,  626,  629,
     1490, 1489, 1488, 1487,  631,  637,  645,  652,  642,  654,
      651,  641,  655,  660,  207,  656,  708, 1550,  653,  664,
      719,  658,  669,  679,  682,  659,  686,  701,  706, 1486,
      707, 1485, 1484,  717,  709,  718,  691, 1439, 1450,  640,
     1443, 1439,  692,  713,  731,  738,    0,  725,  722,  724,
      733,  738, 1479,  740, 1478,  741,  742,  744,  745,  746,

      747,  748, 1477,  768, 1550, 1476,  753,  775,  754,  752,
     1475,  755,  761,  760, 1450,  762, 1438, 1442, 1449, 1436,
     1429, 1433, 1434, 1423, 1430, 1441, 1425, 1426,  763, 1467,
      798,    0, 1460,  765, 1459,  767, 1458,  770, 1457, 1456,
      772,  776,  779, 1455, 1454,  783,  827, 1550,  788,  777,
      785,  789,  839, 1421,  798, 1416, 1419, 1411, 1410, 1422,
     1424, 1420,  844, 1421, 1406, 1417, 1448,  805,  835, 1550,
      804, 1441, 1440, 1439,  812,  816,  817,  813,  828,  799,
      821,  854, 1550, 1416,  863, 1397, 1411, 1396, 1394, 1395,
     1410, 1392,  867, 1550, 1404, 1394, 1406, 1395,  858,  862,

      841,  840, 1426,  836,  851, 1425,  853,  855, 1385,  881,
     1393, 1428, 1427, 1398, 1385, 1386, 1381, 1377, 1374, 1389,
     1387, 1377, 1411, 1416, 1409, 1408,  856, 1407,  868,  869,
     1367, 1370, 1366, 1378, 1368, 1379, 1406, 1377, 1359, 1357,
     1357, 1353, 1353,  874,  874,  875, 1393, 1550, 1358, 1365,
     1364, 1349, 1356, 1345, 1362, 1391, 1354,  895, 1357, 1344,
      885,  879, 1381, 1341, 1340, 1351, 1383, 1382, 1353, 1348,
     1348, 1335,  905, 1550, 1334,  920, 1360,  880,  924, 1317,
     1314, 1327, 1315, 1312, 1353, 1309, 1315,  929,  933, 1550,
      920,  890,  939, 1550, 1297,  942, 1306, 1281, 1279, 1280,

     1270, 1283,  945, 1550,  932,  889, 1243,  954, 1550, 1241,
     1228,  957, 1223, 1205, 1215, 1235, 1221, 1196, 1168, 1179,
      960, 1550, 1171, 1155, 1149,  947, 1127,  966, 1139, 1108,
     1091, 1098,  953, 1094,  972, 1550, 1084,  975, 1090, 1082,
     1550, 1084, 1076,  978, 1550,  981,  984,   61,  987,  990,
     1550,  993, 1550,   53,  996, 1550,  999, 1002, 1550, 1550,
     1006, 1020, 1034, 1048, 1062, 1076, 1090, 1104, 1118, 1126,
     1137, 1149, 1155, 1169, 1183, 1197, 1211, 1225, 1239, 1253,
     1267, 1281, 1295, 1309, 1323, 1337,  902, 1343, 1349,  908,
     1355,  942, 1364, 1368, 1374, 1123, 1380

    } ;

static yyconst flex_int16_t yy_def[698] =
    {   0,
      660,    1,  661,  661,  662,  662,  663,  663,  664,  664,
      665,  665,  666,  666,  667,  667,  668,  668,  669,  669,
      660,  660,  660,  660,  660,  660,  660,  670,  671,  660,
      672,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      673,  673,  660,  674,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      660,  671,  675,  660,  660,  676,  677,  660,  660,  678,
      679,  660,  660,  679,  660,  660,  660,  660,  660,  680,
      660,  660,  681,  682,  660,  660,  683,  684,  660,  685,
      686,  660,  660,  660,  660,  687,  688,  660,  660,  660,

      689,  660,  660,  660,  672,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,   36,  119,
      660,  660,  660,  660,  660,  660,  690,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  673,  660,  673,
      673,  660,  660,  674,  660,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  660,  660,
      660,  689,  689,  689,  689,  689,  675,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  677,  660,  660,  679,

      660,  679,  660,  660,  660,  680,  660,  660,  682,  660,
      660,  684,  660,  685,  686,  660,  660,  691,  688,  689,
      692,  660,  660,  660,  660,  690,  660,  660,  660,  660,
      660,  660,  660,  660,  693,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  689,  689,  689,  689,  689,  660,  660,  691,
      694,  119,  282,  660,  660,  695,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  660,  660,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  689,  689,  689,  660,  689,
      660,  694,  660,  660,  660,  660,  696,  695,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  660,  660,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  689,  689,  689,  660,  660,  660,  660,
      660,  660,  660,  689,  660,  660,  697,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  660,  660,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  660,  689,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  689,  660,
      660,  697,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  660,  660,  673,  673,
      673,  673,  673,  660,  689,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  689,  660,  660,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  660,  660,  660,  689,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  689,  660,

      673,  673,  673,  673,  673,  673,  673,  673,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  689,  660,  673,  673,  673,  673,  673,  673,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  673,  673,  673,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  673,  673,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  673,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  673,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  673,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  673,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,    0,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660

    } ;

static yyconst flex_int16_t yy_nxt[1620] =
    {   0,
       22,   23,   24,   23,   25,   26,   27,   28,   29,   30,
       31,   22,   32,   33,   34,   22,   35,   36,   37,   37,
       22,   38,   39,   40,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   42,   41,   41,   41,   41,   22,   43,
       22,   44,   41,   45,   46,   47,   48,   49,   41,   41,
       50,   51,   41,   52,   53,   54,   55,   41,   56,   57,
       58,   59,   41,   60,   41,   41,   41,   61,   22,   64,
       64,   68,   65,   65,   68,   72,   73,   74,   72,   73,
       74,   76,   76,   76,   76,   69,   81,   81,   69,   85,
       85,   73,   73,   73,   73,  139,   77,   77,   73,   73,

       82,   82,  139,   86,   86,   66,   66,   70,   73,   73,
       70,   92,  657,   92,   93,  654,   93,   98,  139,   98,
      139,  160,   83,   83,   99,   87,   87,  107,  102,  107,
      102,  139,  156,   78,   78,   94,  103,  157,  100,   79,
       79,  109,  112,  109,  112,  115,  168,  115,  108,  104,
      128,  139,  128,  110,  257,  113,  116,  118,  158,  120,
      120,  120,  111,  114,  139,  159,  117,  132,  121,  132,
      129,  130,  131,  242,  122,  135,  139,  135,  140,  123,
      141,   95,  118,  139,  119,  119,  120,  142,  133,  142,
      139,  124,  139,  121,  139,  125,  136,  137,  146,  122,

      139,  126,  139,  139,  123,  149,  139,  139,  143,  139,
      139,  139,  224,  224,  147,  150,  124,  179,  151,  179,
      125,  148,  139,  175,  154,  162,  126,  139,  152,  163,
      238,  127,  176,  237,  134,  161,  155,  153,  180,  178,
      169,  164,  165,  177,  139,  166,  170,  171,  167,  189,
      139,   98,  172,   98,  173,  201,  174,  201,   99,  201,
      203,  202,  203,  400,  190,  190,  191,   92,   93,   92,
       93,  216,  100,  216,   98,  289,   98,  102,  107,  102,
      107,  341,  139,  181,  139,  103,  222,  222,  222,   94,
      192,  109,  217,  109,  193,  100,  182,  236,  104,  108,

      183,  194,  184,  110,  185,  195,  139,  196,  186,  112,
      239,  112,  111,  115,  139,  115,  223,  223,  224,  225,
      139,  128,  113,  128,  227,  229,  227,  229,  139,  132,
      114,  132,  139,  231,  117,  231,  135,  139,  135,  139,
      243,  129,  130,  131,  233,  228,  233,  230,  139,  142,
      133,  142,  250,  139,  232,  139,  139,  136,  137,  240,
      241,  254,  248,  660,  244,  234,  139,  139,  139,  245,
      143,  139,  139,  249,  246,  139,  139,  139,  139,  139,
      139,  139,  251,  139,  139,  221,  221,  247,  221,  221,
      139,  139,  252,  221,  139,  139,  179,  258,  179,  255,

      253,  201,  261,  201,  256,  288,  264,  259,  263,  266,
      271,  260,  267,  262,  272,  268,  265,  180,  314,  277,
      270,  275,  274,  298,  276,  269,  278,  278,  279,  273,
      279,  279,  279,  201,  203,  202,  203,  216,  370,  216,
      222,  222,  222,  118,  139,  282,  282,  283,  284,  284,
      284,  227,  287,  227,  121,  139,  139,  229,  217,  229,
      122,  231,  181,  231,  233,  123,  233,  118,  139,  283,
      283,  283,  228,  139,  139,  139,  139,  124,  121,  230,
      292,  125,  232,  139,  122,  234,  139,  126,  139,  123,
      290,  139,  139,  139,  293,  139,  139,  296,  139,  291,

      139,  124,  297,  139,  139,  125,  139,  139,  139,  299,
      308,  126,  308,  294,  295,  301,  139,  303,  302,  139,
      309,  304,  307,  139,  139,  300,  139,  139,  305,  139,
      316,  306,  311,  312,  221,  221,  139,  221,  221,  139,
      310,  318,  321,  317,  329,  313,  315,  319,  320,  139,
      221,  322,  323,  331,  331,  279,  279,  279,  279,  325,
      326,  327,  328,  333,  324,  342,  334,  334,  335,  660,
      335,  335,  330,  336,  336,  336,  139,  340,  343,  139,
      139,  139,  139,  139,  139,  339,  139,  139,  139,  139,
      139,  308,  139,  308,  357,  139,  357,  139,  139,  139,

      139,  309,  139,  139,  358,  221,  345,  139,  349,  352,
      346,  354,  139,  139,  356,  139,  139,  139,  351,  344,
      362,  363,  347,  348,  350,  139,  353,  364,  372,  355,
      371,  367,  221,  359,  365,  360,  221,  375,  361,  366,
      221,  368,  373,  279,  279,  279,  139,  369,  377,  139,
      378,  139,  379,  385,  385,  385,  374,  139,  380,  388,
      381,  139,  139,  382,  383,  139,  118,  376,  334,  334,
      335,  139,  139,  139,  139,  139,  139,  121,  139,  139,
      139,  384,  423,  122,  139,  397,  424,  389,  123,  139,
      118,  391,  335,  335,  335,  390,  394,  392,  393,  139,

      124,  121,  139,  396,  125,  398,  139,  122,  402,  357,
      126,  357,  123,  395,  399,  407,  401,  410,  403,  358,
      404,  139,  404,  406,  124,  408,  139,  139,  125,  221,
      405,  415,  417,  221,  126,  411,  409,  221,  221,  139,
      418,  427,  139,  419,  139,  139,  420,  428,  430,  430,
      430,  413,  433,  139,  414,  431,  431,  431,  139,  412,
      139,  139,  139,  429,  139,  139,  139,  139,  139,  404,
      416,  404,  139,  139,  139,  139,  447,  434,  447,  405,
      139,  139,  221,  221,  435,  139,  448,  139,  443,  442,
      139,  440,  139,  444,  436,  139,  139,  139,  437,  139,

      438,  452,  450,  139,  441,  139,  439,  455,  139,  139,
      451,  445,  446,  472,  449,  470,  470,  470,  221,  139,
      453,  468,  475,  476,  139,  221,  471,  477,  447,  473,
      447,  474,  139,  139,  478,  481,  139,  139,  448,  480,
      482,  139,  482,  479,  485,  493,  494,  493,  139,  507,
      483,  499,  500,  500,  500,  482,  139,  482,  501,  139,
      139,  139,  503,  504,  510,  483,  510,  502,  493,  494,
      493,  139,  522,  139,  506,  139,  139,  505,  221,  524,
      524,  524,  510,  221,  510,  508,  525,  526,  139,  139,
      527,  561,  561,  561,  139,  139,  573,  574,  573,  139,

      139,  545,  577,  577,  577,  530,  573,  574,  573,  139,
      139,  528,  218,  218,  546,  606,  226,  523,  226,  529,
      563,  589,  590,  589,  562,  593,  594,  593,  592,  547,
      603,  604,  603,  578,  589,  590,  589,  605,  605,  605,
      593,  594,  593,  608,  609,  608,  603,  604,  603,  616,
      616,  616,  281,  281,  617,  608,  609,  608,  621,  622,
      621,  621,  622,  621,  633,  633,  633,  635,  636,  635,
      641,  641,  641,  635,  636,  635,  644,  645,  644,  644,
      645,  644,  650,  651,  650,  652,  653,  652,  655,  656,
      655,  650,  651,  650,  652,  653,  652,  655,  656,  655,

      658,  659,  658,  658,  659,  658,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   97,  387,  387,  649,   97,   97,  101,  648,
      101,  647,  646,  643,  642,  640,  639,  101,  101,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  138,  138,  138,  138,  638,  138,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  187,  187,  637,  187,  634,  187,  187,
      187,  187,  187,  187,  187,  632,  187,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  197,  197,  631,  197,  197,  197,  197,  630,  197,
      197,  197,  197,  629,  197,  198,  198,  628,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  200,
      627,  139,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  206,  206,  626,  206,  206,  206,  206,
      625,  206,  206,  206,  206,  624,  206,  207,  207,  623,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  209,  209,  620,  209,  209,  209,  209,  619,  209,
      209,  209,  209,  618,  209,  210,  210,  615,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  214,  614,  613,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  612,  611,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  219,  610,  219,  219,  607,  219,  220,  220,  220,
      220,  602,  220,  280,  601,  280,  280,  600,  280,  286,
      599,  598,  597,  596,  286,  286,  332,  595,  332,  332,
      591,  332,  338,  338,  338,  338,  588,  338,  432,  587,
      432,  432,  586,  432,  585,  584,  583,  582,  581,  580,

      579,  139,  576,  575,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  139,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  139,  139,  139,
      544,  221,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  139,  139,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  509,  139,
      139,  139,  498,  497,  496,  495,  492,  491,  490,  489,
      488,  487,  486,  484,  139,  139,  139,  139,  139,  139,
      139,  469,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  454,  139,  139,  139,  139,  139,

      426,  425,  422,  421,  139,  139,  139,  139,  139,  139,
      139,  139,  386,  139,  139,  139,  139,  139,  139,  337,
      139,  139,  139,  285,  221,  213,  139,  139,  139,  139,
      145,  235,  139,  106,  221,  213,  211,  208,  205,  204,
      199,  145,  139,  106,   96,  660,   89,   89,   62,   21,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660
    } ;

static yyconst flex_int16_t yy_chk[1620] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    3,    4,    6,    7,    7,    7,    8,    8,
        8,    9,   10,    9,   10,    5,   11,   12,    6,   13,
       14,   17,   17,   18,   18,   51,    9,   10,   19,   19,

       11,   12,   49,   13,   14,    3,    4,    5,   20,   20,
        6,   23,  654,   23,   25,  648,   25,   29,  165,   29,
       56,   51,   11,   12,   29,   13,   14,   32,   30,   32,
       30,   50,   49,    9,   10,   25,   30,   49,   29,    9,
       10,   33,   34,   33,   34,   35,   56,   35,   32,   30,
       38,  150,   38,   33,  165,   34,   35,   37,   50,   37,
       37,   37,   33,   34,   42,   50,   35,   39,   37,   39,
       38,   38,   38,  150,   37,   40,   45,   40,   42,   37,
       42,   25,   36,   46,   36,   36,   36,   43,   39,   43,
       52,   37,   48,   36,   58,   37,   40,   40,   45,   36,

       54,   37,   47,   53,   36,   46,  146,   55,   43,   59,
       60,   57,  120,  120,   45,   46,   36,   61,   46,   61,
       36,   45,  141,   58,   48,   53,   36,  355,   47,   53,
      146,   36,   58,  141,   39,   52,   48,   47,   61,   60,
       57,   54,   55,   59,  238,   55,   57,   57,   55,   66,
      290,   62,   57,   62,   57,   72,   57,   72,   62,   74,
       76,   74,   76,  355,   66,   66,   66,   92,   93,   92,
       93,   94,   62,   94,   98,  238,   98,  102,  107,  102,
      107,  290,  140,   61,  147,  102,  118,  118,  118,   93,
       66,  109,   94,  109,   66,   98,   62,  140,  102,  107,

       62,   66,   62,  109,   62,   66,  151,   66,   62,  112,
      147,  112,  109,  115,  157,  115,  119,  119,  119,  119,
      149,  128,  112,  128,  129,  130,  129,  130,  162,  132,
      112,  132,  155,  133,  115,  133,  135,  152,  135,  156,
      151,  128,  128,  128,  137,  129,  137,  130,  154,  142,
      132,  142,  157,  159,  133,  160,  163,  135,  135,  149,
      149,  162,  155,  119,  152,  137,  164,  166,  167,  152,
      142,  168,  169,  156,  154,  170,  171,  175,  174,  173,
      176,  177,  159,  172,  178,  182,  184,  154,  183,  185,
      246,  261,  159,  186,  237,  322,  179,  166,  179,  163,

      160,  201,  169,  201,  164,  237,  172,  167,  171,  173,
      178,  168,  174,  170,  178,  175,  172,  179,  261,  186,
      177,  184,  183,  246,  185,  176,  190,  190,  190,  182,
      191,  191,  191,  202,  203,  202,  203,  216,  322,  216,
      222,  222,  222,  223,  236,  223,  223,  223,  225,  225,
      225,  227,  236,  227,  223,  242,  241,  229,  216,  229,
      223,  231,  179,  231,  233,  223,  233,  224,  239,  224,
      224,  224,  227,  240,  243,  244,  245,  223,  224,  229,
      241,  223,  231,  247,  224,  233,  248,  223,  252,  224,
      239,  250,  253,  249,  242,  251,  254,  244,  258,  240,

      263,  224,  245,  259,  260,  224,  262,  266,  265,  247,
      257,  224,  257,  243,  243,  249,  268,  250,  249,  264,
      257,  251,  254,  270,  267,  248,  271,  272,  252,  257,
      263,  253,  259,  260,  273,  277,  292,  274,  275,  293,
      258,  265,  268,  264,  276,  260,  262,  266,  267,  289,
      276,  268,  270,  278,  278,  278,  279,  279,  279,  272,
      273,  274,  275,  282,  271,  292,  282,  282,  282,  282,
      283,  283,  277,  284,  284,  284,  287,  289,  293,  294,
      295,  296,  298,  297,  300,  287,  301,  303,  304,  305,
      307,  308,  310,  308,  311,  312,  311,  313,  314,  317,

      323,  308,  324,  316,  311,  327,  295,  319,  298,  303,
      295,  305,  320,  311,  310,  315,  325,  318,  301,  294,
      315,  315,  296,  297,  300,  321,  304,  316,  324,  307,
      323,  319,  326,  312,  317,  313,  328,  327,  314,  318,
      330,  320,  325,  331,  331,  331,  339,  321,  329,  340,
      329,  345,  329,  333,  333,  333,  326,  346,  329,  339,
      329,  352,  349,  329,  329,  347,  334,  328,  334,  334,
      334,  351,  348,  359,  350,  353,  356,  334,  362,  366,
      354,  330,  380,  334,  360,  352,  380,  340,  334,  363,
      335,  346,  335,  335,  335,  345,  349,  347,  348,  364,

      334,  335,  365,  351,  334,  353,  367,  335,  359,  357,
      334,  357,  335,  350,  354,  363,  356,  366,  360,  357,
      361,  368,  361,  362,  335,  364,  369,  371,  335,  375,
      361,  374,  376,  384,  335,  367,  365,  374,  376,  361,
      377,  383,  389,  377,  390,  388,  377,  383,  385,  385,
      385,  369,  388,  391,  371,  386,  386,  386,  392,  368,
      394,  396,  397,  384,  398,  399,  400,  401,  402,  404,
      375,  404,  410,  407,  409,  412,  408,  389,  408,  404,
      414,  413,  416,  429,  390,  434,  408,  436,  400,  399,
      438,  397,  441,  401,  391,  408,  442,  450,  392,  443,

      394,  413,  410,  446,  398,  451,  396,  416,  449,  452,
      412,  402,  407,  436,  409,  431,  431,  431,  455,  480,
      414,  429,  442,  443,  471,  468,  434,  446,  447,  438,
      447,  441,  475,  478,  449,  452,  476,  477,  447,  451,
      453,  481,  453,  450,  455,  463,  463,  463,  479,  480,
      453,  468,  469,  469,  469,  482,  504,  482,  471,  453,
      502,  501,  476,  477,  485,  482,  485,  475,  493,  493,
      493,  505,  499,  507,  479,  508,  527,  478,  499,  500,
      500,  500,  510,  485,  510,  481,  501,  502,  529,  530,
      504,  544,  544,  544,  545,  546,  558,  558,  558,  562,

      578,  527,  561,  561,  561,  508,  573,  573,  573,  606,
      592,  505,  687,  687,  529,  592,  690,  499,  690,  507,
      546,  576,  576,  576,  545,  579,  579,  579,  578,  530,
      588,  588,  588,  562,  589,  589,  589,  591,  591,  591,
      593,  593,  593,  596,  596,  596,  603,  603,  603,  605,
      605,  605,  692,  692,  606,  608,  608,  608,  612,  612,
      612,  621,  621,  621,  626,  626,  626,  628,  628,  628,
      633,  633,  633,  635,  635,  635,  638,  638,  638,  644,
      644,  644,  646,  646,  646,  647,  647,  647,  649,  649,
      649,  650,  650,  650,  652,  652,  652,  655,  655,  655,

      657,  657,  657,  658,  658,  658,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  670,  696,  696,  643,  670,  670,  671,  642,
      671,  640,  639,  637,  634,  632,  631,  671,  671,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  630,  673,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  675,  675,  629,  675,  627,  675,  675,
      675,  675,  675,  675,  675,  625,  675,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  677,  677,  624,  677,  677,  677,  677,  623,  677,
      677,  677,  677,  620,  677,  678,  678,  619,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  679,
      618,  617,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  680,  680,  616,  680,  680,  680,  680,
      615,  680,  680,  680,  680,  614,  680,  681,  681,  613,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  682,  682,  611,  682,  682,  682,  682,  610,  682,
      682,  682,  682,  607,  682,  683,  683,  602,  683,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  685,  601,  600,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  686,  599,  598,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  688,  597,  688,  688,  595,  688,  689,  689,  689,
      689,  587,  689,  691,  586,  691,  691,  585,  691,  693,
      584,  583,  582,  581,  693,  693,  694,  580,  694,  694,
      577,  694,  695,  695,  695,  695,  575,  695,  697,  572,
      697,  697,  571,  697,  570,  569,  568,  567,  566,  565,

      564,  563,  560,  559,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  547,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  528,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  509,  506,  503,  498,  497,  496,
      495,  492,  491,  490,  489,  488,  487,  486,  484,  474,
      473,  472,  467,  466,  465,  464,  462,  461,  460,  459,
      458,  457,  456,  454,  445,  444,  440,  439,  437,  435,
      433,  430,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  415,  411,  406,  403,  395,  393,

      382,  381,  379,  378,  373,  372,  370,  344,  343,  342,
      341,  338,  336,  306,  302,  299,  291,  288,  286,  285,
      269,  256,  255,  235,  220,  212,  161,  158,  153,  148,
      144,  139,  138,  105,  101,   88,   87,   83,   79,   78,
       70,   44,   41,   31,   28,   21,   16,   15,    2,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.ll"
#line 2 "scanner.ll"
/*
  scanner.ll

  Qore Programming Language

  Copyright (C) David Nichols 2003, 2004, 2005

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Flex scanner: no string length limits, no include file depth limits, thread-safe
  
  requires flex 2.5.31 or better (2.5.4 will not work) so a thread-safe scanner can
  be generated
  see: http://lex.sourceforge.net/
*/

#include <qore/config.h>
#include <qore/common.h>
#include <qore/QoreNode.h>
#include <qore/support.h>
#include <qore/Function.h>
#include <qore/params.h>
#include <qore/QoreProgram.h>
#include <qore/DateTime.h>
#include <qore/QoreString.h>
#include <qore/common.h>
#include <qore/ParserSupport.h>
#include <qore/RegexSubst.h>
#include <qore/ModuleManager.h>
#include <qore/QoreRegex.h>

#include "parser.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int yyparse(yyscan_t yyscanner);

static inline class QoreString *getIncludeFileName(char *file)
{
   //printd(5, "getIncludeFileName(%s)\n", file);
   // FIXME: UNIX-specific
   if (file[0] == '/')
      return new QoreString(file);

   QoreString *rv;
   rv = findFileInEnvPath(file, "QORE_INCLUDE_DIR");
   if (!rv)
      rv = new QoreString(file);
   return rv;
}

static inline char *remove_quotes(char *str)
{
   str[strlen(str) - 1] = '\0';
   return str + 1;
}

static inline class DateTime *makeYears(int years)
{
   class DateTime *dt = new DateTime();
   dt->year = years;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeMonths(int months)
{
   class DateTime *dt = new DateTime();
   dt->month = months;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeDays(int days)
{
   class DateTime *dt = new DateTime();
   dt->day = days;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeHours(int hours)
{
   class DateTime *dt = new DateTime();
   dt->hour = hours;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeMinutes(int minutes)
{
   class DateTime *dt = new DateTime();
   dt->minute = minutes;
   dt->relative = 1;
   return dt;
}

static inline class DateTime *makeSeconds(int seconds)
{
   class DateTime *dt = new DateTime();
   dt->second = seconds;
   dt->relative = 1;
   return dt;
}

//2005-03-29-10:19:27
//0123456789012345678
static inline class DateTime *makeDateTime(char *str)
{
   // move string to middle to form date string
   // move day to middle
   memmove(str+9, str+8, 2);
   // move month to middle
   memmove(str+7, str+5, 2);
   // move year to middle
   memmove(str+3, str, 4);
   // move minute to middle
   memmove(str+13, str+14, 2);
   // move second and null to middle
   memmove(str+15, str+17, 3);
   //printf("new date: %s\n", str + 3);
   return new DateTime(str + 3);
}

//2005-03-29
//0123456789
static inline class DateTime *makeDate(char *str)
{
   // move month
   memmove(str+4, str+5, 2);
   // move day and null
   memmove(str+6, str+8, 3);
   //printf("new date: %d:%s\n", strlen(str), str);
   return new DateTime(str);
}

//16:03:29
//01234567
static inline class DateTime *makeTime(char *str)
{
   // move minute back
   memmove(str+2, str+3, 2);
   // move seconds and null
   memmove(str+4, str+6, 3);
   //printf("new time: %d:%s\n", strlen(str), str);
   class DateTime *dt = new DateTime(str);
   if (!dt->year)
      dt->year = 1970;
   return dt;
}

static inline char *trim(char *str)
{
   while ((*str) == ' ' || (*str) == '\t')
      str++;
   // duplicate string
   char *n = strdup(str);
   // find end of string
   int l = strlen(n);
   if (l)
   {
      char *e = n + l - 1;
      while ((*e) == ' ' || (*e) == '\t')
	 *(e--) = '\0';
   }
   if (!n[0])
   {
      free(n);
      n = NULL;
   }
   return n;
}

static inline bool isRegexModifier(class QoreRegex *qr, int c)
{
   if (c == 'i')
      qr->setCaseInsensitive();
   else if (c == 's')
      qr->setDotAll();
   else if (c == 'x')
      qr->setExtended();
   else if (c == 'm')
      qr->setMultiline();
   else
      return false;
   return true;
}

static inline bool isRegexSubstModifier(class RegexSubst *qr, int c)
{
   if (c == 'g')
      qr->setGlobal();
   else if (c == 'i')
      qr->setCaseInsensitive();
   else if (c == 's')
      qr->setDotAll();
   else if (c == 'x')
      qr->setExtended();
   else if (c == 'm')
      qr->setMultiline();
   else
      return false;
   return true;
}


#line 1229 "scanner.cc"

#define INITIAL 0
#define str_state 1
#define regex_state 2
#define incl 3
#define check_regex 4
#define regex_subst1 5
#define regex_subst2 6
#define line_comment 7
#define exec_class 8
#define requires 9

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 240 "scanner.ll"

#line 1470 "scanner.cc"

    yylval = yylval_param;

	if ( yyg->yy_init )
		{
		yyg->yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 661 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1550 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 241 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_GLOBAL_VARS);
	YY_BREAK
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_SUBROUTINE_DEFS);
	YY_BREAK
case 3:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_THREADS);
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_TOP_LEVEL_STATEMENTS);
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CLASS_DEFS);
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 246 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_NAMESPACE_DEFS);
	YY_BREAK
case 7:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_EXTERNAL_PROCESS);
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "scanner.ll"
getProgram()->lockOptions();
	YY_BREAK
case 9:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_PROCESS_CONTROL);
	YY_BREAK
case 10:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CONSTANT_DEFS);
	YY_BREAK
case 11:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 251 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_NEW);
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "scanner.ll"
getProgram()->parseSetParseOptions(PO_NO_CHILD_PO_RESTRICTIONS);
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "scanner.ll"
getProgram()->parseSetParseOptions(PO_REQUIRE_OUR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 254 "scanner.ll"
BEGIN(exec_class);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 255 "scanner.ll"
BEGIN(requires);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 256 "scanner.ll"
{
                                           char *cn = trim(yytext);
					   //printd(5, "scanner requesting feature: '%s'\n", cn);
					   if (MM.loadModule(cn, getProgram()))
					      parse_error("cannot provide feature '%s'", cn);
					   free(cn);
					   BEGIN(INITIAL);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 264 "scanner.ll"
BEGIN(incl);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 265 "scanner.ll"
{
                                           char *cn = trim(yytext);
					   //printf("setting class name to: '%s'\n", cn);
					   getProgram()->setExecClass(cn);
					   free(cn);
					   BEGIN(INITIAL);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 272 "scanner.ll"
// ignore white space
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 273 "scanner.ll"
{
                                           FILE *save_yyin = yyin;
					   QoreString *fname = getIncludeFileName(yytext);
					   yyin = fopen(fname->getBuffer(), "r");
					   
					   if (!yyin)
					   {
					      parse_error("cannot open include file \"%s\"", yytext);
					      yyin = save_yyin;
					      BEGIN(INITIAL);
					   }
					   else
					   {
					      // save file name string in QoreProgram's list
					      getProgram()->fileList.insert(fname->getBuffer());
					      // "give away" string - it will be deleted when the QoreProgram object
					      // is deleted
					      beginParsing(fname->giveBuffer(), (void *)YY_CURRENT_BUFFER);
					      yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE,yyscanner),yyscanner);
					      BEGIN(INITIAL);
					   }
					   delete fname;
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str_state):
case YY_STATE_EOF(regex_state):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(check_regex):
case YY_STATE_EOF(regex_subst1):
case YY_STATE_EOF(regex_subst2):
case YY_STATE_EOF(line_comment):
case YY_STATE_EOF(exec_class):
case YY_STATE_EOF(requires):
#line 296 "scanner.ll"
{
					   // delete current buffer
					   yy_delete_buffer(YY_CURRENT_BUFFER,yyscanner);
					   // get last parse state
					   YY_BUFFER_STATE yybs = (YY_BUFFER_STATE)endParsing();
					   if (yybs)
					   {
					      // need to close file and switch to previous buffer
					      fclose(yyin);
					      if (yybs)
						 yy_switch_to_buffer(yybs,yyscanner);
					   }
					   else
					      yyterminate();
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 311 "scanner.ll"
{
                                            int c;
                                            while ((c = yyinput(yyscanner)))
					       if (c == '\n')
						  increment_pgm_counter();
					       else if (c == '*')
					       {
						  if (yyinput(yyscanner) == '/') break;
						  else unput(c);
					       }
                                               else if (c == EOF)
                                               {
						  parse_error("EOF reached in block comment");
						  break;
					       }
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 327 "scanner.ll"
yylval->String = new QoreString(); BEGIN(str_state);
	YY_BREAK

case 23:
YY_RULE_SETUP
#line 329 "scanner.ll"
BEGIN(INITIAL); return QUOTED_WORD;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 330 "scanner.ll"
{
                                           increment_pgm_counter();
					   yylval->String->concat('\n');
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 334 "scanner.ll"
{
					   int result;
					   sscanf(yytext + 1, "%o", &result);
					   if (result > 0xff)
					      parse_error("octal constant out of bounds\n");
					   yylval->String->concat((char)result);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 341 "scanner.ll"
parse_error("bad escape sequence");
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 342 "scanner.ll"
yylval->String->concat('\n');
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 343 "scanner.ll"
yylval->String->concat('\t');
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 344 "scanner.ll"
yylval->String->concat('\r');
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 345 "scanner.ll"
yylval->String->concat('\b');
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 346 "scanner.ll"
yylval->String->concat('\f');
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 347 "scanner.ll"
yylval->String->concat(yytext[1]);
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 348 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->String->concat('\n');
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 352 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->String->concat(*(yptr++));
					}
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 359 "scanner.ll"
{
                                           // get regex modifiers
	                                   int c;
	                                   do {
					      c = yyinput(yyscanner);
					   } while (isRegexSubstModifier(yylval->RegexSubst, c));
					   unput(c);
					   BEGIN(INITIAL); 
					   yylval->RegexSubst->parse(); 
					   return REGEX_SUBST;
                                        }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 370 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexSubst->concat('\n');
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 374 "scanner.ll"
yylval->RegexSubst->concat('/');
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 375 "scanner.ll"
{ yylval->RegexSubst->concat('\\'); yylval->RegexSubst->concat(yytext[1]); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 376 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexSubst->concat(*(yptr++));
					}
	YY_BREAK


case 40:
YY_RULE_SETUP
#line 383 "scanner.ll"
BEGIN(regex_subst2); yylval->RegexSubst->setDivider();
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 384 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->RegexSubst->concat('\n');
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 388 "scanner.ll"
yylval->RegexSubst->concat('/');
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 389 "scanner.ll"
{ yylval->RegexSubst->concat('\\'); yylval->RegexSubst->concat(yytext[1]); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 390 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->RegexSubst->concat(*(yptr++));
					}
	YY_BREAK


case 45:
YY_RULE_SETUP
#line 397 "scanner.ll"
// ignore 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 398 "scanner.ll"
yylval->RegexSubst = new RegexSubst(); BEGIN(regex_subst1);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 399 "scanner.ll"
yylval->Regex = new QoreRegex(); BEGIN(regex_state);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 400 "scanner.ll"
yylval->Regex = new QoreRegex(); BEGIN(regex_state);
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 401 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK


case 50:
YY_RULE_SETUP
#line 404 "scanner.ll"
{
                                           // get regex modifiers
	                                   int c;
	                                   do {
					      c = yyinput(yyscanner);
					   } while (isRegexModifier(yylval->Regex, c));
					   unput(c);
					   BEGIN(INITIAL); 
					   yylval->Regex->parse(); 
					   return REGEX;
                                        }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 415 "scanner.ll"
{
	                                   increment_pgm_counter();
					   yylval->Regex->concat('\n');
                                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 419 "scanner.ll"
yylval->Regex->concat('/');
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 420 "scanner.ll"
{ yylval->Regex->concat('\\'); yylval->Regex->concat(yytext[1]); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 421 "scanner.ll"
{
					   char *yptr = yytext;
					   while (*yptr)
					      yylval->Regex->concat(*(yptr++));
					}
	YY_BREAK


case 55:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 428 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK

case 56:
YY_RULE_SETUP
#line 430 "scanner.ll"
BEGIN(line_comment);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 431 "scanner.ll"
return TOK_WHERE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 432 "scanner.ll"
return TOK_NULL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 433 "scanner.ll"
return TOK_NOTHING;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 434 "scanner.ll"
return TOK_CLASS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 435 "scanner.ll"
return TOK_PRIVATE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 436 "scanner.ll"
return TOK_NEW;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 437 "scanner.ll"
return TOK_SHIFT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 438 "scanner.ll"
return TOK_UNSHIFT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 439 "scanner.ll"
return TOK_DO;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 440 "scanner.ll"
return TOK_WHILE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 441 "scanner.ll"
return TOK_IF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 442 "scanner.ll"
return TOK_ELSE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 443 "scanner.ll"
return TOK_FOR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 444 "scanner.ll"
return TOK_FOREACH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 445 "scanner.ll"
return TOK_IN;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 446 "scanner.ll"
return TOK_ELEMENTS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 447 "scanner.ll"
return TOK_KEYS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 448 "scanner.ll"
return TOK_SUB;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 449 "scanner.ll"
return TOK_CONST;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 450 "scanner.ll"
return TOK_NAMESPACE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 451 "scanner.ll"
return TOK_RETURN;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 452 "scanner.ll"
return TOK_MY;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 453 "scanner.ll"
return TOK_OUR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 454 "scanner.ll"
return TOK_BREAK;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 455 "scanner.ll"
return TOK_CONTINUE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 456 "scanner.ll"
return TOK_TRY;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 457 "scanner.ll"
return TOK_THROW;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 458 "scanner.ll"
return TOK_RETHROW;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 459 "scanner.ll"
return TOK_CATCH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 460 "scanner.ll"
return TOK_FINALLY;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 461 "scanner.ll"
return TOK_FIND;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 462 "scanner.ll"
return TOK_DELETE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 463 "scanner.ll"
return TOK_BACKGROUND;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 464 "scanner.ll"
return TOK_SYNCHRONIZED;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 465 "scanner.ll"
return TOK_THREAD_EXIT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 466 "scanner.ll"
return TOK_EXISTS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 467 "scanner.ll"
return TOK_CONTEXT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 468 "scanner.ll"
return TOK_SUMMARIZE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 469 "scanner.ll"
return TOK_SUB_CONTEXT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 470 "scanner.ll"
return TOK_SORT_BY;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 471 "scanner.ll"
return TOK_SORT_DESCENDING_BY;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 472 "scanner.ll"
return TOK_BY;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 473 "scanner.ll"
return TOK_SWITCH;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 474 "scanner.ll"
return TOK_CASE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 475 "scanner.ll"
return TOK_DEFAULT;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 476 "scanner.ll"
return TOK_INHERITS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 477 "scanner.ll"
return TOK_PUSH;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 478 "scanner.ll"
return TOK_POP;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 479 "scanner.ll"
return TOK_SPLICE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 480 "scanner.ll"
return TOK_INSTANCEOF;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 481 "scanner.ll"
yylval->string = strdup("push"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 482 "scanner.ll"
yylval->string = strdup("pop"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 483 "scanner.ll"
yylval->string = strdup("splice"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 484 "scanner.ll"
yylval->string = strdup("shift"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 485 "scanner.ll"
yylval->string = strdup("unshift"); return KW_IDENTIFIER_OPENPAREN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 486 "scanner.ll"
yylval->datetime = makeDateTime(yytext); return DATETIME;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 487 "scanner.ll"
yylval->datetime = makeDate(yytext); return DATETIME;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 488 "scanner.ll"
yylval->datetime = makeTime(yytext); return DATETIME;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 489 "scanner.ll"
yylval->string = strdup(yytext); return SCOPED_REF;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 490 "scanner.ll"
yylval->nscope = new NamedScope(strdup(yytext)); yylval->nscope->fixBCCall(); return BASE_CLASS_CALL;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 491 "scanner.ll"
yylval->decimal = strtod(yytext, NULL); return FLOAT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 492 "scanner.ll"
yylval->integer = strtoll(yytext+1, NULL, 8); return INTEGER;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 493 "scanner.ll"
yylval->integer = strtoll(yytext, NULL, 10); return INTEGER;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 494 "scanner.ll"
yylval->datetime = makeYears(strtol(yytext, NULL, 10));   return DATETIME;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 495 "scanner.ll"
yylval->datetime = makeMonths(strtol(yytext, NULL, 10));  return DATETIME;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 496 "scanner.ll"
yylval->datetime = makeDays(strtol(yytext, NULL, 10));    return DATETIME;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 497 "scanner.ll"
yylval->datetime = makeHours(strtol(yytext, NULL, 10));   return DATETIME;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 498 "scanner.ll"
yylval->datetime = makeMinutes(strtol(yytext, NULL, 10)); return DATETIME;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 499 "scanner.ll"
yylval->datetime = makeSeconds(strtol(yytext, NULL, 10)); return DATETIME;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 500 "scanner.ll"
yylval->integer = strtoll(yytext, NULL, 16); return INTEGER;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 501 "scanner.ll"
yylval->string = strdup(yytext + 2); return SELF_REF;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 502 "scanner.ll"
yylval->string = strdup(yytext + 1); return VAR_REF;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 503 "scanner.ll"
yylval->string = strdup(yytext); return IDENTIFIER;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 504 "scanner.ll"
yylval->string = strdup(yytext + 1); return CONTEXT_REF;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 505 "scanner.ll"
yylval->string = strdup(yytext + 1); return COMPLEX_CONTEXT_REF;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 506 "scanner.ll"
return TOK_CONTEXT_ROW;
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 507 "scanner.ll"
yylval->string = strdup(remove_quotes(yytext)); return BACKQUOTE;
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 508 "scanner.ll"
yylval->String = new QoreString(remove_quotes(yytext)); return QUOTED_WORD;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 509 "scanner.ll"
return LOGICAL_LE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 510 "scanner.ll"
return LOGICAL_GE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 511 "scanner.ll"
return LOGICAL_NE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 512 "scanner.ll"
return LOGICAL_NE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 513 "scanner.ll"
return ABSOLUTE_EQ;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 514 "scanner.ll"
return ABSOLUTE_NE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 515 "scanner.ll"
return LOGICAL_EQ;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 516 "scanner.ll"
return LOGICAL_CMP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 517 "scanner.ll"
return LOGICAL_AND;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 518 "scanner.ll"
return LOGICAL_OR;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 519 "scanner.ll"
return SHIFT_RIGHT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 520 "scanner.ll"
return SHIFT_LEFT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 521 "scanner.ll"
return P_INCREMENT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 522 "scanner.ll"
return P_DECREMENT;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 523 "scanner.ll"
return PLUS_EQUALS;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 524 "scanner.ll"
return MINUS_EQUALS;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 525 "scanner.ll"
return AND_EQUALS;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 526 "scanner.ll"
return OR_EQUALS;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 527 "scanner.ll"
return MODULA_EQUALS;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 528 "scanner.ll"
return MULTIPLY_EQUALS;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 529 "scanner.ll"
return DIVIDE_EQUALS;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 530 "scanner.ll"
return XOR_EQUALS;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 531 "scanner.ll"
return SHIFT_RIGHT_EQUALS;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 532 "scanner.ll"
return SHIFT_LEFT_EQUALS;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 533 "scanner.ll"
BEGIN(check_regex); return REGEX_MATCH;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 534 "scanner.ll"
BEGIN(check_regex); return REGEX_NMATCH;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 535 "scanner.ll"
/* ignore whitespace */
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 536 "scanner.ll"
{
                                           increment_pgm_counter();
                                        }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 539 "scanner.ll"
return yytext[0];
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 540 "scanner.ll"
ECHO;
	YY_BREAK
#line 2575 "scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 661 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 661 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 660);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(str,strlen(str) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
       This function is called once per scanner lifetime. */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 1;
    yyg->yy_start = 0;
    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack = (int *) 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 540 "scanner.ll"



