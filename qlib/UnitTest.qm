# -*- mode: qore; indent-tabs-mode: nil -*-
# @file UnitTest.qm Qore user module for automatic testing

/*  UnitTest.qm Copyright 2012 - 2014 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.11
%new-style

%try-module xml
%define NO_XML
%endtry


module UnitTest {
    version = "0.1";
    desc = "user module for unit testing";
    author = "Petr Vanek <petr@yarpen.cz>";
    url = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage UnitTest Module

@tableofcontents

    @section unittestintro Introduction to the UnitTest Module

    The %UnitTest module provides functionality for automatic testing.

    To use this module, use \c "%requires UnitTest" in your code.
    
    <b>Examples:</b>
    @code
#!/usr/bin/env qore
%requires UnitTest
%requires Cow # module that we want to test

class TestCow inherits UnitTest {
    string testfile = tmpLocation() + '/test.txt';
    # some processing
    unlink(testfile);

    cmp(Cow.sound(), 'moo', "cow's sound is correct");

    ok(Cow.hasFourLegs(), "number of cow's legs correct");

    like(Cow.sound(), 'moo+', "cow's sound is correct");

    sub fly (string animal) {
        if (animal === "cow") {
            throw 'cow cannot fly'
        }
    }

    exception(\fly, ('cow'), 'cow cannot fly', 'invoked exception when cow trying to fly');

    cmploop(
        \eat(),
        (
            (
                "args" : ("grass"),
                "cmp"  : True,
                "msg"  : "cow can eat grass",
            ),
            (
                "args" : ("itself"),
                "cmp"  : False,
                "msg"  : "cow cannot eat itself",
            ),
        ),
    );
}
    @endcode

    @subsection unittestsrun How to run tests

    Suppose that you created some file test.qtest with automatic tests.
    Following command invokes them:

    @verbatim
    qore test.qtest [OPTIONS]
    @endverbatim

    Options table:

    @subsection unittestformats Supported output formats of test reports

    Currently the module provides the following output formats:
    - Plaintext - human readable format for manually invoked test runs
    - JUnit - machine readable format for further processing

    Plaintext format also supports verbose mode which reports also passing
    tests.

    @section unittest_relnotes Release Notes

    @subsection unittest_v0_1 Version 0.1
    - initial version of module
*/

#! the UnitTest namespace contains all the definitions in the UnitTest module
public namespace UnitTest {

    public const PLAINTEXT = 0;
    public const JUNIT     = 1;

    const OUT_TYPES = (
          "plain" : PLAINTEXT,
          "junit" : JUNIT,
        );

    const opts = (
          "help"    : "help,h",
          "verbose" : "verbose,v",
          "quiet"   : "quiet,q",
          "bq"      : "backquote,b",
          "threads" : "threads,t=i",
          "format"  : "format=s",
        );
}

#! Base class that exports functions for unit testing. For realworld examples see @ref unittestintro.
public class UnitTest::UnitTest {
    private {
        int m_testCount = 0;
        int m_errors = 0;

        hash m_result = hash();
        int m_output = PLAINTEXT;

        hash m_options;
    }

    constructor() {
        m_options = new GetOpt(opts).parse2(\ARGV);
        if (m_options.help)
            usage();

        if (m_options.verbose && m_options.quiet) {
            printf("You cannot use quiet and verbose options together\n");
            exit(1);
        }

        m_options.iters = shift ARGV;
        if (elements ARGV) {
            printf("error, excess arguments on command-line\n");
            usage();
        }

        if (!m_options.iters)
            m_options.iters = 1;
        if (!m_options.threads)
            m_options.threads = 1;

        if (m_options.format) {
            if (!exists OUT_TYPES{m_options.format})
                throw "UNIT-TEST-ERROR", sprintf("Unknown output format: %s", m_options.format);

            m_output = OUT_TYPES{m_options.format};
        }
        else {
            m_output = PLAINTEXT;
        }

        if (m_output == PLAINTEXT && !quiet()) {

            printf("QORE v%s Test Script (%d thread%s, %d iteration%s per thread)\n",
                   Qore::VersionString,
                   m_options.threads,
                   m_options.threads == 1 ? "" : "s",
                   m_options.iters,
                   m_options.iters == 1 ? "" : "s"
                  );
        }
    }

    destructor() {
        report(m_output);
    }

    hash options() {
        return m_options;
    }

    any option(string key) {
        return m_options{key};
    }

    bool verbose() {
        return exists m_options.verbose ? boolean(m_options.verbose) : False;
    }

    bool quiet() {
        return exists m_options.quiet ? boolean(m_options.quiet) : False;
    }

    int errors() {
        return m_errors;
    }

    int testCount() {
        return m_testCount;
    }

    errorInc() {
        m_errors++;
    }

    private usage() {
        printf("usage: %s [options]
 -h,--help         this help text
 -v.--verbose      more verbose output
 -q.--quiet        print only errors
 -b,--backquote    include backquote tests (slow)
 -t,--threads=ARG  runs tests in ARG threads
    --format=type  output format (default: plain)

available output formats (stdout):
", get_script_name());

        map printf("    %s\n", $1), keys OUT_TYPES;
        exit(1);
    }


    report(int format = PLAINTEXT) {
        switch (format) {
            case PLAINTEXT:
                reportPlaintext();
                break;
            case JUNIT:
                reportJunit();
                break;
            default:
                throw "UNIT-TEST-ERROR", "Unknown format type";
        }
    }

    private reportPlaintext() {
        HashIterator it(m_result);
        int test_id = 0;
        while (it.next()) {
            if (!m_options.verbose && it.getValue().result == "OK")
                continue;
            printf("%s: %s\n", it.getValue().result, it.getKey());
            if (m_options.verbose && it.getValue().result != "OK") {
                printf("%s\n", it.getValue().msg);
            }
        }

        if (!quiet()) {
            printf("%d tests started, %d error%s\n", testCount(), errors(), errors() == 1 ? "" : "s");
        }
    }

    private reportJunit() {
%ifdef NO_XML
        stderr.printf("No XML module found. Use --format=plain instead\n");
        exit(1);
%else
        hash junit;
        junit.testsuites."^attributes^" = ( "errors" : errors(),
                                            "tests"  : testCount(),
                                          );
        junit.testsuites.testcase = list();

        HashIterator it(m_result);
        while (it.next()) {
             hash testcase;
             if (it.getValue().result == "OK") {
                 testcase."^attributes^" = ( "name" : it.getKey(), "status" : it.getValue().result );
             }
             else {
                 testcase."^attributes^" = ( "name" : it.getKey(), "status" : "ERROR" );
                 testcase.error."^attributes^" = ( "message" : it.getKey(), "type" : "ERROR" );
             }
             push junit."testsuites"."testcase", testcase;
        }

        printf("%s\n", makeFormattedXMLString(junit));
%endif
    }

    #! Returns path for temporary files
    /** @par Example:
        @code
string testfile = this.tmpLocation() + '/test.txt';
# some processing
unlink(testfile);
        @endcode
    */
    string tmpLocation() {
        # TODO: add support for other platforms
        my dir = ENV."TMP";
        if (!dir) {   # TODO: use some qore idiom?
            dir = '/tmp';
	}

        return dir;
    }

    #! Performs a compare test
    /** @param v1 result of tested function
        @param v2 expected value
        @param msg test message that will be printed
        @par Example:
        @code
this.cmp(Cow.sound(), 'moo', "cow's sound is correct");
        @endcode
    */
    cmp(any v1, any v2, string msg) {
        m_testCount++;
        if (v1 === v2) {
            m_result{msg}{'result'} = "OK";
        }
        else {
            m_result{msg}{'result'} = sprintf("ERROR: %N != %N", v1, v2);
            m_errors++;
        }
    }

    #! Performs an OK test
    /** @param v result of some statement
        @param msg test message that will be printed
        @par Example:
        @code
this.ok(Cow.hasFourLegs(), "number of cow's legs correct");
        @endcode
    */
    ok(softbool v, string msg) {
	cmp(v, True, msg);
    }

    #! Performs a LIKE test
    /** @param str result fo some operation
        @param regex a regexp that expected value should match
        @param msg test message that will be printed
        @par Example:
        @code
this.like(Cow.sound(), 'moo+', "cow's sound is correct");
        @endcode
    */
    like(string str, string regex, string msg) {
        bool match = str.regex(regex);
        ok(match, msg);
        if (!match) {
            string msgstr = "#     string: " + str + "\n not match: " + regex;
            m_result{msg}{'msg'} = regex_subst(msgstr, "\n(?=.)", "\n# ");
        }
    }

    #! Performs a test for exception
    /** @param f tested function
        @param params params for tested function
        @param regex a regexp that expected result value of callref with given params should match
        @param msg test message that will be printed
        @par Example:
        @code
sub fly (string animal) {
    if (animal === "cow") {
        throw 'cow cannot fly'
    }
}

this.exception(\fly, ('cow'), 'cow cannot fly', 'invoked exception when cow trying to fly');
        @endcode
    */
    exception(callref f, list params, string regex, string msg) {
        try {
            call_function_args(f, params);
        }
        catch (ex) {
            like(ex.desc, regex, msg);
            return;
        }
        ok(0, msg);
        m_result{msg}{'msg'} = '# found normal exit instead of exception';
    }

    #! Performs a serie of batched CMP tests
    /** @param f tested function
        @param testcases testcases

        each testcase is a hash with folowing parameters:
        * list of arguments for tested function
        * expected value returned from the tested function
        * test message for this particular testcase
        @par Example:
        @code
this.cmploop(
    \eat(),
    (
        (
            "args" : ("grass"),
            "cmp"  : True,
            "msg"  : "cow can eat grass",
        ),
        (
            "args" : ("itself"),
            "cmp"  : False,
            "msg"  : "cow cannot eat itself",
        ),
    ),
);
        @endcode
    */
    cmploop(callref f, list testcases) {
        foreach hash testcase in (testcases) {
            list args = testcase.args;
            any bak = call_function_args(f, args);
            cmp(bak, testcase.cmp, testcase.msg);
        }
    }
}
