#!/usr/bin/env qore 
# -*- mode: qore; indent-tabs-mode: nil -*-
%require-types
%enable-all-warnings
%requires SqlUtil
%requires UnitTest
%require-types

my UnitTest $t();

# {{{ create test db

# get datasource connect string
my *string $connstr;
do {
    $connstr = shift $ARGV;
} while ($connstr[0] == '-');

if (!$connstr) {
    $connstr = $ENV.QORE_DB_CONNSTR;
    if (!$connstr) {
        my string $hn = gethostname();
        switch ($hn) {
            case /^star/: $connstr = "oracle:omquser/omquser@star"; break;
            case /^quark/: $connstr = "oracle:omquser/omquser@el7"; break;
            case /^el6/:
            case /^el5/:
            case /^manatee/:
            case /^xbox/: $connstr = "oracle:omquser/omquser@xbox"; break;
            default: {
                stderr.printf("cannot detect DB connect string from hostname and QORE_DB_CONNSTR environment variable not set; cannot run SqlUtil tests\n");
                exit(0);
            }
        }
    }
}
    
my Datasource $ds($connstr);
my Database $db($ds);

const TEST_SCHEMA = (
    "tables"    : TEST_SCHEMA_TABLES,
    "sequences" : TEST_SCHEMA_SEQUENCES,
);

const TEST_TABLE_NAME = "t_some_table";

const TEST_SCHEMA_SEQUENCES = (
    "tracking_logging_s" : hash(),
);

const TEST_SCHEMA_TABLES = (
    TEST_TABLE_NAME : T_SOME_TABLE,
);

const T_SOME_TABLE = (
    "columns" : (
        "id"    : ( "native_type" : "number", "notnull" : True ),
        "col_a" : ( "native_type" : "varchar2", "character_semantics" : True, "notnull" : True, "size" : "25"),
        "col_b" : ( "native_type" : "varchar2", "character_semantics" : True, "size" : "25"),
    )
);

my hash $opts = (
    "info_callback"         : \infoCallback(),
    "sql_callback"          : \sqlCallback(),
    "sql_callback_executed" : True,
);

# }}}
# {{{ smoke tests

# CREATE TABLE test
$db.dropTableIfExists(TEST_TABLE_NAME);
$db.getAlignSql(TEST_SCHEMA, $opts);
my Table $table("oracle:omquser/omquser@xbox", TEST_TABLE_NAME);
$t.ok($table.checkExistence(), "create table: existence of 3-columned table checked");

# INSERT test
$table.insert(("id": 1, "col_a": "A1", "col_b" : "B1"));
$table.insert(("id": 2, "col_a": "A2", "col_b" : "B2"));
$t.cmp($table.rowCount(), 2, "insert: 2 rows inserted");

# SELECT test
my hash $data = $table.select();
$t.cmp($data, ("id" : (1, 2), 'col_a' : ('A1', 'A2'), 'col_b' : ('B1', 'B2')), 'select: data checked');
$t.cmp($data.id[2], NOTHING, "select: row 2, not exists");

# UPDATE test
$table.update(("col_b" : "new B2"), ("id" : 2));
$data = $table.selectRow(("where" : ("id" : 2)));
$t.cmp($data.col_b, 'new B2', "update: new value checked");

# DELETE test
$table.del(("id" : 2));
$t.cmp($table.rowCount(), 1, "delete: we have only row rest");
$data = $table.select(("where" : ("id" : 2)));
$t.cmp(elements $data.id, 0, "delete: no rows with removed id found");

# DROP TABLE test
$db.dropTableIfExists(TEST_TABLE_NAME);
my Table $removed_table("oracle:omquser/omquser@xbox", TEST_TABLE_NAME);
$t.ok(!$removed_table.checkExistence(), "drop table: no table found");

# }}}

# {{{ infoCallback # TODO: move to module

sub infoCallback(string $str, int $ac, string $type, string $name, *string $tab, *string $new_name, *string $i) {
    if ($ac != AbstractDatabase::AC_Unchanged) {
        printf("INFO> %s\n", $str);
    }
}

# }}}
# {{{ sqlCallback # TODO: move to module

sub sqlCallback(string $sql) {
    if ($opts.verbose) {
        printf("EXEC> %s\n", $sql);
    }
    try {
        $ds.execRaw($sql);
    }
    catch ($ex) {
        rethrow;
    }
}

# }}}
