#!/usr/bin/env qore
%require-types
%enable-all-warnings
%requires UnitTest

my UnitTest $unit();

my int $a = 1;
$unit.cmp($a, 1, "variable assignment");
$a += 3;
$unit.cmp($a, 4, "integer += operator");
$a -= 2;
$unit.cmp($a, 2, "integer -= operator");
$a |= 1;
$unit.cmp($a, 3, "|= operator");
$a &= 1;
$unit.cmp($a, 1, "&= operator");
$a *= 10;
$unit.cmp($a, 10, "integer *= operator");
my float $f = $a;
$f *= 2.2;
$unit.cmp($f, 22.0, "first float *= operator");
$f *= 2;
$unit.cmp($f, 44.0, "second float *= operator");
$f /= 4.4;
$unit.cmp($f, 10.0, "float /= operator");
$a = 10;
$a /= 2;
$unit.cmp($a, 5, "integer /= operator");
$unit.cmp(4 / 2, 2, "first / operator");
$a = 0xfdb4902a;
$a ^= 0xbf40e848;
$unit.cmp($a, 0x42f47862, "^= xor equals operator");
$a <<= 2;
$unit.cmp($a, 0x10bd1e188, "<<= shift-left-equals operator");
$a >>= 3;
$unit.cmp($a, 0x217a3c31, ">>= shift-right-equals operator");
$a = 1;
$unit.cmp($a++, 1, "pre post-increment (++) operator");
$unit.cmp($a, 2, "post post-increment (++) operator");
$unit.cmp($a--, 2, "pre post-decrement (--) operator");
$unit.cmp($a, 1, "post post-decrement (--) operator");
$unit.cmp(++$a, 2, "pre-increment (++) operator");
$unit.cmp(--$a, 1, "pre-decrement (--) operator");

my string $astr = "hello" + " there";
$unit.cmp($astr, "hello there", "string concatenation");
$astr += " gee";
$unit.cmp($astr, "hello there gee", "string plus equals");

$f = 1.0;
$f += 1.2;
$unit.cmp($f, 2.2, "float += operator");
$f -= 1.1;
$unit.cmp($f, 1.1, "float -= operator");
$f = 5.5 * 2.0;
$unit.cmp($f, 11.0, "float * operator");

$unit.cmp(now() > (now() - 1D), True, "date > operator");
$unit.cmp(now() >= (now() - 1h), True, "date >= operator");
$unit.cmp((now() - 1m) < now(), True, "date < operator");
$unit.cmp((now() - 1M) <= now(), True, "date <= operator");

my date $bt = my date $at = now();
$unit.cmp($at, $bt, "date == operator");
$at = 2004-02-28-12:00:00;
$at += 1D;
$unit.cmp($at, 2004-02-29-12:00:00, "first date += operator");
$at -= (3h + 5m);
$unit.cmp($at, 2004-02-29-08:55:00, "second date += operator");

my any $ni += 3.2;
$unit.cmp($ni, 3.2, "float +=, lhs NOTHING");
delete $ni;
$ni += "hello";
$unit.cmp($ni, "hello", "string +=, lhs NOTHING");
delete $ni;
$ni -= 4.5;
$unit.cmp($ni, -4.5, "float -=, lhs NOTHING");
delete $ni;
$ni -= 4;
$unit.cmp($ni, -4, "integer -=, lhs NOTHING");
# some array and hash tests in separate functions

# get function closure with bound local variable (multiply by 2)
my code $c = map_closure(2);

# map function to list
$unit.cmp((map $c($1), (1, 2, 3)), (2, 4, 6), "map operator using closure");

# map immediate expression to list
$unit.cmp((map $1 * 2, (1, 2, 3)), (2, 4, 6), "map operator using expression");

# map function to list with optional select code as expression
$unit.cmp((map $c($1), (1, 2, 3), $1 > 1), (4, 6), "map operator using closure with optional select expression");

# select all elements from list greater than 1 with expression
$unit.cmp((select (1, 2, 3), $1 > 1), (2, 3), "select operator with expression");

# create a sinple closure to subtract the second argument from the first
$c = any sub(any $x, any $y) { return $x - $y; };

# left fold function on list using closure
$unit.cmp((foldl $c($1, $2), (2, 3, 4)), -5, "foldl operator with closure");

# left fold function on list using expression
$unit.cmp((foldl $1 - $2, (2, 3, 4)), -5, "foldl operator with expression");

# right fold function on list using immediate closure
$unit.cmp((foldr $c($1, $2), (2, 3, 4)), -1, "foldr operator with closure");

# right fold function on list using expression and implicit arguments
$unit.cmp((foldr $1 - $2, (2, 3, 4)), -1, "foldr operator with expression");

my hash $h = ("test" : 1, "two" : 2.0, "three" : "three", "four" : False );
$unit.cmp(remove $h.two, 2.0, "first remove operator");

code sub map_closure(any $v) { return any sub(any $v1) { return $v * $v1; }; }
