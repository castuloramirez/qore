#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%exec-class FtpTest

%requires ../../../../../qlib/QUnit.qm
%requires ../../../../../qlib/Util.qm

%require-types
%require-our
%new-style
    
class FtpTest inherits FtpClient, QUnit::Test {    
    private {
        # file on some public ftp
        const Url = 'ftp://ftp.wa.co.za/pub/CPAN/index.html';

        # path on remote host
        string path;

        # file on remote host
        string file;
        
        # valid flag
        bool valid = True;
    }

    constructor() : Test("FtpClient Test", "1.0", \ARGV) {
        # set valid flag; skip tests if no connection can be made
        string url = ARGV[0] ?? ENV.QORE_FTPTEST_URL ?? Url;
        setup(url);

        testFunctions = (
            ("func": \testFtpClient(), "name": "test FtpClient object"),
            );
        set_return_value(main());
    }

    setup(string url) {
	hash h = parse_url(url);
	if (!exists h.path) {
	    printf("url %y is missing a path to retrieve\n", url);
            valid = False;
            return;
	}
	if (!exists h.host) {
	    printf("url %y is missing the hostname\n", url);
            valid = False;
            return;
	}

	path = dirname(h.path);
	file = basename(h.path);

	setURL(url);
    }

    testFtpClient() {
        if (!valid) {
            testSkip("FtpClient object is not valid");
            return;
        }

        testAssertion(\connect(), NOTHING, new TestResultValue(NOTHING));

        string local_path = tmp_location() + '/ftptest';
        unlink(local_path);

	cwd(path);

        testAssertion(\get(), (file, local_path), new TestResultValue(NOTHING));

        *list l = stat(local_path);
        testAssertion(int sub () {return l.typeCode();}, NOTHING, new TestResultValue(NT_LIST));

        testAssertion(\notEquals(), (getMode(), "auto"));

	disconnect();
        unlink(local_path);

        testAssertion(\equals(), (getMode(), "auto"));
	setModePASV();

        testAssertion(\connect(), NOTHING, new TestResultValue(NOTHING));

        testAssertion(\equals(), (getMode(), "pasv"));
	disconnect();
        testAssertion(\equals(), (getMode(), "pasv"));
    }
}
