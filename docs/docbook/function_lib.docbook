<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="Function_Library">
  <title>Function Library</title>

  <para>This section describes the built-in subroutines in the Qore language making up the system function library.  Following is a list of function categories, and below there is an alphabetically-ordered list of all Qore built-in functions.</para>

  <table>
    <title>System Function Category List</title>
    <tgroup cols="1" align="left" colsep="1" rowsep="1">
      <thead>
        <row>
          <entry><para>Category</para></entry>
        </row>
      </thead>
      <tbody>
        <row><entry><para><link linkend="Math_Functions">Math Functions</link></para></entry></row>
        <row><entry><para><link linkend="Output_Functions">Output Functions</link></para></entry></row>
        <row><entry><para><link linkend="Date_and_Time_Functions">Date and Time Functions</link></para></entry></row>
        <row><entry><para><link linkend="Qore_Type_Functions">Type Functions</link></para></entry></row>
        <row><entry><para><link linkend="Environment_Functions">Environment Functions</link></para></entry></row>
        <row><entry><para><link linkend="String_Functions">String Functions</link></para></entry></row>
        <row><entry><para><link linkend="Operating_System_Functions">Operating System Functions</link></para></entry></row>
        <row><entry><para><link linkend="Cryptographic_Functions">Cryptographic Functions</link></para></entry></row>
        <row><entry><para><link linkend="Digest_Functions">Digest Functions</link></para></entry></row>
        <row><entry><para><link linkend="Filesystem_Functions">Filesystem Functions</link></para></entry></row>
        <row><entry><para><link linkend="Data_Compression_Functions">Data Compression Functions</link></para></entry></row>
        <row><entry><para><link linkend="Miscellaneous_Functions">Miscellaneous Functions</link></para></entry></row>
        <row><entry><para><link linkend="Threading_Functions">Threading Functions</link></para></entry></row>
        <row><entry><para><link linkend="XML_Functions">XML Functions</link></para></entry></row>
        <row><entry><para><link linkend="JSON_Functions">JSON Functions</link></para></entry></row>
      </tbody>
    </tgroup>
  </table>

  <table>
    <title>System Function Library</title>
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <thead>
        <row>
          <entry>
            <para>Function Name</para>
          </entry>
          <entry>
            <para>Ret Type</para>
          </entry>
          <entry>
            <para>Exception</para>
          </entry>
          <entry>
            <para>Brief Description</para>
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <para>
              <link linkend="abort">abort()</link>
            </para>
          </entry>
          <entry>
            <para>N/A</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>aborts the process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="abs">abs()</link>
            </para>
          </entry>
          <entry>
            <para>Float or Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the absolute value of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="acos">acos()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the arc cosine of the number passed in radians</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="asin">asin()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the arc sine of the number passed in radians.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="atan">atan()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the arc tangent of the number passed in radians.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="backquote">backquote()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Executes a process and returns a string of the output (stdout only)</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="basename">basename()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a string giving the last element of a file path.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="binary">binary()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a binary data type of the data passed.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="binary_to_string">binary_to_string()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Returns a string created from the binary data passed.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="index">bindex()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the byte position of a substring within a string and takes an optional starting offset</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="blowfish_encrypt_cbc">blowfish_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="blowfish_decrypt_cbc">blowfish_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="blowfish_decrypt_cbc_to_string">blowfish_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm.</para>
        </entry>
      </row>


        <row>
          <entry>
            <para>
              <link linkend="boolean">boolean()</link>
            </para>
          </entry>
          <entry>
            <para>Boolean</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts the argument to a boolean value</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="index">brindex()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the byte position of a substring within a string as searched from the end of the string and takes an optional starting offset</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="call_builtin_function">call_builtin_function()</link></para></entry>
          <entry><para>any</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Calls a builtin function identified by the first string argument and returns the return value, passing the remaining arguments after the function name to the function</para></entry>
        </row>
        <row>
          <entry><para><link linkend="call_builtin_function_args">call_builtin_function_args()</link></para></entry>
          <entry><para>any</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Calls a builtin function identified by the first string argument and returns the return value, using the argument after the function name as a list of arguments to pass to the function.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="call_function">call_function()</link></para></entry>
          <entry><para>any</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Calls a function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> and returns the return value, passing the remaining arguments after the function name to the function (or <link linkend="call_references">call reference</link>).</para></entry>
        </row>
        <row>
          <entry><para><link linkend="call_function_args">call_function_args()</link></para></entry>
          <entry><para>any</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Calls a function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> and returns the return value, using the argument after the function name as a list of arguments to pass to the function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link>.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="callObjectMethod">callObjectMethod()</link>
            </para>
          </entry>
          <entry>
            <para>any</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>calls a method given by a string of the object passed, passing the remaining arguments to the method as arguments</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="callObjectMethodArgs">callObjectMethodArgs()</link>
            </para>
          </entry>
          <entry>
            <para>any</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>calls a method given by a string of the object passed, using the argument after the method name as the list of arguments to pass to the method</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="cast5_encrypt_cbc">cast5_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="cast5_decrypt_cbc">cast5_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="cast5_decrypt_cbc_to_string">cast5_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm.</para>
        </entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="cbrt">cbrt()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the cube root of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="ceil">ceil()</link></para></entry>
          <entry><para>Float</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a value rounded up to the next highest integer</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="chdir">chdir()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Changes the current working directory.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="chmod">chmod()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Changes the mode of a file.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="chomp">chomp()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Removes the trailing end-of-line indicator from a string and returns the new string (also see the <link linkend="Chomp_Operator">chomp</link> operator); also accepts variable references to do modifications in-place.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="chown">chown()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Changes the user and group owners of a file (if the current user has permission to do so), follows symbolic links.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="chr">chr()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a string containing a single ASCII character represented by the numeric value passed.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getmicros">clock_getmicros()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in microseconds (1/1000000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getmillis">clock_getmillis()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in milliseconds (1/1000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getnanos">clock_getnanos()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in nanoseconds (1/1000000000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="compress">compress()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Performs zlib-based &quot;deflate&quot; data compression (<ulink url="http://www.ietf.org/rfc/rfc1951.txt?number=1952">RFC 1951</ulink>) and returns a binary object of the compressed data.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="convert_encoding">convert_encoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Performs explicit string character encoding conversions.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="cos">cos()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the cosine of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="cosh">cosh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the hyperbolic cosine of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="date">date()</link></para></entry>
          <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Converts the argument passed to a date.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="date_ms">date_ms()</link></para></entry>
          <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Converts an integer argument as a millisecond offset from January 1, 1970 to a date.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="days">days()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a <link linkend="Relative_Dates">relative date</link> in days for date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="delete_all_thread_data">delete_all_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>n/a</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Deletes all keys in the thread-local data hash.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="delete_thread_data">delete_thread_data()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Deletes the data associated to one or more keys in the thread-local data hash (destroys any objects as well).</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="des_encrypt_cbc">des_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_decrypt_cbc">des_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_decrypt_cbc_to_string">des_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede_encrypt_cbc">des_ede_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede_decrypt_cbc">des_ede_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede_decrypt_cbc_to_string">des_ede_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede3_encrypt_cbc">des_ede3_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede3_decrypt_cbc">des_ede3_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="des_ede3_decrypt_cbc_to_string">des_ede3_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="desx_encrypt_cbc">desx_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="desx_decrypt_cbc">desx_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="desx_decrypt_cbc_to_string">desx_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data to a string using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm.</para>
        </entry>
      </row>

      <row>
        <entry><para><link linkend="DSS">DSS()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the DSS message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="DSS_bin">DSS_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the DSS message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="DSS1">DSS1()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the DSS1 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="DSS1_bin">DSS1_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the DSS1 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
        <row>
          <entry><para><link linkend="errno">errno()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the value of the system &quot;errno&quot; variable, holding the last error code generated by a system call</para></entry>
        </row>
        <row>
          <entry><para><link linkend="exec">exec()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Replaces the current process image with another.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="existsFunction">existsFunction()</link>
            </para>
          </entry>
          <entry>
            <para>Boolean</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns True if the function exists in the current program's function name space.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exit">exit()</link>
            </para>
          </entry>
          <entry>
            <para>N/A</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Exits the program</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exp">exp()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the value of e raised to the power of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exp2">exp2()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the value of 2 raised to the power of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="expm1">expm1()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns an equivalent of exp(x) - 1</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="f_printf">f_printf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>&quot;field&quot; printf, field width specifiers are respected. Returns string printed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="f_sprintf">f_sprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>&quot;field&quot; sprintf(), field width specifiers are 
      respected</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="float">float()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to a floating-point 
      number</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="floor">floor()</link>
            </para>
          </entry>
          <entry><para>Float</para>
          </entry>
          <entry><para>N</para>
          </entry>
          <entry>
            <para>Returns a value rounded down to the nearest integer</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="flush">flush()</link></para></entry>
          <entry><para>n/a</para></entry>
	  <entry><para>N</para></entry>
          <entry><para>Flushes output to the console output with <link linkend="print">print()</link>, <link linkend="printf">printf()</link>, etc</para></entry>
        </row>
        <row>
          <entry><para><link linkend="force_encoding">force_encoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a string tagged with the given character encoding; does not actually change the string data; use only in the case that a string is tagged with the wrong encoding.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="fork">fork()</link>
            </para>
          </entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Creates a duplicate of the current process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="format_date">format_date()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Allows dates to be formatted</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="format_number">format_number()</link>
            </para>
          </entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Allows numbers to be formatted with more options than sprintf()</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="functionType">functionType()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns &quot;builtin&quot;, &quot;user&quot;, or NOTHING according to the function name passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_all_thread_data">get_all_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the entire thread data hash.</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="get_days">get_days()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the days value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>


        <row>
          <entry>
            <para>
              <link linkend="get_default_encoding">get_default_encoding()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the name of the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore library.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_encoding">get_encoding()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a string describing the character encoding of the string passed.</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="get_hours">get_hours()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the hours value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="get_midnight">get_midnight()</link>
          </para>
        </entry>
        <entry>
          <para>Date</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns a date/time value representing midnight on the date passed (strips the time from the date passed and returns the new value)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="get_milliseconds">get_milliseconds()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the milliseconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="get_minutes">get_minutes()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the minutes value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="get_months">get_months()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the months value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>
      <row>
        <entry><para><link linkend="get_qore_library_info">get_qore_library_info()</link></para></entry>
        <entry><para>Hash</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns a hash of build and version information for the qore library.</para></entry>
      </row>
      <row>
        <entry><para><link linkend="get_qore_option_list">get_qore_option_list()</link></para></entry>
        <entry><para>List</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns a list of hashes giving information about qore library options.</para></entry>
      </row>
      <row>
        <entry><para><link linkend="get_seconds">get_seconds()</link></para></entry>
        <entry><para>Integer</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns an integer value representing the seconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para></entry>
      </row>

      <row>
        <entry><para><link linkend="get_script_dir">get_script_path()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns a string giving the path (directory and filename) from which the current script was executed (if known).</para></entry>
      </row>

      <row>
        <entry><para><link linkend="get_script_dir">get_script_dir()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns a string giving the directory from which the current script was executed (if known).</para></entry>
      </row>

      <row>
        <entry><para><link linkend="get_script_name">get_script_name()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>N</para></entry>
        <entry><para>Returns a string giving the filename of the current script (if known).</para></entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="get_thread_data">get_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>Any</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the value of the thread-local data attached to the key passed</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="get_years">get_years()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer value representing the years value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </entry>
      </row>


        <row>
          <entry>
            <para>
              <link linkend="getAllThreadCallStacks">getAllThreadCallStacks()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry><para>Returns a hash of call stacks keyed by each TID (thread ID).</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getByte">getByte()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the byte value withing the string or binary object passed.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getClassName">getClassName()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the class name of the object passed.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getcwd">getcwd()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the name of the current working directory.</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="getDateFromISOWeek">getDateFromISOWeek()</link>
          </para>
        </entry>
        <entry>
          <para>Date</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Retuns an <link linkend="Absolute_Dates">absolute date value</link> for the ISO-8601 calendar week information passed (year, week number, optional: day)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="getDayOfWeek">getDayOfWeek()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer representing the day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (0=Sunday, 6=Saturday)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="getDayNumber">getDayNumber()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer representing the ordinal day number in the year for the <link linkend="Absolute_Dates">absolute date</link> passed</para>
        </entry>
      </row>


        <row>
          <entry><para><link linkend="getDBIDriverCapabilities">getDBIDriverCapabilities()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns an integer representing the capabilities of a DBI driver.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getDBIDriverCapabilityList">getDBIDriverCapabilityList()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a list of codes representing the capabilities of a DBI driver.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getDBIDriverList">getDBIDriverList()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a list of strings of DBI drivers currently available.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getegid">getegid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the effective group ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="geteuid">geteuid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the effective user ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getFeatureList">getFeatureList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of strings of the builtin and module-supplied features of Qore.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getenv">getenv()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Retrieves the value of an environment 
    variable</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getgid">getgid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the real group ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="gethostbyaddr">gethostbyaddr()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the official hostname corresponding to the network addressed passed</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gethostbyaddr_long">gethostbyaddr_long()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns all host information corresponding to the network address</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gethostbyname">gethostbyname()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the first network address corresponding to the hostname</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gethostbyname_long">gethostbyname_long()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns all host information corresponding to the hostname</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gethostname">gethostname()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the hostname of the system</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="getISODayOfWeek">getISODayOfWeek()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns an integer representing the ISO-8601 day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (1=Monday, 7=Sunday)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="getISOWeekHash">getISOWeekHash()</link>
          </para>
        </entry>
        <entry>
          <para>Hash</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns a hash representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (hash keys: year, week, day)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="getISOWeekString">getISOWeekString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns a string representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (ex: 2006-01-01 = &quot;2005-W52-7&quot;)</para>
        </entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="getMethodList">getMethodList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of strings of the names of the methods of the class of the object passed as a parameter.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getModuleList">getModuleList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of hashes describing the currently-loaded Qore modules.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getpid">getpid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the PID (process ID) of the current process.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="getppid">getppid()</link></para></entry>
          <entry><para>Int</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the parent PID of the current process.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getpwuid">getpwuid()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a hash representing the user information of the user ID passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="gettid">gettid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the Qore thread ID (TID) of the current thread.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getuid">getuid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the real user ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="glob">glob()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of files matching the string argument</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="gmtime">gmtime()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Returns a date/time value in GMT</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="gunzip_to_binary">gunzip_to_binary()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Uncompresses data compressed with the &quot;gzip&quot; algorithm (<ulink url="http://www.ietf.org/rfc/rfc1952.txt?number=1952">RFC 1952</ulink>) using zlib functions and returns a binary object.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gunzip_to_string">gunzip_to_string()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Uncompresses data compressed with the &quot;gzip&quot; algorithm (<ulink url="http://www.ietf.org/rfc/rfc1952.txt?number=1952">RFC 1952</ulink>) using zlib functions and returns a string.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="gzip">gzip()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Performs zlib-based &quot;gzip&quot; data compression (<ulink url="http://www.ietf.org/rfc/rfc1952.txt?number=1952">RFC 1952</ulink>) and returns a binary object of the compressed data.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hash">hash()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts an object or a list to a hash; otherwise returns an empty hash.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hash_values">hash_values()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of all the values in the hash argument passed.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="hextoint">hextoint()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns an integer for a hexadecimal string value.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="hlstat">hlstat()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a hash of information about the file corresponding to the pathname argument; does not follow symbolic links (returns information about symbolic links).</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hours">hours()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a <link linkend="Relative_Dates">relative date</link> in hours to be used in date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="hstat">hstat()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a hash of information about the file corresponding to the pathname argument; follows symbolic links.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="html_decode">html_decode()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns a string with any HTML escape codes translated to the original characters</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="html_encode">html_encode()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns a string with any characters that can be escaped translated to HTML escape codes.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hypot">hypot()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="index">index()</link></para></entry>
          <entry><para>Int</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the character position of a substring within a string and takes an optional starting offset</para></entry>
        </row>
        <row>
          <entry><para><link linkend="inlist">inlist()</link></para></entry>
          <entry><para>Boolean</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns True if the first argument is a member of the second argument list using comparisons with type conversions.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="inlist_hard">inlist_hard()</link></para></entry>
          <entry><para>Boolean</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns True if the first argument is a member of the second argument list using comparisons without type conversions.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="int">int()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to an integer</para>
          </entry>
        </row>
      <row>
        <entry>
          <para>
            <link linkend="is_bdev">is_bdev()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a block device file on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_cdev">is_cdev()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a character device file on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_dev">is_dev()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a device file (either block or character) on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_dir">is_dir()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a directory on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_executable">is_executable()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies an executable file.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_file">is_file()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a regular file on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_link">is_link()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a symbolic link on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_pipe">is_pipe()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a pipe (FIFO) on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_readable">is_readable()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a file readable by the current user.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_socket">is_socket()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a socket on the filesystem.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="is_writeable">is_writeable()</link>
          </para>
        </entry>
        <entry>
          <para>Boolean</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Returns True if the string passed identifies a file writable by the current user.</para>
        </entry>
      </row>
        <row>
          <entry>
            <para>
              <link linkend="join">join()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Creates a string from a list and separator character</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="kill">kill()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sends a signal to a process (default: SIGHUP)</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="lchown">lchown()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Changes the user and group owners of a file (if the current user has permission to do so), does not follow symbolic links.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="length">length()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the length in characters for the string passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="list">list()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list with the argument passed as the first element (or an empty list if no argument is passed)</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="load_module">load_module()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Loads a Qore module at run-time if the feature name is not already present in the current Program object.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="localtime">localtime()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a date value in localtime based on the value of 
      the argument passed, which must be the number of seconds after Jan 1, 
      1970, 00:00:00</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="log10">log10()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the base 10 logarithm of the value passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="log1p">log1p()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the natural logarithm of the value passed plus 1</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="logb">logb()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the exponent of a number.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="lstat">lstat()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of filesystem values for the file or symbolic link passed.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="makeBase64String">makeBase64String()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a base64-encoded representation of a binary object or a string.</para></entry>
        </row>
      <row>
        <entry>
          <para>
            <link linkend="makeFormattedJSONRPC11ErrorString">makeFormattedJSONRPC11ErrorString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, formatted with line breaks for easier readability.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeFormattedJSONRPCErrorString">makeFormattedJSONRPCErrorString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a generic JSON-RPC error response string from the parameters passed, formatted with line breaks for easier readability.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeFormattedJSONRPCRequestString">makeFormattedJSONRPCRequestString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC request string from the parameters passed, formatted with line breaks for easier readability.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeFormattedJSONRPCResponseString">makeFormattedJSONRPCResponseString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC response string from the parameters passed, formatted with line breaks for easier readability.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeFormattedJSONString">makeFormattedJSONString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Serializes qore data into a JSON string, formatted with line breaks for easier readability.</para>
        </entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLFragment">makeFormattedXMLFragment()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string with formatting and without an XML header.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCCallString">makeFormattedXMLRPCCallString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string for an XML-RPC call with formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCCallStringWithEncoding">makeFormattedXMLRPCCallStringWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string for an XML-RPC call with formatting, taking an initial string argument to give the encoding for the created XML.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCCallStringArgs">makeFormattedXMLRPCCallStringArgs()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call with formatting, taking a single list argument for the argument list.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCCallStringArgsWithEncoding">makeFormattedXMLRPCCallStringArgsWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call with formatting, taking an initial string argument to give the encoding for the created XML, followed by the method name and a single list argument for the argument list.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCFaultResponseString">makeFormattedXMLRPCFaultResponseString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCFaultResponseStringWithEncoding">makeFormattedXMLRPCFaultResponseStringWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting, taking an initial string argument to give the encoding for the created XML.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCResponseString">makeFormattedXMLRPCResponseString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeFormattedXMLRPCResponseStringWithEncoding">makeFormattedXMLRPCResponseStringWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting, taking an initial string argument to give the encoding for the created XML.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCValueString">makeFormattedXMLRPCValueString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string in XML-RPC Value format with whitespace formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLString">makeFormattedXMLString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string with formatting and an XML header.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="makeHexString">makeHexString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a hex-encoded representation of a binary object or a string.</para></entry>
        </row>
      <row>
        <entry>
          <para>
            <link linkend="makeJSONRPC11ErrorString">makeJSONRPC11ErrorString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, without any line breaks.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeJSONRPCErrorString">makeJSONRPCErrorString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a generic JSON-RPC error response string from the parameters passed, without any line breaks.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeJSONRPCRequestString">makeJSONRPCRequestString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC request string from the parameters passed, without any line breaks.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeJSONRPCResponseString">makeJSONRPCResponseString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Creates a JSON-RPC response string from the parameters passed, without any line breaks.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="makeJSONString">makeJSONString()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Serializes qore data into a JSON string, without any line breaks.</para>
        </entry>
      </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLFragment">makeXMLFragment()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string without an XML header or formatting.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCCallStringWithEncoding">makeXMLRPCCallStringwithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting, taking an initial string argument to give the target character encoding for the XML string.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCCallStringArgs">makeXMLRPCCallStringArgs()</link></para></entry>
	  <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting, taking a single list argument for the argument list.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCCallStringArgsWithEncoding">makeXMLRPCCallStringArgsWithEncoding()</link></para></entry>
	  <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting, taking an initial string argument to give the target character encoding for the XML string followed by a list argument for the argument list.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCFaultResponseString">makeXMLRPCFaultResponseString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCFaultResponseStringWithEncoding">makeXMLRPCFaultResponseStringWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without formatting, taking an initial string argument to give the target character encoding for the XML string.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCResponseString">makeXMLRPCResponseString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response without formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLRPCResponseStringWithEncoding">makeXMLRPCResponseStringWithEncoding()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response without formatting, taking an initial string argument to give the target character encoding for the XML string.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCValueString">makeXMLRPCValueString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string in XML-RPC Value format without formatting.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="makeXMLString">makeXMLString()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Serializes a hash into a complete XML string with an XML header and without formatting.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="max">max()</link></para></entry>
          <entry><para>Any</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the maximum value in a list (see also <link linkend="min">min()</link>); one variant takes an optional callback reference to process lists of complex data types.</para></entry>
        </row>
      <row>
        <entry><para><link linkend="MD2">MD2()</link></para></entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD2 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry><para><link linkend="MD2_bin">MD2_bin()</link></para></entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD2 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="MD4">MD4()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD4 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="MD4_bin">MD4_bin()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD4 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="MD5">MD5()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD5 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="MD5_bin">MD5_bin()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MD5 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>

      <row>
        <entry>
          <para>
            <link linkend="MDC2">MDC2()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MDC2 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="MDC2_bin">MDC2_bin()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the MDC2 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
        <row>
          <entry><para><link linkend="milliseconds">milliseconds()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a <link linkend="Relative_Dates">relative date</link> in milliseconds to be used in date arithmetic.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="min">min()</link></para></entry>
          <entry><para>Any</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the minumum value in a list (see also <link linkend="max">max()</link>); one variant takes an optional <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> to process lists of complex data types.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="minutes">minutes()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a <link linkend="Relative_Dates">relative date</link> in minutes to be used in date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mkdir">mkdir()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Creates a directory.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mkfifo">mkfifo()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Creates a named pipe</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mktime">mktime()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Returns the number of seconds after Jan 1, 1970, 00:00:00, assuming that the date passed is in local time</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="months">months()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a <link linkend="Relative_Dates">relative date</link> in months to be used in date arithmetic.</para></entry>
        </row>


        <row>
          <entry><para><link linkend="nlog">nlog()</link></para></entry>
          <entry><para>Float</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the natural logarithm of the value passed</para></entry>
        </row>
        <row>
          <entry><para><link linkend="now">now()</link></para></entry>
          <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns current date and time with resolution to the second</para></entry>
        </row>
        <row>
          <entry><para><link linkend="now_ms">now_ms()</link></para></entry>
          <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns current date and time with resolution to the millisecond</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="num_threads">num_threads()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the current number of threads in the process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="ord">ord()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Gives the numeric value of the character passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parse">parse()</link>
            </para>
          </entry>
          <entry><para>n/a</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Adds the text passed to the current program's code</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="parseBase64String">parseBase64String()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Parses a base64 encoded string and returns the binary object</para></entry>
        </row>

        <row>
          <entry><para><link linkend="parseDatasource">parseDatasource()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a hash of the components of a datasource string.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="parseHexString">parseHexString()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Parses a hex-encoded string and returns the binary object</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="parseJSON">parseJSON()</link>
          </para>
        </entry>
        <entry>
          <para>Qore Data</para>
        </entry>
        <entry>
          <para>N</para>
        </entry>
        <entry>
          <para>Parses a JSON string and returns the corresponding qore data structure.</para>
        </entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="parseURL">parseURL()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry><para>Parses a URL string and returns a hash of the components.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXML">parseXML()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXMLWithRelaxNG">parseXMLWithRelaxNG()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string, validates the generated XML against a RelaxNG schema string, and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXMLWithSchema">parseXMLWithSchema()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string, validates the generated XML against an XSD schema string, and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXMLAsData">parseXMLAsData()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list) and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXMLAsDataWithRelaxNG">parseXMLAsDataWithRelaxNG()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list), validates the generated XML against a RelaxNG schema string, and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="parseXMLAsDataWithSchema">parseXMLAsDataWithSchema()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list), validates the generated XML against an XSD schema string, and returns a Qore hash structure.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCCall">parseXMLRPCCall()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry><para>deserializies an XML-RPC call string, returning a Qore data structure representing the call information.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry><para>deserializies an XML-RPC response string, returning a Qore data structure representing the response information.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCValue">parseXMLRPCValue()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry><para>deserializies an XML-RPC value tree, returning a Qore data structure representing the information.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="pow">pow()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns the value of the first argument raised to the power of the second</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="print">print()</link>
            </para>
          </entry>
          <entry>
            <para>-</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Prints the string passed without any formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="printf">printf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Prints a formatted string and returns string printed.</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="rand">rand()</link></para></entry>
          <entry><para>Float</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a random integer number.</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="rc2_encrypt_cbc">rc2_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc2_decrypt_cbc">rc2_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc2_decrypt_cbc_to_string">rc2_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc4_encrypt">rc4_encrypt()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc4_decrypt">rc4_decrypt()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc4_decrypt_to_string">rc4_decrypt_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc5_encrypt_cbc">rc5_encrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc5_decrypt_cbc">rc5_decrypt_cbc()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="rc5_decrypt_cbc_to_string">rc5_decrypt_cbc_to_string()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm.</para>
        </entry>
      </row>

        <row>
          <entry><para><link linkend="regex">regex()</link></para></entry>
	  <entry><para>Boolean</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Returns true if the regular expression matches the string passed</para></entry>
        </row>
        <row>
          <entry><para><link linkend="regex_extract">regex_extract()</link></para></entry>
	  <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Returns a list of substrings in a string based on matching patterns defined by a regular expression.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="regex_subst">regex_subst()</link></para></entry>
	  <entry><para>String</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Returns a string with patterns substituted according to the arguments passed.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="remove_signal_handler">remove_signal_handler()()</link></para></entry>
	  <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Removes an installed signal handler and returns the signal handling state to the default.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="remove_thread_data">remove_thread_data()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Removes the listed keys from the thread-local data hash.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="rename">rename()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Renames (or moves) a file or directory.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="replace">replace()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Replaces all occurrances of a substring in a string with another string and returns the new string.</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="reverse">reverse()</link></para></entry>
          <entry><para>String or List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Reverses the order of a string or a list and returns the new string or list.</para></entry>
        </row>


      <row>
        <entry>
          <para>
            <link linkend="RIPEMD160">RIPEMD160()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the RIPEMD160 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="RIPEMD160_bin">RIPEMD160_bin()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the RIPEMD160 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="rindex">rindex()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the starting character position of a string in another string as searched from the end of the string.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="rmdir">rmdir()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Removes a directory.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="round">round()</link></para></entry>
          <entry><para>Float</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a value rounded up to the nearest integer integer.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="save_thread_data">save_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>-</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Saves the data passed against the key passed in thread-local storage.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="seconds">seconds()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in seconds to be used in date arithmetic.</para></entry>
        </row>

        <row>
          <entry><para><link linkend="set_signal_handler">set_signal_handler()</link></para></entry>
	  <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Installs or replaces a signal handler.</para></entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="setegid">setegid()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Changes the process effective group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="seteuid">seteuid()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Changes the process effective user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </entry>
      </row>
        <row>
          <entry>
            <para>
              <link linkend="setenv">setenv()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sets the value of an environment variable</para>
          </entry>
        </row>

      <row>
        <entry>
          <para>
            <link linkend="setgid">setgid()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Changes the process group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="setuid">setuid()</link>
          </para>
        </entry>
        <entry>
          <para>Integer</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Changes the process user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </entry>
      </row>

      <row>
        <entry>
          <para>
            <link linkend="SHA">SHA()</link>
          </para>
        </entry>
        <entry>
          <para>String</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the SHA message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>
            <link linkend="SHA_bin">SHA_bin()</link>
          </para>
        </entry>
        <entry>
          <para>Binary</para>
        </entry>
        <entry>
          <para>Y</para>
        </entry>
        <entry>
          <para>Returns the SHA message digest of the supplied argument as a binary object(for strings, the trailing null character is not included in the digest)</para>
        </entry>
      </row>
      <row>
        <entry><para><link linkend="SHA1">SHA1()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA1 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA1_bin">SHA1_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA1 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA224">SHA224()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA224 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA224_bin">SHA224_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA224 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA256">SHA256()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA256 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA256_bin">SHA256_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA256 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA384">SHA384()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA384 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA384_bin">SHA384_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA384 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA512">SHA512()</link></para></entry>
        <entry><para>String</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA512 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>
      <row>
        <entry><para><link linkend="SHA512_bin">SHA512_bin()</link></para></entry>
        <entry><para>Binary</para></entry>
        <entry><para>Y</para></entry>
        <entry><para>Returns the SHA512 message digest of the supplied argument as a binary object (for strings, the trailing null character is not included in the digest)</para></entry>
      </row>

        <row>
          <entry>
            <para>
              <link linkend="sleep">sleep()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Causes the current thread to sleep for a certain number of seconds.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="sort">sort()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Sorts a list in ascending order (unstable); optionally takes a <link linkend="closures">closure</link> or a <link linkend="call_references">call reference</link> (function or object method reference) to sort non-trivial data types.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="sortDescending">sortDescending()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Sorts a list in descending order (unstable); optionally takes a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> (function or object method reference) to sort non-trivial data types.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="sortDescendingStable">sortDescendingStable()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Performs a descending stable sort on a list and returns the new list; optionally takes a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> (function or object method reference) to sort non-trivial data types.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="sortStable">sortStable()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Performs an ascending stable sort on a list and returns the new list; optionally takes a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> (function or object method reference) to sort non-trivial data types.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="split">split()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Splits a string into a list of components based on a separator string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sprintf">sprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Creates a string from the format argument passed and the other arguments.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sin">sin()</link>
            </para>
          </entry>
          <entry><para>Float</para></entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the sine of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sinh">sinh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the hyperbolic sine of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sqrt">sqrt()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the square root of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="srand">srand()</link>
            </para>
          </entry>
          <entry>
            <para>n/a</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Seeds the random number generator with the integer passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="stat">stat()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of filesystem information for the filename passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="strerror">strerror()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the description of the error number passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="string">string()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="strlen">strlen()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the number of characters in a string</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="strtoint">strtoint()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns an integer corresponding to the string passed with the possibility to specify the base (default base 10).</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="substr">substr()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a substring of a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="system">system()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Executes a process and returns the return code</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tan">tan()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the tangent of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tanh">tanh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the hyperbolic tangent of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="thread_list">thread_list()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a list of all current thread IDs</para></entry>
        </row>
        <row>
          <entry><para><link linkend="throwThreadResourceExceptions">throwThreadResourceExceptions()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Immediately runs all thread resource cleanup routines for the current thread and throws all associated exceptions.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="timegm">timegm()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tolower">tolower()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts a string to all lowercase</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="toupper">toupper()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts a string to all uppercase</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="trim">trim()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Removes the characters from a string (whiltespace by default, can be overridden) and returns the new string (also see the <link linkend="Trim_Operator">trim</link> operator); also accepts variable references to do modifications in-place.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="type">type()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the data type of the argument passed (see <link linkend="Qore_Type_Constants">Type_Constants</link>)</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="typename">typename()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>deprecated: use <link linkend="type">type()</link> instead</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="umask">umask()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sets the file creation mask for the process</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="uncompress_to_binary">uncompress_to_binary()</link></para></entry>
          <entry><para>Binary</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Uncompresses (inflates) data compressed with the &quot;deflate&quot; algorithm (<ulink url="http://www.ietf.org/rfc/rfc1951.txt?number=1951">RFC 1951</ulink>) using zlib functions and returns a binary object.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="uncompress_to_string">uncompress_to_string()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Uncompresses (inflates) data compressed with the &quot;deflate&quot; algorithm (<ulink url="http://www.ietf.org/rfc/rfc1951.txt?number=1951">RFC 1951</ulink>) using zlib functions and returns a string.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="unlink">unlink()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Deletes a file and returns 0 for success.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="unsetenv">unsetenv()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Unsets an environment variable</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="usleep">usleep()</link>
            </para>
          </entry>
          <entry><para>Int</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Causes the current thread to sleep for a certain number of microseconds</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="vprintf">vprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Outputs a formatted string based on a variable number of arguments given in a list after the format string.  Returns the string printed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="vsprintf">vsprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Formats a string based on a variable number of arguments given in a list after the format string and returns this formatted string.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="years">years()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in years to be used in date arithmetic.</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <sect1 id="Math_Functions">
    <title>Math Functions</title>

    <sect2 id="abs">
      <title>abs()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the absolute value of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>abs(<replaceable>numeric_expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = abs($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for abs()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>Absolute value of the integer passed.</para></entry>
	</row>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Absolute value of the floating-point value passed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="acos">
  <title>acos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the arc cosine of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>acos(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = acos($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for acos()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc cosine of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="asin">
<title>asin()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the arc sine of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>asin(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = asin($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for asin()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc sine of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="atan">
<title>atan()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the arc tangent of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>atan(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = atan($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for atan()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc tangent of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cbrt">
  <title>cbrt()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the cube root of the number passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cbrt(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = cbrt($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for cbrt()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the cube root of the number passed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="ceil">
<title>ceil()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a floating-point number equal to the smallest integral value greater than or equal to the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>ceil(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = ceil(3.2); # will return 4.0 </programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for ceil()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns a value rounded up to the nearest integral floating-point value.</para></entry>
  </row>
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cos">
<title>cos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the cosine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cos(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = cos($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for cos()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the cosine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cosh">
<title>cosh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic cosine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cosh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = cosh($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for cosh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic cosine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="exp">
<title>exp()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of e raised to the power of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>exp(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = exp($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for exp()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the value of e raised to the power of the argument passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="exp2">
<title>exp2()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of 2 raised to the power of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>exp2(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = exp2($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for exp2()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the value of 2 raised to the power of the argument passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="expm1">
<title>expm1()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns an equivalent of <link linkend="exp">exp(x)</link> - 1.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>expm1(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = expm1($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for expm1()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns an equivalent of exp(x) - 1.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="floor">
      <title>floor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a floating-point value rounded down to the integral value.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>floor(<replaceable>float</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$x = floor(3.7); # will return 3.0</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for floor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Float</para></entry>
              <entry><para>Float</para></entry>
              <entry><para>Returns a float-point value rounded down to the integral value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="format_number">
<title>format_number()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string of a formatted number according to the arguments passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>format_number(<replaceable>format_string, number</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The <replaceable>format_string</replaceable> has the following format: &lt;<replaceable>thousands_separator</replaceable>&gt;[&lt;<replaceable>decimal_separator</replaceable>&gt;&lt;<replaceable>decimals</replaceable>&gt;], where <replaceable>thousands_separator</replaceable> and <replaceable>decimal_separator</replaceable> are single ASCII characters defining the thousands and decimal separator characters respectively, and <replaceable>decimals</replaceable> is a single digit defining how may decimals should appear after the decimal point.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>format_number(".,3", -48392093894.2349); # returns "-48.392.093.894,235"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for format_number()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Types</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Float</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns a string corresponding to a number according to the formatting string passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="hypot">
<title>hypot()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hypot(<replaceable>float_x, float_y</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$z = hypot($x, $y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for hypot()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="log10">
<title>log10()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the base 10 logarithm of the value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>log10(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = log10($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for log10()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the base 10 logarithm of the value passed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="log1p">
<title>log1p()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the natural logarithm of the value passed plus 1.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>log1p(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = log1p($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for log1p()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the natural logarithm of the value passed plus 1.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="logb">
<title>logb()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the exponent of a number.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>logb(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = logb($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for logb()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the exponent of a number.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="nlog">
  <title>nlog()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the natural logarithm of the value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>nlog(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = nlog();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for nlog()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the natural logarithm of the value passed.</para></entry>
  </row>  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="pow">
  <title>pow()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a number raised to the power of another number.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>pow(<replaceable>x, y</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$z = pow($x, $y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for pow()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Types</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns x raised to the power of y.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by pow()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>DIVISION-BY-ZERO</code></para></entry>
	<entry><para>pow(x, y): y must be a non-negative value.</para></entry>
      </row>
      <row>
	<entry><para><code>INVALID-POW-ARGUMENTS</code></para></entry>
	<entry><para>pow(x, y): x cannot be negative when y is not an integer value.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
</sect2>

<sect2 id="round">
<title>round()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a floating-point number equal to the closest integer to the argument passed.  Numers halfway between two integers are arounded away from zero.  The availability of this function depends on the presence of the C-library's round() function; for maximum portability check the constant <code>HAVE_ROUND</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>round(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = round(3.2); # returns 3.0 </programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for round()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns a value rounded to the nearest integral floating-point value, half-way cases are rounded away from zero.</para></entry>
  </row>
</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by round()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	<entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_ROUND</code> before calling this function.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="sin">
<title>sin()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the sine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sin(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = sin($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sin()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the sine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="sinh">
<title>sinh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic sine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sinh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = sinh($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sinh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic sine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sqrt">
<title>sqrt()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the square root of the number passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sqrt(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = sqrt($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sqrt()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the square root of the number passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="tan">
<title>tan()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the tangent of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tan(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = tan($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for tan()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the tangent of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="tanh">
<title>tanh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic tangent of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tanh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$x = tanh($y);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for tanh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic tangent of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

</sect1>
<sect1 id="Output_Functions">
  <title>Output Functions</title>

  <para>The functions in this section operate only on stdout.  For generic file I/O please see the <link linkend="File_Class">File class</link>.</para>

  <sect2 id="f_printf">
  <title>f_printf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs a formatted string to standard output, respecting field widths in the formatting string.  See <link linkend="String_Formatting">String Formatting</link> for information on the formatting string, and see <link linkend="printf">printf()</link> for a similar function that does not enforce field widths.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>f_printf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>f_printf("%5s\n", "long string"); # will print "long \n", respecting the 5-character field width</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-terminal-io"><code>PO_NO_TERMINAL_IO</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table><title>Arguments and Return Values for f_printf()</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>Arguments</para></entry>
	<entry><para>Return Type</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>String, [...]</para></entry>
	<entry><para>String</para></entry>
	<entry><para>Returns the string output (see <link linkend="String_Formatting">String Formatting</link> for information on the format string)</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="f_sprintf">
<title>f_sprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatted string without doing any output, respecting field widths.  See <link linkend="String_Formatting">String Formatting</link> for information on the formatting string, and see <link linkend="sprintf">sprintf()</link> for a similar function that does not enforce field widths.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>f_sprintf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = f_sprintf("%5s", "a long string"); # will return "a lon"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for f_sprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, [args...]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a formatted string without doing any output, enforcing any field widths.  See <link linkend="String_Formatting">String Formatting</link> for information on the format string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

  <sect2 id="flush">
  <title>flush()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Flushes output to the console output with <link linkend="print">print()</link>, <link linkend="printf">printf()</link>, etc.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>flush()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>flush();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-terminal-io"><code>PO_NO_TERMINAL_IO</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table><title>Arguments and Return Values for flush()</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>Arguments</para></entry>
	<entry><para>Return Type</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>n/a</para></entry>
	<entry><para>n/a</para></entry>
	<entry><para>Thie function takes no arguments.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>


<sect2 id="print">
<title>print()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs a string to standard output with no formatting.  See <link linkend="printf">printf()</link> for a function that allows for formatted output.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>print(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>print("hello\n"); # do not use formatting with this function</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-terminal-io"><code>PO_NO_TERMINAL_IO</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for print()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Outputs the string to stdout with no formatting.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="printf">
<title>printf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs the string passed to standard output, using the first argument as a formatting string.  See <link linkend="f_printf">f_printf()</link> for a similar function that enforces field widths, and <link linkend="print">print</link> for an simple output function that does not accept a formatting string.  See <link linkend="String_Formatting">String Formatting</link> for information on the formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>printf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>printf("%5s\n", "a long string"); # will output "a long string", exceeding the field width</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-terminal-io"><code>PO_NO_TERMINAL_IO</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for printf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Arguments</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, [...]</para></entry>
              <entry><para>String</para></entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  This is the "normal" (non-field) printf() version, so any field widths are considered as soft limits, and arguments are allowed to exceed their field widths. Only when an argument is less than the field width will it be padded to the field width specified.  Returns the string output.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sprintf">
<title>sprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatted string without enforcing hard field limits.  See <link linkend="f_sprintf">f_sprintf()</link> for a similar function that enforces field widths, and see <link linkend="String_Formatting">String Formatting</link> for information on the formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sprintf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = sprintf("%5s", "a long string"); # returns "a long string", exceeding the field width</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for sprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, [args...]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Field widths are considered soft limits (arguments are allowed to exceed their field widths).  Only when an argument is less than the field width will it be padded to the field width specified.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="vprintf">
  <title>vprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs a formatted string based on a variable number of arguments given in a list after the format string and returns the string printed.  See <link linkend="String_Formatting">String Formatting</link> for information on the formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>vprintf(<replaceable>format_string, arg_list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>vprintf("%5s %3d\n", ("a long string", 5000)); # outputs "a long string 5000", exceeding field width of 5</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-terminal-io"><code>PO_NO_TERMINAL_IO</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for vprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, [List]</para></entry>
              <entry><para>String</para></entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Arguments to the formatting string are supplied in the optional second argument as a list.  Field widths are considered as soft limits; arguments are allowed to exceed their field widths.  Only when an argument is less than the field width will it be padded to the field width specified.  Returns the string output.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="vsprintf">
<title>vsprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Formats a string based on two arguments: a format string and a list.  Does not enforce hard field widths.  Returns this formatted string.   See <link linkend="String_Formatting">String Formatting</link> for information on the formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>vsprintf(<replaceable>format_string, arg_list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = vsprintf("%5s %3d\n", ("a long string", 5000)); # returns "a long string 5000", exceeding field width of 5</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for vsprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, [List]</para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Arguments to the formatting string are supplied in the optional second argument as a list.  Field widths are considered soft limits (arguments are allowed to exceed their field widths).  Only when an argument is less than the field width will it be padded to the field width specified.  Returns the formatted string.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

<sect1 id="Date_and_Time_Functions">
<title>Date and Time Functions</title>

<sect2 id="clock_getmicros">
<title>clock_getmicros()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns an integer representing the system time in microseconds (1/1000000 second intervals since Jan 1, 1970 00:00).  Please note that many operating system/hardware combinbations are not capable of reporting time at this resolution; the last 3 or more digits may be zero in this case.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getmicros()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$time = clock_getmicros();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getmicros()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of microseconds (1/1000000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="clock_getmillis">
<title>clock_getmillis()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns an integer representing the system time in milliseconds (1/1000 second intervals since Jan 1, 1970 00:00).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getmillis()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$time = clock_getmillis();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getmillis()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of milliseconds (1/1000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="clock_getnanos">
<title>clock_getnanos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the system time in nanoseconds (1/1000000000 second intervals since Jan 1, 1970 00:00).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getnanos()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$time = clock_getnanos();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getnanos()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of nanoseconds (1/1000000000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

  <sect2 id="date_ms">
    <title>date_ms()</title>

    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Converts an integer argument representing the offset in milliseconds from January 1, 1970 to a date.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>date_ms(<replaceable>integer</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$date = date_ms(1); # return 1970-01-01T00:00:00.001</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for date_ms()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Integer</para></entry>
              <entry><para>Date</para></entry>
              <entry><para>Returns the date corresponding to the offset in ms given from January 1, 1970.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="days">
      <title>days</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in days for date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>days(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$days = days(5 * 5); # returns 25D</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for days()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of days passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="format_date">
  <title>format_date()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatting string for a date argument passed.  See <link linkend="Date_Formatting">Date Formatting</link> for information about the formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>format_date(<replaceable>format_string, date_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = format_date("Day, Mon D, YYYY-MM-DD HH:mm:SS", 2004-02-01T12:30:00);
# returns "Sunday, Feb 1, 2004-02-01 12:30:00"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for format_date()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, Date</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Formats the date value using the string as a <link linkend="Date_Formatting">formatting specification</link>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <table id="Date_Formatting">
    <title>Date Format Arguments</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>YY</code></para></entry>
	  <entry><para>last two digits of year</para></entry>
	</row>
	<row>
	  <entry><para><code>YYYY</code></para></entry>
	  <entry><para>four-digit year</para></entry>
	</row>
	<row>
	  <entry><para><code>M</code></para></entry>
	  <entry><para>non zero-padded month number (1-12)</para></entry>
	</row>
	<row>
	  <entry><para><code>MM</code></para></entry>
	  <entry><para>zero-padded two-digit month number (01-12)</para></entry>
	</row>
	<row>
	  <entry><para><code>Month</code></para></entry>
	  <entry><para>long month string (ex: January)</para></entry>
	</row>
	<row>
	  <entry><para><code>MONTH</code></para></entry>
	  <entry><para>long month string capitalized (ex:   JANUARY)</para></entry>
	</row>
	<row>
	  <entry><para><code>Mon</code></para></entry>
	  <entry><para>abbreviated month (ex: Jan)</para></entry>
	</row>
	<row>
	  <entry><para><code>MON</code></para></entry>
	  <entry><para>abbreviated month, capitalized (ex: JAN) </para></entry>
	</row>
	<row>
	  <entry><para><code>D</code></para></entry>
	  <entry><para>non zero-padded day number (1 - 31)</para></entry>
	</row>
	<row>
	  <entry><para><code>DD</code></para></entry>
	  <entry><para>zero-padded day number (01 - 31)</para></entry>
	</row>
	<row>
	  <entry><para><code>Day</code></para></entry>
	  <entry><para>long day of week string (ex: Monday)</para></entry>
	</row>
	<row>
	  <entry><para><code>DAY</code></para></entry>
	  <entry><para>long day of week string, capitalized (ex: 
	  MONDAY)</para></entry>
	</row>
	<row>
	  <entry><para><code>Dy</code></para></entry>
	  <entry><para>abbreviated day of week string (ex: Mon)</para></entry>
	</row>
	<row>
	  <entry><para><code>DY</code></para></entry>
	  <entry><para>abbreviated day of week string capitalised (ex: 
	  MON)</para></entry>
	</row>
	<row>
	  <entry><para><code>H</code></para></entry>
	  <entry><para>non zero-padded hour number (0 - 23)</para></entry>
	</row>
	<row>
	  <entry><para><code>HH</code></para></entry>
	  <entry><para>zero-padded hour number (00 - 23)</para></entry>
	</row>
	<row>
	  <entry><para><code>h</code></para></entry>
	  <entry><para>non zero-padded hour number, 12-hour clock (1 - 12) 
	  </para></entry>
	</row>
	<row>
	  <entry><para><code>hh</code></para></entry>
	  <entry><para>zero-padded hour number, 12-hour clock (01 - 12) 
	  </para></entry>
	</row>
	<row>
	  <entry><para><code>m</code></para></entry>
	  <entry><para>non zero-padded minute number (0 - 59)</para></entry>
	</row>
	<row>
	  <entry><para><code>mm</code></para></entry>
	  <entry><para>zero-padded minute number (00 - 59)</para></entry>
	</row>
	<row>
	  <entry><para><code>S</code></para></entry>
	  <entry><para>non zero-padded second number (0 - 59)</para></entry>
	</row>
	<row>
	  <entry><para><code>SS</code></para></entry>
	  <entry><para>zero-padded second number (00 - 59)</para></entry>
	</row>
	<row>
	  <entry><para><code>u</code></para></entry>
	  <entry><para>non zero-padded millisecond number (0 - 999)</para></entry>
	</row>
	<row>
	  <entry><para><code>uu</code> or <code>ms</code></para></entry>
	  <entry><para>zero-padded millisecond number (000 - 999)</para></entry>
	</row>
	<row>
	  <entry><para><code>P</code></para></entry>
	  <entry><para>AM or PM (upper-case)</para></entry>
	</row>
	<row>
	  <entry><para><code>p</code></para></entry>
	  <entry><para>am or pm (lower-case)</para></entry>
	</row>	
      </tbody>
    </tgroup>
  </table>

  <para>All other text is output directly in the output text unchanged.</para>

</sect2>

  <sect2 id="get_years">
    <title>get_years()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the years value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_years(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$years = get_years(2007-01-23); # returns 2007</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_years()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the years value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_months">
    <title>get_months()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the months value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_months(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$months = get_months(2007-01-23); # returns 1</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_months()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the months value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_days">
    <title>get_days()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the days value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_days(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$days = get_days(2007-01-23); # returns 23</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_days()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the days value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_hours">
    <title>get_hours()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the hours value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_hours(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$hours = get_hours(2007-01-23T11:24:03); # returns 11</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_hours()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the hours value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_minutes">
    <title>get_minutes()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the minutes value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_minutes(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Examples</term>
        <listitem>
          <programlisting>$minutes = get_minutes(2007-01-23T11:24:03); # returns 24</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_minutes()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the minutes value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_seconds">
    <title>get_seconds()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the seconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_seconds(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$secs = get_seconds(2007-01-23T11:24:03); # returns 3</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_seconds()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the seconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_milliseconds">
    <title>get_milliseconds()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer value representing the milliseconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_milliseconds(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$ms = get_milliseconds(2007-01-23T11:24:03.250); # returns 250</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_milliseconds()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer value representing the milliseconds value of the date passed (can be either a <link linkend="Relative_Dates">relative</link> or <link linkend="Absolute_Dates">absolute</link> date).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="get_midnight">
    <title>get_midnight()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns a date/time value representing midnight on the date passed (strips the time from the date passed and returns the new value)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>get_midnight(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$date = get_midnight(2007-01-23T11:24:03.250); # returns 2007-01-23T00:00:00.000</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for get_midnight()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Returns a date/time value representing midnight on the date passed (strips the time from the date passed and returns the new value)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getDateFromISOWeek">
    <title>getDateFromISOWeek()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Retuns an <link linkend="Absolute_Dates">absolute date value</link> for the ISO-8601 calendar week information passed (year, week number, optional: weekday, where 1=Monday, 7=Sunday).  If the weekday is omitted, Monday (1) is assumed.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getDateFromISOWeek(<replaceable>integer, integer, optional:integer</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$date = getDateFromISOWeek(2007, 3); # returns 2007-01-15T00:00:00.000</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getDateFromISOWeek()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Integer, Integer, Optional:integer</para>
            </entry>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Retuns an <link linkend="Absolute_Dates">absolute date value</link> for the ISO-8601 calendar week information passed (year, week number, optional: day)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getDayOfWeek">
    <title>getDayOfWeek()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer representing the day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (0=Sunday, 6=Saturday)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getDayOfWeek(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>$dow = getDayOfWeek(2007-05-15); # returns 2</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getDayOfWeek()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer representing the day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (0=Sunday, 6=Saturday)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getDayNumber">
    <title>getDayNumber()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer representing the ordinal day number in the year for the <link linkend="Absolute_Dates">absolute date</link> passed</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getDayNumber(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$dn = getDayNumber(2007-05-15); # returns 135</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getDayNumber()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer representing the ordinal day number in the year for the <link linkend="Absolute_Dates">absolute date</link> passed</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getISODayOfWeek">
    <title>getISODayOfWeek()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns an integer representing the ISO-8601 day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (1=Monday, 7=Sunday)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getISODayOfWeek(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$dow = getISODayOfWeek(2007-05-15); # returns 2 for Tuesday</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getISODayOfWeek()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Returns an integer representing the ISO-8601 day of the week for the <link linkend="Absolute_Dates">absolute date</link> passed (1=Monday, 7=Sunday)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getISOWeekHash">
    <title>getISOWeekHash()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns a hash representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (hash keys: year, week, day).  Note that the ISO-8601 year does not always correspond with the calendar year at the end and the begin
ning of every year (for example 2006-01-01 is ISO-8601 calendar week format is: year=2005, week=52, day=7)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getISOWeekHash(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$h = getISOWeekHash(2007-05-15); # returns year=2007, week=20, day=2</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getISOWeekHash()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>Hash</para>
            </entry>
            <entry>
              <para>Returns a hash representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (hash keys: year, week, day)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="getISOWeekString">
    <title>getISOWeekString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns a string representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (ex: 2006-01-01 = &quot;2005-W52-7&quot;).  Note that the ISO-8601 year does not always correspond with the calendar year at the end and the beginning of every year (for example 2006-01-01 is ISO-8601 calendar week format is: year=2005, week=52, day=7)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>getISOWeekString(<replaceable>date</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = getISOWeekString(2007-05-15); # returns "2007-W20-2"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for getISOWeekString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Date</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns a string representing the ISO-8601 calendar week information for the <link linkend="Absolute_Dates">absolute date</link> passed (ex: 2006-01-01 = &quot;2005-W52-7&quot;)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>


<sect2 id="gmtime">
<title>gmtime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the date and time in GMT; if no argument is passed, then the current GMT time is returned.  Otherwise the single argument must be an integer giving the number of seconds since Jan 1, 1970, 00:00:00.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gmtime(<replaceable>[int_value]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$date = gmtime(mktime(now())); # returns current GMT</programlisting>
	<programlisting>$date = gmtime();              # also returns current GMT</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for gmtime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The optional integer argument must be the number of seconds passed since Jan 1, 1970, 00:00:00 (see <link linkend="mktime">mktime()</link> for a function that returns such a value).  Qore uses the C library function gmtime() to calculate the return value, which is returned as a Qore Date type.  If no argument is passed, then the current date and time in GMT are returned.  If an argument is passed that is not a date/time value, then NOTHING is returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="hours">
      <title>hours()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in hours to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>hours(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$h = hours(5 * 5); # returns 25h</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for hours()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of hours passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="localtime">
<title>localtime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the date and time in local time corresponding to the integer argument passed, which must be the number of seconds since Jan 1, 1970, 00:00:00.  If no argument is passed, then the current local date and time are returned.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>localtime(<replaceable>[int_value]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$time = localtime(10);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for localtime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The optional integer argument must be the number of seconds passed since Jan 1, 1970, 00:00:00 (see <link linkend="mktime">mktime()</link> for a function that returns such a value).  Qore uses the C library function localtime() to calculate the return value, which is returned as a Qore Date type.  If no argument is passed, then the current date and time in the current time zone are returned.  If an argument is passed that is not a date/time value, then NOTHING is returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="milliseconds">
      <title>milliseconds()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in milliseconds to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>millseconds(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ms = millseconds(5 * 5); # returns 25ms</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for milliseconds()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of milliseconds passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="minutes">
      <title>minutes()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in minutes to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>minutes(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$m = minutes(5 * 5); # returns 25m</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for minutes()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of minutes passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="mktime">
      <title>mktime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the number of seconds of the date and time in local time passed since Jan 1, 1970, 00:00:00 GMT.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mktime(<replaceable>date_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$secs = mktime(2007-09-23T00:00:01);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<para>Synopsis</para>
<para></para>

<para>Usage</para>
<para></para>

      <table>
        <title>Arguments and Return Values for mktime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The date argument should be in local time; the function returns the number of seconds passed since Jan 1, 1970 00:00:00 corresponding to this date.  Qore uses the C library function mktime() to return the value.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="months">
      <title>months()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in months to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>months(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$m = months(5 * 5); # returns 25M</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for months()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of months passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>


<sect2 id="now">
<title>now()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the current date and time with resolution to the second.  For a similar function returning the current date and time with millisecond resolution, see <link linkend="now_ms">now_ms()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>now()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$now = now();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for now()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns the current date and time with resolution to the second.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="now_ms">
<title>now_ms()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the current date and time with resolution to the millisecond.  For a similar function returning the current date and time with courser granularity, when resolution only to the second is needed, see <link linkend="now">now()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>now_ms()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$now_ms = now_ms();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for now_ms()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns the current date and time with resolution to the millisecond.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="seconds">
      <title>seconds()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in seconds to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>seconds(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$time = now() + seconds(5 * 5); # 25 seconds from now</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for seconds()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of seconds passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>


<sect2 id="timegm">
<title>timegm()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.  The availabilty of this function depends on the system's underlying C-library; the Qore function is only available if the constant <code>HAVE_TIMEGM</code> is True.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>timegm(<replaceable>date</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$secs = timegm(2007-05-01T11:34:01);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for timegm()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table><title>Exceptions Thrown by timegm()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	      <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_TIMEGM</code> before calling this function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>      
</sect2>

    <sect2 id="years">
      <title>years()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> in years to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>years(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$years = years(5 * 5); # returns 25Y</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for years()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a <link linkend="Relative_Dates">relative date/time value</link> corresponding to the number of years passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This function does not throw any exceptions.</para>
    </sect2>

</sect1>

<sect1 id="Qore_Type_Functions">
<title>Qore Type Functions</title>

<sect2 id="binary">
<title>binary()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a binary data type of the string passed; data types other than string will first be converted to a string and then returned as binary data.</para><para>This function is useful if, for some reason, a string type actually contains binary data; using this function will ensure that all data in the string (even if it contains embedded nulls) is maintained in the binary object (Qore strings must normally be terminated by a single null, so some Qore string operations do not work on binary data with embedded nulls).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>binary(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bin = binary("hello");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for binary()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Binary</para>
              </entry>
              <entry>
                <para>A binary data type holding the string data passed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="binary_to_string">
<title>binary_to_string()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string created from the binary data passed, taking an optional second argument giving the string encoding.  If no second argument is passed then the default encoding is assumed.</para>
	<para>No checking is performed for embedded null characters or for character encoding violations; the data is simply copied from the binary value to the string (with any embedded nulls, if present), and the string is tagged with the given encoding or with the default encoding if no second argument is passed.  See also <link linkend="string">string()</link> and <link linkend="binary">binary()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>binary_to_string(<replaceable>binary, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = binary_to_string($bin, "utf8");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for binary_to_string()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>Binary, [String]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string corresponding to the binary data passed, taking an optional second argument giving the string encoding.  If no second argument is passed then the default encoding is assumed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by binary_to_string()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>BINARY-TO-STRING-ERROR</code></para></entry>
	<entry><para>No binary value was passed as the first argument.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="boolean">
<title>boolean()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument to a boolean value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>boolean(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bool = boolean(1); # returns True</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for boolean()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>Converts the argument to an integer if necessary, where any non-zero value is True, zero is False.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="date">
<title>date()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument to a date and returns the date.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>date(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$date = date(1); # return 1970-01-01T00:00:01</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for date()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Date</para></entry>
              <entry><para>Converts the argument to a date and returns the date.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="float">
<title>float()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a floating-point value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>float(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$float = float("1.435"); # returns 1.435</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for float()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Float</para></entry>
              <entry><para>Converts argument passed to a floating-point value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="hash">
<title>hash()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts an object or a list to a hash; for any other argument, returns an empty hash (ignores any other arguments passed).</para>
	<para>For an object argument, the hash returned is equal to the object members (excluding private members if called outside the class); a list is converted to a hash by taking even numbered list elements (starting with 0) and converting them to strings for the hash keys, and the odd numbered elements following the keys as the key value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hash(<replaceable>list</replaceable> | <replaceable>object</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$h = hash($object); # creates a hash of the object's members</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


      <table>
        <title>Arguments and Return Values for hash()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Object</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns a hash of the object's members (public members only if called outside the class).</para></entry>
            </row>
            <row>
	      <entry><para>List</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns a hash by taking even numbered list elements (starting with 0) and converting them to strings for the hash keys, and the odd numbered elements following the keys as the key value.</para></entry>
            </row>
            <row>
	      <entry><para>anything other than Object or List</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns an empty hash.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="int">
<title>int()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to an integer value if it is not already.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>int(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$int = int("200"); # returns 200</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for int()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Converts argument passed to an integer value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="list">
<title>list()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list; if any arguments are passed, they are inserted as the first element in the list returned.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>list([<replaceable>expression</replaceable>])</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$l = list(200);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for list()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>[Any ...]</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list.  If any arguments are passed, they are inserted as the first element in the list returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="string">
<title>string()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value.</para>
	<para>This function will not convert a binary value to a string; in order to do this, use the <link linkend="binary_to_string">binary_to_string()</link> function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>string(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = string(200); # returns "200"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for string()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts the argument passed to a string value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="type">
  <title>type()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the data type of the argument passed.  See <link linkend="Qore_Type_Constants">Type Constants</link> for the values returned by this function..</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>type(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$type = type("hello"); # returns <link linkend="Qore_Type_Constants">Type::String</link> ("string")</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for type()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the data type of the argument passed.  See <link linkend="Qore_Type_Constants">Type_Constants</link> for the values that can be returned by this function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="typename">
<title>typename()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>deprecated: use <link linkend="type">type()</link> instead.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>typename(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for typename()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>deprecated: use <link linkend="type">type()</link> instead.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function will be removed in a future version of Qore.</para></note>

</sect2>

</sect1>

<sect1 id="Environment_Functions">
<title>Environment Functions</title>

<sect2 id="getenv">
<title>getenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retrieves the environment variable passed as an argument.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getenv(<replaceable>variable_name</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$v = getenv("PATH");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for getenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>The contents of the environment variable, if the environment variable exists, otherwise returns no value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="setenv">
<title>setenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sets an environment variable to a value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>setenv(<replaceable>key_string, value_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>setenv("PATH", "/bin:/usr/bin");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for setenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>Sets the environment variable to a string value (the value is converted to a string if necessary).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="unsetenv">
<title>unsetenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Unsets an environment variable.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>unsetenv(<replaceable>key_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>unsetenv("PATH");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for unsetenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>Unsets the environment variable given by the string passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function is only supported on systems where the C library support for unsetenv() is present.</para></note>

</sect2>

</sect1>

<sect1 id="String_Functions">
<title>String Functions</title>

<sect2 id="bindex">
  <title>bindex()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retrieves the byte position of a substring within a string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>bindex(<replaceable>string, substring [, start_position]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$i = bindex("hello there", "the");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for bindex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>If the substring is found, returns the byte position of the substring within the string (starting at 0). If not found, returns -1.  If an offset position is given, the search starts at the offset position.  All values are byte positions, not character positions, which may differ for multi-byte character encodings.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

    <sect2 id="brindex">
      <title>brindex()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the starting byte position of a string in another, starting from the end of the string (-1 if not found) and takes an optional starting position.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>brindex(<replaceable>string, substring, [position]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$i = brindex("hello there", "the");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
        <title>Arguments and Return Values for brindex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the starting byte position of a string in another, starting from the end of the string, or from <replaceable>position</replaceable> if given.  If <replaceable>position</replaceable> is given, then the reverse search starts at that character position (searches always go from the end of the string toward the beginning).  Returns -1 if the substring cannot be found.  All values are byte positions, not character positions, which may differ for multi-byte character encodings.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="chomp">
<title>chomp()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes the trailing end-of-line indicator ('\n' or '\r\n') from a string and returns the new string (also see the <link linkend="Chomp_Operator">chomp operator</link>).  If no EOL indicator is present in the string, this function simply returns the original string unmodified.  This function accepts variable references, in which case it will modify the string in place and also return the modified string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chomp(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$line = chomp("hello\n"); # returns "hello"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for chomp()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the new string with any end-of-line character(s) removed; if the first argument is a variable reference, then the string is modified in place and the new string is also returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="chr">
<title>chr()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string containing a single ASCII character represented by the numeric value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chr(<replaceable>integer</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$i = chr(65); # returns "A"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for chr()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Integer</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string containing a single ASCII character represented by the numeric value passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="convert_encoding">
<title>convert_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Performs explicit string character encoding conversions.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>convert_encoding(<replaceable>string, new_encoding</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$utf8_str = convert_encoding($iso_8859_1_str, "utf-8");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for convert_encoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts the string arguement to the encoding given and returns the new string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by convert_encoding()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>STRING-ENCODING-CONVERSION-ERROR</code></para></entry>
	<entry><para>There was an error converting to the target encoding (ex: conversion not supported, illegal character sequence, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="force_encoding">
<title>force_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the first string argument tagged with the character encoding given as the second argument; does not actually change the string data; use only in the case that a string is tagged with the wrong encoding, for example, if a string from a <link linkend="File_Class">File</link> object has a different encoding than the File object.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>force_encoding(<replaceable>string, new_encoding</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$utf8_str = force_encoding($bad_str, "utf-8");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for convert_encoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string with identical byte data as the input string, but tagged with the new encoding.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="get_encoding">
<title>get_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string describing the character encoding of the string passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_encoding(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$enc = get_encoding($string);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for get_encoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string describing the character encoding of the string passed (ex: &quot;UTF-8&quot;, &quot;ISO-8850-1&quot;, &quot;KOI8-R&quot;).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="index">
  <title>index()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retrieves the character position of a substring within a string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>index(<replaceable>string, substring [, start_position]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$i = index("hello there", "the");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for index()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>If the substring is found, returns the position of the substring within the string (starting at 0). If not found, returns -1.  If an offset position is given, the search starts at the offset position.  All values are character positions, not byte positions, which may differ for multi-byte character encodings.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="join">
  <title>join()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a string from a list and separator string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>join(<replaceable>separator_string, list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = join(":", ("a", "b", "c")); # returns "a:b:c"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for join()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, List</para></entry>
	  <entry><para>Srring</para></entry>
	  <entry><para>Returns a string with each element of the list separated by the separator string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="length">
<title>length()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length in characters for the string passed.  Note that the byte length may differ from the character length with multi-byte character encodings.  For byte length of a string, see  <link linkend="strlen">strlen()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>length(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$len = length("hello"); # returns 5</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for length()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the length in characters for the string passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="ord">
<title>ord()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Gives the numeric value of the first character in the string passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>ord(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$i = ord("A"); # returns 65</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for ord()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Gives the numeric value of the first character in the string passed.  Only works reliably with character encodings where each character is a single byte.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="regex">
<title>regex()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns True if the regular expression matches the string passed, otherwise returns False.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>regex(<replaceable>string, pattern_string, [options]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bool = regex("hello", "^hel"); # returns True</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for regex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns True if <replaceable>string</replaceable> matches <replaceable>pattern</replaceable>, False if not.  For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by regex()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>REGEX-COMPILATION-ERROR</code></para></entry>
	<entry><para>There was an error compiling the regular expression.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

  <para>For more information on regular expression processing, see <link linkend="Regular_Expressions">Regular Expressions</link>.</para>

</sect2>

<sect2 id="regex_extract">
<title>regex_extract()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of substrings in a string based on matching patterns defined by a regular expression.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>regex_extract(<replaceable>string, pattern_string, [options]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = regex_extract("hello:there", "(\\w+):(\\w+)");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for regex_extract()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the result of <replaceable>string =~ s/pattern_string/[options]</replaceable>.  For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by regex_extract()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>REGEX-OPTION-ERROR</code></para></entry>
	<entry><para>Invalid options were passed to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>REGEX-COMPILATION-ERROR</code></para></entry>
	<entry><para>There was an error compiling the regular expression.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

  <para>For more information on regular expression processing, see <link linkend="Regular_Expressions">Regular Expressions</link>.</para>

</sect2>

<sect2 id="regex_subst">
<title>regex_subst()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string with patterns substituted according to the arguments passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>regex_subst(<replaceable>string, pattern_string, target_string, [options]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = regex_subst("hello there", "^there$", "you"); # returns "hello you"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for regex_subst()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, String, [Integer]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the result of <replaceable>string =~ s/pattern_string/target_string/[options]</replaceable>.  For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link></para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by regex_subst()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>REGEX-OPTION-ERROR</code></para></entry>
	<entry><para>Invalid options were passed to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>REGEX-COMPILATION-ERROR</code></para></entry>
	<entry><para>There was an error compiling the regular expression.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

  <para>For more information on regular expression processing, see <link linkend="Regular_Expressions">Regular Expressions</link>.</para>

</sect2>

<sect2 id="replace">
<title>replace()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Replaces all occurrances of a substring in a string with another string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>replace(<replaceable>string, substring, new_substring</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = replace("hello there", "there", "you"); # returns "hello you"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for replace()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Replaces all occurrances of a substring in a string with another string and returns the new string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="rindex">
      <title>rindex()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the starting character position of a string in another, starting from the end of the string (-1 if not found) and takes an optional starting position.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>rindex(<replaceable>string, substring, [position]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$i = rindex("hello there", "the");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
        <title>Arguments and Return Values for rindex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the starting character position of a string in another, starting from the end of the string, or from <replaceable>position</replaceable> if given.  If <replaceable>position</replaceable> is given, then the reverse search starts at that character position (searches always go from the end of the string toward the beginning).  Returns -1 if the substring cannot be found.  All values are character positions, not byte positions, which may differ for multi-byte character encodings.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="split">
<title>split()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Splits a string into a list of components based on a separator string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>split(<replaceable>pattern, string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = split(":", "some:text:here"); # returns ("some", "text", "here")</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for split()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of each component of a string separated by a separator string, with the separator removed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="strlen">
<title>strlen()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length in bytes of the string argument.  Note that the byte length may differ from the character length with multi-byte character encodings.  For the character length of a string, see  <link linkend="length">length()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>strlen(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$len = strlen("hello"); # returns 5</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for strlen()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the length of the string passed. If the argument is not a string, then it is converted to a string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="substr">
<title>substr()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a portion of a string starting from an integer offset, with an optional length.  Arguments can be negative, giving offsets from the end of the string.  All offsets are character positions, not byte positions.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>substr(<replaceable>string, offset, [length]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = substr("hello there", 6); # returns "there"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for substr()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, Integer, [Integer]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the substring according to the arguments.  If <replaceable>integer_offset</replaceable> is negative, it designates an offset from the end of the string.  If <replaceable>integer_length</replaceable> is not present, all characters from the offset will be copied to the substring.  If it is negative, the rest of the string without the trailing number characters given by the negative argument will be copied to the substring.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="tolower">
<title>tolower()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value all in lower case.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tolower(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = tolower("HELLO"); # returns "hello"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for tolower()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts argument passed to a string value, all in lower case.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="toupper">
<title>toupper()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value all in upper case.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>toupper(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = toupper("hello"); # returns "HELLO"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for toupper()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Any</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Converts argument passed to a string value, all in upper case.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="trim">
<title>trim()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes characters from the start and end of a string and returns the new string (also see the <link linkend="Trim_Operator">trim operator</link>).  This function accepts variable references, in which case it will modify the string in place and also return the modified string.</para>
	<para>By default the following whitespace characters are removed: ' ', '\n', '\r', '\t', '\v' (vertical tab, ASCII 11), and '\0' (null character).  To trim other character, pass a string as the second argument specifying the characters to be removed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>trim(<replaceable>string, [chars_to_trim]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$line = trim("   hello  \n"); # returns "hello"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for trim()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, [String]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the new string with characters removed from the beginning and end of the string; if the first argument is a variable reference, then the string is modified in place and the new string is also returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

<sect1 id="Operating_System_Functions">
<title>Operating System Functions</title>

<sect2 id="abort">
<title>abort()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Aborts the current program (this function does not return).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>abort()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>abort();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="basename">
<title>basename()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string giving the last element of a file path.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>basename(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = basename("/usr/local/bin/file_name"); # returns "file_name"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for basename()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the last element in a file path (meant to be the filename).</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="errno">
<title>errno()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the error code of the last error that occurred in the current thread.  See <link linkend="strerror">strerror()</link> for a function that gives the string description for the error number returned by this function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>errno()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = strerror(errno());</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for errno()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      
      <tbody>
	<row>
	  <entry><para>n/a</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>The error code of the most recent error in the current thread is returned.</para></entry>
	</row>
	
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="exec">
      <title>exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Replaces the current process image with another.  This function does not return.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>exec(<replaceable>exec_string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>exec("/bin/ls -l");</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Restrictions</term>
	  <listitem>
	    <para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link> or <link linkend="no-external-process"><code>PO_NO_EXTERNAL_PROCESS</code></link></para>
	  </listitem>
	</varlistentry>
      </variablelist>
  
      <table>
	<title>Arguments and Return Values for exec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>N/A</para></entry>
	      <entry><para>The process and any arguments to the process to execute.  This function does not return.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <para>This function does not throw any exceptions.</para>

    </sect2>

    <sect2 id="exit">
      <title>exit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Exits the program with the return code passed (this function does not return).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>exit(<replaceable>return_code</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>exit(2);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Restrictions</term>
	  <listitem>
	    <para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
	  </listitem>
	</varlistentry>
      </variablelist>
  
      <table>
	<title>Arguments and Return Values for exit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>N/A</para></entry>
	      <entry><para>Exits the program with the return code set to the value of the argument passed converted to an integer if necessary.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <para>This function does not throw any exceptions.</para>

    </sect2>

<sect2 id="fork">
<title>fork()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a copy of the current process with a new PID.  Returns 0 in the child process, the child's PID in the parent process.  This function will throw an exception if more than one thread is running.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>fork()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$pid = fork();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for fork()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>The child's PID is returned in the parent process, 0 is returned in the child's process.  If -1 is returned, then no child was started and the error number can be retrieved with the errno() function.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

      <table>
	<title>Exceptions Thrown by fork()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>ILLEGAL-FORK</code></para></entry>
	      <entry><para>Cannot fork if more than one thread is running.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="getegid">
<title>getegid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the effective group ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getegid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$egid = getegid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getegid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the effective group ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="geteuid">
<title>geteuid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the effective user ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>geteuid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for geteuid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the effective user ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="getgid">
<title>getgid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the real group ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getgid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$gid = getgid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getgid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the real group ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="gethostbyaddr">
<title>gethostbyaddr()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the official hostname corresponding to the network addressed passed as an argument.  If the second argument giving the address type is not passed, then AF_INET (IPv4) is assumed.  See <link linkend="network_address_constants">Network Address Type Constants</link> for valid values for the second argument.  If the address family is invalid or the address string is not a valid address for the given family an exception will be thrown.</para>
	<para>For a version of this function that returns all host information, including all hostname aliases and all addresses, see <link linkend="gethostbyaddr_long">gethostbyaddr_long()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostbyaddr(<replaceable>address, [type]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hostname = gethostbyaddr("192.168.0.33");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for gethostbyaddr()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><replaceable>address, [type]</replaceable></para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the hostname of the system or NOTHING if the address is unknown.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

    <table>
      <title>Exceptions thrown by gethostbyaddr()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry><para>err</para></entry>
            <entry><para>desc</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>GETHOSTBYADDR-ERROR</code></para></entry>
            <entry><para>invalid address or invalid address family passed as arguments</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

</sect2>

<sect2 id="gethostbyaddr_long">
  <title>gethostbyaddr_long()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash representing all host and address information corresponding to the network addressed passed as an argument.  See <link linkend="host_information_hash">Host Information Hash</link> for a description of the return value.</para>
	<para>If the second argument giving the address type is not passed, then AF_INET (IPv4) is assumed.  See <link linkend="network_address_constants">Network Address Type Constants</link> for valid values for the second argument.  If the address family is invalid or the address string is not a valid address for the given family an exception will be thrown.</para>
	<para>For a version of this function that returns just the official hostname corresponding to the address, see <link linkend="gethostbyaddr">gethostbyaddr()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostbyaddr_long(<replaceable>address, [type]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = gethostbyaddr_long("192.168.0.33");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table><title>Arguments and Return Values for gethostbyaddr_long()</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>

    <thead>
      <row>
	<entry><para>Argument Type</para></entry>
	<entry><para>Return Type</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>

    <tbody>
      <row>
	<entry><para><replaceable>address, [type]</replaceable></para></entry>
	<entry><para>Hash</para></entry>
	<entry><para>Returns a hash representing all host and address information corresponding to the network address passed or NOTHING if the address is unknown.</para></entry>
      </row>

    </tbody>
  </tgroup>
  </table>

  <table id="host_information_hash">
    <title>Host Information Hash</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <thead>
	<row>
	  <entry><para>Key</para></entry>
	  <entry><para>Type</para></entry>
	  <entry><para>Value</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>name</code></para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>The official fully-qualified name of the host</para></entry>
	</row>
	<row>
	  <entry><para><code>aliases</code></para></entry>
	  <entry><para>List of Strings</para></entry>
	  <entry><para>Any hostname aliases for the host</para></entry>
	</row>
	<row>
	  <entry><para><code>typename</code></para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>The type of network address (either &quot;ipv4&quot; or &quot;ipv6&quot;)</para></entry>
	</row>
	<row>
	  <entry><para><code>type</code></para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>One of the <link linkend="network_address_constants">Network Address Type Constants</link> (either <code>AF_INET</code> or <code>AF_INET6</code>) corresponding to the type of network addresses given.</para></entry>
	</row>
	<row>
	  <entry><para><code>len</code></para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>The length of the addresses in bytes when represented in binary form.</para></entry>
	</row>
	<row>
	  <entry><para><code>addresses</code></para></entry>
	  <entry><para>List of Strings</para></entry>
	  <entry><para>All addresses corresponding to the host; the list should have at least 1 element</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table>
    <title>Exceptions thrown by gethostbyaddr_long()</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>GETHOSTBYADDR-ERROR</code></para></entry>
	  <entry><para>invalid address or invalid address family passed as arguments</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

</sect2>

<sect2 id="gethostbyname">
<title>gethostbyname()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the first address corresponding to the hostname passed as an argument.</para>
	<para>For a version of this function that returns all host information, including all hostname aliases and all addresses, see <link linkend="gethostbyname_long">gethostbyname_long()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostbyname(<replaceable>hostname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$addr = gethostbyname("host1");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for gethostbyname()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><replaceable>hostname</replaceable></para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the first address corresponding to the hostname passed or NOTHING if the host is unknown.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

<para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="gethostbyname_long">
  <title>gethostbyname_long()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash representing all host and address information corresponding to the hostname passed as an argument.  See <link linkend="host_information_hash">Host Information Hash</link> for a description of the return value.</para>
	<para>For a version of this function that returns just the first network address corresponding to the hostname, see <link linkend="gethostbyname">gethostbyname()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostbyname_long(<replaceable>hostname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = gethostbyname_long("host1");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table><title>Arguments and Return Values for gethostbyname_long()</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>

    <thead>
      <row>
	<entry><para>Argument Type</para></entry>
	<entry><para>Return Type</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>

    <tbody>
      <row>
	<entry><para><replaceable>hostname</replaceable></para></entry>
	<entry><para>Hash</para></entry>
	<entry><para>Returns a <link linkend="host_information_hash">hash</link> representing all host and address information corresponding to the hostname passed or NOTHING if the host is unknown.</para></entry>
      </row>

    </tbody>
  </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="gethostname">
<title>gethostname()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hostname of the system.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostname()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$host = gethostname();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for gethostname()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the hostname of the system.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getpid">
<title>getpid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the PID (process ID) of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getpid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$pid = getpid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getpid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the PID (process ID) of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getppid">
<title>getppid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the PID (process ID) of the parent process of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getppid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$ppid = getppid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getppid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the PID (process ID) of the parent of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getuid">
<title>getuid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the real user ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getuid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$uid = getuid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for getuid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the real user ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="glob">
<title>glob()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of files matching the string argument.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>glob(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = glob("*.txt");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for glob()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Returns a list of files matching the string argument.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="kill">
  <title>kill()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sends a signal to a process, if no signal number is given, then SIGHUP is sent by default.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>kill(<replaceable>integer_pid, [integer_signal]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>kill($pid, SIGINT);</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-external-process"><code>PO_NO_EXTERNAL_PROCESS</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for kill()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, [Integer]</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>Sends a signal to a process, if the optional signal number is not given, then SIGHUP is sent.  A 0 return value means that the signal was succesfully sent.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

  <sect2 id="setegid">
    <title>setegid()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Changes the process effective group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>).  The availabilty of this function depends on the system's underlying C-library; the Qore function is only available if the constant <code>HAVE_SETEGID</code> is True.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>setegid(<replaceable>egid</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>setegid($egid);</programlisting>
        </listitem>
      </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for setegid()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>EGID</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Changes the process effective group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by setegid()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry><para>err</para></entry>
            <entry><para>desc</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>SETEGID-ERROR</code></para></entry>
            <entry><para>missing EGID argument to function</para></entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SETEGID</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>

  </sect2>
  <sect2 id="seteuid">
    <title>seteuid()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Changes the process effective user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>).  The availabilty of this function depends on the system's underlying C-library; the Qore function is only available if the constant <code>HAVE_SETEUID</code> is True.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>seteuid(<replaceable>euid</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>seteuid($euid);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for seteuid()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>EUID</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Changes the process effective user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by seteuid()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SETEUID-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing EUID argument to function</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SETUGID</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="setgid">
    <title>setgid()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Changes the process group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>setgid(<replaceable>gid</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>setgid($gid);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for setgid()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>GID</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Changes the process group ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by setgid()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SETGID-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing GID argument to function</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="setuid">
    <title>setuid()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Changes the process user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>setuid(<replaceable>uid</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>setuid($uid);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for setuid()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>UID</para>
            </entry>
            <entry>
              <para>Integer</para>
            </entry>
            <entry>
              <para>Changes the process user ID according to the argument passed.  Returns 0 for success, non-zero for errors (the error code can be retrieved with <link linkend="errno">errno()</link>)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by setuid()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SETUID-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing UID argument to function</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

<sect2 id="sleep">
<title>sleep()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Causes the current thread to sleep for a certain number of seconds.  Note that as with all Qore functions and methods accepting a timeout value, <link linkend="Relative_Dates">relative date/time values</link> can be given instead of integers to make the source more readable (ie <code>5s</code>), however as this function only supports a resolution of 1 second, milliseconds are ignored if passed to this function.  See <link linkend="usleep">usleep()</link> for a similar function supporting microsecond resolution.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sleep(<replaceable>seconds</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>sleep(5s); # sleeps for 5 seconds</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sleep()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Causes the current thread to sleep for a number of seconds equal to the argument passed.  Returns 0 for success.  An integer argument is interpreted as a number of seconds to sleep, <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>


<sect2 id="stat">
<title>stat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of filesystem values for the file passed, following any symbolic links.  See also <link linkend="lstat">lstat()</link> for a version of this function that does not follow symbolic links, and see <link linkend="hstat">hstat()</link> for a version of this function that returns a user-friendly hash instead of a list.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>stat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$mode = stat($filepath)[2];</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for stat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Returns a list of filesystem values for the file passed, following symbolic links.  See <link linkend="Stat_List">Stat List</link> below for a description of the list returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

  <table id="Stat_List">
    <title>Stat List Description</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Position</para></entry>
	  <entry><para>Data Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>0</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>device inode number the file is on</para></entry>
	</row>
	<row>
	  <entry><para>1</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>inode of the file</para></entry>
	</row>
	<row>
	  <entry><para>2</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>inode protection mode</para></entry>
	</row>
	<row>
	  <entry><para>3</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>number of hard links to this file</para></entry>
	</row>
	<row>
	  <entry><para>4</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>user ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para>5</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>group ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para>6</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>device type number</para></entry>
	</row>
	<row>
	  <entry><para>7</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>file size in bytes</para></entry>
	</row>
	<row>
	  <entry><para>8</para></entry>
	  <entry><para>Date/Time</para></entry>
	  <entry><para>last access time of the file</para></entry>
	</row>
	<row>
	  <entry><para>9</para></entry>
	  <entry><para>Date/Time</para></entry>
	  <entry><para>last modified time of the file</para></entry>
	</row>
	<row>
	  <entry><para>10</para></entry>
	  <entry><para>Date/Time</para></entry>
	  <entry><para>last change time of the file's inode</para></entry>
	</row>
	<row>
	  <entry><para>11</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>block size</para></entry>
	</row>
	<row>
	  <entry><para>12</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>blocks allocated for the file</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

</sect2>

<sect2 id="strerror">
<title>strerror()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the string corresponding to the error code passed (generally retrieved with <link linkend="errno">errno()</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>strerror(<replaceable>error_code</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>printf("%s\n", strerror(errno()));</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for strerror()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns a string corresponding to the error code passed (normally retrieved with <link linkend="errno">errno()</link>)</para></entry>
  </row>
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="system">
<title>system()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Executes an external program and returns the exit code of the process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>system(<replaceable>shell_command</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$rc = system("ls -l");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-external-process"><code>PO_NO_EXTERNAL_PROCESS</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for system()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>If shell meta-characters are present in the string to be executed, Qore uses the C library system() call to execute the external program, otherwise a fork() and exec() is used.  The exit code of the process is returned as an integer.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="usleep">
<title>usleep()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Causes the current thread to sleep for a certain number of microseconds (1/1000000 second).  Note that as with all Qore functions and methods accepting a timeout value, <link linkend="Relative_Dates">relative date/time values</link> can be given instead of integers to make the source more readable (ie <code>1250ms</code>), however as this function supports a resolution of 1 microsecond, to achieve a resolution below milliseconds, an integer must be used instead of a <link linkend="Relative_Dates">relative date/time value</link>.  See <link linkend="sleep">sleep()</link> for a similar function supporting second resolution.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>usleep(<replaceable>file</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>usleep(1250ms); # sleeps for 1.25 seconds</programlisting>
	<programlisting>usleep(500); # sleeps for 500 microseconds (0.5 milliseconds)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for usleep()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Causes the current thread to sleep for a certain number of microseconds (1/1000000 second).  Returns 0 for success.  Integers are interpreted as microseconds, <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

  <sect1 id="Cryptographic_Functions">
    <title>Cryptographic Functions</title>

    <para>Qore's cryptography support is provided by the <ulink url="http://www.openssl.org">OpenSSL</ulink> library.  Most of the encryption and decryption functions in this section accept an optional initialization vector, which is data used as initial input for the first block in chained encryption algorithms.  Subsequent blocks take input from the last block encrypted/decrypted.  If a function accepts an initialization vector and one is not supplied, then a default value of 8 zero bytes will be used.</para>

    <para>Some functions require fixed-length keys, and some allow the use of variable-length keys.  For functions requiring fixed-length keys any excess bytes are ignored.  The same applies to initialization vector arguments.</para>

    <para>The following is an example of a function that uses /dev/random to read in a random key for use with encryption functions:</para>

    <programlisting># read a key from /dev/random and return the key
<command>sub</command> get_key($size)
{
    # throw an exception if an invalid key size was passed
    <command>if</command> (!$size || $size &lt; 0)
        <command>throw</command> "GET-KEY-ERROR", sprintf("invalid size = %n", $size);
    <command>my</command> $f = <command>new</command> File();
    # File::open2() will throw an exception if /dev/random cannot be opened for reading
    $f.open2("/dev/random");
    <command>return</command> $f.readBinary($size);
}</programlisting>

  <sect2 id="blowfish_encrypt_cbc">
    <title>blowfish_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm using a variable-length key and an optional initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>blowfish_encrypt_cbc(<replaceable>input_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = blowfish_encrypt_cbc("hello there", $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for blowfish_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry><para>Argument Type</para></entry>
            <entry><para>Return Type</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para>String | Binary, String  Binary, [String | Binary]</para></entry>
            <entry><para>Binary</para></entry>
            <entry><para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm; accepts a variable-length key (recommended 16-bytes or more).  The initialization vector must be at least 8 bytes long if present.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by blowfish_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>BLOWFISH-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="blowfish_decrypt_cbc">
    <title>blowfish_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm using a variable-length key.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="blowfish_decrypt_cbc_to_string">blowfish_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>blowfish_decrypt_cbc(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = blowfish_decrypt_cbc("hello there", $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for blowfish_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm using a variable-length key.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by blowfish_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>BLOWFISH-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="blowfish_decrypt_cbc_to_string">
    <title>blowfish_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm using a variable-length key.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="blowfish_decrypt_cbc">blowfish_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>blowfish_decrypt_cbc_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = blowfish_decrypt_cbc_to_string($bin, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for blowfish_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://www.counterpane.com/blowfish.html">blowfish</ulink> algorithm using a variable-length key.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by blowfish_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>BLOWFISH-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="des_encrypt_cbc">
    <title>des_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using an 8-byte key.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_encrypt_cbc(<replaceable>input_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = des_encrypt_cbc($text, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.  The key must be at least 8-bytes long (only the first 8 bytes will be used).  If the init_vector is present it must also be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_decrypt_cbc">
    <title>des_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using an 8 byte key.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="des_decrypt_cbc_to_string">des_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_decrypt_cbc(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using an 8-byte key.  If the init_vector is present it must also be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
     </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_decrypt_cbc_to_string">
    <title>des_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using an 8-byte key.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="des_decrypt_cbc">des_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_decrypt_cbc_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using an 8-byte key.  If the init_vector is present it must also be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede_encrypt_cbc">
    <title>des_ede_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using two eight-byte keys (set by a single 16-byte key argument).  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede_encrypt_cbc(<replaceable>input_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = des_ede_encrypt_cbc($text, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry><para>Argument Type</para></entry>
            <entry><para>Return Type</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.  The key argument must be at least 16 bytes long; only the first 16 bytes of the key argument will be used for the two 8-byte keys.  If the init_vector argument is present, it must be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede_decrypt_cbc">
    <title>des_ede_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using two eight-byte keys (set by a single 16-byte key argument).  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="des_ede_decrypt_cbc_to_string">des_ede_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede_decrypt_cbc(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = des_ede_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.  The key argument must be at least 16 bytes long; only the first 16 bytes of the key argument will be used for the two 8-byte keys.  If the init_vector argument is present, it must be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede_decrypt_cbc_to_string">
    <title>des_ede_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using two eight-byte keys (set by a single 16-byte key argument).  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="des_ede_decrypt_cbc">des_ede_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede_decrypt_cbc_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = des_ede_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for the two-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.  The key argument must be at least 16 bytes long; only the first 16 bytes of the key argument will be used for the two 8-byte keys.  If the init_vector argument is present, it must be at least 8 bytes long.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede3_encrypt_cbc">
    <title>des_ede3_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using three 8-byte keys (set by a single 24-byte key argument) and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede3_encrypt_cbc(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = des_ede3_encrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede3_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using three 8-byte keys (set by a single 24-byte key argument) and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede3_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede3_decrypt_cbc">
    <title>des_ede3_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using three 8-byte keys (set by a single 24-byte key argument) and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="des_ede3_decrypt_cbc_to_string">des_ede3_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede3_decrypt_cbc(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = des_ede3_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede3_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede3_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="des_ede3_decrypt_cbc_to_string">
    <title>des_ede3_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using three 8-byte keys (set by a single 24-byte key argument) and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="des_ede3_decrypt_cbc">des_ede3_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>des_ede3_decrypt_cbc_to_string(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = des_ede3_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for des_ede3_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for the three-key triple <ulink url="http://www.itl.nist.gov/fipspubs/fip46-2.htm">DES</ulink> algorithm using three 8-byte keys (set by a single 24-byte key argument) and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by des_ede3_decrypt_cbc_to_string()</title>
     <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DES-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="desx_encrypt_cbc">
    <title>desx_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>desx_encrypt_cbc(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = desx_encrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for desx_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by desx_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DESX-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="desx_decrypt_cbc">
    <title>desx_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="desx_decrypt_cbc_to_string">desx_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>desx_decrypt_cbc(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = desx_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for desx_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by desx_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DESX-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="desx_decrypt_cbc_to_string">
    <title>desx_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="desx_decrypt_cbc">desx_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>desx_decrypt_cbc_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = desx_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for desx_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String 7 Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for RSA's <ulink url="http://www.rsasecurity.com/">DESX</ulink> algorithm using a 24-byte key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by desx_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>DESX-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc2_encrypt_cbc">
    <title>rc2_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc2_encrypt_cbc(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc2_encrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc2_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc2_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC2-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc2_decrypt_cbc">
    <title>rc2_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="rc2_decrypt_cbc_to_string">rc2_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc2_decrypt_cbc(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc2_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc2_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc2_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC2-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc2_decrypt_cbc_to_string">
    <title>rc2_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="rc2_decrypt_cbc">rc2_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc2_decrypt_cbc_to_string(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = rc2_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc2_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC2(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc2_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC2-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="cast5_encrypt_cbc">
    <title>cast5_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>cast5_encrypt_cbc(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = cast5_encrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for cast5_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by cast5_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>CAST5-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="cast5_decrypt_cbc">
    <title>cast5_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="cast5_decrypt_cbc_to_string">cast5_decrypt_cbc_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>cast5_decrypt_cbc(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = cast5_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for cast5_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by cast5_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>CAST5-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="cast5_decrypt_cbc_to_string">
    <title>cast5_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="cast5_decrypt_cbc">cast5_decrypt_cbc()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>cast5_decrypt_cbc_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = cast5_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for cast5_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for the <ulink url="http://en.wikipedia.org/wiki/CAST5">CAST5</ulink> algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by cast5_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>CAST5-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc4_encrypt">
    <title>rc4_encrypt()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc4_encrypt(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc4_encrypt($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc4_encrypt()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary, ]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc4_encrypt()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC4-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc4_decrypt">
    <title>rc4_decrypt()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="rc4_decrypt_to_string">rc4_decrypt_to_string()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc4_decrypt(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc4_decrypt($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc4_decrypt()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc4_decrypt()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC4-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc4_decrypt_to_string">
    <title>rc4_decrypt_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="rc4_decrypt">rc4_decrypt()</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc4_decrypt_to_string(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = rc4_decrypt_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc4_decrypt_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Alleged RC4 cipher algorithm, which should be compatible with <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC4(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc4_decrypt_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC4-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc5_encrypt_cbc">
    <title>rc5_encrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  Returns a binary object of the encrypted data.  The availability of this function depends on the availability of the RC5 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_RC5</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc5_encrypt_cbc(<replaceable>data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc5_encrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc5_encrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary, String | Binary, [String | Binary]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Encrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc5_encrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC5-ENCRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_RC5</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc5_decrypt_cbc">
    <title>rc5_decrypt_cbc()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a binary object, for an equivalent function that decrypts to a string, see <link linkend="rc5_decrypt_cbc_to_string">rc5_decrypt_cbc_to_string()</link>.  The availability of this function depends on the availability of the RC5 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_RC5</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc5_decrypt_cbc(<replaceable>binary, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = rc5_decrypt_cbc($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc5_decrypt_cbc()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Decrypts data using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc5_decrypt_cbc()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC5-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_RC5</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="rc5_decrypt_cbc_to_string">
    <title>rc5_decrypt_cbc_to_string()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.  This function returns a string, for an equivalent function that decrypts to a binary object, see <link linkend="rc5_decrypt_cbc">rc5_decrypt_cbc()</link>.  The availability of this function depends on the availability of the RC5 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_RC5</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>rc5_decrypt_cbc_to_string(<replaceable>encrypted_data, key, [init_vector]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = rc5_decrypt_cbc_to_string($data, $key);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for rc5_decrypt_cbc_to_string()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Binary, Key, [init_vector]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Decrypts data to a string using the Cipher Block Chaining function for <ulink url="http://www.rsasecurity.com/">RSA's</ulink> RC5(tm) algorithm using a variable-length key and an optional 8-byte initialization vector.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by rc5_decrypt_cbc_to_string()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>PARAMETER-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data (string or binary) parameter to function, invalid data type (expecing string or binary)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <code>RC5-DECRYPT-PARAM-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing or invalid key parameter (ex: invalid size) or invalid initialization vector (less than 8 bytes, only raised if initialization vector present)</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_RC5</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

  </sect1>

  <sect1 id="Digest_Functions">
    <title>Digest Functions</title>

  <sect2 id="DSS">
    <title>DSS()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the DSS message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>DSS(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = DSS("hello"); # returns "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for DSS()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the DSS message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by DSS()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>DSS-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="DSS_bin">
    <title>DSS_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the DSS message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>DSS_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = DSS_bin("hello"); # returns &lt;aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for DSS_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Returns the DSS message digest of the supplied argument (for strings, the trailing null character is not included in the digest).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by DSS_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>DSS-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="DSS1">
    <title>DSS1()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the DSS1 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a hex string.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>DSS1(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = DSS1("hello"); # return "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for DSS1()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>The DSS1 message digest of the supplied argument as a hex string (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by DSS1()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>DSS1-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="DSS1_bin">
    <title>DSS1_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the DSS1 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>DSS1_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = DSS1_bin("hello"); # returns &lt;aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for DSS1_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>The DSS1 message digest of the supplied argument (for strings, the trailing null character is not included in the digest).</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by DSS1()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>DSS1-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD2">
    <title>MD2()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex digits.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD2(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MD2("hello"); # returns "a9046c73e00331af68917d3804f70655"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD2()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>The MD2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD2()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD2-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD2_bin">
    <title>MD2_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex digits.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD2_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = MD2_bin("hello"); # returns &lt;a9046c73e00331af68917d3804f70655&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD2_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>The MD2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD2_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD2-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD4">
    <title>MD4()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD4 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD4(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MD4("hello"); # returns "866437cb7a794bce2b727acc0362ee27"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD4()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>The MD4 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD4()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD4-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD4_bin">
    <title>MD4_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD4 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD4_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MD4_bin("hello"); # returns "866437cb7a794bce2b727acc0362ee27"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD4_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>The MD4 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD4_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD4-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD5">
    <title>MD5()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD5 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD5(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MD5("hello"); # returns "5d41402abc4b2a76b9719d911017c592"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD5()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>The MD5 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hext characters.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD5()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD5-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MD5_bin">
    <title>MD5_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MD5 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MD5_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MD5_bin("hello"); # returns &lt;5d41402abc4b2a76b9719d911017c592&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MD5_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>The MD5 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MD5_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MD5-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MDC2">
    <title>MDC2()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MDC2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest).  The availability of this function depends on the availability of the MDC2 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_MDC2</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MDC2(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = MDC2("hello");</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MDC2()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the MDC2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MDC2()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MDC2-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_MDC2</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="MDC2_bin">
    <title>MDC2_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the MDC2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.  The availability of this function depends on the availability of the MDC2 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_MDC2</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>MDC2_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = MDC2_bin("hello");</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for MDC2_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Returns the MDC2 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by MDC2_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>MDC2-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_MDC2</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="RIPEMD160">
    <title>RIPEMD160()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the RIPEMD160 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hex characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>RIPEMD160(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = RIPEMD160("hello"); # returns "108f07b8382412612c048d07d13f814118445acd"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for RIPEMD160()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the RIPEMD160 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by RIPEMD160()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>RIPEMD160-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="RIPEMD160_bin">
    <title>RIPEMD160_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the RIPEMD160 message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a binary object.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>RIPEMD160_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = RIPEMD160_bin("hello"); # returns "108f07b8382412612c048d07d13f814118445acd"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for RIPEMD160_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Returns the RIPEMD160 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by RIPEMD160_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>RIPEMD160-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA">
    <title>SHA()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA message digest of the supplied argument (for strings, the trailing null character is not included in the digest) as a string of hext characters.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA("hello"); returns "ac62a630ca850b4ea07eda664eaecf9480843152"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA_bin">
    <title>SHA_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA_bin("hello"); returns &lt;ac62a630ca850b4ea07eda664eaecf9480843152&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>Binary</para>
            </entry>
            <entry>
              <para>Returns the SHA message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA1">
    <title>SHA1()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA1 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA1(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA1("hello"); # "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA1()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA1 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA1()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA1-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA1_bin">
    <title>SHA1_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA1 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA1_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA1_bin("hello"); # &lt;aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA1_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA1 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA1_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA1-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="SHA224">
    <title>SHA224()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA224 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA224 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA224</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA224(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA224("hello"); # "ea09ae9cc6768c50fcee903ed054556e5bfc8347907f12598aa24193"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA224()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA224 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA224()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA224-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA224</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA224_bin">
    <title>SHA224_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA224 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA224 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA224</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA224_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA224_bin("hello"); # &lt;ea09ae9cc6768c50fcee903ed054556e5bfc8347907f12598aa24193&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA224_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA224 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA224_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA224-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA224</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA256">
    <title>SHA256()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA256 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA256 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA256</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA256(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA256("hello"); # "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA256()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA256 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA256()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA256-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA256</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA256_bin">
    <title>SHA256_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA256 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA256 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA256</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA256_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA256_bin("hello"); # &lt;2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA256_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA256 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA256_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA256-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA256</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA384">
    <title>SHA384()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA384 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA384 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA384</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA384(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA384("hello"); # "59e1748777448c69de6b800d7a33bbfb9ff1b463e44354c3553bcdb9c666fa90125a3c79f90397bdf5f6a13de828684f"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA384()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA384 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA384()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA384-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA384</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA384_bin">
    <title>SHA384_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA384 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA384 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA384</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA384_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA384_bin("hello"); # &lt;59e1748777448c69de6b800d7a33bbfb9ff1b463e44354c3553bcdb9c666fa90125a3c79f90397bdf5f6a13de828684f&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA384_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA384 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA384_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA384-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA384</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA512">
    <title>SHA512()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA512 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA512 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA512</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA512(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$str = SHA512("hello"); # "9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72323c3d99ba5c11d7c7acc6e14b8c5da0c4663475c2e5c3adef46f73bcdec043"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA512()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA512 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA512()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA512-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA512</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="SHA512_bin">
    <title>SHA512_bin()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns the SHA512 message digest of the supplied argument as a string of hex characters.  For string arguments, the trailing null character is not included in the digest.  The availability of this function depends on the availability of the SHA512 algorithm in the openssl library used to compile the Qore library; for maximum portability check the constant <code>HAVE_SHA512</code> before running this function. See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>SHA512_bin(<replaceable>string | binary</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bin = SHA512_bin("hello"); # &lt;9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72323c3d99ba5c11d7c7acc6e14b8c5da0c4663475c2e5c3adef46f73bcdec043&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for SHA512_bin()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>String | Binary</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Returns the SHA512 message digest of the supplied argument (for strings, the trailing null character is not included in the digest)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table>
      <title>Exceptions thrown by SHA512_bin()</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>err</para>
            </entry>
            <entry>
              <para>desc</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <code>SHA512-DIGEST-ERROR</code>
              </para>
            </entry>
            <entry>
              <para>missing data parameter, invalid data parameter (expecing string or binary), error calculating digest</para>
            </entry>
          </row>
	  <row>
	    <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	    <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_SHA512</code> before calling this function.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

  </sect1>

  <sect1 id="Filesystem_Functions">
    <title>Filesystem Functions</title>
    <para>The following functions return information about or are related to the filesystem.  See the <link linkend="File_Class">File class</link> for a class enabling files to be created, read or written, and the <link linkend="Dir_Class">Dir class</link> allowing directories to be manipulated.</para>

<sect2 id="chdir">
  <title>chdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the current working directory.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chdir(<replaceable>directory_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>chdir("/usr/share");</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for chdir()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Changes the current working directory.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by chdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CHDIR-PARAMETER-ERROR</code></para></entry>
	<entry><para>The string for the new directory was missing from the call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="chmod">
  <title>chmod()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the mode of a file.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chmod(<replaceable>filename, mode</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>chmod("/bin/login", 0755);</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for chmod()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Sets the mode of the given file to the integer passed.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by chmod()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CHMOD-PARAMETER-ERROR</code></para></entry>
	<entry><para>Either the filename or the mode was missing from the call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="chown">
  <title>chown()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the user and group owners of a file, if the current user has permission to do so (normally only the superuser can change the user owner), follows symbolic links.  For a version of this function that does not follow symbolic links, see the <link linkend="lchown">lchown()</link> function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chown(<replaceable>filepath, user_id, group_id</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>chown("/bin/login", 0, 0);</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for chown()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Integer, Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Changes the owner and group of the file passed.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by chown()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CHOWN-PARAMETER-ERROR</code></para></entry>
	<entry><para>Expecting a string as the first argument.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="getcwd">
  <title>getcwd()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string giving the current working directory.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getcwd()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>my $cwd = getcwd();</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for getcwd()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the complete path of the current working directory as a string.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="hlstat">
<title>hlstat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash of filesystem values for the file passed; symbolic links are not followed; information is returned about symbolic links (see <link linkend="hstat">hstat()</link> for a version of this function that follows symbolic links).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hlstat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$type = hlstat("/bin/sh").type; # returns "REGULAR"</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for hlstat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Returns a hash of filesystem values for the file passed; symbolic links are not followed (information is returned about symbolic links).  See also <link linkend="hstat">hstat()</link>.  See <link linkend="Stat_Hash">Stat Hash</link> below for a description of the hash returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table id="Stat_Hash">
    <title>Stat Hash Description</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Key</para></entry>
	  <entry><para>Value Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>dev</code></para></entry>
	  <entry><para>device inode number the file is on</para></entry>
	</row>
	<row>
	  <entry><para><code>inode</code></para></entry>
	  <entry><para>inode of the file</para></entry>
	</row>
	<row>
	  <entry><para><code>mode</code></para></entry>
	  <entry><para>inode protection mode</para></entry>
	</row>
	<row>
	  <entry><para><code>nlink</code></para></entry>
	  <entry><para>number of hard links to this file</para></entry>
	</row>
	<row>
	  <entry><para><code>uid</code></para></entry>
	  <entry><para>user ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para><code>gid</code></para></entry>
	  <entry><para>group ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para><code>rdev</code></para></entry>
	  <entry><para>device type number</para></entry>
	</row>
	<row>
	  <entry><para><code>size</code></para></entry>
	  <entry><para>file size in bytes</para></entry>
	</row>
	<row>
	  <entry><para><code>atime</code></para></entry>
	  <entry><para>last access time of the file</para></entry>
	</row>
	<row>
	  <entry><para><code>mtime</code></para></entry>
	  <entry><para>last modified time of the file</para></entry>
	</row>
	<row>
	  <entry><para><code>ctime</code></para></entry>
	  <entry><para>last change time of the file's inode</para></entry>
	</row>
	<row>
	  <entry><para><code>blksize</code></para></entry>
	  <entry><para>block size</para></entry>
	</row>
	<row>
	  <entry><para><code>blocks</code></para></entry>
	  <entry><para>blocks allocated for the file</para></entry>
	</row>
	<row>
	  <entry><para><code>type</code></para></entry>
	  <entry><para>a string indicating the type of file: 'BLOCK-DEVICE', 'DIRECTORY', 'CHARACTER-DEVICE', 'FIFO', 'SYMBOLIC-LINK', 'SOCKET', 'CHARACTER-DEVICE', 'REGULAR', 'UNKNOWN'</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="hstat">
<title>hstat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash of filesystem values for the file passed; symbolic links are followed; see <link linkend="hlstat">hlstat()</link> to retrieve information about a symbolic link.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hstat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$type = hstat("/bin/sh").type; # returns "REGULAR"</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for hstat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Returns a hash of filesystem values for the file passed; symbolic links are followed.  See also <link linkend="hlstat">hlstat()</link>.  See <link linkend="Stat_Hash">Stat Hash</link> for a description of the hash returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

</sect2>

  <sect2 id="is_bdev">
    <title>is_bdev()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a block device file on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_bdev(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_bdev("/dev/sda");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_bdev()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a block device file on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_cdev">
    <title>is_cdev()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a character device file on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_cdev(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_cdev("/dev/tty");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_cdev()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a character device file on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_dev">
    <title>is_dev()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a device file (either block or character) on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_dev(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_dev("/dev/sda");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_dev()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a device file (either block or character) on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_dir">
    <title>is_dir()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a directory on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_dir(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_dir("/usr/share");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_dir()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a directory on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_executable">
    <title>is_executable()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies an executable file.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_executable(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_executable("/bin/sh");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_executable()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies an executable file.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_file">
    <title>is_file()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a regular file on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_file(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_file("/etc/hosts");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_file()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a regular file on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_link">
    <title>is_link()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a symbolic link on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_link(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_link("/bin/sh");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_link()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a symbolic link on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_pipe">
    <title>is_pipe()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a pipe (FIFO) on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_pipe(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_pipe("/bin/sh");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_pipe()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a pipe (FIFO) on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_readable">
    <title>is_readable()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a file readable by the current user.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_readable(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_readable("/etc/hosts");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_readable()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a file readable by the current user.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_socket">
    <title>is_socket()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a socket on the filesystem.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_socket(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_socket("/tmp/X0");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_socket()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a socket on the filesystem.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>
  <sect2 id="is_writeable">
    <title>is_writeable()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Returns True if the string passed identifies a file writable by the current user.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>is_writeable(<replaceable>path</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$bool = is_writeable("/etc/hosts");</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for is_writeable()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Path</para>
            </entry>
            <entry>
              <para>Boolean</para>
            </entry>
            <entry>
              <para>Returns True if the string passed identifies a file writable by the current user.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect2>

<sect2 id="lchown">
  <title>lchown()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the user and group owners of a file, if the current user has permission to do so (normally only the superuser can change the user owner), does not follow symbolic links.  For a version of this function that follows symbolic links, see the <link linkend="chown">chown()</link> function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>lchown(<replaceable>filepath, user_id, group_id</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>lchown("/bin/login", 0, 0);</programlisting>
      </listitem>
    </varlistentry>
      <varlistentry>
	<term>Restrictions</term>
	<listitem>
	  <para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
	</listitem>
      </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for lchown()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Integer, Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Changes the owner and group of the file passed.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by lchown()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CHOWN-PARAMETER-ERROR</code></para></entry>
	<entry><para>Expecting a string as the first argument.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="lstat">
<title>lstat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of filesystem values for the file or symbolic link passed.  Does not follow symbolic links, but rather returns filesystem information for symbolic links.  See also <link linkend="stat">stat()</link> for a version of this function that follows symbolic links, and <link linkend="hlstat">hlstat()</link> for a version of this function that returns a user-friendly hash instead of a list.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>lstat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = lstat(("/bin/sh");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for lstat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Returns a list of filesystem values for the file passed.  See <link linkend="Stat_List">Stat List</link> for a description of the list returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="mkdir">
<title>mkdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a directory, optionally specifying the mode.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mkdir(<replaceable>string_name, [mode]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>mkdir("/tmp/newdir", 0755);</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for mkdir()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Integer]</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>Creates a directory with the specified name.  If the mode parameter is not sent, then 0777 is used by default (which is AND'ed with the umask).  Returns 0 if no error occurred.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by mkdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>MKDIR-PARAMETER-ERROR</code></para></entry>
	<entry><para>Missing directory name for the mkdir() call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="mkfifo">
  <title>mkfifo()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a named pipe file with an optional file mode (default = 0600).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mkfifo(<replaceable>filename, [mode]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>mkfifo("/tmp/pipe");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for mkfifo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, [Integer]</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Creates a named pipe with the supplied path and optional mode.  If <replaceable>mode</replaceable> is not supplied, then 0660 is used by default.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="rename">
  <title>rename()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Renames (or moves) files or directories.  Note that for this call to function properly, the Qore process must have sufficient permissions and access to the given filesystem objects or paths to execute the rename operation.</para>
	<para>This function does not return any value; if any errors occur, an exception is thrown.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rename(<replaceable>old_path, new_path</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>rename("/tmp/temp_file", "/home/test/test_file.txt");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


  <table><title>Arguments and Return Values for rename()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>

      <tbody>
	<row>
	  <entry><para>String, String</para></entry>
	  <entry><para>n/a</para></entry>
	  <entry><para>Renames (or moves) the file ior directory indentified by <replaceable>old_path</replaceable> to the new name and/or location given by <replaceable>new_path</replaceable></para></entry>
	</row>

      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by rename()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>RENAME-ERROR</code></para></entry>
	  <entry><para>Missing arguments or a system error occured.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

</sect2>

<sect2 id="rmdir">
<title>rmdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes a directory.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rmdir(<replaceable>path</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>rmdir("/tmp/newdir");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for rmdir()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Removes an empty directory.  Returns 0 if no error occurred.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by rmdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>RMDIR-PARAMETER-ERROR</code></para></entry>
	<entry><para>Missing directory name for the <code>rmdir()</code> call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="umask">
<title>umask()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sets the file creation mask for the process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>umask(<replaceable>mode</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>umask(0777);</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


  <table>
    <title>Arguments and Return Values for umask()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Sets the file creation mask for the process, returns 0 for success.  If no argument is passed, no action is taken, and the function returns NOTHING.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="unlink">
<title>unlink()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes a file and returns 0 for success.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>unlink(<replaceable>file</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>unlink("/tmp/tmp_file");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for unlink()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Deletes a file and returns 0 for success.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

  </sect1>

  <sect1 id="Data_Compression_Functions">
    <title>Data Compression Functions</title>
      <para>This section documents functions for compressing and uncompressing data.</para>

<sect2 id="compress">
  <title>compress()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Performs zlib-based &quot;deflate&quot; data compression (<ulink url="http://www.ietf.org/rfc/rfc1951.txt?number=1951">RFC 1951</ulink>) and returns a binary object of the compressed data.  The optional second argument specifies the compression level; if no second argument is given, then a tradeoff between speed and compression size is taken (default: 6).  Note that strings are compressed without the trailing null character.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>compress(<replaceable>string | binary, [level]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bin = compress("hello");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for compress()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><replaceable>string | binary, [level]</replaceable></para></entry>
	  <entry><para>Binary</para></entry>
	  <entry><para>Compresses the input data and returns a binary object.  The optional <replaceable>level</replaceable> argument should be an integer between 1 and 9, 9 meaning the highest compression level.  If this argument is not present then a default value of 6 is assumed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by compress()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>ZLIB-LEVEL-ERROR</code></para></entry>
	<entry><para>the compression level is invalid (must be between 1 - 9 inclusive).</para></entry>
      </row>
      <row>
	<entry><para><code>ZLIB-ERROR</code></para></entry>
	<entry><para>zlib returned an error while processing.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

    <sect2 id="gunzip_to_binary">
      <title>gunzip_to_binary()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Uncompresses gzipped data using zlib functions and returns a binary object of the uncompressed data.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>gunzip_to_binary(<replaceable>binary</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bin = gunzip_to_binary($data);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments and Return Values for gunzip_to_binary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>binary</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Uncompresses the input data and returns a binary object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
  
      <table><title>Exceptions Thrown by gunzip_to_binary()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ZLIB-ERROR</code></para></entry>
	    <entry><para>zlib returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>

    </sect2>

    <sect2 id="gunzip_to_string">
      <title>gunzip_to_string()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Uncompresses gzipped data using zlib functions and returns a string of the uncompressed data.  An optional second string argument may be passed to give the character encoding of the string; if not present, the <link linkend="Default_Character_Encoding">default character encoding</link> for the process is assumed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>gunzip_to_string(<replaceable>binary, [encoding]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = gunzip_to_string($gzipped_string);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments and Return Values for gunzip_to_string()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>binary, [encoding]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Uncompresses the input data and returns a string.  The optional <replaceable>encoding</replaceable> argument may be passed to specify the encoding of the string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Exceptions Thrown by gunzip_to_string()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ZLIB-ERROR</code></para></entry>
	    <entry><para>zlib returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      
    </sect2>

    <sect2 id="gzip">
      <title>gzip()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Performs zlib-based &quot;gzip&quot; data compression (<ulink url="http://www.ietf.org/rfc/rfc1952.txt?number=1952">RFC 1952</ulink>) and returns a binary object of the compressed data.  The optional second argument specifies the compression level; if no second argument is given, then a tradeoff between speed and compression size is taken (default: 6).  Note that strings are compressed without the trailing null character.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>gzip(<replaceable>string | binary, [level]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bin = gzip($data);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments and Return Values for gzip()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string | binary, [level]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Compresses the input data and returns a binary object of the gzipped data.  The optional <replaceable>level</replaceable> argument should be an integer between 1 and 9, 9 meaning the highest compression level.  If this argument is not present then a default value of 6 is assumed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Exceptions Thrown by gzip()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ZLIB-LEVEL-ERROR</code></para></entry>
	    <entry><para>the compression level is invalid (must be between 1 - 9 inclusive).</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ZLIB-ERROR</code></para></entry>
	    <entry><para>zlib returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      
    </sect2>

    <sect2 id="bunzip2_to_binary">
      <title>bunzip2_to_binary()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Uncompresses data compressed with bzip2 and returns a binary object of the uncompressed data.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>bunzip2_to_binary(<replaceable>binary</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bin = bunzip2_to_binary($data);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments and Return Values for bunzip2_to_binary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>binary</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Uncompresses the input data and returns a binary object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
  
      <table><title>Exceptions Thrown by bunzip2_to_binary()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>BZIP2-DECOMPRESS-ERROR</code></para></entry>
	    <entry><para>libbz2 returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>

    </sect2>

    <sect2 id="bunzip2_to_string">
      <title>bunzip2_to_string()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Uncompresses data compressed with bzip2 and returns a string of the uncompressed data.  An optional second string argument may be passed to give the character encoding of the string; if not present, the <link linkend="Default_Character_Encoding">default character encoding</link> for the process is assumed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>bunzip2_to_string(<replaceable>binary, [encoding]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = bunzip2_to_string($gzipped_string);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments and Return Values for bunzip2_to_string()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>binary, [encoding]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Uncompresses the input data and returns a string.  The optional <replaceable>encoding</replaceable> argument may be passed to specify the encoding of the string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Exceptions Thrown by bunzip2_to_string()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>BZIP2-DECOMPRESS-ERROR</code></para></entry>
	    <entry><para>libbz2 returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      
    </sect2>

    <sect2 id="bzip2">
      <title>bzip2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Performs &quot;bzip2&quot; data compression and returns a binary object of the compressed data.  The optional second argument specifies the compression buffer size as an argument from 1 - 9; if no second argument is given, then the maximum buffer size is assumed (default: 9).  Note that strings are compressed without the trailing null character.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>bzip2(<replaceable>string | binary, [level]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bin = bzip2($data);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments and Return Values for bzip2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string | binary, [level]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Compresses the input data and returns a binary object of the bzip2 data.  The optional <replaceable>level</replaceable> argument should be an integer between 1 and 9, 9 meaning the largest compression buffer size.  If this argument is not present then a default value of 9 is assumed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Exceptions Thrown by bzip2()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>err</para></entry>
	    <entry><para>desc</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>BZLIB2-LEVEL-ERROR</code></para></entry>
	    <entry><para>the compression level is invalid (must be between 1 - 9 inclusive).</para></entry>
	  </row>
	  <row>
	    <entry><para><code>BZLIB2-COMPRESSION-ERROR</code></para></entry>
	    <entry><para>zlib returned an error while processing.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      
    </sect2>

<sect2 id="uncompress_to_binary">
  <title>uncompress_to_binary()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Uncompresses data using zlib functions and returns a binary object of the uncompressed data.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>uncompress_to_binary(<replaceable>binary</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bin = uncompress_to_binary($compressed_data);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for uncompress_to_binary()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><replaceable>binary</replaceable></para></entry>
	  <entry><para>Binary</para></entry>
	  <entry><para>Uncompresses the input data and returns a binary object.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by uncompress_to_binary()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>ZLIB-ERROR</code></para></entry>
	<entry><para>zlib returned an error while processing.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="uncompress_to_string">
  <title>uncompress_to_string()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Uncompresses data using zlib functions and returns a string of the uncompressed data.  An optional second string argument may be passed to give the character encoding of the string; if not present, the <link linkend="Default_Character_Encoding">default character encoding</link> for the process is assumed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>uncompress_to_string(<replaceable>binary, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = uncompress_to_string($compressed_data);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for uncompress_to_string()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><replaceable>binary, [encoding]</replaceable></para></entry>
	  <entry><para>Binary</para></entry>
	  <entry><para>Uncompresses the input data and returns a string.  The optional <replaceable>encoding</replaceable> argument may be passed to specify the encoding of the string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by uncompress_to_string()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>ZLIB-ERROR</code></para></entry>
	<entry><para>zlib returned an error while processing.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

  </sect1>

<sect1 id="Miscellaneous_Functions">
<title>Miscellaneous Functions</title>
<para></para>

<sect2 id="backquote">
<title>backquote()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Executes a process and returns a string of the output (stdout only)</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>backquote(<replaceable>shell_command_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$files = backquote("ls");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-external-process"><code>PO_NO_EXTERNAL_PROCESS</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for backquote()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Executes the string passed as a shell command in a subprocess and returns the stdout of the process as a string.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by backquote()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>BACKQUOTE-ERROR</code></para></entry>
	<entry><para>An error occurred with the <code>fork()</code> or opening the stdout pipe.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_builtin_function">
<title>call_builtin_function()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a builtin function and returns the return value, passing the remaining arguments after the function name to the builtin function.  This function can be used to override a builtin function's functionality with a custom implementation.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_builtin_function(<replaceable>func, [arg1, arg2, ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$result = call_builtin_function("func_name", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for call_builtin_function()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Any</para></entry>
    <entry><para>Any (depends on function)</para></entry>
    <entry><para>Executes the given builtin function with the remainder of the arguments as the arguments to the function.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by call_builtin_function()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CALL-BUILTIN-FUNCTION-ERROR</code></para></entry>
	<entry><para>The first argument must be a string.</para></entry>
      </row>
      <row>
	<entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>NO-FUNCTION</code></para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_builtin_function_args">
<title>call_builtin_function_args()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a builtin function and returns the return value, using the optional second argument as a list of arguments for the function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_builtin_function_args(<replaceable>func, [args]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>call_builtin_function_args("func_name", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for call_builtin_function_args()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>

      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>Any (depends on function)</para></entry>
	  <entry><para>Executes the given builtin function using any second argument as the list of arguments.</para></entry>  
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by call_builtin_function_args()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CALL-BUILTIN-FUNCTION-ARGS-ERROR</code></para></entry>
	<entry><para>The first argument must be a string.</para></entry>
      </row>
      <row>
	<entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>NO-FUNCTION</code></para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_function">
<title>call_function()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> and returns the return value, passing the remaining arguments after the function name to the function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_function(<replaceable>func, [arg1, arg2, ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$result = call_function("func_name", $arg1, $arg2);</programlisting>
	<programlisting>$result = call_function($call_ref, $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for call_function()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String | <link linkend="closures">closure</link> | <link linkend="call_references">call reference</link>, Any</para></entry>
    <entry><para>Any (depends on function)</para></entry>
    <entry><para>Executes the given function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> with the remainder of the arguments as the arguments to the function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> to be called.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by call_function()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CALL-FUNCTION-PARAMETER-ERROR</code></para></entry>
	<entry><para>The first argument must be a string, closure, or call reference.</para></entry>
      </row>
      <row>
	<entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>NO-FUNCTION</code></para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_function_args">
<title>call_function_args()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> and returns the return value, using the optional second argument as a list of arguments for the function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> to be called.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_function_args(<replaceable>func, [args]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>call_function_args("func_name", $arg_list);</programlisting>
	<programlisting>call_function_args($call_ref, $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for call_function_args()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>

      <tbody>
	<row>
	  <entry><para>String | <link linkend="closures">closure</link> | <link linkend="call_references">call reference</link>, [List]</para></entry>
	  <entry><para>Any (depends on function)</para></entry>
	  <entry><para>Executes the given function, <link linkend="closures">closure</link>, or <link linkend="call_references">call reference</link> using any second argument as the list of arguments.</para></entry>  
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by call_function_args()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>CALL-FUNCTION-ARGS-PARAMETER-ERROR</code></para></entry>
	<entry><para>The first argument must be a string, closure, or call reference.</para></entry>
      </row>
      <row>
	<entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para><code>NO-FUNCTION</code></para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="callObjectMethod">
<title>callObjectMethod()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a method of an object, passing the remainder of the arguments to the function as arguments to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>callObjectMethod(<replaceable>object, method_string, [args ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$result = callObjectMethod($obj, "method", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for callObjectMethod()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Object, String, [args ...]</para></entry>
    <entry><para>Any (depends on method)</para></entry>
    <entry><para>Calls a method of an object, passing the remainder of the arguments to the function as arguments to the method, and returns the return value, if any.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by callObjectMethod()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>METHOD-DOES-NOT-EXIST</code></para></entry>
	<entry><para>The named method does not exist in this class.</para></entry>
      </row>
      <row>
	<entry><para><code>ILLEGAL-EXPLICIT-METHOD-CALL</code></para></entry>
	<entry><para>The named method may not be called explicitly.</para></entry>
      </row>
      <row>
	<entry><para><code>METHOD-IS-PRIVATE</code></para></entry>
	<entry><para>The named method is private and therefore can only be called within the class.</para></entry>
      </row>
      <row>
	<entry><para><code>BASE-CLASS-IS-PRIVATE</code></para></entry>
	<entry><para>The named method is a member of a privately inherited base class.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="callObjectMethodArgs">
  <title>callObjectMethodArgs()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a method of an object, using the optional third argument as the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>callObjectMethodArgs(<replaceable>object, method_string, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$result = callObjectMethodArgs($obj, "method", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for callObjectMethodArgs()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Object, String, [args ...]</para></entry>
    <entry><para>Any (depends on method)</para></entry>
    <entry><para>Calls a method of an object, using the optional third argument as the argument list to the method, and returns the return value, if any.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by callObjectMethodArgs()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>METHOD-DOES-NOT-EXIST</code></para></entry>
	<entry><para>The named method does not exist in this class.</para></entry>
      </row>
      <row>
	<entry><para><code>ILLEGAL-EXPLICIT-METHOD-CALL</code></para></entry>
	<entry><para>The named method may not be called explicitly.</para></entry>
      </row>
      <row>
	<entry><para><code>METHOD-IS-PRIVATE</code></para></entry>
	<entry><para>The named method is private and therefore can only be called within the class.</para></entry>
      </row>
      <row>
	<entry><para><code>BASE-CLASS-IS-PRIVATE</code></para></entry>
	<entry><para>The named method is a member of a privately inherited base class.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="existsFunction">
<title>existsFunction()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns True if the function exists in the current program's function name space.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>existsFunction(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bool = existsFunction("func_name");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for existsFunction()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Boolean</para></entry>
    <entry><para>Returns True if the function exists in the current program's function name space, otherwise returns False.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="functionType">
<title>functionType()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns &quot;builtin&quot;, &quot;user&quot;, or NOTHING according to the function name passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>functionType(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$type = functionType("print");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for functionType()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Boolean</para></entry>
    <entry><para>Returns &quot;builtin&quot; (for a builtin function), &quot;user&quot; (for a user function), or NOTHING (if the function cannot be found) according to the function name passed.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="get_qore_library_info">
<title>get_qore_library_info()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash of library build and version info with the keys in the table <link linkend="Library_Info_Hash">Library Info Hash</link>.  For constants giving the same information, see <link linkend="Build_and_Version_Constants">Build and Version Constants</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_qore_library_info()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$info = get_qore_library_info();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for get_qore_library_info()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Arguments</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Hash</para></entry>
    <entry><para>A hash of library build and version info with the keys in the table <link linkend="Library_Info_Hash">Library Info Hash</link>.  For constants giving the same information, see <link linkend="Build_and_Version_Constants">Build and Version Constants</link>.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

<para>This function does not throw any exceptions.</para>

<table id="Library_Info_Hash">
  <title>Library Info Hash</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Key</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><code>PlatformOS</code></para></entry>
    <entry><para>The operating system used to build the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>PlatformCPU</code></para></entry>
    <entry><para>The CPU used as a target for the Qore library build.</para></entry>
  </row>
  <row>
    <entry><para><code>VersionString</code></para></entry>
    <entry><para>The full version string for this version of the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>VersionMajor</code></para></entry>
    <entry><para>An integer giving the Qore library's major version number.</para></entry>
  </row>
  <row>
    <entry><para><code>VersionMinor</code></para></entry>
    <entry><para>An integer giving the Qore library's minor version number.</para></entry>
  </row>
  <row>
    <entry><para><code>VersionSub</code></para></entry>
    <entry><para>An integer giving the Qore library's release version number.</para></entry>
  </row>
  <row>
    <entry><para><code>Build</code></para></entry>
    <entry><para>An integer giving the Qore library's subversion revision number.</para></entry>
  </row>
  <row>
    <entry><para><code>BuildHost</code></para></entry>
    <entry><para>A string giving information about the host used to compile the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>Compiler</code></para></entry>
    <entry><para>The compiler used to build the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>ModuleDir</code></para></entry>
    <entry><para>The module directory assumed by default in the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>CFLAGS</code></para></entry>
    <entry><para>The compiler flags used to compile the Qore library.</para></entry>
  </row>
  <row>
    <entry><para><code>LDFLAGS</code></para></entry>
    <entry><para>The linker flags used to link the Qore library.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="get_qore_option_list">
<title>get_qore_option_list()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of hashes giving information about Qore library options for the current build.  See <link linkend="Library_Option_Hash">Library Option Hash</link> for information about the elements in the list returned.  See <link linkend="Library_Options">Library Options</link> for information about Qore library options.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_qore_option_list()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = get_qore_option_list();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for get_qore_option_list()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Arguments</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>A list of hashes giving information about Qore library options for the current build.  See <link linkend="Library_Option_Hash">Library Option Hash</link> for information about the elements in the list returned.</para></entry>
  </row>

</tbody>
</tgroup>
</table>


<table id="Library_Option_Hash"><title>Library Option Hash</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Key</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><code>option</code></para></entry>
    <entry><para>The string description of the option</para></entry>
  </row>
  <row>
    <entry><para><code>constant</code></para></entry>
    <entry><para>A string giving the name of the constant that has the boolean value for this option.</para></entry>
  </row>
  <row>
    <entry><para><code>type</code></para></entry>
    <entry><para>The type of option.</para></entry>
  </row>
  <row>
    <entry><para><code>value</code></para></entry>
    <entry><para>The boolean value of the option.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

<para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getByte">
<title>getByte()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the byte value of the offset (starting with 0) in the object passed.  Of no offset is passed, then the value of the first byte (offset 0) is returned.  Note that the <link linkend="List_Dereference_Operator">[] operator</link> provides a more efficient way to retrieve a byte from a binary object.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getByte(<replaceable>expr, [offset]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$byte = getByte($bin, 2); # returns the thrid byte of the binary object</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getByte()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Arguments</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><replaceable>expr, [offset]</replaceable></para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>The value of the byte at the offset in the string or binary object.  If no offset is passed, then the first byte is returned.  If the object is empty or the offset is larger than the object's size, then no value is returned.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="getClassName">
  <title>getClassName()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the class name of an object.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getClassName(<replaceable>object</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$name = getClassName($obj);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for getClassName()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Returns the class name of the object passed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getDBIDriverCapabilities">
      <title>getDBIDriverCapabilities()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an integer representing the capabilities of a DBI driver corresponding to the driver name passed as an argument.  See <link linkend="Qore_SQL_Constants">SQL constants</link> for constants for names of drivers shipping with the qore distribution.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverCapabilities(<replaceable>driver_name</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$caps = getDBIDriverCapabilities("oracle");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverCapabilities()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns an integer representing the capabilities of a DBI driver binary-OR'ed together (see <link linkend="DBI_Capability_Constants">DBI Capability Constants</link>).  Returns NOTHING if the driver cannot be found.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="getDBIDriverCapabilityList">
      <title>getDBIDriverCapabilityList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of each capability supported by the given DBI driver.  See <link linkend="Qore_SQL_Constants">SQL constants</link> for constants giving names of drivers shipping with the Qore distribution.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverCapabilityList(<replaceable>driver_name</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$list = getDBIDriverCapabilityList("mysql");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverCapabilityList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of each capability supported by the given DBI driver (see <link linkend="DBI_Capability_Constants">DBI Capability Constants</link>).  Returns NOTHING if the driver cannot be found.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="getDBIDriverList">
      <title>getDBIDriverList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of strings of DBI drivers currently loaded.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverList()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$list = getDBIDriverList();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>n/a</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of strings of DBI drivers currently loaded.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="getFeatureList">
<title>getFeatureList()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of strings of the builtin and module-supplied features of Qore.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getFeatureList()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = getFeatureList();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for getFeatureList()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Returns a list of strings of the builtin and module-supplied features of Qore.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getMethodList">
      <title>getMethodList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of strings of the names of the methods of the class of the object passed as a parameter.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getMethodList(<replaceable>object</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$list = getMethodList($obj);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getMethodList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Object</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns all methods in the class, both private and public.  Does not return inherited methods.  If no object is passed to the function, NOTHING is returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="getModuleList">
<title>getModuleList()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of hashes describing the currently-loaded Qore modules.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getModuleList()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = getModuleList();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for getModuleList()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Each element in the list is a hash describing currently-loaded qore modules.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="get_default_encoding">
<title>get_default_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the name of the <link linkend="Default_Character_Encoding">default character encoding</link> for the currently-running Qore process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_default_encoding()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$encoding = get_default_encoding();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for get_default_encoding()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the name of the <link linkend="Default_Character_Encoding">default character encoding</link>.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getpwuid">
      <title>getpwuid()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash representing the user information for the user ID passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getpwuid(<replaceable>integer_uid</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = getpwuid(0); # returns the login information for root</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getpwuid()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Returns a hash representing the user information for the user ID passed.  If the uid does not exist, NOTHING is returned.  Otherwise the hash has the following keys: pw_name, pw_passwd, pw_gecos, pw_dir, pw_shell, pw_uid, pw_gid.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="get_script_path">
      <title>get_script_path()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the path (directory and filename) of the current script.  Returns NOTHING if unknown (i.e. no parent script, script read from stdin, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>get_script_path()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$path = get_script_path();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table><title>Arguments and Return Values for get_script_path()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>String or NOTHING</para></entry>
	    <entry><para>Returns the path name of the current script, or NOTHING if unknown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
      
    </sect2>

    <sect2 id="get_script_dir">
      <title>get_script_dir()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the directory from which the current script was executed.  Returns NOTHING if the parent script is unknown (i.e. no parent script, script read from stdin, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>get_script_dir()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$dir = get_script_dir();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table><title>Arguments and Return Values for get_script_dir()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>String or NOTHING</para></entry>
	    <entry><para>Returns the name of the directory for the current script, or NOTHING if unknown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
      
    </sect2>

    <sect2 id="get_script_name">
      <title>get_script_name()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the filename of the current script if known; returns NOTHING if not (i.e. no parent script, script read from stdin, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>get_script_name()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$name = get_script_name();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table><title>Arguments and Return Values for get_script_name()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>String or NOTHING</para></entry>
	    <entry><para>Returns the filename of the current script, or NOTHING if unknown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
      
    </sect2>

    <sect2 id="hash_values">
      <title>hash_values()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of all the values in the hash argument passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>hash_values(<replaceable>hash</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$list = hash_values($hash);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for hash_values()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>List</para>
              </entry>
              <entry>
                <para>Returns a list of all the values in the hash argument passed.  If no hash is passed, returns NOTHING.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="hextoint">
      <title>hextoint()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an integer for a hexadecimal string value.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>hextoint(<replaceable>hex_string</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = hextoint("ab3d4e0f12");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for hextoint()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns an integer for a hexadecimal string value.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="html_decode">
<title>html_decode()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string with any HTML escape codes translated to the original characters.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>html_decode(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>html_decode("&amp;lt;hello&amp;gt;"); # returns "&lt;hello&gt;"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for html_decode()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a string with any HTML escape codes (ie &amp;amp; -&gt; &amp;, etc) translated to the original characters.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="html_encode">
<title>html_encode()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string with any characters that can be escaped translated to HTML escape codes.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>html_encode(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = html_encode("&lt;hello&gt;"); # returns "&amp;lt;hello&amp;gt;"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for html_encode()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a string with characters needed HTML escape code transation (ie &amp; -&gt; &amp;amp; etc) translated to the escape codes.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="inlist">
  <title>inlist()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Tests if the first argument is a member of the second argument list; types are converted if necessary.  If the second argument is NOTHING, then False is returned unconditionally (i.e. even if the first argument is NOTHING as well), however if the second argument is not a list then the return value of the function is the comparison of the two arguments.  For a version of this function that requires types to be equal for the comparison to succeed, see <link linkend="inlist_hard">inlist_hard()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>inlist(<replaceable>value, list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>my $bool = inlist(123, (True, "123", False); # this will return True</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for inlist()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>value, list</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns True if <replaceable>value</replaceable> is a member of <replaceable>list</replaceable>; types are converted if necessary.</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>value, NOTHING</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Always returns False.</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>value1, value2</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns the value of the comparison of <replaceable>value1</replaceable> with <replaceable>value2</replaceable>; types are converted if necessary.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="inlist_hard">
  <title>inlist_hard()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Tests if the first argument is a member of the second argument list; no type conversions are performed (i.e. the comparison fails if types are not equal).  If the second argument is NOTHING, then False is returned unconditionally (i.e. even if the first argument is NOTHING as well), however if the second argument is not a list then the return value of the function is the comparison of the two arguments (types must be equal).  For a &quot;soft&quot; version of this function that performs type conversions when doing the comparison, see <link linkend="inlist">inlist()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>inlist_hard(<replaceable>value, list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>my $bool = inlist_hard(123, (True, "123", False); # this will return False</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for inlist_hard()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>value, list</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns True if <replaceable>value</replaceable> is a member of <replaceable>list</replaceable>; no type conversions are performed (the comparison fails if types are not equal).</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>value, NOTHING</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Always returns False.</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>value1, value2</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns the value of the comparison of <replaceable>value1</replaceable> with <replaceable>value2</replaceable>; no type conversions are performed (the comparison fails if the types are not equal).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="load_module">
<title>load_module()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Loads in a Qore module at run-time.  If a feature with the same name already exists, then this feature's code is imported into the current Program object if necessary and no further action is taken.  Note that modules providing objects resolved at parse time (classes, constants, functions, etc) must be loaded with the <link linkend="requires"><code>%requires</code> directive</link> instead, unless all references to the objects provided by the module will be made in code embedded in <link linkend="Qore_Program_Class">Program</link> objects.</para>
	<para>See also <link linkend="getFeatureList">getFeatureList()</link> for a function providing a list of available features.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>load_module(<replaceable>module_name</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>load_module("pgsql");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for load_module()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Loads the module with the given name if possible, otherwise throws an exception.  This function returns no value.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by load_module()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>LOAD-MODULE-ERROR</code></para></entry>
	<entry><para>An error occurred loading the module (module not found, libraries not resolved, wrong module API, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="makeBase64String">
  <title>makeBase64String()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a base64-encoded representation of a binary object or a string (see also <link linkend="makeHexString">makeHexString()</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeBase64String(<replaceable>arg</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = makeBase64String($bin);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeBase64String()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Binary or String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a base64-encoded representation of a binary object or a string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="makeHexString">
  <title>makeHexString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hex-encoded representation of a binary object or a string (see also <link linkend="makeBase64String">makeBase64String()</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeHexString(<replaceable>arg</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = makeHexString($bin);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeHexString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Binary or String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a hex-encoded representation of a binary object or a string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

  <sect2 id="max">
    <title>max()</title>
    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Returns the maximum value in a list (see also <link linkend="min">min()</link>).  Without a callback, this function will only work on basic data types.  A <link linkend="closures">closure</link>  or <link linkend="call_references">call reference</link> can be used to find the maximum value of a list of complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than, equal to, or greater than the second, respectively.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>max(<replaceable>list, [callback]</replaceable>)</programlisting>
	  <programlisting>max(<replaceable>elem1, elem2[, ...]</replaceable>)</programlisting>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Example</term>
	<listitem>
	  <programlisting>$max = max($complex_list, \callback_function());</programlisting>
	  <programlisting>$max = max(1, 2, 3, 4);</programlisting>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for max()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><replaceable>list, [callback]</replaceable></para></entry>
	    <entry><para>Any</para></entry>
	    <entry><para>Finds the maxmimum value in the list and returns that value.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used as described above.</para></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>elem1, elem2[, ...]</replaceable></para></entry>
	    <entry><para>Any</para></entry>
	    <entry><para>Finds the maximum value in the list of simple data types passed as top-level arguments to the function and returns that value.  No callback reference can be specified with this variant.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions (note a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> could throw an exception).</para>
  </sect2>

  <sect2 id="min">
    <title>min()</title>
    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Returns the minumum value in a list (see also <link linkend="max">max()</link>).  Without a callback, this function will only work on basic data types.  A <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be used to find the minimum value of a list of complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than, equal to, or greater than the second, respectively.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>min(<replaceable>list, [callback]</replaceable>)</programlisting>
	  <programlisting>min(<replaceable>elem1, elem2[, ...]</replaceable>)</programlisting>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Example</term>
	<listitem>
	  <programlisting>$min = min($complex_list, \callback_function());</programlisting>
	  <programlisting>$min = min(1, 10, 2, 3);</programlisting>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for min()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><replaceable>list, [callback]</replaceable></para></entry>
	    <entry><para>Any</para></entry>
	    <entry><para>Finds the minimum value in the list and returns that value.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used as described above.</para></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>elem1, elem2[, ...]</replaceable></para></entry>
	    <entry><para>Any</para></entry>
	    <entry><para>Finds the minimum value in the list of simple data types passed as top-level arguments to the function and returns that value.  No <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be specified with this variant.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions (note that a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> could throw an exception).</para>
  </sect2>

<sect2 id="parse">
<title>parse()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Adds the text passed to the current program's code.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parse(<replaceable>code_string, label_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>parse($code, "label");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for parse()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>Parses the string passed and adds the code to the current program.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by parse()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>PARSE-ERROR</code></para></entry>
	<entry><para>An error occurred parsing the text.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="parseBase64String">
<title>parseBase64String()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses a base64 encoded string and returns the binary object (see also <link linkend="parseHexString">parseHexString()</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseBase64String(<replaceable>base64_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bin = parseBase64String($base64_string);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for parseBase64String()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Binary</para></entry>
    <entry><para>Parses a base64 encoded string and returns the binary object.  If anything is passed other than a string as an argument, no action is taken and the function returns NOTHING.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by parseBase64String()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>BASE64-PARSE-ERROR</code></para></entry>
	<entry><para>A syntax error occurred parsing the base64 string (invalid character, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

    <sect2 id="parseDatasource">
      <title>parseDatasource()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of the components of a datasource string.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>parseDatasource(<replaceable>datasource_string</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = parseDatasource($ds_string);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for parseDatasource()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns a hash of the components of a datasource string.  A datasource string has the following structure: <code>driver:user/pass@db(charset)%host:port</code>, where driver, charset, host, and port are optional.  See <link linkend="parseDatasource_hash">parseDatasource() hash</link> for a description of the output hash of this function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by parseDatasource()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCE-PARSE-ERROR</code></para></entry>
	      <entry><para>A syntax error occurred parsing the datasource string (missing field, unexpected character, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table id="parseDatasource_hash">
	<title>parseDatasource() hash</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Key</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>type</code></para></entry>
	      <entry><para>the name of the driver, if present</para></entry>
	    </row>
	    <row>
	      <entry><para><code>user</code></para></entry>
	      <entry><para>the username given in the string</para></entry>
	    </row>
	    <row>
	      <entry><para><code>pass</code></para></entry>
	      <entry><para>the password for the connection</para></entry>
	    </row>
	    <row>
	      <entry><para><code>db</code></para></entry>
	      <entry><para>the database name for the connection</para></entry>
	    </row>
	    <row>
	      <entry><para><code>charset</code></para></entry>
	      <entry><para>The name of the DB-specific character encoding to use for the connection, if present in the string</para></entry>
	    </row>
	    <row>
	      <entry><para><code>host</code></para></entry>
	      <entry><para>the hostname for the connection, if present in the string</para></entry>
	    </row>
	    <row>
	      <entry><para><code>port</code></para></entry>
	      <entry><para>the port number to use for the connection, if present in the string</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

<sect2 id="parseHexString">
<title>parseHexString()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses a hex-encoded string and returns the binary object (see also <link linkend="parseBase64String">parseBase64String()</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseHexString(<replaceable>hex_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$bin = parseHexString($hex_string);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for parseHexString()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Binary</para></entry>
    <entry><para>Parses a hex-encoded string and returns the binary object.  If anything is passed other than a string as an argument, no action is taken and the function returns NOTHING.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by parseHexString()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>PARSE-HEX-ERROR</code></para></entry>
	<entry><para>A syntax error occurred parsing the hex string (odd number of digits, invalid character, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
</sect2>

<sect2 id="parseURL">
  <title>parseURL()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses a URL string and returns a hash of the components.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseURL(<replaceable>url_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseURL($url_string);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseURL()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses a URL string and returns a hash of the components.  URLs have the format: <code>protocol://username:password@hostname:port/path</code>, where only the hostname is mandatory.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="rand">
<title>rand()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a random integer number (uses the C library function <code>random()</code> to generate the number).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rand()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$num = rand();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for rand()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>A random integer number is returned.  See <link linkend="srand">srand()</link> for a function to seed the random number generator.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="remove_signal_handler">
<title>remove_signal_handler()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes a signal handler and returns the signal handling state to the default.  By the time this function returns, changes to the signal handling thread have already been effected.  See <link linkend="signal_handling">Signal Handling</link> for more information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>remove_signal_handler(<replaceable>signal</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>remove_signal_handler(SIGINT);</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for remove_signal_handler()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>The signal number to process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="reverse">
<title>reverse()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Reverses a string or a list (depending on the argument) and returns the new string or list.  Works properly on UTF-8 strings with multi-byte characters as well.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>reverse(<replaceable>string_or_list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$str = reverse("ABCDEF"); # returns "FEDCBA"</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for reverse()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>List</para></entry>
    <entry><para>List</para></entry>
    <entry><para>The list with its elements reversed.</para></entry>
  </row>

  <row>
    <entry><para>String</para></entry>
    <entry><para>String</para></entry>
    <entry><para>The string with its characters reversed.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="set_signal_handler">
<title>set_signal_handler()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sets or replaces a signal handler according to the signal number and <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> (function or object method reference) passed.  By the time this function returns, changes to the signal handling thread have already been effected.  See <link linkend="signal_handling">Signal Handling</link> for more information.</para>
	<para>When a signal is raised and the signal handler code is called, the signal number is passed as an integer argument to the signal handling code.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>set_signal_handler(<replaceable>signal, closure | call_reference</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>set_signal_handler(SIGINT, \signal_handler());</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-process-control"><code>PO_NO_PROCESS_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for set_signal_handler()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer, <link linkend="closures">closure</link> | <link linkend="call_references">Call Reference</link></para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>The signal number to process and reference to the code to execute when the signal is raised.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sort">
  <title>sort()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Performs an unstable sort in ascending order and returns the new list (for a stable version see <link linkend="sortStable">sortStable()</link>).  Without a callback, this function will only sort basic data types.  A <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be used to sort complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than the second, if the first and second are equal, or if the first is greater than the second, respectively.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sort(<replaceable>list, [callback]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = sort($complex_list, \callback());</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  <table>
    <title>Arguments and Return Values for sort()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>List, [<link linkend="closures">closure</link> | <link linkend="call_references">Call Reference</link>]</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Sorts the list passed in ascending order and returns the sorted list.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

  <sect2 id="sortDescending">
    <title>sortDescending()</title>
    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Performs an unstable sort in descending order and returns the new list (for a stable version see <link linkend="sortDescendingStable">sortDescendingStable()</link>).  Without a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link>, this function will only sort basic data types.  A <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be used to sort complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than the second, if the first and second are equal, or if the first is greater than the second, respectively.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>sortDescending(<replaceable>list, [callback]</replaceable>)</programlisting>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Example</term>
	<listitem>
	  <programlisting>$list = sortDescending($complex_list, \callback());</programlisting>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for sortDescending()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>List, [<link linkend="closures">closure</link> | <link linkend="call_references">Call Reference</link>]</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>Sorts the list passed in descending order and returns the sorted list.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions.</para>
  </sect2>

  <sect2 id="sortDescendingStable">
    <title>sortDescendingStable()</title>
    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Performs a stable sort in descending order and returns the new list (for an unstable version see <link linkend="sortDescending">sortDescending()</link>).  Without a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link>, this function will only sort basic data types.  A <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be used to sort complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than the second, if the first and second are equal, or if the first is greater than the second, respectively.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>sortDescendingStable(<replaceable>list, [callback]</replaceable>)</programlisting>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Example</term>
	<listitem>
	  <programlisting>$list = sortDescendingStable($complex_list, \callback());</programlisting>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for sortDescendingStable()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>List, [<link linkend="closures">closure</link> | <link linkend="call_references">Call Reference</link>]</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>Sorts the list passed in descending order and returns the sorted list.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions.</para>
  </sect2>

<sect2 id="sortStable">
  <title>sortStable()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Performs a stable sort in ascending order and returns the new list (for an unstable version see <link linkend="sort">sort()</link>).  Without a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link>, this function will only sort basic data types.  A <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> can be used to sort complex data types.  The <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> must accept two arguments and must return -1, 0, or 1 if the first is less than the second, if the first and second are equal, or if the first is greater than the second, respectively.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sortStable(<replaceable>list, [callback]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$list = sortStable($complex_list, \callback());</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  <table>
    <title>Arguments and Return Values for sortStable()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>List, [<link linkend="closures">closure</link> | <link linkend="call_references">Call Reference</link>]</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Sorts the list passed in ascending order and returns the sorted list.  The list must be made up of basic data types unless a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> is used.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="srand">
  <title>srand()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Seeds the random number generator with the integer passed (uses the C library function <code>srandom()</code>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>srand(<replaceable>integer</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>srand(now()); # seeds with current time</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for srand()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
    
      <tbody>
	<row>
	  <entry><para>Integer</para></entry>
	  <entry><para>n/a</para></entry>
	  <entry><para>Seeds the random number generator with the integer passed.  See <link linkend="rand">rand()</link> for a function to get a random number.</para></entry>
	</row>

      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

    <sect2 id="strtoint">
      <title>strtoint()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an integer corresponding to the string passed with the possibility to specify the base (default base 10).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
           <programlisting>strtoint(<replaceable>string, [base]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
           <programlisting>$int = strtoint("41", 8);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for strtoint()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns an integer corresponding to the string value in the base specified.  If no base is passed, then base 10 is assumed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

</sect1>

<sect1 id="Threading_Functions">
  <title>Threading Functions</title>
  <para></para>

  <sect2 id="delete_all_thread_data">
    <title>delete_all_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes all keys in the thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>delete_all_thread_data()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>delete_all_thread_data();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for delete_all_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Deletes all keys in the thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions.</para>
  </sect2>

  <sect2 id="delete_thread_data">
    <title>delete_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes the data associated to one or more keys in the thread-local data hash; if the data is an object, then it is destroyed.  See <link linkend="remove_thread_data">remove_thread_data()</link> for a similar function that does not explicitly destroy objects in the thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>delete_thread_data(<replaceable>key_string, [key_string, ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>delete_thread_data("key1", "key2");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for delete_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Arguments</para></entry>
	    <entry><para>Return Values</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>String, [String ...]</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Deletes the data associated to one or more keys in the thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions, however any objects deleted could throw exceptions in their destructors.</para>
  </sect2>

  <sect2 id="get_all_thread_data">
    <title>get_all_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the entire thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_all_thread_data()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = get_all_thread_data();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    <table>
      <title>Arguments and Return Values for get_all_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Hash</para></entry>
	    <entry><para>Returns the entire thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>
  
  <sect2 id="getAllThreadCallStacks">
    <title>getAllThreadCallStacks()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash of call stacks keyed by each TID (thread ID).  The availability of this function depends on an optional debugging feature in the Qore library (maintaining run-time thread call stacks incurrs a performance penalty, therefore this option is normally only available in debugging builds of Qore); the function is only available if the constant <code>HAVE_RUNTIME_THREAD_STACK_TRACE</code> is True.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getAllThreadCallStacks()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = getAllThreadCallStacks();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    <table>
      <title>Arguments and Return Values for getAllThreadCallStacks()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Hash</para></entry>
	    <entry><para>Returns a hash of call stacks keyed by each TID (thread ID).  See <link linkend="Call_Stack_Description">Call Stack Description</link> for a description of the call stack format.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

  <table><title>Exceptions Thrown by getAllThreadCallStacks()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	<entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_RUNTIME_THREAD_STACK_TRACE</code> before calling this function.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

  </sect2>

  <sect2 id="get_thread_data">
    <title>get_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of the thread-local data attached to the key passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_thread_data(<replaceable>key_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$data = get_thread_data("key1");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for get_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>String</para></entry>
	    <entry><para>depends on key</para></entry>
	    <entry><para>Returns the value of the thread-local data attached to the key passed.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>
  
  <sect2 id="gettid">
    <title>gettid()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the Qore thread ID (TID) of the current thread.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gettid()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$tid = gettid();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for gettid()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Returns the Qore thread ID (TID) of the current thread.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>

<sect2 id="num_threads">
<title>num_threads()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the current number of threads in the process (not including the special <link linkend="signal_handling">signal handling thread</link>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>num_threads()</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$num = num_threads();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for num_threads()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the current number of threads in the process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

  <sect2 id="remove_thread_data">
    <title>remove_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes the data associated to one or more keys in the thread-local data hash.  For a similar function that also explicitly destroys objects, see <link linkend="delete_thread_data">delete_thread_data</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>remove_thread_data(<replaceable>key_string, [key_string, ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>remove_thread_data("key1", "key2");</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for remove_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Arguments</para></entry>
	    <entry><para>Return Values</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>String, [String ...]</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Removes the data associated to one or more keys in the thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>

<sect2 id="save_thread_data">
  <title>save_thread_data()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Saves the data passed against the key passed in thread-local storage.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>save_thread_data(<replaceable>key_string, value_expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>save_thread_data("key1", $value);</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Restrictions</term>
      <listitem>
	<para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for save_thread_data()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Any</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>Saves the data passed against the key passed in thread-local storage.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

      <sect2 id="thread_list">
	<title>thread_list()</title>

	<variablelist>
	  <varlistentry>
	    <term>Synopsis</term>
	    <listitem>
	      <para>Returns a list of all current thread IDs.  Note that the special <link linkend="signal_handling">signal handling thread</link> with TID 0 is never included in this list.</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Usage</term>
	    <listitem>
	      <programlisting>thread_list()</programlisting>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Example</term>
	    <listitem>
	      <programlisting>$list = thread_list();</programlisting>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<table><title>Arguments and Return Values for thread_list()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>Returns a list of all current thread IDs</para></entry>
	    </row>
	  </tbody>
	</tgroup>
	</table>
	<para>This function does not throw any exceptions.</para>
	
      </sect2>

      <sect2 id="throwThreadResourceExceptions">
	<title>throwThreadResourceExceptions()</title>

	<variablelist>
	  <varlistentry>
	    <term>Synopsis</term>
	    <listitem>
	      <para>Immediately runs all thread resource cleanup routines for the current thread and throws all associated exceptions.  This function is particularly useful when used in combination with embedded code in order to catch (and log, for example) thread resource errors (ex: uncommitted transactions, unlocked locks, etc).</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Usage</term>
	    <listitem>
	      <programlisting>throwThreadResourceExceptions()</programlisting>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Example</term>
	    <listitem>
	      <programlisting>try {
    throwThreadResourceExceptions();
}
catch ($ex)
{
    # ... log or handle exceptions
}</programlisting>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Restrictions</term>
	    <listitem>
	      <para>Not available with <link linkend="no-thread-control"><code>PO_NO_THREAD_CONTROL</code></link></para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<table><title>Arguments and Return Values for throwThreadResourceExceptions()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This function returns no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
	</table>

	<para>This function can throw any exception thrown by a thread resource handler.</para>
	
      </sect2>

</sect1>

<sect1 id="XML_Functions">
  <title>XML Functions</title>

  <para>XML functions allow serializing and deserializing between XML strings and qore data structures.  There are also functions for XML-RPC support; see below for details and see the <link linkend="XmlRpcClient_Class">XmlRpcClient Class</link> for a class supporting communication with this protocol.</para>

  <sect2 id="makeFormattedXMLFragment">
    <title>makeFormattedXMLFragment()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string with formatting without an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLFragment(<replaceable>hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLFragment($hash);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for makeFormattedXMLFragment()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) without an XML header but with formatting.  The hash must have only one top-level key or an exception will be thrown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLFragment()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

<sect2 id="makeFormattedXMLRPCCallString">
  <title>makeFormattedXMLRPCCallString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallString(<replaceable>method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCCallString("method.name", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCCallString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCCallStringWithEncoding">
  <title>makeFormattedXMLRPCCallStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string for an XML-RPC call with whitespace formatting, taking an initial string argument to give the encoding for the created XML.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallStringWithEncoding(<replaceable>encoding_name, method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCCallStringWithEncoding("ISO-8859-1", "method.name", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCCallStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting.  The encoding of the resulting string will be the encoding given by the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCCallStringArgs">
  <title>makeFormattedXMLRPCCallStringArgs()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting, taking a single argument following the XML-RPC method name for the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallStringArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCCallStringArgs("method.name", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLCallStringArgs()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCCallStringArgsWithEncoding">
  <title>makeFormattedXMLRPCCallStringArgsWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC call with whitespace formatting, taking an initial string argument to give the encoding for the created XML, followed by the method name, followed by a single list argument for the argument list.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallStringArgsWithEncoding(<replaceable>encoding_name, method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCCallStringArgsWithEncoding("ISO-8859-1", "method.name", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLCallStringArgsWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will be the encoding given by the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgsWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCFaultResponseString">
  <title>makeFormattedXMLRPCFaultResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCFaultResponseString(<replaceable>error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCFaultResponseString(10, "oh no, big error");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCFaultResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-XMLRPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</code></para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCFaultResponseStringWithEncoding">
  <title>makeFormattedXMLRPCFaultResponseStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting, taking an initial string argument to give the encoding for the created XML.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCFaultResponseStringWithEncoding(<replaceable>encoding_name, error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCFaultResponseStringWithEncoding("ISO-8859-2", 10, "oh no, big error");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCFaultResponseStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.  The encoding of the resulting string will be the encoding given by the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgsWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-XMLRPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</code></para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCResponseString">
  <title>makeFormattedXMLRPCResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCResponseString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCResponseString($value);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting>.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCResponseString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCResponseStringWithEncoding">
  <title>makeFormattedXMLRPCResponseStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting, taking an initial string argument to give the encoding for the created XML.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCResponseStringWithEncoding(<replaceable>encoding_name, any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCResponseStringWithEncoding("ISO-8859-1", $value);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCResponseStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting>.  The encoding of the resulting string is given by the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCResponseStringWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCValueString">
  <title>makeFormattedXMLRPCValueString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC value format with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCValueString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLRPCValueString($value);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCValueString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC value format with whitespace formatting.   The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeFormattedXMLString">
  <title>makeFormattedXMLString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string with formatting and an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLString(<replaceable>hash, [encoding]</replaceable>)</programlisting>
	<programlisting>makeFormattedXMLString(<replaceable>string, hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Examples</term>
      <listitem>
	<programlisting>$xml = makeFormattedXMLString($hash);</programlisting>
	<programlisting>$xml = makeFormattedXMLString("key", $hash);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header and formatting.  The hash must have only one top-level key or an exception will be thrown.</para></entry>
	  </row>
	  <row>
	    <entry><para>String, Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header and formatting.  The first parameter will be the top-level XML element.</para></entry>
	  </row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-FORMATTED-XML-STRING-PARAMETER-EXCEPTION</code></para></entry>
	      <entry><para>Incorrect arguments passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

  <sect2 id="makeXMLFragment">
    <title>makeXMLFragment()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string without whitespace formatting and without an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLFragment(<replaceable>hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLFragment($hash);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for makeXMLFragment()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) without an XML header and without whitespace formatting.  The hash must have only one top-level key or an exception will be thrown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

      <table>
	<title>Exceptions Thrown by makeXMLFragment()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

<sect2 id="makeXMLRPCCallString">
  <title>makeXMLRPCCallString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallString(<replaceable>method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCCallString("method.name", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCCallString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLRPCCallStringWithEncoding">
  <title>makeXMLRPCCallStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, taking an initial string argument to give the target character encoding for the XML string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallStringWithEncoding(<replaceable>encoding_name, method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCCallStringWithEncoding("ISO-8859-2", "method.name", $arg1, $arg2);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCCallStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting.  The encoding of the resulting string will correspond to the encoding given as the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCCallStringArgs">
  <title>makeXMLRPCCallStringArgs()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, taking a single argument following the XML-RPC method name for the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallStringArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCCallStringArgs("method.name", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLCallStringArgs()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLRPCCallStringArgsWithEncoding">
  <title>makeXMLRPCCallStringArgsWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC call without whitespace formatting, taking an initial string argument to give the target character encoding for the XML string followed by a list argument for the argument list.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallStringArgsWithEncoding(<replaceable>encoding_name, method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCCallStringArgsWithEncoding("ISO-8859-2", "method.name", $arg_list);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLCallStringArgsWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will correspond to the encoding given as the first argument to the function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgsWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLRPCFaultResponseString">
  <title>makeXMLRPCFaultResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCFaultResponseString(<replaceable>error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCFaultResponseString(10, "oh no, an error occured");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCFaultResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted
for an XML-RPC fault response without whitespace formatting.  The encoding of
the resulting string will always be the encoding of the fault string (2nd argument).</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-XMLRPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</code></para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCFaultResponseStringWithEncoding">
  <title>makeXMLRPCFaultResponseStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without whitespace formatting, taking an initial string argument to give the target character encoding for the XML string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCFaultResponseStringWithEncoding(<replaceable>encoding_string, error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCFaultResponseStringWithEncoding("ISO-8859-2", 10, "oh no, an error occured");</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCFaultResponseStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted
for an XML-RPC fault response without whitespace formatting.  The encoding of
the resulting string will correspond to the encoding given as the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgsWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-XMLRPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</code></para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCResponseString">
  <title>makeXMLRPCResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCResponseString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCResponseString($response);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting>.  The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCResponseString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCResponseStringWithEncoding">
  <title>makeXMLRPCResponseStringWithEncoding()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCResponseStringWithEncoding(<replaceable>encoding_name, any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCResponseStringWithEncoding("ISO-8859-2", $response);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCResponseStringWithEncoding()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting>.  The encoding of the resulting string will correspond to the first argument.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCResponseStringWithEncoding()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCValueString">
  <title>makeXMLRPCValueString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC value format without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCValueString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$xml = makeXMLRPCValueString($value);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCValueString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC value format without whitespace formatting.   The encoding of the resulting string will always be the <link linkend="Default_Character_Encoding">default encoding</link>.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLString">
  <title>makeXMLString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string without whitespace formatting but with an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLString(<replaceable>hash, [encoding]</replaceable>)</programlisting>
	<programlisting>makeXMLString(<replaceable>string, hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Examples</term>
      <listitem>
	<programlisting>$xml = makeXMLString($hash);</programlisting>
	<programlisting>$xml = makeXMLString("key", $hash);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header but without whitespace formatting.  The hash must have only one top-level key or an exception will be thrown.</para></entry>
	  </row>
	  <row>
	    <entry><para>String, Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header but without whitespace formatting.  The first parameter will be the top-level XML element.</para></entry>
	  </row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>MAKE-XML-ERROR</code></para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MAKE-XML-STRING-PARAMETER-EXCEPTION</code></para></entry>
	      <entry><para>Incorrect arguments passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLAsData">
  <title>parseXMLAsData()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list) and returns a Qore hash structure.</para>
	<para>Note that data deserialized with this function may not be reserialized to an identical XML string to the input due to the fact that duplicate, out-of-order XML elements are collapsed into lists in the resulting Qore hash, thereby losing the order in the original XML string.</para>
	<para>For a similar function preserving the order of keys in the XML in the resulting Qore hash by generating Qore hash element names with numeric suffixes, see <link linkend="parseXML">parseXML()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLAsData(<replaceable>xml_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLAsData($xml);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLAsData()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLAsData()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLAsDataWithRelaxNG">
  <title>parseXMLAsDataWithRelaxNG()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list), validates the XML string against a RelaxNG schema string, and returns a Qore hash structure.  If any errors occur parsing the RelaxNG schema string, parsing the XML string, or validating the XML against the XSD, exceptions are thrown.  If no encoding string argument is passed, then all strings in the resulting hash will be in UTF-8 encoding regardless of the input encoding of the XML string.</para>
	<para>Please note that data deserialized with this function may not be reserialized to an identical XML string to the input due to the fact that duplicate, out-of-order XML elements are collapsed into lists in the resulting Qore hash, thereby losing the order in the original XML string.</para>
	<para>For a similar function preserving the order of keys in the XML in the resulting Qore hash by generating Qore hash element names with numeric suffixes, see <link linkend="parseXMLWithRelaxNG">parseXMLWithRelaxNG()</link>.  See also <link linkend="parseXMLAsDataWithSchema">parseXMLAsDataWithSchema()</link> and <link linkend="parseXMLWithSchema">parseXMLWithSchema()</link>.</para>
	<para>The availability of this function depends on the presence of libxml2's xmlTextReaderRelaxNGSetSchema() function when Qore was compiled; for maximum portability check the constant <code>HAVE_PARSEXMLWITHRELAXNG</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLAsDataWithRelaxNG(<replaceable>xml_string, relaxng_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLAsDataWithRelaxNG($xml, $rng);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLAsDataWithRelaxNG()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string (1st argument), validates against the RelaxNG string (2nd argument), and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLAsDataWithRelaxNG()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XML-AS-DATA-WITH-RELAXNG-ERROR</code></para></entry>
	      <entry><para>Invalid arguments passed to the function.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	      <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_PARSEXMLWITHRELAXNG</code> before calling this function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="parseXMLAsDataWithSchema">
  <title>parseXMLAsDataWithSchema()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string as data (does not preserve hash order with out-of-order duplicate keys: collapses all to the same list), validates the XML string against an XSD schema string, and returns a Qore hash structure.  If any errors occur parsing the XSD string, parsing the XML string, or validating the XML against the XSD, exceptions are thrown.  If no encoding string argument is passed, then all strings in the resulting hash will be in UTF-8 encoding regardless of the input encoding of the XML string.</para>
	<para>Please note that data deserialized with this function may not be reserialized to an identical XML string to the input due to the fact that duplicate, out-of-order XML elements are collapsed into lists in the resulting Qore hash, thereby losing the order in the original XML string.</para>
	<para>For a similar function preserving the order of keys in the XML in the resulting Qore hash by generating Qore hash element names with numeric suffixes, see <link linkend="parseXMLWithSchema">parseXMLWithSchema()</link>.  See also <link linkend="parseXMLAsDataWithRelaxNG">parseXMLAsDataWithRelaxNG()</link> and <link linkend="parseXMLWithRelaxNG">parseXMLWithRelaxNG()</link>.</para>
	<para>The availability of this function depends on the presence of libxml2's xmlTextReaderSetSchema() function when Qore was compiled; for maximum portability check the constant <code>HAVE_PARSEXMLWITHSCHEMA</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLAsDataWithSchema(<replaceable>xml_string, xsd_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLAsDataWithSchema($xml, $xsd);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLAsDataWithSchema()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string (1st argument), validates against the XSD string (2nd argument), and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLAsDataWithSchema()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XML-WITH-SCHEMA-ERROR</code></para></entry>
	      <entry><para>Invalid arguments passed to the function.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	      <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_PARSEXMLWITHSCHEMA</code> before calling this function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="parseXML">
  <title>parseXML()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string and returns a Qore hash structure.  If duplicate, out-of-order XML elements are found in the input string, they are deserialized to Qore hash elements with the same name as the XML element but including a caret &quot;^&quot; and a numeric prefix to maintain the same key order in the Qore hash as in the input XML string.</para>
	<para>For a similar function collapsing all duplicate XML elements into a list in the Qore hash, see <link linkend="parseXMLAsData">parseXMLAsData()</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXML(<replaceable>xml_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXML($xml);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXML()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXML()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLWithRelaxNG">
  <title>parseXMLWithRelaxNG()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string, validates the XML string against a RelaxNG schema string, and returns a Qore hash structure.  If any errors occur parsing the RelaxNG string, parsing the XML string, or validating the XML against the RelaxNG schema, exceptions are thrown.  If no encoding string argument is passed, then all strings in the resulting hash will be in UTF-8 encoding regardless of the input encoding of the XML string.</para>
	<para>If duplicate, out-of-order XML elements are found in the input string, they are deserialized to Qore hash elements with the same name as the XML element but including a caret &quot;^&quot; and a numeric prefix to maintain the same key order in the Qore hash as in the input XML string.</para>
	<para>For a similar function collapsing all duplicate XML elements into a list in the Qore hash, see <link linkend="parseXMLAsDataWithRelaxNG">parseXMLAsDataWithRelaxNG()</link>.  See also <link linkend="parseXMLWithSchema">parseXMLWithSchema()</link> and <link linkend="parseXMLAsDataWithSchema">parseXMLAsDataWithSchema()</link></para>.
	<para>The availability of this function depends on the presence of libxml2's xmlTextReaderRelaxNGSetSchema() function when Qore was compiled; for maximum portability check the constant <code>HAVE_PARSEXMLWITHRELAXNG</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLWithRelaxNG(<replaceable>xml_string, relaxng_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLWithRelaxNG($xml, $rng);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLWithRelaxNG()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string (1st argument), validates against the RelaxNG schema string (2nd argument), and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLWithRelaxNG()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XML-WITH-RELAXNG-ERROR</code></para></entry>
	      <entry><para>Invalid arguments passed to the function.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	      <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_PARSEXMLWITHRELAXNG</code> before calling this function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="parseXMLWithSchema">
  <title>parseXMLWithSchema()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string, validates the XML string against an XSD schema string, and returns a Qore hash structure.  If any errors occur parsing the XSD string, parsing the XML string, or validating the XML against the XSD, exceptions are thrown.  If no encoding string argument is passed, then all strings in the resulting hash will be in UTF-8 encoding regardless of the input encoding of the XML string.</para>
	<para>If duplicate, out-of-order XML elements are found in the input string, they are deserialized to Qore hash elements with the same name as the XML element but including a caret &quot;^&quot; and a numeric prefix to maintain the same key order in the Qore hash as in the input XML string.</para>
	<para>For a similar function collapsing all duplicate XML elements into a list in the Qore hash, see <link linkend="parseXMLAsDataWithSchema">parseXMLAsDataWithSchema()</link>.  See also <link linkend="parseXMLWithRelaxNG">parseXMLWithRelaxNG()</link> and <link linkend="parseXMLAsDataWithRelaxNG">parseXMLAsDataWithRelaxNG()</link></para>.
	<para>The availability of this function depends on the presence of libxml2's xmlTextReaderSetSchema() function when Qore was compiled; for maximum portability check the constant <code>HAVE_PARSEXMLWITHSCHEMA</code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLWithSchema(<replaceable>xml_string, xsd_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLWithSchema($xml, $xsd);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLWithSchema()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string (1st argument), validates against the XSD string (2nd argument), and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLWithSchema()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XML-WITH-SCHEMA-ERROR</code></para></entry>
	      <entry><para>Invalid arguments passed to the function.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
	      <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code>HAVE_PARSEXMLWITHSCHEMA</code> before calling this function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLRPCCall">
  <title>parseXMLRPCCall()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC call string, returning a Qore data structure representing the call information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCCall(<replaceable>xmlrpc_call_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLRPCCall($xml);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCCall()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC call string, returning a Qore data structure representing the call information.  The hash will have the following keys: methodName, params</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCCall()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XMLRPC-CALL-ERROR</code></para></entry>
	      <entry><para>Error parsing the XML-RPC call string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XMLRPC-VALUE-ERROR</code></para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="parseXMLRPCResponse">
  <title>parseXMLRPCResponse()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC response string, returning a Qore data structure representing the response information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCResponse(<replaceable>xmlrpc_response_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLRPCResponse($xml);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCResponse()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC response string, returning a Qore data structure representing the response information.  The hash will have either a &quot;fault&quot; or a &quot;params&quot; key, depending on if it's a fault response or a non-fault response.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XMLRPC-RESPONSE-ERROR</code></para></entry>
	      <entry><para>Error parsing the XML-RPC response string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PARSE-XMLRPC-VALUE-ERROR</code></para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLRPCValue">
  <title>parseXMLRPCValue()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC value tree, returning a Qore data structure representing the information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCValue(<replaceable>xmlrpc_value_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$hash = parseXMLRPCValue($xml);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCValue()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC value string, returning Qore data representing the value data.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-XMLRPC-VALUE-ERROR</code></para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

</sect1>

<sect1 id="JSON_Functions">
  <title>JSON Functions</title>

  <para>JSON (JavaScript Object Notation) functions allow serializing and deserializing between JSON strings and qore data structures.  There are also functions for JSONRPC support for easier integration with JavaScript clients; see below for details.</para>

  <sect2 id="makeJSONString">
    <title>makeJSONString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Serializes qore data into a JSON string, without any line breaks.  By default the string produced will be in UTF-8 encoding, but this can be overridden by the second argument.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeJSONString(<replaceable>Any Type, [Encoding]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeJSONString($value);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeJSONString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Any Type, [Encoding]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Serializes qore data into a JSON string, without any line breaks.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by makeJSONString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeFormattedJSONString">
    <title>makeFormattedJSONString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Serializes qore data into a JSON string, formatted with line breaks for easier readability.  By default the string produced will be in UTF-8 encoding, but this can be overridden by the second argument.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeFormattedJSONString(<replaceable>Any Type, [Encoding]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeFormattedJSONString($value);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeFormattedJSONString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Any Type, [Encoding]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Serializes qore data into a JSON string, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by makeFormattedJSONString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>


  </sect2>
  <sect2 id="makeJSONRPCRequestString">
    <title>makeJSONRPCRequestString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC request string from the parameters passed, without any line breaks.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeJSONRPCRequestString(<replaceable>method_name, [json_version], [id], [arguments]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeJSONRPCRequestString("method_name", "1.1", $id, $request_data);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeJSONRPCRequestString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Method_name, [json_version], [id], [arguments]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC request string from the parameters passed, without any line breaks.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by makeJSONRPCRequestString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
	<row>
	  <entry><para><code>MAKE-JSONRPC-REQUEST-STRING-ERROR</code></para></entry>
	  <entry><para>missing method name as first parameter.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeFormattedJSONRPCRequestString">
    <title>makeFormattedJSONRPCRequestString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC request string from the parameters passed, formatted with line breaks for easier readability.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeFormattedJSONRPCRequestString(<replaceable>method_name, [json_version], [id], [arguments]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeFormattedJSONRPCRequestString("method_name", "1.1", $id, $request_data);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeFormattedJSONRPCRequestString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Method_name, [json_version], [id], [arguments]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC request string from the parameters passed, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by makeFormattedJSONRPCRequestString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
	<row>
	  <entry><para><code>MAKE-JSONRPC-REQUEST-STRING-ERROR</code></para></entry>
	  <entry><para>missing method name as first parameter.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>


  </sect2>
  <sect2 id="makeJSONRPCResponseString">
    <title>makeJSONRPCResponseString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC response string from the parameters passed, without any line breaks.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeJSONRPCResponseString(<replaceable>[json_version], [id], [response]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeJSONRPCResponseString("1.1", $id, $response);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeJSONRPCResponseString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>[json_version], [id], [response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC response string from the parameters passed, without any line breaks.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table><title>Exceptions Thrown by makeJSONRPCResponseString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>


  </sect2>
  <sect2 id="makeFormattedJSONRPCResponseString">
    <title>makeFormattedJSONRPCResponseString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC response string from the parameters passed, formatted with line breaks for easier readability.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeFormattedJSONRPCResponseString(<replaceable>[json_version], [id], [response]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeFormattedJSONRPCResponseString("1.1", $id, $response);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeFormattedJSONRPCResponseString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>[json_version], [id], [response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC response string from the parameters passed, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by makeFormattedJSONRPCResponseString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeJSONRPCErrorString">
    <title>makeJSONRPCErrorString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a generic JSON-RPC error response string from the parameters passed, without any line breaks.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeJSONRPCErrorString(<replaceable>[json_version], [id], [response]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeJSONRPCErrorString("1.1", $id, $response);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeJSONRPCErrorString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>[json_version], [id], [response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a generic JSON-RPC error response string from the parameters passed, without any line breaks.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table><title>Exceptions Thrown by makeJSONRPCErrorString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeFormattedJSONRPCErrorString">
    <title>makeFormattedJSONRPCErrorString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a generic JSON-RPC error response string from the parameters passed, formatted with line breaks for easier readability.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeFormattedJSONRPCErrorString(<replaceable>[json_version], [id], [response]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeFormattedJSONRPCErrorString("1.1", $id, $response);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeFormattedJSONRPCErrorString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>[json_version], [id], [response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a generic JSON-RPC error response string from the parameters passed, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table><title>Exceptions Thrown by makeFormattedJSONRPCErrorString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeJSONRPC11ErrorString">
    <title>makeJSONRPC11ErrorString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, without any line breaks.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The last argument can be of any qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeJSONRPC11ErrorString(<replaceable>code, message, [[id], [error]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeJSONRPC11ErrorString(200, $msg, $id, $error);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeJSONRPC11ErrorString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Code, Error_message, [id], [error_response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table><title>Exceptions Thrown by makeJSONRPC11ErrorString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
	<row>
	  <entry><para><code>MAKE-JSONRPC11-ERROR-STRING-ERROR</code></para></entry>
	  <entry><para>Invalid argument to method.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="makeFormattedJSONRPC11ErrorString">
    <title>makeFormattedJSONRPC11ErrorString()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, formatted with line breaks for easier readability.  To follow JSON-RPC specifications, the generated string will always be in UTF-8 encoding.  The first code argument must be an integer between 100 and 999 (inclusive).  The last argument can be of any Qore type (or complex data structure).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>makeFormattedJSONRPC11ErrorString(<replaceable>code, error_message, [id], [error_response]</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$json = makeFormattedJSONRPC11ErrorString(200, $msg, $id, $error);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for makeFormattedJSONRPC11ErrorString()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Code, Error_message, [id], [error_response]</para>
            </entry>
            <entry>
              <para>String</para>
            </entry>
            <entry>
              <para>Creates a JSON-RPC 1.1 error response string from the parameters passed, formatted with line breaks for easier readability.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table><title>Exceptions Thrown by makeFormattedJSONRPC11ErrorString()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-SERIALIZATION-ERROR</code></para></entry>
	  <entry><para>Error serializing to JSON string.</para></entry>
	</row>
	<row>
	  <entry><para><code>MAKE-JSONRPC11-ERROR-STRING-ERROR</code></para></entry>
	  <entry><para>Invalid argument to method.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
  <sect2 id="parseJSON">
    <title>parseJSON()</title>
    <variablelist>
      <varlistentry>
        <term>Synopsis</term>
        <listitem>
          <para>Parses a JSON string and returns the corresponding qore data structure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Usage</term>
        <listitem>
          <programlisting>parseJSON(<replaceable>json_string</replaceable>)</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Example</term>
        <listitem>
          <programlisting>$data = parseJSON($json_string);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for parseJSON()</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Argument Type</para>
            </entry>
            <entry>
              <para>Return Type</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>Json_string</para>
            </entry>
            <entry>
              <para>Qore Data</para>
            </entry>
            <entry>
              <para>Parses a JSON string and returns the corresponding qore data structure.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table><title>Exceptions Thrown by parseJSON()</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>err</para></entry>
	  <entry><para>desc</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>JSON-PARSE-ERROR</code></para></entry>
	  <entry><para>error parsing JSON string.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>

  </sect2>
</sect1>

<sect1 id="Debug_Functions">
<title>Debug Functions</title>

<para></para>

</sect1>

<sect1 id="String_Formatting">
  <title>String Formatting</title>
  <para>This is the standard "printf" format string. </para>
  <para>There are three types of objects in the format string:</para>
  <itemizedlist mark='bullet'>
    <listitem>
      <para>Plain characters, which are copied as-is to the output string</para>
    </listitem>
    <listitem>
      <para>Escape characters, which are converted and copied to the output string</para>
    </listitem>
    <listitem>
      <para>Format specifications for arguments to be included in the output string, which are preceded by the percent sign "%" as follows:</para>
    </listitem>
  </itemizedlist>

  <para>After the &quot;%&quot; sign, there can be zero or more flags as follows:</para>
  <table>
    <title>Printf Formatting Flags</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Flag</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>      
      <tbody>
	<row>
	  <entry><para>-</para></entry>
	  <entry><para>left-justify the field</para></entry>
	</row>
	<row>
	  <entry><para>+</para></entry>
	  <entry><para>include the sign for the number (+ or -)</para></entry>
	</row>
	<row>
	  <entry><para>0</para></entry>
	  <entry><para>use zero left padding rather than space padding</para></entry>
	</row>
	<row>
	  <entry><para>&lt;space&gt;</para></entry>
	  <entry><para>use space padding</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>Then a field width specifier can be given as a string of digits specifying the length of the field. With &quot;field&quot; functions (function names preceded by &quot;f_&quot;), these width specifiers are hard limits; that is; arguments longer than the width specified are limited to the specified width.</para>
  <para>For floating-point arguments, a precision specifier may be given by including a period &quot;.&quot; and another digit string, which indicates the number of digits to appear after the decimal point.</para>
  <para>Then the format character is given as follows:</para>
  <table>
    <title>Printf Formatting Characters</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Character</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>s</para></entry>
	  <entry><para>string</para></entry>
	</row>
	<row>
	  <entry><para>d</para></entry>
	  <entry><para>Integer, output in base 10 format</para></entry>
	</row>
	<row>
	  <entry><para>f</para></entry>
	  <entry><para>Floating point value</para></entry>
	</row>
	<row>
	  <entry><para>n</para></entry>
	  <entry><para>Any Qore value, formatted as a string, without any line breaks</para></entry>
	</row>
	<row>
	  <entry><para>N</para></entry>
	  <entry><para>Any Qore value, formatted as a string, with line breaks and whitespace formatting for complex objects</para></entry>
	</row>
	<row>
	  <entry><para>x</para></entry>
	  <entry><para>Integer, output in base 16 (hexadecimal) format with lower-case a-f</para></entry>
	</row>
	<row>
	  <entry><para>X</para></entry>
	  <entry><para>Integer, output in base 16 (hexadecimal) format with upper-case A-F</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>String Escape Characters</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>Character</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    
    <tbody>
      <row>
	<entry><para>\n</para></entry>
	<entry><para>a newline character</para></entry>
      </row>
      <row>
	<entry><para>\r</para></entry>
	<entry><para>a carriage-return character</para></entry>
      </row>
      <row>
	<entry><para>\t</para></entry>
	<entry><para>a tab character</para></entry>
      </row>
      <row>
	<entry><para>\b</para></entry>
	<entry><para>a backspace character</para></entry>
      </row>
      <row>
	<entry><para>\f</para></entry>
	<entry><para>a form-feed character</para></entry>
      </row>
      <row>
	<entry><para>\num</para></entry>
	<entry><para>an 8-bit character whose value is the 1, 2, or 3 digit octal number <replaceable>num</replaceable></para></entry>
      </row>
      <row>
	<entry><para>\&quot;</para></entry>
	<entry><para>a double-quote character</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect1>
</chapter>
