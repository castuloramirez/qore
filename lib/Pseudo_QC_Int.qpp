/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Int.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

//! Methods in this pseudo-class can be executed on @ref integer "integer values"
/** 
 */
qclass <int> [arg=const QoreBigIntNode* i;vparent=<value>];

//! Returns Qore::NT_INT
/** 
    @return Qore::NT_INT

    @par Example:
    @code
switch ($i.typeCode()) {
    case NT_INT:
        printf("%y: is a int\n", $i);
        break;
}
    @endcode
*/
int <int>::typeCode() [flags=CONSTANT] {
   return NT_INT;
}

//! Returns @ref True if the int is non-zero, @ref False if zero
/** 
    @return @ref True if the int is non-zero, @ref False if zero

    @par Example:
    @code
my bool $b = $i.val();
    @endcode
*/
bool <int>::val() [flags=CONSTANT] {
   return (bool)i->val;
}

//! Returns @ref True by default
/**
    @return @ref True by default

    @par Example:
    @code
if ($n.intp())
    printf("%y: can be converted to an integer: %d\n", $n, int($n));
    @endcode
*/
bool <int>::intp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True because integer values can be converted to strings
/**
    @return @ref True because integer values can be converted to strings

    @par Example:
    @code
if ($n.strp())
    printf("%y: can be converted to a string: '%s'\n", $n, string($n));
    @endcode
*/
bool <int>::strp() [flags=CONSTANT] {
   return true;
}
