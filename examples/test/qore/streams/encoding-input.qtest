#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class EncodingConversionInputStreamTest

class SrcStream inherits InputStream {
    public {
        binary data;
        int offset = 0;
    }

    constructor(binary d) {
        data = d;
    }

    *binary read(int limit) {
        if (offset == length(data)) {
            return NOTHING;
        }
        binary b = data.substr(offset, 1);
        offset += 1;
        return b;
    }
}

our bool destroyed;

class DestructMockStream inherits InputStream {
    public {
        EncodingConversionInputStream c;
    }

    destructor() {
        destroyed = True;
    }

    *binary read(int limit) {
        throw "UNEXPECTED-CALL";
    }
}

public class EncodingConversionInputStreamTest inherits QUnit::Test {

    constructor() : Test("EncodingConversionInputStreamTest", "1.0") {
        addTestCase("empty", \empty());
        addTestCase("read", \read());
        addTestCase("invalid", \invalid());
        addTestCase("invalidAtEnd", \invalidAtEnd());
        addTestCase("circular reference", \circRef());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    empty() {
        EncodingConversionInputStream is(new BinaryInputStream(binary()), "UTF-8", "ISO8859-2");
        assertEq(NOTHING, is.read(100));
    }

    read() {
        EncodingConversionInputStream is(new SrcStream(<C5A0C48D>), "UTF-8", "UTF-16BE");
        assertThrows("INPUT-STREAM-ERROR", sub() { is.read(0); });
        assertThrows("INPUT-STREAM-ERROR", sub() { is.read(-2); });
        assertEq(<0160>, is.read(2));
        assertEq(<01>, is.read(1));
        assertEq(<0D>, is.read(1));
        assertEq(NOTHING, is.read(2));
        assertEq(NOTHING, is.read(10));
    }

    invalid() {
        EncodingConversionInputStream is(new SrcStream(<C5C48D>), "UTF-8", "ISO8859-2");
        assertThrows("ENCODING-CONVERSION-ERROR", sub() { is.read(1); });
        assertThrows("ENCODING-CONVERSION-ERROR", sub() { is.read(1); });
    }

    invalidAtEnd() {
        EncodingConversionInputStream is(new SrcStream(<C5A0C4>), "UTF-8", "ISO8859-2");
        assertEq(<A9>, is.read(1));
        assertThrows("ENCODING-CONVERSION-ERROR", sub() { is.read(1); });
        assertThrows("ENCODING-CONVERSION-ERROR", sub() { is.read(1); });
    }

    circRef() {
        destroyed = False;
        {
            DestructMockStream src(\destroyed);
            EncodingConversionInputStream is(src, "UTF-8", "ISO8859-2");
            src.c = is;
        }
        assertTrue(destroyed);
    }
}
