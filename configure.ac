# Process this file with autoconf to produce a configure script.

# AC_PREREQ(2.59)
AC_INIT([qore], [0.7.3],
        [David Nichols <nicholsman@gmail.com>],
        [qore])
AM_INIT_AUTOMAKE
AC_CONFIG_HEADER(include/qore/intern/unix-config.h)

# fix default include dir
DEFAULT_INCLUDES="-I\${top_builddir}/include/qore"
AC_SUBST([DEFAULT_INCLUDES])

AC_PROG_LEX
##AC_PROG_MAKE_SET
AC_C_BIGENDIAN

# test for flex & flex version
AC_MSG_CHECKING([for flex 2.5.31 or greater])
if test -z "`echo $LEX | grep flex`"; then
        AC_MSG_ERROR([no flex version found])
elif test -z "`$LEX --version | grep -e ' 2\.5\.3[[1-9]]' -e '2\.5\.[[4-9]][[0-9]]' -e '2\.\[[6-9]]\.'`" ; then
        flexver=`$LEX --version`
	AC_MSG_ERROR([incompatible $flexver found - you can download flex 2.5.35 at http://sourceforge.net/projects/flex])
else
        flexver=`$LEX --version`
	AC_MSG_RESULT([yes ($flexver)])
fi

AC_PROG_YACC

# test for bison & bison version
AC_MSG_CHECKING([for bison 1.85 or greater])
if test -z "`echo $YACC | grep bison`"; then
	AC_MSG_ERROR([bison not found])
elif test -z "`$YACC --version | head -n 1 | grep -e ' 2\.' -e '1\.8[[5-9]]*' -e '1\.9'`"; then
        bisonver=`$YACC --version | head -n 1`
	AC_MSG_ERROR([incompatible $bisonver found])
else
	AC_MSG_RESULT([yes])
fi

AC_LANG(C++)
AC_PROG_CXX
AC_PROG_CC
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_RANLIB
AM_PROG_AS

# set system variables
OS=`uname -s`
if test "$OS" = "HP-UX"; then
   if test "$host_cpu" = "ia64"; then
      ARCH=itanium
   else
      ARCH=PA-RISC
   fi
else
   ARCH=`uname -p`
   if test $ARCH = i686 -o $ARCH = i586 -o $ARCH = athlon ; then
      ARCH=i386
   fi
fi

# set find prefix
if test -n "$prefix" -a "$prefix" != "NONE"; then
   find_prefix="$prefix"
fi

#AC_CANONICAL_HOST
# get CPU family
case "${host_cpu}" in
   i[[3456]]86) cpu_family=i386 ;;
   hppa*)       cpu_family=parisc ;;
   *)           cpu_family=${host_cpu} ;;
esac

# do CPU specific actions
#AC_MSG_CHECKING([if we have atomic operation support for ${cpu_family} cpus])
#rm -f include/qore/macros.h
#if test -e include/qore/macros-${cpu_family}.h; then
#   (cd include/qore; ln -s macros-${cpu_family}.h macros.h)
#   AC_MSG_RESULT([ok])
#else
#   (cd include/qore; ln -s macros-none.h macros.h)
#   AC_MSG_RESULT([no])
#fi

# set OS-specific variables
SHLIB_SUFFIX=so
#echo host_os=${host_os}
case "${host_os}" in
     *linux*)   AC_DEFINE(NEED_ICONV_TRANSLIT, 1, Define to 1 if //TRANSLIT should be added to the destination character set code) 
		# set compile flags for Linux
		CPPFLAGS="${CPPFLAGS} -D_GNU_SOURCE"
		SHLIB_SUFFIX=so
		AC_DEFINE(LINUX, 1, if compiling on Linux)
		;;
     *solaris*) # set compile flags for Solaris
		CPPFLAGS="${CPPFLAGS} -D_POSIX_C_SOURCE=199506L -D_XPG4_2 -D_XPG5 -D__EXTENSIONS__"
		# for checking for some network functions on Solaris
		LDFLAGS="$LDFLAGS -lnsl"
		# assume we are using CC if not using g++, add -norunpath to link flags in this case
		if test "$GXX" != "yes"; then
		   LDFLAGS="$LDFLAGS -norunpath"
		fi
		AC_DEFINE(SOLARIS, 1, if compiling on Solaris)
		# add -ldl to libs if on Solaris 8
		if test "${host_os}" = "solaris2.8"; then
		   QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS -ldl"
		fi
		solaris=yes
	        ;;
     *darwin*)  SHLIB_SUFFIX=dylib
		# libtool 1.5.* is creating modules on Darwin 8.* (OS/X 10.4.*) with a .so suffix for some reason
		MODULE_SUFFIX=so
		AC_DEFINE(DARWIN, 1, [if compiling on Darwin])
		darwin=yes
		;;
     *hpux*)    if test "$host_cpu" = "ia64"; then
     		   SHLIB_SUFFIX=so
		else  # assume hppa (PA-RISC)
     		   SHLIB_SUFFIX=sl
		   AC_DEFINE(SHLIB_SUFFIX, "sl", shared library suffix)
		fi
		# add "-AA" and -D__STDC_EXT__ to aCC commandline to enable a clean compile
		if test -n "`echo $CXX|grep aCC`"; then
		   CXXFLAGS="$CXXFLAGS -AA"
		   CPPFLAGS="$CPPFLAGS -D_HPUX_SOURCE -D__STDC_EXT__ -D_RWSTD_MULTI_THREAD"
		fi
		CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED"		
		AC_DEFINE(HPUX, 1, if compiling on HP-UX)
		AC_DEFINE(NEED_ENVIRON_LOCK, 1, [if the environment operations need explicit locking])
		hpux=yes
		;;
esac
AC_SUBST(SHLIB_SUFFIX)
if test -z "$MODULE_SUFFIX" ; then
   MODULE_SUFFIX=$SHLIB_SUFFIX
fi
AC_SUBST(MODULE_SUFFIX)

AC_ARG_ENABLE([single-compilation-unit],
  [AS_HELP_STRING([--enable-single-compilation-unit],
		  [enable compilation as a single unit (default: on)])],
  [case "${enable_single_compilation_unit}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_single_compilation_unit} for --enable-single-compilation-unit) ;;
      esac],
  [enable_single_compilation_unit=yes])

AC_ARG_ENABLE([scu],
  [AS_HELP_STRING([--enable-scu],
		  [short for --enable-single-compilation-unit: enable compilation as a single unit])],
  [case "${enable_scu}" in
       yes|no) enable_single_compilation_unit=$enable_scu;;
       *)      AC_MSG_ERROR(bad value ${enable_scu} for --enable-scu) ;;
      esac])

AC_ARG_ENABLE([64bit],
  [AS_HELP_STRING([--enable-64bit],
		  [enable 64bit support (default: auto)])],
  [case "${enable_64bit}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_64bit} for --enable-64bit) ;;
      esac],
  [enable_64bit=auto])

if test "$enable_64bit" = "auto"; then
   # turn on 64-bit by default if compiling on itanium or x86_64
   if test "$host_cpu" = "ia64" -o "$host_cpu" = "x86_64"; then
      enable_64bit=yes
   else
      enable_64bit=no
   fi
fi

# see if we know how to set flags properly for different hosts and architectures
# FIXME: add test on HP-UX if the compiler can generate the appropriate binaries
if test "$enable_64bit" = "yes"; then
   case "${host_os}" in
      *linux*)	if test "$GXX" = "yes"; then
		   CXXFLAGS="$CXXFLAGS -m64"
		fi
		LIBSUFFIX=64
		AC_SUBST(LIBSUFFIX)
		;;
      *hpux*)	if test "$host_cpu" = "ia64"; then
                    if test -n "`echo $CXX|grep aCC`"; then
                        CXXFLAGS="$CXXFLAGS +DD64"
                    elif test "$GXX" = "yes"; then
                        CXXFLAGS="$CXXFLAGS -mlp64"
			QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS -lCsup"
                    fi
                else
		    if test -n "`echo $CXX|grep aCC`"; then
		        CXXFLAGS="$CXXFLAGS +DA2.0W"
		    elif test "$GXX" = "yes"; then
			CXXFLAGS="$CXXFLAGS -march=2.0"
		    fi
		fi
		;;
     *solaris*) if test "$GXX" = "yes"; then
		    if test "$host_cpu" = "sparc"; then
		        CXXFLAGS="$CXXFLAGS -mcpu=ultrasparc3 -m64"  # NOTE we compile for minimum ultrasparc 3 in 64-bit mode
		    else
		        CXXFLAGS="$CXXFLAGS -m64"
		    fi
		else
		    CXXFLAGS="$CXXFLAGS -xarch=generic64"
		fi
		;;
   esac
   SYBLIBSUFFIX=64
   RVLIBSUFFIX=64
   bits=64
else
   case "${host_os}" in
     *linux*)	if test "$GXX" = "yes"; then
		   CXXFLAGS="$CXXFLAGS -m32"
		fi
		;;
     *hpux*)	if test "$host_cpu" != "ia64"; then
		    if test "$GXX" = "yes"; then
		        CXXFLAGS="$CXXFLAGS -march=2.0"
		    elif test -n "`echo $CXX|grep aCC`" -a "$host_cpu" != "ia64"; then
		        CXXFLAGS="$CXXFLAGS +DA2.0N"   # NOTE we compile for PA-RISC 2.0 32-bit, not PA-RISC 1.1
		    fi
		fi
		;;
     *solaris*) if test "$GXX" = "yes"; then
		    if test "$host_cpu" = "sparc"; then
		        CXXFLAGS="$CXXFLAGS -mcpu=v9 -m32"
		    else
		        CXXFLAGS="$CXXFLAGS -m32"
		    fi
		else
		    CXXFLAGS="$CXXFLAGS -xarch=generic"
		fi
		;;
   esac
   if test "$host_cpu" = "x86_64"; then
      cpu_family=i386
   fi
   bits=32
fi

# set CPU_X86_64 if we are targeting it
if test "${enable_64bit}" = yes; then
   if test "${cpu_family}" = i386 -o "${cpu_family}" = x86_64; then
      AC_DEFINE([CPU_X86_64], 1, [define if we are targeting a x86_64 CPU])
   fi
fi

if test "$host_cpu" = "sparc"; then
   AC_DEFINE([SPARC], 1, [define if we are targeting the SPARC CPU])
fi

AC_ARG_ENABLE([static-openssl],
     [AS_HELP_STRING([--enable-static-openssl],
		     [force static linkage of openssl libraries (default=auto)])],
     [case "${enable_static_openssl}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_static_openssl} for --enable-static-openssl) ;;
      esac],
     [enable_static_openssl=no])

AC_ARG_ENABLE([static-libxml2],
     [AS_HELP_STRING([--enable-static-libxml2],
		     [force static linkage of libxml2 libraries (default=auto)])],
     [case "${enable_static_libxml2}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_static_libxml2} for --enable-static-libxml2) ;;
      esac],
     [enable_static_libxml2=no])

AC_ARG_ENABLE([static-zlib],
     [AS_HELP_STRING([--enable-static-zlib],
		     [force static linkage of zlib libraries (default=auto)])],
     [case "${enable_static_zlib}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_static_zlib} for --enable-static-zlib) ;;
      esac],
     [enable_static_zlib=no])

AC_ARG_ENABLE([static-pcre],
     [AS_HELP_STRING([--enable-static-pcre],
		     [force static linkage of pcre libraries (default=auto)])],
     [case "${enable_static_pcre}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_static_pcre} for --enable-static-pcre) ;;
      esac],
     [enable_static_pcre=no])

AC_ARG_ENABLE([static-common],
     [AS_HELP_STRING([--enable-static-common],
		     [force static linkage of openssl, libxml2, and pcre libraries (default=auto)])],
     [case "${enable_static_common}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_static_common} for --enable-static-common) ;;
      esac],
     [enable_static_common=no])

if test "$enable_static_openssl" = "yes"; then
   openssl_static=yes
fi

if test "$enable_static_libxml2" = "yes"; then
   libxml2_static=yes
fi

if test "$enable_static_pcre" = "yes"; then
   pcre_static=yes
fi

if test "$enable_static_common" = "yes"; then
   zlib_statis=yes
   openssl_static=yes
   libxml2_static=yes
   pcre_static=yes
   bz2lib_static=yes
fi

set_zlib_cppflags() {
    if test "$1" != "/usr/include"; then
        ZLIB_CPPFLAGS=-I$1
    fi
    with_zlib_includes="$1"
}

find_zlib() {
    dir="$1"
    if test -z "$dir"; then
        dir=/
	lib=/lib
	inc=/usr/include
    else
        lib="$dir/lib${LIBSUFFIX}"
        inc="$dir/include"
    fi
    # if we only want the static zlib libraries
    if test -n "$zlib_static"; then
    	if test -f "$lib/libz.a"; then
	    ZLIB_LDFLAGS="$lib/libz.a"
	    with_zlib_libs="$lib"
	    zlib_static=1
    	fi
    else
        if test -f "$lib/libz.${SHLIB_SUFFIX}"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        ZLIB_LDFLAGS="-L$lib"
    	    fi
	    ZLIB_LDFLAGS="$ZLIB_LDFLAGS -lz"
	    with_zlib_libs="$lib"
    	elif test -f "$lib/libz.a"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        ZLIB_LDFLAGS="-L$lib"
    	    fi
	    ZLIB_LDFLAGS="$ZLIB_LDFLAGS -lz"
	    with_zlib_libs="$lib"
	    zlib_static=1
    	fi
    fi
    if test -z "$ZLIB_LDFLAGS"; then
        return
    fi
    # try to find include files
    if test -f "$inc/zlib.h"; then
        set_zlib_cppflags $inc
    elif test -f "$inc/zlib/zlib.h"; then
        set_zlib_cppflags $inc/zlib
    else
        unset ZLIB_LDFLAGS
	unset with_zlib_libs
	return
    fi
    QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS $ZLIB_LDFLAGS"
    QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS $ZLIB_CPPFLAGS"
}

# see if we can figure out where the zlib library is
AC_ARG_WITH([zlib-dir],
  [AS_HELP_STRING([--with-zlib-dir@<:@=DIR@:>@],
                  [ZLIB directory])],
  [if test ! -d "${with_zlib_dir}"; then AC_MSG_ERROR([bad value ${with_zlib_dir} for --with-zlib-dir]); unset with_zlib_dir; fi],
  [with_zlib_dir="$ZLIB_DIR"])

AC_MSG_CHECKING([for zlib libraries and header files])
for dir in "${with_zlib_dir}" "${find_prefix}" /usr / /usr/local /opt/gnu /opt/zlib /usr/local/zlib /opt/local /sw /usr/sfw /opt/sfw; do
    find_zlib $dir
    if test -n "$ZLIB_LDFLAGS"; then
        break
    fi
done
if test -z "$ZLIB_LDFLAGS"; then
    AC_MSG_ERROR([no zlib library found])
fi
if test -n "$zlib_static"; then
   AC_MSG_RESULT([includes $with_zlib_includes libs $with_zlib_libs (static)])
else
   AC_MSG_RESULT([includes $with_zlib_includes libs $with_zlib_libs (shared)])
fi

set_pcre_cppflags() {
    if test "$1" != "/usr/include"; then
        PCRE_CPPFLAGS=-I$1
    fi
    with_pcre_includes="$1"
}

find_pcre() {
    dir="$1"
    if test -z "$dir"; then
        dir="/"
	lib=/lib
	inc=/usr/include
    else
        lib="$dir/lib${LIBSUFFIX}"
        inc="$dir/include"
    fi
    # if we only want the static pcre libraries
    if test -n "$pcre_static"; then
    	if test -f "$lib/libpcre.a"; then
	    PCRE_LDFLAGS="$lib/libpcre.a"
	    with_pcre_libs="$lib"
	    pcre_static=1
    	fi
    else
        if test -f "$lib/libpcre.${SHLIB_SUFFIX}"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        PCRE_LDFLAGS="-L$lib"
    	    fi
	    PCRE_LDFLAGS="$PCRE_LDFLAGS -lpcre"
	    with_pcre_libs="$lib"
    	elif test -f "$lib/libpcre.a"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        PCRE_LDFLAGS="-L$lib"
    	    fi
	    PCRE_LDFLAGS="$PCRE_LDFLAGS -lpcre"
	    with_pcre_libs="$lib"
	    pcre_static=1
    	fi
    fi
    if test -z "$PCRE_LDFLAGS"; then
        return
    fi
    # try to find include files
    if test -f "$inc/pcre.h"; then
        set_pcre_cppflags $inc
    elif test -f "$inc/pcre/pcre.h"; then
        set_pcre_cppflags $inc/pcre
    else
        unset PCRE_LDFLAGS
	unset with_pcre_libs
	return
    fi
    QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS $PCRE_LDFLAGS"
    QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS $PCRE_CPPFLAGS"
}

# see if we can figure out where the pcre library is
AC_ARG_WITH([pcre-dir],
  [AS_HELP_STRING([--with-pcre-dir@<:@=DIR@:>@],
                  [PCRE directory])],
  [if test ! -d "${with_pcre_dir}"; then AC_MSG_ERROR([bad value ${with_pcre_dir} for --with-pcre-dir]); unset with_pcre_dir; fi],
  [with_pcre_dir="$PCRE_DIR"])

AC_MSG_CHECKING([for pcre libraries and header files])
for dir in "${with_pcre_dir}" "${find_prefix}" /usr / /usr/local /opt/gnu /opt/pcre /usr/local/pcre /opt/local /sw /usr/sfw /opt/sfw; do
    find_pcre $dir
    if test -n "$PCRE_LDFLAGS"; then
        break
    fi
done
if test -z "$PCRE_LDFLAGS"; then
    AC_MSG_ERROR([no pcre library found])
fi
if test -n "$pcre_static"; then
   AC_MSG_RESULT([includes $with_pcre_includes libs $with_pcre_libs (static)])
else
   AC_MSG_RESULT([includes $with_pcre_includes libs $with_pcre_libs (shared)])
fi

set_libxml2_cppflags() {
    LIBXML2_INC_DIR=$1
    if test "$1" != "/usr/include"; then
        LIBXML2_CPPFLAGS=-I$1
    fi
}

find_libxml2() {
    dir="$1"
    if test -z "$dir"; then
        dir="/"
	lib=/lib
	inc=/usr/include
    else
        lib="$dir/lib${LIBSUFFIX}"
        inc="$dir/include"
    fi
    # if we only want the static libxml2 libraries
    if test -n "$libxml2_static"; then
    	if test -f "$lib/libxml2.a"; then
	    LIBXML2_LDFLAGS="$lib/libxml2.a"
       	    AC_MSG_RESULT([$lib (forced static)])
    	fi
    else
        if test -f "$lib/libxml2.${SHLIB_SUFFIX}"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        LIBXML2_LDFLAGS="-L$lib"
    	    fi
	    LIBXML2_LDFLAGS="$LIBXML2_LDFLAGS -lxml2"
       	    AC_MSG_RESULT([$lib (shared)])
    	elif test -f "$lib/libxml2.a"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        LIBXML2_LDFLAGS="-L$lib"
    	    fi
	    LIBXML2_LDFLAGS="$LIBXML2_LDFLAGS -lxml2"
       	    AC_MSG_RESULT([$lib (static)])
    	fi
    fi
    if test -z "$LIBXML2_LDFLAGS"; then
        return
    fi
    AC_MSG_CHECKING([for libxml2 include files])
    # try to find include files
    if test -f "$inc/libxml/xmlversion.h"; then
        AC_MSG_RESULT([found: $inc])
        set_libxml2_cppflags $inc
    elif test -f "$inc/libxml2/libxml/xmlversion.h"; then
        AC_MSG_RESULT([found: $inc/libxml2])
	inc=$inc/libxml2
        set_libxml2_cppflags $inc
    else
	AC_MSG_ERROR([not found])
    fi
    AC_MSG_CHECKING([libxml2 version])
    # check version
    full=`grep define.*LIBXML_DOTTED_VERSION $inc/libxml/xmlversion.h | cut -f2 -d\"`
    vers=`echo $full | awk 'BEGIN { FS = "."; } {printf("%04d%03d\n", $1 * 1000 + $2, $3);}'`
    if test "$vers" -ge 2004022; then
        AC_MSG_RESULT([$full (OK)])
    else
	AC_MSG_ERROR([libxml2 2.4.22 or higher is needed; found version $full])
    fi

    QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS $LIBXML2_LDFLAGS"
    QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS $LIBXML2_CPPFLAGS"
}

# see if we can figure out where the libxml2 library is
AC_ARG_WITH([libxml2-dir],
  [AS_HELP_STRING([--with-libxml2-dir@<:@=DIR@:>@],
                  [LIBXML2 directory])],
  [if test ! -d "${with_libxml2_dir}"; then AC_MSG_ERROR(bad value ${with_libxml2_dir} for --with-libxml2-dir); unset with_libxml2_dir; fi],
  [with_libxml2_dir="$LIBXML2_DIR"])

AC_MSG_CHECKING([for libxml2 libraries and header files])
for dir in "${with_libxml2_dir}" "${find_prefix}" /usr / /usr/local /opt/gnu /opt/libxml2 /usr/local/libxml2 /opt/local /sw /usr/sfw /opt/sfw; do
    find_libxml2 $dir
    if test -n "$LIBXML2_LDFLAGS"; then
        break
    fi
done
if test -n "$LIBXML2_LDFLAGS"; then
   # check for xmlTextReaderSetSchema()
   AC_MSG_CHECKING([for xmlTextReaderSetSchema()])
   file=`grep xmlTextReaderSetSchema $LIBXML2_INC_DIR/libxml/*.h`
   if test -n "$file"; then
      AC_DEFINE(HAVE_XMLTEXTREADERSETSCHEMA, 1, [Define if libxml2 defines xmlTextReaderSetSchema()])
      AC_MSG_RESULT([found])
   else
      AC_MSG_RESULT([not found])
   fi
else
    AC_MSG_ERROR([no libxml2 library found])
fi

set_bz2lib_cppflags() {
    if test "$1" != "/usr/include"; then
        BZ2_CPPFLAGS=-I$1
    fi
}

find_bz2lib() {
    dir="$1"
    if test -z "$dir"; then
        dir="/"
	lib=/lib
	inc=/usr/include
    else
        lib="$dir/lib${LIBSUFFIX}"
        inc="$dir/include"
    fi
    # if we only want the static bz2lib libraries
    if test -n "$bz2lib_static"; then
    	if test -f "$lib/libbz2.a"; then
	    BZ2_LDFLAGS="$lib/libbz2.a"
       	    AC_MSG_RESULT([$lib (forced static)])
    	fi
    else
        if test -f "$lib/libbz2.${SHLIB_SUFFIX}"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        BZ2_LDFLAGS="-L$lib"
    	    fi
	    BZ2_LDFLAGS="$BZ2_LDFLAGS -lbz2"
       	    AC_MSG_RESULT([$lib (shared)])
    	elif test -f "$lib/libbz2.a"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        BZ2_LDFLAGS="-L$lib"
    	    fi
	    BZ2_LDFLAGS="$BZ2_LDFLAGS -lbz2"
       	    AC_MSG_RESULT([$lib (static)])
    	fi
    fi
    if test -z "$BZ2_LDFLAGS"; then
        return
    fi
    AC_MSG_CHECKING([for bz2lib include files])
    # try to find include files
    if test -f "$inc/bzlib.h"; then
        AC_MSG_RESULT([found: $inc/bzlib.h])
        set_bz2lib_cppflags $inc
    else
	AC_MSG_ERROR([not found])
    fi

    QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS $BZ2_LDFLAGS"
    QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS $BZ2_CPPFLAGS"
}

# see if we can figure out where the bz2lib library is
AC_ARG_WITH([bz2lib-dir],
  [AS_HELP_STRING([--with-bz2lib-dir@<:@=DIR@:>@],
                  [bz2lib directory])],
  [if test ! -d "${with_bz2lib_dir}"; then AC_MSG_ERROR(bad value ${with_bz2lib_dir} for --with-bz2lib-dir); unset with_bz2lib_dir; fi], 
  [with_bz2lib_dir="$BZ2_DIR"])

AC_MSG_CHECKING([for bz2lib libraries and header files])
for dir in "${with_bz2lib_dir}" "${find_prefix}" /usr / /usr/local /opt/gnu /opt/bzlib /usr/local/bzlib /opt/local /sw /usr/sfw /opt/sfw; do
    find_bz2lib $dir
    if test -n "$BZ2_LDFLAGS"; then
        break
    fi
done
if test -z "$BZ2_LDFLAGS"; then
    AC_MSG_ERROR([no bzlib library found])
fi

set_openssl_cppflags() {
    if test "$1" != "/usr/include"; then
        OPENSSL_CPPFLAGS=-I$1
    fi
}

find_openssl() {
    dir="$1"
    if test -z "$dir"; then
        dir="/"
	lib=/lib
	inc=/usr/include
    else
        lib="$dir/lib${LIBSUFFIX}"
        inc="$dir/include"
    fi
    # if we only want the static openssl libraries
    if test -n "$openssl_static"; then
    	if test -f "$lib/libssl.a" -a -f "$lib/libcrypto.a"; then
	    OPENSSL_LDFLAGS="$lib/libssl.a $lib/libcrypto.a"
       	    AC_MSG_RESULT([$lib (forced static)])
    	fi
    else
        if test -f "$lib/libssl.${SHLIB_SUFFIX}" -a -f "$lib/libcrypto.${SHLIB_SUFFIX}"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        OPENSSL_LDFLAGS="-L$lib"
    	    fi
	    OPENSSL_LDFLAGS="$OPENSSL_LDFLAGS -lssl -lcrypto"
       	    AC_MSG_RESULT([$lib (shared)])
    	elif test -f "$lib/libssl.a" -a -f "$lib/libcrypto.a"; then
	    if test "$lib" != "/lib" -a "$lib" != "/usr/lib"; then
       	        OPENSSL_LDFLAGS="-L$lib"
    	    fi
	    OPENSSL_LDFLAGS="$OPENSSL_LDFLAGS -lssl -lcrypto"
       	    AC_MSG_RESULT([$lib (static)])
    	fi
    fi
    if test -z "$OPENSSL_LDFLAGS"; then
        return
    fi
    AC_MSG_CHECKING([for openssl include files])
    # try to find include files
    if test -f "$inc/openssl/ssl.h"; then
        AC_MSG_RESULT([found: $inc/openssl])
        set_openssl_cppflags $inc
    else
	AC_MSG_ERROR([not found])
    fi

    QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS $OPENSSL_LDFLAGS"
    QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS $OPENSSL_CPPFLAGS"
}

# see if we can figure out where the openssl library is
AC_ARG_WITH([openssl-dir],
  [AS_HELP_STRING([--with-openssl-dir@<:@=DIR@:>@],
                  [openssl directory])],
  [if test ! -d "${with_openssl_dir}"; then AC_MSG_ERROR(bad value ${with_openssl_dir} for --with-openssl-dir); unset with_openssl_dir; fi], 
  [with_openssl_dir="$OPENSSL_DIR"])

AC_MSG_CHECKING([for openssl libraries and header files])
for dir in "${with_openssl_dir}" "${find_prefix}" /usr / /usr/local /opt/gnu /opt/openssl /usr/local/openssl /opt/local /sw /usr/sfw /opt/sfw; do
    find_openssl $dir
    if test -n "$OPENSSL_LDFLAGS"; then
        break
    fi
done
if test -z "$OPENSSL_LDFLAGS"; then
    AC_MSG_ERROR([no openssl library found])
else
    AC_MSG_CHECKING([for SHA224, SHA256, SHA384, SHA512 in openssl])
    # check for SHA512
    sha=`grep EVP_sha512 $inc/openssl/evp.h 2>/dev/null`
    if test -n "$sha"; then
       AC_DEFINE([HAVE_OPENSSL_SHA512], 1, [define if the sha512 algorithm is available in openssl])
       AC_MSG_RESULT([found])
    else
       AC_MSG_RESULT([not found])
    fi

    # check for openssl const correctness (later versions have it)
    SAVE_CPPFLAGS="$CPPFLAGS"
    SAVE_LDFLAGS="$LDFLAGS"
    CPPFLAGS="$CPPFLAGS $QORE_LIB_CPPFLAGS $OPENSSL_CPPFLAGS"
    LDFLAGS="$LDFLAGS $QORE_LIB_LDFLAGS $OPENSSL_LDFLAGS"

    AC_MSG_CHECKING([const correctness in openssl headers])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
    [[#include <openssl/x509.h>]],
    [[const unsigned char *p; d2i_X509(0, &p, 0l);]])],
       [AC_MSG_RESULT([ok])
        AC_DEFINE([HAVE_OPENSSL_CONST], 1, [Define if openssl headers correctly use const])],
       [AC_MSG_RESULT([old style, not const correct])])

    CPPFLAGS="$SAVE_CPPFLAGS"
    LDFLAGS="$SAVE_LDFLAGS"
fi

AC_ARG_ENABLE([profile],
     [AS_HELP_STRING([--enable-profile],
		     [turn on profiling support (default=no)])],
     [case "${enable_profile}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_profile} for --enable-profile) ;;
      esac],
     [enable_profile=no])

AC_ARG_ENABLE([debug],
     [AS_HELP_STRING([--enable-debug],
		     [turn on debugging (default=no)])],
     [case "${enable_debug}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_debug} for --enable-debug) ;;
      esac],
     [enable_debug=yes])

if test "${enable_debug}" = yes; then
   AC_DEFINE(DEBUG, 1, Define if debugging support should be included)
   # remove -O2 from CXXFLAGS so valgrind can report properly
   CXXFLAGS=`echo $CXXFLAGS | sed 's/\-O2//'`
else
   AC_DEFINE(NDEBUG, 1, Define if assert() declarations should be suppressed)
fi

if test "${enable_profile}" = yes; then
   AC_DEFINE(PROFILE, 1, Define if profiling support should be included)
fi

AC_ARG_ENABLE([optimization],
     [AS_HELP_STRING([--enable-optimization],
		     [turn on optimization (default=auto (yes unless debugging is enabled)])],
     [case "${enable_optimization}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_optimization} for --enable-optimization) ;;
      esac],
     [enable_optimization=auto])

if test "$enable_optimization" = "auto"; then
   if test "${enable_debug}" = yes; then
      enable_optimization=no
   else
      enable_optimization=yes
   fi
fi

AC_ARG_ENABLE([runtime-thread-stack-trace],
  [AS_HELP_STRING([--enable-runtime-thread-stack-trace],
		  [enable runtime thread stack trace (performance penalty, default: off)])],
  [case "${enable_runtime_thread_stack_trace}" in
       yes|no) ;;
       *)      AC_MSG_ERROR(bad value ${enable_runtime_thread_stack_trace} for --enable-runtime-thread-stack-trace) ;;
      esac],
  [enable_runtime_thread_stack_trace=no])

if test "${enable_runtime_thread_stack_trace}" = "yes" -o "${enable_debug}" = yes; then
   AC_DEFINE(QORE_RUNTIME_THREAD_STACK_TRACE, 1, [to enable runtime thread stack tracing; note this has a performance penalty and is not generally necessary])
   enable_runtime_thread_stack_trace=yes
fi

# check for gcc visibility support
AC_MSG_CHECKING([for gcc visibility support])
if test "$GXX" = "yes"; then
   gcc_version=`$CXX -dumpversion`
   if test "$gcc_version" \> "4"; then
      AC_DEFINE(HAVE_GCC_VISIBILITY, 1, if compiling with g++ and visibility support is available)
      AC_MSG_RESULT([yes, $CXX $gcc_version])
      # we no longer set visibility to hidden by default because it makes RTTI symbols invisible
      # all functions in the library are tagged anyway
      #CXXFLAGS="$CXXFLAGS -fvisibility=hidden"
   else
      AC_MSG_RESULT([no, gcc $gcc_version])
   fi
else
   AC_MSG_RESULT([no, $CXX])
fi

# checks for how to build threads
ACX_PTHREAD
if test "$acx_pthread_ok" = "no"; then
   AC_MSG_ERROR(POSIX threads do not seem to be supported on this platform, aborting)
fi
CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"

AC_ARG_WITH([doxygen],
    [AS_HELP_STRING([--with-doxygen@<:@=PATH@:>@],
                    [path to doxygen binary])],
    [if test "${with_doxygen}" != "no" -a ! -x "${with_doxygen}"; then AC_MSG_ERROR(${with_doxygen} is not an executable in --with-doxygen); unset with_doxygen; fi ],
    [with_doxygen=auto])

if test "${with_doxygen}" = "auto"; then
   AC_MSG_CHECKING([for doxygen to build API documentation])
   # check for doxygen
   with_doxygen=`which doxygen 2>/dev/null | grep -v "no doxygen in.*"`
   if test -n "$with_doxygen"; then
      doxy_version=`$with_doxygen --version`
      AC_MSG_RESULT([found $with_doxygen $doxy_version])
   else
      AC_MSG_RESULT([not found])
   fi
fi

if test -n "${with_doxygen}"; then
   AC_SUBST(DOXYGEN_CMD, $with_doxygen)
fi

# check if socklen_t is needed
TYPE_SOCKLEN_T

# see if the iconv library is required
AC_CHECK_LIB(iconv, iconv)

# see if the socket library is required
AC_CHECK_LIB(socket, setsockopt)

# look for librt (needed by clock_gettime() on some platforms)
AC_CHECK_LIB(rt, clock_gettime)

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h inttypes.h netdb.h netinet/in.h stddef.h stdlib.h string.h strings.h sys/socket.h sys/time.h unistd.h])

# check for umem.h
AC_CHECK_HEADER([umem.h], have_umem_h=yes, have_umem_h=no)
if test "$have_umem_h" = "yes"; then
   AC_DEFINE(HAVE_UMEM_H, 1, [define if umem.h is available])
   QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS -lumem"
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_CHECK_MEMBERS([struct stat.st_blksize])
AC_STRUCT_ST_BLOCKS
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE

# checks for an STL hash_map template
AC_CXX_MAKE_HASH_MAP_H([include/qore/hash_map_include.h])

# checks for an STL slist template
AC_CXX_MAKE_SLIST_H([include/qore/slist_include.h])

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
##AC_FUNC_MALLOC
AC_FUNC_MKTIME
##AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRERROR_R
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([bzero floor gethostbyaddr gethostbyaddr_r gethostbyname gethostbyname_r gethostname gettimeofday memmove memset mkfifo putenv regcomp select socket setsockopt getsockopt strcasecmp strchr strdup strerror strspn strstr atoll strtol strtoll isblank localtime_r gmtime_r exp2 clock_gettime realloc timegm seteuid setegid setenv unsetenv round pthread_attr_getstacksize])

# try to find strtoimax on HPUX
AC_MSG_CHECKING([for strtoimax])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[#include <inttypes.h>]], [[strtoimax("10", NULL, 10);]])], 
   [AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_STRTOIMAX, 1, [Define to 1 if you have strtoimax])], 
   [AC_MSG_RESULT(no)])

# Check definition of gethostbyaddr_r (glibc2 defines this with 8 arguments)
ac_save_CXXFLAGS="$CXXFLAGS"
AC_CACHE_CHECK([style of gethost* routines], qore_cv_gethost_style,
AC_LANG_PUSH([C++])

# Do not treat warnings as errors if we are linking against other libc
# this is to work around gcc not being permissive on non-system includes
# with respect to ANSI C++
# We also remove the -fbranch-probabilities option as this will give warnings
# about not profiled code, which confuses configure
if test "$GXX" = "yes" -a "$with_other_libc" = "no"
then
  CXXFLAGS=`echo "$CXXFLAGS -Werror" | sed 's/-fbranch-probabilities//'`
fi

AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[#undef inline
#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)
#define _REENTRANT
#endif
#include <pthread.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>]],
[[int skr;
 struct hostent *foo = gethostbyaddr_r((const char *) 0,
  0, 0, (struct hostent *) 0, (char *) NULL,  0, &skr); return (foo == 0);]])],
qore_cv_gethost_style=solaris, qore_cv_gethost_style=other))
AC_LANG_POP([C++])
CXXFLAGS="$ac_save_CXXFLAGS"
if test "$qore_cv_gethost_style" = "solaris"
then
  AC_DEFINE([HAVE_SOLARIS_STYLE_GETHOST], [1],
            [Solaris defines gethostbyaddr_r with 7 arguments. glibc2 defines this with 8 arguments])
fi

# Check definition of gethostbyname_r (glibc2.0.100 is different from Solaris)
ac_save_CXXFLAGS="$CXXFLAGS"
AC_CACHE_CHECK([style of gethostname_r routines], qore_cv_gethostname_style,
AC_LANG_PUSH([C++])
if test "$GXX" = "yes" -a "$with_other_libc" = "no"
then
  CXXFLAGS=`echo "$CXXFLAGS -Werror" | sed 's/-fbranch-probabilities//'`
fi
AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[#undef inline
#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)
#define _REENTRANT
#endif
#include <pthread.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>]],
[[int skr;

 skr = gethostbyname_r((const char *) 0,
  (struct hostent*) 0, (char*) 0, 0, (struct hostent **) 0, &skr);]])],
qore_cv_gethostname_style=glibc2, qore_cv_gethostname_style=other))
AC_LANG_POP([C++])
CXXFLAGS="$ac_save_CXXFLAGS"
if test "$qore_cv_gethostname_style" = "glibc2"
then
  AC_DEFINE([HAVE_GETHOSTBYNAME_R_GLIBC2_STYLE], [1],
            [Solaris define gethostbyname_r with 5 arguments. glibc2 defines this with 6 arguments])
fi

# Check 3rd argument of getthostbyname_r
ac_save_CXXFLAGS="$CXXFLAGS"
AC_CACHE_CHECK([3 argument to gethostname_r routines], qore_cv_gethostname_arg,
AC_LANG_PUSH([C++])
if test "$GXX" = "yes" -a "$with_other_libc" = "no"
then
  CXXFLAGS=`echo "$CXXFLAGS -Werror" | sed 's/-fbranch-probabilities//'`
fi
AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[#undef inline
#if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)
#define _REENTRANT
#endif
#include <pthread.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>]],
[[int skr;
 skr = gethostbyname_r((const char *) 0, (struct hostent*) 0, (struct hostent_data*) 0);]])],
qore_cv_gethostname_arg=hostent_data, qore_cv_gethostname_arg=char))
AC_LANG_POP([C++])
CXXFLAGS="$ac_save_CXXFLAGS"
if test "$qore_cv_gethostname_arg" = "hostent_data"
then
  AC_DEFINE([HAVE_GETHOSTBYNAME_R_RETURN_INT], [1],
            [In OSF 4.0f the 3'd argument to gethostname_r is hostent_data *])
fi

# turn on optimizations if we know how
if test "$enable_optimization" = "yes"; then
    if test "$GXX" = "yes"; then
        CXXFLAGS="$CXXFLAGS -O3"  # gcc
    elif test "$CXX" = "CC" -a "`echo $host_os|cut -b-7`" = "solaris"; then
        # remove -g with Solaris CC as it reduces optimization levels
	CXXFLAGS="`echo $CXXFLAGS| sed s/-g//` -xO5" # Solaris CC
    elif test -n "`echo $CXX|grep aCC`"; then 
        # remove -g with HP-UX aCC as it reduces optimization levels
	CXXFLAGS="`echo $CXXFLAGS| sed s/-g//` +O4" # HP-UX aCC
    fi
else
    if test "$GXX" = "yes"; then
        CXXFLAGS="`echo $CXXFLAGS| sed s/-O2//`"  # gcc
    fi
fi

# turn on some build flags for non-debugging, non-profiling builds
if test "$enable_debug" = "no" -a "$enable_profile" = "no"; then
    # strip binaries and libraries on darwin with -x
    if test "`echo $host_os|cut -b-6`" = "darwin"; then
       LDFLAGS="$LDFLAGS -Wl,-x"
    fi	
fi

# turn on warnings if we know how
if test "$GXX" = "yes"; then
   CXXFLAGS="$CXXFLAGS -Wall"  # gcc
fi

# make sure compiler settings are correct for assembly if we need it
if test "$GXX" != yes; then
   if test "$solaris" = yes; then
      if test "$enable_64bit" = yes; then
         if test "$build_cpu" = sparc; then
	    solaris_cc_sparc64=yes
	 else
	    solaris_cc_x86_64=yes
         fi
      else
	 if test "$build_cpu" = sparc; then
	    solaris_cc_sparc32=yes
	 else
	    solaris_cc_i386=yes
         fi
      fi
      need_assembly=yes
   elif test "$hpux" = yes; then
      if test "$cpu_family" = parisc; then
         if test "$enable_64bit" = yes; then
	    hpux_acc_parisc64=yes
	 else
	    hpux_acc_parisc32=yes
	 fi
	 need_assembly=yes
      elif test "$cpu_family" = "ia64"; then
         if test "$enable_64bit" = yes; then
	    hpux_acc_64bit_ia64=yes
	 else
	    hpux_acc_32bit_ia64=yes
	 fi
	 need_assembly=yes
      fi
   fi
fi

if test "$need_assembly" = yes; then
   CCAS="$CXX"
   CCASFLAGS="$CCASFLAGS $CXXFLAGS"
fi

# get module API version to set pkglibdir
MODULE_API_MAJOR=`grep QORE_MODULE_API_MAJOR include/qore/ModuleManager.h|cut -f3 -d\ `
MODULE_API_MINOR=`grep QORE_MODULE_API_MINOR include/qore/ModuleManager.h|cut -f3 -d\ `
mypkglibdir=qore-modules
AC_SUBST([MODULE_API_MAJOR])
AC_SUBST([MODULE_API_MINOR])
AC_SUBST([mypkglibdir])

# save more version information in config.h
VERSION_MAJOR=`echo $PACKAGE_VERSION | cut -f3 -d\  | sed s/\"//g | cut -f1 -d.`
VERSION_MINOR=`echo $PACKAGE_VERSION | cut -f3 -d\  | sed s/\"//g | cut -f2 -d.`
VERSION_SUB=`echo $PACKAGE_VERSION | cut -f3 -d\  | sed s/\"//g | cut -f3 -d.`

# set version information
AC_DEFINE_UNQUOTED([VERSION_MAJOR], $VERSION_MAJOR, [major version number])
AC_DEFINE_UNQUOTED([VERSION_MINOR], $VERSION_MINOR, [minor version number])
AC_DEFINE_UNQUOTED([VERSION_SUB], $VERSION_SUB, [sub version number])
AC_DEFINE_UNQUOTED([TARGET_ARCH], "$ARCH", [host type])
AC_DEFINE_UNQUOTED([TARGET_OS], "$OS", [host type])
AC_DEFINE_UNQUOTED([TARGET_BITS], $bits, [32 or 64 bit build])

AM_CONDITIONAL([COND_DEBUG],                   [test "$enable_debug" = yes])
AM_CONDITIONAL([COND_PROFILE],                 [test "$enable_profile" = yes])
AM_CONDITIONAL([COND_SINGLE_COMPILATION_UNIT], [test "$enable_single_compilation_unit" = yes])
AM_CONDITIONAL([COND_MACOSX],                  [test "$darwin" = yes])
AM_CONDITIONAL([COND_DOXYGEN],                 [test -n "$with_doxygen"])
AM_CONDITIONAL([COND_STACK_TRACE],             [test "$enable_runtime_thread_stack_trace" = yes])
AM_CONDITIONAL([COND_SOLARIS_CC_X86_64],       [test "$solaris_cc_x86_64" = yes])
AM_CONDITIONAL([COND_SOLARIS_CC_I386],         [test "$solaris_cc_i386" = yes])
AM_CONDITIONAL([COND_SOLARIS_CC_SPARC32],      [test "$solaris_cc_sparc32" = yes])
#AM_CONDITIONAL([COND_SOLARIS_CC_SPARC64],      [test "$solaris_cc_sparc64" = yes])
AM_CONDITIONAL([COND_HPUX_ACC_PARISC32],       [test "$hpux_acc_parisc32" = yes])
#AM_CONDITIONAL([COND_HPUX_ACC_PARISC64],       [test "$hpux_acc_parisc64" = yes])
AM_CONDITIONAL([COND_HPUX_ACC_64BIT_IA64],     [test "$hpux_acc_64bit_ia64" = yes])
#AM_CONDITIONAL([COND_HPUX_ACC_32BIT_IA64],     [test "$hpux_acc_3b2it_ia64" = yes])

# find prefix
if test -n "${exec_prefix}" -a "${exec_prefix}" != NONE; then
   myprefix="${exec_prefix}"
elif test -n "${prefix}" -a "${prefix}" != NONE; then
   myprefix="${prefix}"
else
   myprefix=${ac_default_prefix}
fi

if test "$enable_profile" = yes; then
   QORE_LIB_CXXFLAGS="$QORE_LIB_CXXFLAGS -g -pg"
   QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS -g -pg"
   BUILD_TYPE=dev
elif test "$enable_debug" = yes; then
   QORE_LIB_CXXFLAGS="$QORE_LIB_CXXFLAGS -g"
   QORE_LIB_LDFLAGS="$QORE_LIB_LDFLAGS -g"
   BUILD_TYPE=dev
else
   BUILD_TYPE=prod
fi
AC_SUBST([BUILD_TYPE])

# set up flags
QORE_LIB_CXXFLAGS="`echo $QORE_LIB_CXXFLAGS $CXXFLAGS -lm|sed 's/  / /g'`"
AC_SUBST([QORE_LIB_CXXFLAGS])

QORE_LIB_LDFLAGS="`echo $QORE_LIB_LDFLAGS $LDFLAGS -lm|sed 's/  / /g'`"
AC_SUBST([QORE_LIB_LDFLAGS])
QORE_LIB_CPPFLAGS="`echo $QORE_LIB_CPPFLAGS $CPPFLAGS -D_QORE_LIB_INTERN|sed 's/  / /g'`"
QORE_LIB_CPPFLAGS="$QORE_LIB_CPPFLAGS -DMODULE_DIR=\\\"${myprefix}/lib${LIBSUFFIX}/${mypkglibdir}\\\""
AC_SUBST([QORE_LIB_CPPFLAGS])
if test -n "$QORE_LIB_CXXFLAGS"; then
   QORE_LIB_CFLAGS="$QORE_LIB_CPPFLAGS $QORE_LIB_CXXFLAGS"
else
   QORE_LIB_CFLAGS="$QORE_LIB_CPPFLAGS"
fi

# save compiler settings in config file
AC_DEFINE_UNQUOTED([QORE_LIB_CXX], "$CXX", [c++ compiler used])
AC_DEFINE_UNQUOTED([QORE_LIB_CPPFLAGS], "$QORE_LIB_CPPFLAGS", [preprocessor flags])
AC_DEFINE_UNQUOTED([QORE_LIB_CXXFLAGS], "$QORE_LIB_CXXFLAGS", [c++ compiler flags])
AC_DEFINE_UNQUOTED([QORE_LIB_CFLAGS],   "$QORE_LIB_CFLAGS", [c++ compiler flags])
AC_DEFINE_UNQUOTED([QORE_LIB_LDFLAGS],  "$QORE_LIB_LDFLAGS", [linker flags])
AC_DEFINE_UNQUOTED([QORE_BUILD_HOST],   "`uname -a`", [Qore build host info])

AC_CONFIG_FILES([Makefile lib/Makefile])
AC_OUTPUT

echo "*** BUILTIN FEATURES ***"
printf "%-35s: %s %s" library "$OS" "$cpu_family"
if test "$enable_64bit" = "yes"; then
   printf " (64-bit)\n"
else
   printf " (32-bit)\n"
fi

printf "%-35s: %s %s\n" "module directory" "${myprefix}/lib${LIBSUFFIX}/${mypkglibdir}"

show_library_feature() {
   printf "%-35s: " "$1"
   if test "$2" = "yes"; then
      printf "%-4s" yes
   else
      printf "%-4s" no
   fi
   if test -n "$3"; then
      printf " (%s)" $3
   fi
   echo
}

show_library_feature optimizations $enable_optimization
show_library_feature "single compilation unit" $enable_single_compilation_unit
echo "*** DEBUG OPTIONS (i.e. performance penalty) ***"
show_library_feature profiling $enable_profile
show_library_feature debug $enable_debug
show_library_feature "runtime thread stack tracing" $enable_runtime_thread_stack_trace

echo
echo "*** MODULES DELIVERED SEPARATELY - SEE 'README-MODULES' FOR MORE INFO ***"

# hack to use our libtool if on HP-UX to enable static libs to be linked in to modules
# also to allow 64-bit libraries to be linked to modules
if test "$OS" = "HP-UX" ; then
   # backup generated libtool
   if test ! -e libtool.orig ; then
      cp libtool libtool.orig
   fi
   # remove references to -ldl in libtool
   sed "s/-ldl//g" libtool > libtool.tmp
   # ensure static libs can be linked to modules
   sed "s/valid_a_lib=no/valid_a_lib=yes/g" libtool.tmp > libtool.tmp.1
   # ensure that valid 64-bit libraries are not recognized as invalid
   sed "s/deplibs_check_method=.*/deplibs_check_method=pass_all/g" libtool.tmp.1 > libtool
   # delete temporary files
   rm -f libtool.tmp libtool.tmp.1
fi

