#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires ../qlib/SqlUtil.qm
%requires ../qlib/OracleSqlUtil.qm
%requires ../qlib/PgsqlSqlUtil.qm
#/;

%new-style

%require-types

%enable-all-warnings

const GenericOptions = (
    "replace": True,
    );

const IndexOptions = (
    "driver": (
        "oracle": (
            "index_tablespace": "omq_index",
            "compute_statistics": True,
        ),
        "pgsql": (
            "index_tablespace": "omq_index",
            ),
        ),
    );

const ColumnOptions = (
    "driver": (
        "oracle": (
            "character_semantics": True,
        ),
    ),
    );

# tables
const Tables = (
    "system_properties": (
        "columns": (
            "domain": (
                "qore_type": Type::String, 
                "size": 240,
                "notnull": True,
            ),
            "keyname": (
                "qore_type": Type::String,
                "size": 240,
                "notnull": True,
            ),
            "value": (
                "qore_type": Type::String,
                "size": 4000,
            ),
            "created": (
                "qore_type": Type::Date,
                "notnull": True,
                "driver": (
                    "oracle": (
                        "native_type": "date",
                    ),
                ),
            ),
            "modified": (
                "qore_type": Type::Date,
                "driver": (
                    "oracle": (
                        "native_type": "date",
                    ),
                ),
            ),
        ),
        "primary_key": ("name": "pk_system_properties", "columns": ("domain", "keyname")),
        "indexes": (
            "sk_system_properties_domain": ("columns": "domain"),

            "driver": (
                "oracle": (
                    "pk_system_properties": ("columns": ("domain", "keyname"), "unique": True),
                ),
            ),
        ),
        "driver": (
            "pgsql": (
                "functions": (
                    "trig_system_properties()": "returns trigger language plpgsql as $function$
begin
  if (tg_op = 'INSERT') then
    if new.created is null then
      select current_timestamp into new.created;
    end if;
  end if;
  if new.modified is null then
    select current_timestamp into new.modified;
  end if;
  return new;
end;
$function$", #",
                ),
            ),
        ),
        "triggers": (
            "driver": (
                "oracle": (
                    "trig_system_properties": "BEFORE INSERT OR UPDATE ON SYSTEM_PROPERTIES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
begin
  if inserting then
    if :new.created is null then
      :new.created := sysdate;
    end if;
  end if;
  --
  if :new.modified is null or :new.modified = :old.modified then
    :new.modified := sysdate;
  end if;
end;",
                ),
                "pgsql": (
                    "trig_system_properties": "before insert or update on system_properties for each row execute procedure trig_system_properties()",
                ),
                "mysql": (
                ),
            ),
        ),
    ),
    );

main();

string sub get_dsstr() {
    switch (gethostname()) {
        case =~ /prague.qoretechnologies.com$/: 
            #return "oracle:omq/omq@xbox";
            return "pgsql:omq/omq@omq";
        
        case "quark":
            return "oracle:omq/omq@el6";
    }

    throw "HOST-ERROR", sprintf("no configuration for host %y", gethostname());
}

sub main() {
    hash all_options = combine_options(IndexOptions);

    # get db connection
    Datasource ds(get_dsstr());

    # get Database object
    Database db(ds);

    # first build tables    
    foreach string name in (Tables.keyIterator()) {
        hash th = Tables{name};

        Table t(ds, th, name, all_options);
        
        #printf("%s\n", t.getCreateSqlString(all_options));

        Table t2(ds, name);
        string sql = t2.getAlignSqlString(t, all_options);
        if (sql)
            printf("%s\n", sql);
    }
    
}

