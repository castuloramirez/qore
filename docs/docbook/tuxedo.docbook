<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="Tuxedo_Module">
  <title>Tuxedo Module</title>



    <para>The Tuxedo module...</para>

  <sect2 id="TuxedoAdapter_Class">
    <title>TuxedoAdapter Class</title>
    <para>The TuxedoAdapter class is used to communicate with Tuxedo servers. Detailed description of Tuxedo interface can be found on <ulink url="http://edocs.bea.com/tuxedo/tux91/interm/ref.htm">Tuxedo 9.1 reference</ulink> and related pages. TuxedoAdapter class provides multithread safe wrapper over messaging part of Tuxedo API. Constants from Tuxedo API (like <code>TPAPPAUTH</code>) are all exposed in Tuxedo namespace.</para>

    <table>
      <title>TuxedoAdapter Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_constructor">TuxedoAdapter::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the Tuxedo adapter based on parameters passed as a hash.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_destructor">TuxedoAdapter::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the TuxedoAdapter object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_copy">TuxedoAdapter::copy()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_call">TuxedoAdapter::call()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Calls a Tuxedo service, returns the reply.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Calls an Tuxedo service and returns immediatelly The reply can be retrieved later.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_waitForAsyncReply">TuxedoAdapter::waitForAsyncReply()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Waits for a reply for an asynchronous call.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_cancelAsyncCall">TuxedoAdapter::cancelAsyncCall()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Cancels reply from an asynchonous call.</para>
            </entry>
          </row>

         <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_enqueue">TuxedoAdapter::enqueue()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Puts data into a Tuxedo queue.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_dequeue">TuxedoAdapter::dequeue()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Retrieves data from a Tuxedo queue.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_joinConversation">TuxedoAdapter::joinConversation()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Opens new communication with a Tuxedo service in conversation mode.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_breakConversation">TuxedoAdapter::breakConversation()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Forcibly closes a communication in conversation mode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_sendConversationData">TuxedoAdapter::sendConversationData()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends data to a Tuxedo service in conversation mode.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_receiveConversationData">TuxedoAdapter::receiveConversationData()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Retrieves data from a Tuxedo service in conversation mode.</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <link linkend="TuxedoAdapter_setStringEncoding">TuxedoAdapter::setStringEncoding()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sets the string encoding for the object; any strings serialized and deserialized with this object will be tagged with this character encoding.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>


    <sect3 id="TuxedoAdapter_constructor">
      <title>TuxedoAdapter::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the TuxedoAdapter instance based on the passed settings.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::constructor(<replaceable>settings</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Arguments for TuxedoAdapter::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>

            <row>
              <entry>
                <para>Tuxedo connection settings</para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>The passed settings (Hash) could and should to set up all relevant parameters to connect a Tuxedo server. The environment variables, used by <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">Tuxedo C API</ulink> don't need to be set explicitly. They will be examined if and only if their equivalent is not present among the settings. See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details. All recognized settings are listed in the table <link linkend="TuxedoAdapter_constructor_settings">TuxedoAdapter::constructor settings</link> bellow. 

The settings names are case insensitive. Unrecognized settings result in the exception <code>TUXEDO-ADAPTER-CONSTRUCTOR</code>. 
At least <code>TUXDIR</code> and <code>TUXCONFIG</code> settings need to be specified explicitly (either through the hash or with environment variables). For settings not set explicitly defaults are used.
</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The newly create TuxedoAdapter object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Exceptions thrown by TuxedoAdapter::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-CONSTRUCTOR</code>
                </para>
              </entry>
              <entry>
                <para>Invalid or unrecognized value of settings</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


    <sect3 id="TuxedoAdapter_constructor_settings">
      <table>
        <title>Settings for TuxedoAdapter::constructor()</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <thead>
            <row>
              <entry><para>Value</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
              <entry><para>Default</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>TUXDIR</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Full path to the directory where Tuxedo is installed. 
              Environment variable TUXDIR is used if this value is not present among the settings</para></entry>
              <entry><para>required explicitly</para></entry>
            </row>
            <row>
              <entry><para><replaceable>TUXCONFIG</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Full path to the configuration file used by this TuxedoAdapter instance.
              Environment variable TUXCONFIG is used if this value is not present among the settings</para></entry>
              <entry><para>required explicitly</para></entry>
            </row>
            <row>
              <entry><para><replaceable>UserName</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>User name to connect the Tuxedo server. 
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>Password</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Password required to connect the Tuxedo server.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>ClientName</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Client name to connect the Tuxedo server.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>GroupName</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Group name to connect the Tuxedo server.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>BinaryConnectionData</replaceable></para></entry>
              <entry><para>Binary</para></entry>
              <entry><para>Binary data that are passed to the Tuxedo server during connection.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink> for details.
              </para></entry>
              <entry><para>no data passed</para></entry>
            </row>
            <row>
              <entry><para><replaceable>ConnectionFlags</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags passed to the 
               <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit()</ulink>. 
               The flag <code>TPMULTICONTEXT</code> (the application may have several connection at the same time) 
               is set automatically
              </para></entry>
              <entry><para><code>TPMULTICONTEXT</code> (always set)</para></entry>
            </row>
            <row>
              <entry><para><replaceable>StringEncoding</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Encoding used for all sent and retrieved strings.
              </para></entry>
              <entry><para>'UTF8'</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForCall</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_call">TuxedoAdapter::call()</link> does not
              specify them explicitly. If this settings is not present the  
              <link linkend="TuxedoAdapter_call">TuxedoAdapter::call()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c26.htm">tpcall() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForAsyncCall</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c20.htm">tpacall() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForWaitForAsyncReply</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_waitForAsyncReply">TuxedoAdapter::waitForAsyncReply()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_waitForAsyncReply">TuxedoAdapter::waitForAsyncReply()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c52.htm">tpgetrply() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForPostEvent</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_postEvent">TuxedoAdapter::postEvent()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_postEvent">TuxedoAdapter::postEvent()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c62.htm">tppost() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForJoinConversation</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_joinConversation">TuxedoAdapter::joinConversation()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_joinConversation">TuxedoAdapter::joinConversation()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c32.htm">tpconnect() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForSendConversationData</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_sendConversationData">TuxedoAdapter::sendConversationData()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_sendConversationData">TuxedoAdapter::sendConversationData()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c70.htm">tpsend() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForReceiveConversationData</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_receiveConversationData">TuxedoAdapter::receiveConversationData()</link> does not
              specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_receiveConversationData">TuxedoAdapter::receiveConversationData()</link> requires the 'flags' parameter.
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c64.htm">tprecv() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForEnqueue</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_enqueue">TuxedoAdapter::enqueue()</link> does not               specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_enqueue">TuxedoAdapter::enqueue()</link> requires the 'flags' parameter.
               See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c38.htm">tpenqueue() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFlagsForDequeue</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Flags used as a default when the <link linkend="TuxedoAdapter_dequeue">TuxedoAdapter::dequeue()</link> does not               specify them explicitly. If this settings is not present the
              <link linkend="TuxedoAdapter_dequeue">TuxedoAdapter::dequeue()</link> requires the 'flags' parameter.
               See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c36.htm">tpdequeue() documentation</ulink> for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>               
              <entry><para><replaceable>DefaultFmlType</replaceable></para></entry>
              <entry><para>String (either 'FML' or 'FML32')</para></entry>
              <entry><para>Selects into which <ulink url="http://edocs.bea.com/tuxedo/tux91/interm/atmiprog.htm#fml">FML</ulink>
              type Hash data will be serialized if no direct hint is given. If this settings is not present then any function
              serializing Hash data requires explicit hint about the result FML type.
              </para></entry>
              <entry><para>'FML32'</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFmlDescriptionFile</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>If used it should be full file path to a text file formatted according to 
              <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML description file specification</ulink>.
              This file should describe all FML data used by this instance of TuxedoAdapter. The file is read
              only during construction of the adapter. This settings is mutually exclusive with 
              <code>DefaultFmlDescription</code> (description provided in a Hash).
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFmlDescription</replaceable></para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Description of all FML data used by this instance of TuxedoAdapter.
              The key is FML item name, the value is integer (e.g. <code>FLD_STRING</code>) specifying the type.
              This settings is mutually exclusive with DefaultFmlDescriptionFile (decsription provided in a file).
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML description file specification</ulink>
              for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFmlDescriptionBase</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Base offset of the FML items specified by the DefaultFmlDescription.
              Used only when DefaultFmlDescription is also specified. For details see
              <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML description file specification</ulink>.
              </para></entry>
              <entry><para>0</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFml32DescriptionFile</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>If used it should be full file path to a text file formatted according to
              <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML32 description file specification</ulink>.
              This file should describe all FML32 data used by this instance of TuxedoAdapter. The file is read
              only during construction of the adapter. This settings is mutually exclusive with
              <code>DefaultFml32Description</code> (description provided in a Hash).
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFml32Description</replaceable></para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Description of all FML32 data used by this instance of TuxedoAdapter.
              The key is FML32 item name, the value is integer (e.g. <code>FLD_STRING</code>) specifying the type.
              This settings is mutually exclusive with DefaultFml32DescriptionFile (decsription provided in a file).
               See <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML32 description file specification</ulink>
              for details.
              </para></entry>
              <entry><para>n/a</para></entry>
            </row>
            <row>
              <entry><para><replaceable>DefaultFml32DescriptionBase</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Base offset of the FML32 items specified by the DefaultFmlDescription.
              Used only when DefaultFml32Description is also specified. For details see
               <ulink url="http://edocs.bea.com/tuxedo/tux91/fml/fml04.htm">FML32 description file specification</ulink>.
              </para></entry>
              <entry><para>0</para></entry>
            </row>
            <row>
              <entry><para><replaceable>Priority</replaceable></para></entry>
              <entry><para>Integer (1..100)</para></entry>
              <entry><para>Default Priority used for communication with Tuxedo servers. 
              <link linkend="TuxedoAdapter_setPriority">TuxedoAdapter::setPriority()</link> can be used later
              to change the priority again. See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c77.htm">tpspprio() documentation</ulink>
              for details.
              </para></entry>
              <entry><para>set in configuration file</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WhenCommitFinishes</replaceable></para></entry>
              <entry><para>String 'AfterDataAreLogged' or 'AfterTwoPhaseCompletes'</para></entry>
              <entry><para>Specifies which mechanism is used when Tuxedo transaction (NOT TX transaction) commits.
              The settings could be changed later by 
              <link linkend="TuxedoAdapter_finishCommitAfterDataLogged">TuxedoAdapter::finishCommitAfterDataLogged()</link>
              or <link linkend="TuxedoAdapter_finishCommitAfterTwoPhaseCompletes">TuxedoAdapter::finishCommitAfterTwoPhaseCompletes()</link>.
              See <ulink src="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c68.htm">tpscmt() documentation</ulink> for details.

              </para></entry>
              <entry><para>set in configuration file</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WhenTxCommitFinishes</replaceable></para></entry>
              <entry><para>String 'AfterDataAreLogged' or 'AfterTwoPhaseCompletes'</para></entry>
              <entry><para>Specifies which mechanism is used when X/Open (TX) transaction commits.
              The settings could be changed later by
              <link linkend="TuxedoAdapter_finishTxCommitAfterDataLogged">TuxedoAdapter::finishTxCommitAfterDataLogged()</link>
              or <link linkend="TuxedoAdapter_finishTxCommitAfterTwoPhaseCompletes">TuxedoAdapter::finishTxCommitAfterTwoPhaseCompletes()</link>.
              See <ulink src="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c107.htm">tx_set_commit_return() documentation</ulink>
              for details.

              </para></entry>
              <entry><para>'AfterTwoPhaseCompletes'</para></entry>
            </row>
            <row>
              <entry><para><replaceable>AreTxTransactionsChained</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Specifies whether a new X/Open (TX) transaction starts automatically after commit or rollback
              (when value is True) or whether it needs to be started explicitly by
              <link linkend="TuxedoAdapter_beginTxTransaction">TuxedoAdapter::beginTxTransaction()</link> (when value is False).
              See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c108.htm">tx_set_transaction_control() documentation</ulink>
              for details.
              </para></entry>
              <entry><para>False</para></entry>
            </row>

            <row>
              <entry><para><replaceable>WSENVFILE</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSENVFILE environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSNADDR</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSNADDR environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSFADDR</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSFADDR environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSFRANGE</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSFRANGE environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSDEVICE</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSDEVICE environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSTYPE</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSTYPE environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>WSRPLYMAX</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of WSRPLYMAX environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>TMMINENCRYPTBITS</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of TMMINENCRYPTBITS environment variable described in
              <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
            <row>
              <entry><para><replaceable>TMMAXENCRYPTBITS</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>Equivalent of TMMAXENCRYPTBITS environment variable described in
               <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c55.htm">tpinit() documentation</ulink>.
              </para></entry>
              <entry><para>empty string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>


    </sect3>

    <sect3 id="TuxedoAdapter_destructor">
      <title>TuxedoAdapter::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the TuxedoAdapter object. All pending asynchronous calls are cancelled, all opened conversations are forcibly stopped, the connection to Tuxedo is terminated.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::destructor()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>

    <sect3 id="TuxedoAdapter_copy">
      <title>TuxedoAdapter::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::copy()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::copy()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TuxedoAdapter::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>


    <sect3 id="TuxedoAdapter_call">
      <title>TuxedoAdapter::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Invokes a Tuxedo service, waits for the reply and converts it into returned data structure. 
            See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c26.htm">tpcall() documentation</ulink> for details.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter:call(<replaceable>service name, data [, flags]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Arguments for TuxedoAdapter::call()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>service name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>As defined in configuration file (TUXCONFIG).</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>data</replaceable>
                </para>
              </entry>
              <entry>
                <para>NOTHING,String, Binary or Hash</para>
              </entry>
              <entry>
                <para>Data serialized into the Tuxedo format and passed to the service. 
                Hash is converted either into FML or FML32, based on the hint in 'flags' 
                or on the settings 'DefaultFmlType' passed into the constructor.</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <replaceable>[flags]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or Hash</para>
              </entry>
              <entry>
                <para>If the value is Integer then it is equivalent with flags used by the
                <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c26.htm">tpcall()</ulink>. Hash value may contrain following items:
                 bool value 'use_fml32' (whether to process Hash data as FML or FML32),  
                 integer value 'flags' (the same as for tpcall()) and
                 string value 'DefaultReturnedDataType' (allowed values 'CARRAY', 'STRING', 'FML' or 'FML32') giving a hint
                 of output data type.  If the TuxedoAdapter constructor did not specified 'DefaultFlagsForCall' settings 
                 then the 'flags' needs to be present (either as the Integer or part of the Hash).
                </para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, Binary or Hash</para>
              </entry>
              <entry>
                <para>Received reply converted into a Qore datatype. FML and FML32 are encoded into the Hash.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TuxedoAdapter::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-CALL</code>
                </para>
              </entry>
              <entry>
                <para>Invalid parameter.</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash parameter has a member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
    </sect3>


    <sect3 id="TuxedoAdapter_asyncCall">
      <title>TuxedoAdapter::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Invokes a Tuxedo service asynchronously, without waiting for the reply. 
            See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c20.htm">tpacall() documentation</ulink> 
            for details. To retrieve the reply use 
            <link linkend="TuxedoAdapter_waitForAsyncreply">TuxedoAdapter::waitForAsyncReply()</link> 
            or cancel the pending reply with <link linkend="TuxedoAdapter_cancelAsyncCall">TuxedoAdapter::cancelAsyncCall()</link>.
            The same service may be called either synchronously with <link linkend="TuxedoAdapter_call">TuxedoAdapter::call()</link> 
            or asynchronously.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter:asyncCall(<replaceable>service name, data [, flags]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::asyncCall()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>service name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>As defined in configuration file (TUXCONFIG).</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>data</replaceable>
                </para>
              </entry>
              <entry>
                <para>NOTHING, String, Binary or Hash</para>
              </entry>
              <entry>
                <para>Data serialized into the Tuxedo format and passed to the service.
                Hash is converted either into FML or FML32, based on the hint in 'flags'
                or on the settings 'DefaultFmlType' passed into the constructor.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <replaceable>[flags]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or Hash</para>
              </entry>
              <entry>
                <para>
                 If  the value is Integer then it is equivalent with flags used by the
                 <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c68.htm">tpacall()</ulink>. 
                 Hash value may contrain following items:
                 bool value 'use_fml32' (whether to process Hash data as FML or FML32),
                 integer value 'flags' (the same as for tpacall()) and

                 If the TuxedoAdapter constructor did not specified 'DefaultFlagsForAsyncCall' settings
                 then the 'flags' needs to be present (either as the Integer or part of the Hash).
                </para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::asyncCall()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Handle used to later retrieve the pending reply with
                <link linkend="TuxedoAdapter_waitForAsyncReply">TuxedoAdapter::waitForAsyncReply()</link>.
                To cancel the call <link linkend="TuxedoAdapter_cancelAsyncCall">TuxedoAdapter::cancelAsyncCall()</link>. 
                All pending asynchronous calls are automatically cancelled when the TuxedoAdapter instance is destroyed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TuxedoAdapter::asyncCall()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-ASYNC-CALL</code>
                </para>
              </entry>
              <entry>
                <para>Invalid parameter.</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
    </sect3>

    <sect3 id="TuxedoAdapter_waitForAsyncReply">
      <title>TuxedoAdapter::waitForAsyncReply()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Waits for reply started by 
            <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link> 
            and not cancelled by 
            <link linkend="TuxedoAdapter_cancelAsyncCall">TuxedoAdapter::cancelAsyncCall()</link>. 
            See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c52.htm">tpgetrply() documentation</ulink> 
            for details.
            </para>
          </listitem>
        </varlistentry>
       </variablelist>

      <table>
        <title>Arguments for TuxedoAdapter::waitForAsyncReply()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>handle</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The value returned by 
                 <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link> and not yet cancelled 
                 or used in another waitForAsyncReply().
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[flags]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or Hash</para>
              </entry>
              <entry>
                <para>Integer with values as described in 
                <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c20.htm">tpacall() documentation</ulink>. 
                The Hash may contain: string value 'DefaultReturnedDataType' (valid values are 'CARRAY',
                'STRING', 'FML', 'FML32') which provides hint about output data type (Tuxedo may ignore
                this hint) and integer 'flags' (the same as for tpgetrply()). 

                If the TuxedoAdapter constructor did not specified 'DefaultFlagsForwaitForAsyncReply' settings 
                then the 'flags' needs to be present (either as the integer or part of the hash).
                </para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::waitForAsyncReply()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, Binary or Hash</para>
              </entry>
              <entry>
                <para>Received reply converted into a Qore type.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TuxedoAdapter::waitForAsyncReply()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-WAIT-FOR-ASYNC-REPLY</code>
                </para>
              </entry>
              <entry>
                <para>Missing or invalid parameter.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>

    </sect3>

    <sect3 id="TuxedoAdapter_cancelAsyncCall">
      <title>TuxedoAdapter::cancelAsyncCall()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Cancels asynchronous call to a Tuxedo service started by the 
            <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link> 
            See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c27.htm">tpcancel() documentation</ulink> 
            for details. When TuxedoAdapter object is destroyed all pending asynchronous calls are cancelled automatically.
            </para>
           </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::cancelAsyncCall(<replaceable>handle</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::cancelAsyncCall()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>handle</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The value returned by 
                <link linkend="TuxedoAdapter_asyncCall">TuxedoAdapter::asyncCall()</link>, 
                neither cancelled nor used by a 
                <link linkend="TuxedoAdapter_waitForAsyncReply">TuxedoAdapter::waitForAsyncReply()</link>.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Return Values for TuxedoAdapter::cancelAsyncCall()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method does not return any value.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Exceptions thrown by TuxedoAdapter::cancelAsyncCall()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-CANCEL-ASYNC-CALL</code>
                </para>
              </entry>
              <entry>
                <para>Missing or invalid parameter.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
    </sect3>

   <sect3 id="TuxedoAdapter_enqueue">
      <title>TuxedoAdapter::enqueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Puts data into a Tuxedo queue. For details see 
            <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c38.htm">tpenqueue() documentation</ulink>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
           <programlisting>TuxedoAdapter::enqueue(<replaceable>queue space, queue name, data [, flags]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::enqueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>queue space</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Queue identifier #1.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>queue name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Queue identifier #2.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>data</replaceable>
                </para>
              </entry>
              <entry>
                <para>NOTHING, String, Binary or Hash</para>
              </entry>
              <entry>
                <para>Data serialized into the Tuxedo format and put to the queue.
                Hash is converted either into FML or FML32, based on the hint in 'flags'
                or on the settings 'DefaultFmlType' passed into the constructor.
                </para>
              </entry>
            </row>

           <row>
              <entry>
                <para>
                  <replaceable>[flags]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or Hash</para>
              </entry>
              <entry>
                <para>
                Integer with values as described in
                <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c38.htm#1042179">tpenqueue() documentation</ulink>.
                The Hash may contain: bool value 'use_fml32' (hint whether Hash data are converted into FML or FML32),
                integer value 'flags' (the same as for tpenqueue()), integer queue control parameters 
                'queue_control_flags, 'queue_control_deq_time', 'queue_control_priority', 'queue_control_exp_time', 
                'queue_control_delivery_qos', queue_control_reply_qos', 'queue_control_urcode' and
                binary queue parameters queue_control_msgid', 'queue_control_corrid'. See tpenqueue() 
                documentation for details on queue control parameters.

                If the TuxedoAdapter constructor did not specified 'DefaultFlagsForEnqueue' settings then the 'flags' 
                needs to be present (either as the integer or part of the hash).
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::enqueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Result of the operation is returned: binary value 'queue_control_msgid' contains generated ID for the 
                data put into the queue, integer value 'queue_control_diagnostic' contains diagnostic of the 
                tpenqueue() call. 
                See <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c38.htm">tpenqueue() documentation</ulink>
                 for details. </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
     <table>
        <title>Exceptions thrown by TuxedoAdapter::enqueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-ENQUEUE</code>
                </para>
              </entry>
              <entry>
                <para>Missing or invalid parameter.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
    </sect3>

   <sect3 id="TuxedoAdapter_dequeue">
      <title>TuxedoAdapter::dequeue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Retrieves data from a Tuxedo queue. For details see 
            <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c36.htm">tpdequeue() documentation</ulink>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
           <programlisting>TuxedoAdapter::dequeue(<replaceable>queue space, queue name, [, flags]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

     <table>
        <title>Arguments for TuxedoAdapter::dequeue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>queue space</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Queue identifier #1.</para>
              </entry>
            </row>
           <row>
              <entry>
                <para>
                  <replaceable>queue name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Queue identifier #2.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[flags]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or Hash</para>
              </entry>
              <entry>
                <para>
                Integer with values as described in
                <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c36.htm">tpdequeue() documentation</ulink>.
                The Hash may contain: integer value 'flags' (the same as for tpdequeue()), 
                integer queue control parameter 'queue_control_flags' and binary queue control parameters
                'queue_control_msgid' and 'queue_control_corrid'.

                If the TuxedoAdapter constructor did not specified 'DefaultFlagsForDequeue' settings then the 'flags' 
                needs to be present (either as the integer or part of the hash).
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::dequeue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Result of the call: data fetched from the queue (the value named 'data') 
                and integer queue control parameters 'queue_control_flags' and 'queue_control_priority'. See 
                <ulink url="http://edocs.bea.com/tuxedo/tux91/rf3c/rf3c36.htm">tpdequeue() documentation</ulink>
                for details.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

     <table>
        <title>Exceptions thrown by TuxedoAdapter::dequeue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ADAPTER-DEQUEUE</code>
                </para>
              </entry>
              <entry>
                <para>Missing or invalid parameter.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>TUXEDO-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>A Tuxedo call failed. Hash exception parameter has member 'error' with Tuxedo error code.</para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>
    </sect3>

    <sect3 id="TuxedoAdapter_setStringEncoding">
      <title>TuxedoAdapter::setStringEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the string encoding for the object; any strings deserialized with this object will be tagged with this character encoding.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::setStringEncoding(<replaceable>encoding</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::setStringEncoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>encoding</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The string encoding to use for this object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::setStringEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TuxedoAdapter::setStringEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TIBRVLISTENER-SETSTRINGENCODING-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing encoding parameter from method call</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>



    <sect3 id="TuxedoAdapter_getStringEncoding">
      <title>TuxedoAdapter::getStringEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the character encoding used for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TuxedoAdapter::getStringEncoding()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TuxedoAdapter::getStringEncoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TuxedoAdapter::getStringEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The character encoding used for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>
  </sect2>


</chapter>

