#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/DataProvider

%requires reflection

%exec-class DataProviderTest

public class DataProviderTest inherits QUnit::Test {
    constructor() : Test("DataProvider Test", "1.0") {
        addTestCase("test", \dataProviderTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    dataProviderTest() {
        Type type("hash<StatInfo>");
        AbstractDataProviderType datatype = AbstractDataProviderType::get(type);
        assertEq("hash<StatInfo>", datatype.getName());
        assertTrue(datatype.isAssignableFrom(HashType));
        assertTrue(IntType.isEqual(datatype.getField("size").getType().getValueType()));

        QoreSoftNumberType num1(".,");
        assertEq(1234.56n, num1.acceptsValue("1.234,56"));
        assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());

        QoreSoftNumberOrNothingType num2(".,");
        assertEq(1234.56n, num2.acceptsValue("1.234,56"));
        assertEq(NOTHING, num2.acceptsValue());
        assertEq(NOTHING, num2.acceptsValue(NULL));

        QoreSoftIntType int1();
        assertEq(1234, int1.acceptsValue("1234"));
        assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());

        QoreSoftIntOrNothingType int2();
        assertEq(1234, int2.acceptsValue("1234"));
        assertEq(NOTHING, int2.acceptsValue());
        assertEq(NOTHING, int2.acceptsValue(NULL));

        SomethingDataType something();
        assertEq(1, something.acceptsValue(1));
        assertTrue(something.isAssignableFrom(IntType));
        assertFalse(something.isAssignableFrom(new Type("nothing")));

        hash<QoreSoftDateOptionInfo> opts({
            "format": "DD.MM.YYYY",
            "input_timezone": new TimeZone("America/Chicago"),
            "output_timezone": new TimeZone("UTC"),
        });
        QoreSoftDateType date1(opts);
        assertEq(2019-09-13T05:00:00Z, date1.acceptsValue("13.09.2019"));
        assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());

        QoreSoftDateOrNothingType date2(opts);
        assertEq(2019-09-13T05:00:00Z, date2.acceptsValue("13.09.2019"));
        assertEq(NOTHING, date2.acceptsValue());
        assertEq(NOTHING, date2.acceptsValue(NULL));

        QoreSoftStringType str1();
        assertEq("123", str1.acceptsValue(123));
        assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue());

        QoreSoftStringOrNothingType str2();
        assertEq("123", str2.acceptsValue(123));
        assertEq(NOTHING, str2.acceptsValue());
        assertEq(NOTHING, str2.acceptsValue(NULL));
    }
}
