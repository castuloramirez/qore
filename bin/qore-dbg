#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%enable-all-warnings
%new-style
%allow-debugging

%requires qore >= 0.8.13
%requires HttpServer
#%requires ../qlib/HttpServer.qm
%requires ../qlib/DebugHandler.qm

%exec-class DebugWrapper

class DebugWrapper {
	private {
        hash opts = (
    		'help': 'h,help',
	    	'verbose': 'v,verbose',
            'listen': 'l,listen=s@',
        );
		bool verbose = False;
		Program pgm;
		DebugProgram dpgm;
		WebSocketDebugHandler wsHandler;
		HttpServer mServer;
	}

	constructor() {

		# first we need split debug args and program args, 'qore-dbg debug-args program-name program-args'
		# it is not trivial, e.g.
		#	qore-dbg -v -l xxx xxx     #the second xxx is program name
		#   qore-dbg -v -h xxx xxx     #the first xxx is program name
		#	qore-dbg -v --listen=xxx xxx     #the second xxx is program name
		#	qore-dbg -v --listen xxx xxx     #the second xxx is program name
		# GetOpt does not support such a parse function
		#
		GetOpt g(opts);
		list dargs = ();
		hash opt;
        string fileName;
		while (ARGV) {
			string s = shift ARGV;
			push dargs, s;
			if (s !~ /^\-/ ) {
				list a = dargs;
				opt = g.parse(\a);
				if (a) {
					# last arg is filename
					fileName = s;
					pop dargs;
					break;
				}
			} else if (s == '--') {
				fileName = s;
				pop dargs;
				break;
			}
		}
		try {
			opt = g.parse2(\dargs);
		} catch (hash ex) {
			stderr.printf("%s: %s\n", ex.err, ex.desc);
			help(-1);
		}

		if (opt.help) {
			help();
		}
        if (ARGV.empty()) {
            stderr.print("No input file\n");
            help(-1);
        }
        if (opt.verbose) {
            verbose = True;
        }
printf("opts:%N\n", opt);
exit(1);
        try {

			info("create DebugProgram");
			dpgm = new DebugProgram();
			info("create WebSocketDebugHandler");
#			wsHandler = new WebSocketDebugHandler(NOTHING, dpgm);

			info("create HttpServer");
			mServer = new HttpServer(\log(), \log(), verbose);
#			mServer.setHandler("ws-handler", "", NOTHING, wsHandler);
#			mServer.setDefaultHandler("ws-handler", wsHandler);
			if (opt.listen) {
				foreach string l in (opt.listen) {
					mServer.addListener(l);
				}
			} else {
				mServer.addListener(0);
			}

			info("create Program");
			pgm = new Program(PO_ALLOW_DEBUGGING); # PO_NO_INHERIT_USER_CLASSES to avoid importing DebugWrapper, but what about classes from modules ?
			# restore default options
			pgm.disableParseOptions(PO_NO_TOP_LEVEL_STATEMENTS | PO_NEW_STYLE);
			# update arguments without debug options
			pgm.setGlobalVarValue('ARGV', ARGV);
			pgm.define('Q_DEBUGGING', 1);
			dpgm.addProgram(pgm);

			string s;
s = "%new-style\nprintf(\"ARGV-PGM:%N\n\", ARGV);";
			if (fileName == '--') {
				pgm.setScriptPath('<stdin>');
				info("read stdin");
				s = stdin.read(-1, 0);
				info("%s", s);
			} else {
				pgm.setScriptPath(fileName);
				info("read file: %y", fileName);
				s = ReadOnlyFile::readTextFile(fileName);
			}
			info("parse code");
			*hash wh = pgm.parse(s, "debug", WARN_DEFAULT);
			if (wh) {
				log("warning: %N", wh);
			}
			info("run program");
			background pgm.run();
			sleep(1);  # to avoid OBJECT-ALREADY-DELETED: attempt to access member 'pgm' of an already-deleted object of class 'DebugWrapper'

        } catch (hash e) {
            stderr.printf("%s: %s\n", e.err, e.desc);
            exit(-1);
        }

	}

	private help(int exCode=1) {
        printf("usage: %s [options] <program> [<program params> ...]\n"
            "  where <file> is program being debugged, use \"--\" to get code from stdin\n"
            "  -v     verbose\n"
            "  -h     help\n"
            "  -l <addr:port>  listener address, multiple listeners is supported, default: %s\n"
			"  -l /<sock>      if begins with a \"/\" character then it is assumed to be a UNIX socket\n"
            "\n"
            "Example:\n"
            "  %s -v myfile.q -my -program params\n"
            "\n"
            ,
            get_script_name(),
            0,
            get_script_name()

        );
        exit(exCode);
    }

	private log(string fmt) {
	    vprintf(fmt, argv);
	}

	private info(string fmt) {
		if (verbose) {
		    vprintf(fmt+"\n", argv);
		}
	}

	public dummy() {
	}
}

