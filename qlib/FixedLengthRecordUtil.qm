# -*- mode: qore; indent-tabs-mode: nil -*-
# @file FixedLengthRecordUtil.qm Qore user module for working with files with fixed lines length

/*  FixedLengthRecordUtil.qm Copyright 2012 - 2014 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.11
%require-types
%enable-all-warnings
%new-style

module FixedLengthRecordUtil {
    version = "1.0";
    desc    = "user module for working with files with fixed length lines";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage FixedLengthRecordUtil Module

    @tableofcontents

    @section fixedlengthlinefileutilintro Introduction to the FixedLengthRecordUtil Module

    The %FixedLengthRecordUtil module provides functionality for parsing files with fixed length lines.

    To use this module, use \c "%requires FixedLengthRecordUtil" in your code.
    
    All the public symbols in the module are defined in the FixedLengthRecordUtil namespace

    Currently the module provides the following classes:
    - @ref FixedLengthRecordUtil::FixedLengthRecordAbstractIterator "FixedLengthRecordAbstractIterator": iterator class allowing for fixed-length-line data to be processed line by line on a record basis
    - @ref FixedLengthRecordUtil::FixedLengthRecordFileIterator "FixedLengthRecordFileIterator": iterator class allowing for fixed-length-line file to be processed line by line on a record basis
    - @ref FixedLengthRecordUtil::FixedLengthRecordDataIterator "FixedLengthRecordDataIterator": iterator class allowing for fixed-length-line strings to be processed line by line on a record basis
    - @ref FixedLengthRecordUtil::FixedLengthRecordAbstractWriter "FixedLengthRecordAbstractWriter": Fixed length line writer
    - @ref FixedLengthRecordUtil::FixedLengthRecordFileWriter "FixedLengthRecordFileWriter": Fixed length line writer into the file
    - @ref FixedLengthRecordUtil::FixedLengthRecordDataWriter "FixedLengthRecordDataWriter": Fixed length line writer into the variable

    <b>Example of reading:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthRecordUtil

list specs = (
    (
        "test" : bool sub (string line) {return line.length() == 7;},
        "cols" : (
            "col1" : 5,
            "col2" : 2,
        ),
    ),
    (
        "test" : bool sub (string line) {return line.length() == 10;},
        "cols" : (
            "col3" : 1,
            "col4" : 3,
            "col5" : 6,
        ),
    ),
);

FixedLengthRecordFileIterator i(file, specs);
while(i.next()) {
    printf("%s\n", i.getValue());
}
    @endcode

    <b>Example of writing:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthLineFileUtil

list data = (
    ("col1" : "aaaaa", "col2" : "bb"),
    ("col3" : "c", "col4" : "ddd", "col5" : "eeeeee"),
    ("col1" : "fffff", "col2" : "gg"),
);

list specs = (
    (
        "test" : bool sub (string line) {return line.length() == 7;},
        "cols" : (
            "col1" : 5,
            "col2" : 2,
        ),
    ),
    (
        "test" : bool sub (string line) {return line.length() == 10;},
        "cols" : (
            "col3" : 1,
            "col4" : 3,
            "col5" : 6,
        ),
    ),
);

FixedLengthRecordFileWriter w(file, specs);
w.write(data);
    @endcode

    @section fixedlengthlinefileutil_relnotes Release Notes

    @subsection fixedlengthlinefileutil_v1_0 Version 1.0
    - initial version of module
*/

#! the FixedLengthRecordUtil namespace contains all the definitions in the FixedLengthRecordUtil module
public namespace FixedLengthRecordUtil {
    #! Unix end of line character sequence (for new OS X too)
    public const EOL_UNIX = "\n";
    #! MS DOS/Windows end of line character sequence
    public const EOL_WIN = "\r\n";
    #! Old (pre-OSX) Macintosh end of line character sequence
    public const EOL_MACINTOSH = "\r";

    # helper list of end of line values
    const EOLS = (EOL_UNIX, EOL_WIN, EOL_MACINTOSH);
}

#! structured line iterator for abstract data allowing efficient "pipelined" processing
public class FixedLengthRecordUtil::FixedLengthRecordAbstractIterator {
    private {
        hash specs;
        hash opts; # encoding, eol, ignore-empty, timezone
    }

    #! creates the FixedLengthRecordAbstractIterator object
    /**
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(hash h, hash g) {
        specs = h;
        opts  = check_options(g);
    }

    abstract *string getLine();

    #! returns the current record as a hash
    /** @par Example:
        @code
my hash $h = $i.getValue();
        @endcode

        @return the current record as a hash
    */
    *hash getValue() {
        *string line = getLine();

        if (!line) {
            return NOTHING;
        }

        hash result = hash();

        *string type = call_function_args(specs.get_type, line);
        if (!type || !specs.types{type}) {
            throw 'NON-MATCHING-TYPE', 'Line type not detected correctly for line >' + line + '<';
        }
        int pos = 0;
        foreach string col in (specs.types{type}.keys()) {
            hash field = specs.types{type}{col};
            if (!field.timezone) {
                field.timezone = opts.timezone;
            }
            result{col} = retype(line.substr(pos, field.length), field);
            pos += field.length;
        }
        return result;
    }

    private hash check_options(hash opts) {
        string errname = 'FIXED-LENGTH-RECORD-ITERATOR-ERROR';

        foreach my hash i in (opts.pairIterator()) {
            switch (i.key) {
                case "eol": {
                    if (i.value.typeCode() != NT_STRING) {
                        throw errname, sprintf("expecting a string value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    if (!inlist(i.value, EOLS)) {
                        throw errname, sprintf("expecting a known end of line value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    opts.eol = i.value;
                    break;
                }
                case "timezone": {
                    opts.timezone = new TimeZone(opts.timezone);
                    break;
                }
                case "ignore-empty": {
                    opts."ignore-empty" = boolean(opts."ignore-empty");
                    break;
                }
                case "encoding": {
                    # TODO: check encoding name here
                    break;
                }
                default: {
                    throw errname, sprintf("unknown option %y passed to FixedLengthRecordAbstractIterator::constructor()", i.key);
                }
            }
        }

        return opts;
    }
}

#! structured line iterator for fixed-length-line files allowing efficient "pipelined" processing of fixed-length-line data
public class FixedLengthRecordUtil::FixedLengthRecordFileIterator inherits private FixedLengthRecordUtil::FixedLengthRecordAbstractIterator, FileLineIterator {
    private {
        string file;
    }

    #! creates the FixedLengthRecordFileIterator object
    /**
    @param f file to read
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(string f, hash h, hash g) : FixedLengthRecordUtil::FixedLengthRecordAbstractIterator(h, g), FileLineIterator(f, g.encoding.typeCode() == NT_STRING ? g.encoding : NOTHING, g.eol.typeCode() == NT_STRING ? g.eol : NOTHING) {
        file  = f;
    }

    #! returns a line
    /** @return the current line
    */
    private string getLine() {
        return FileLineIterator::getValue();
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        bool status = FileLineIterator::next();
        if (opts{"ignore-empty"}) {
            while (status && getLine() == '') {
                status = FileLineIterator::next();
            }
        }
        return status;
    }
}

#! structured line iterator for fixed-length-line strings allowing efficient "pipelined" processing of fixed-length-line data
public class FixedLengthRecordUtil::FixedLengthRecordDataIterator inherits private FixedLengthRecordUtil::FixedLengthRecordAbstractIterator {
    private {
        int position;
        int max_index;

        list lines;
        int lines_pos;

        string data;
    }

    #! creates the FixedLengthLineFileLineIterator object
    /**
    @param r string to process
    @param h specification of fixed-length-line file   
    @param g global options
    */
    constructor(string r, hash h, hash g) : FixedLengthRecordUtil::FixedLengthRecordAbstractIterator(h, g) {
        data  = r;
    }

    private create_lines() {
        string separator = opts.eol ? opts.eol : "\n";
        lines = data.split(separator);
        lines_pos = 0;
    }

    private *string getLine() {
        if (!lines) {
            create_lines();
        }

        return lines[lines_pos];
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        lines_pos++;
        if (!lines) {
            create_lines();
        }
        bool status = boolean(getLine() !== NOTHING);
        if (opts{"ignore-empty"}) {
            while (status && getLine() == "") { # skip empty lines
                lines_pos++;
                status = boolean(getLine() !== NOTHING);
            }
        }
        return status;
    }
}



#! structured writer
public class FixedLengthRecordUtil::FixedLengthRecordAbstractWriter {
    private {
        hash specs;
        hash opts; # eol
    }

    #! creates the FixedLengthRecordAbstractWriter object
    /**
    @param h specification of fixed-length-line file   
    @param g global options
    */
    constructor(hash h, hash g) {
        specs = h;
        opts  = check_options(g);
    }

    private bool check_item_type_combination(hash item, string type, string line_candidate) {
        hash type_specs = specs.types{type};
        # not this line if columns count mismatch
        if (elements type_specs.keys() != elements item.keys()) {
            return False;
        }

        # not this line type if columns sizes mismatch
        bool skip = False; # TODO: I don't like this :-(
        foreach string col in (type_specs.keys()) {
            if (!item{col} || string(item{col}).length() != type_specs{col}{"length"}) {
                skip = True;
            }
        }
        if (skip) {
            return False;
        }

        # not this line type if check fails
        if (type != call_function_args(specs.get_type, line_candidate)) {
            return False;
        }

        return True;
    }

    private hash check_options(hash opts) {
        string errname = 'FIXED-LENGTH-RECORD-WRITER-ERROR';

        foreach my hash i in (opts.pairIterator()) {
            switch (i.key) {
                case "eol": {
                    if (i.value.typeCode() != NT_STRING) {
                        throw errname, sprintf("expecting a string value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    if (!inlist(i.value, EOLS)) {
                        throw errname, sprintf("expecting a known end of line value to option %y; got %y (type %s) instead", i.key, i.value, i.value.type());
                    }
                    opts.eol = i.value;
                    break;
                }
                default: {
                    throw errname, sprintf("unknown option %y passed to FixedLengthRecordAbstractIterator::constructor()", i.key);
                }
            }
        }

        return opts;
    }
}


#! writer for fixed-length-line files
public class FixedLengthRecordUtil::FixedLengthRecordFileWriter inherits FixedLengthRecordUtil::FixedLengthRecordAbstractWriter {
    private {
        string file;
    }
    
    #! creates the FixedLengthRecordFileWriter object
    /**
    @param f file to write
    @param h specification of fixed-length-line file
    @param g global options
    */
    constructor(string f, hash h, hash g) : FixedLengthRecordUtil::FixedLengthRecordAbstractWriter(h, g)  {
        file  = f;
    }

    #! stream iterator into the file.
    /**
    @param iterator an iterator to stream data into file
    */
    write(list lines) {
        File FW = new File();
        FW.open(file, O_WRONLY | O_CREAT);

        foreach hash item in (lines) {
            foreach string type in (specs.types.keys()) {
                string line_candidate = join("", map string($1), item.values());
                if (check_item_type_combination(item, type, line_candidate)) {
                    FW.write(line_candidate + (opts.eol ? opts.eol : "\n"));
                    break;
                }
            }
        }

        FW.close();
    }
}


#! writer for fixed-length-line data
public class FixedLengthRecordUtil::FixedLengthRecordDataWriter inherits FixedLengthRecordUtil::FixedLengthRecordAbstractWriter {
    #! creates the FixedLengthRecordFileWriter object
    /**
    @param f file to write
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(hash h, hash g) : FixedLengthRecordUtil::FixedLengthRecordAbstractWriter(h, g) {
    }

    #! stream iterator into the string
    /**
    @param iterator an iterator to stream data into string
    */
    string write(list lines) {
        string result = "";

        foreach hash item in (lines) {
            foreach string type in (specs.types.keys()) {
                string line_candidate = join("", map string($1), item.values());
                if (check_item_type_combination(item, type, line_candidate)) {
                    result += line_candidate + (opts.eol ? opts.eol : "\n");
                    break;
                }
            }
        }

        return result;
    }
}


any sub retype(any value, hash type) { # TODO: abstract this into another place
    switch (type.type) {
        case "int": {
            return int(value);
        }
        case "string": {
            return string(value);
        }
        case "float": {
            return float(value);
        }
        case "number": {
            return number(value);
        }
        case "date": {
            if (value.empty()) {
                return 1970-01-01;
            }
            else {
                *TimeZone timezone = type.timezone;
                if (!timezone) {
                    throw "NO-TIMEZONE-GIVEN", "you have to specify timezone while converting dates";
                }
                if (type.format) {
                    return timezone ? timezone.date(value, type.format) : date(value, type.format);
                }
                else {
                    return timezone ? timezone.date(value) : date(value);
                }
            }
        }
    }
    
    return value;
}
