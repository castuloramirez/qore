/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Number.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/qore_number_private.h>

#define NF_Default    0
#define NF_Scientific (1 << 0)
#define NF_Raw        (1 << 1)

/** @defgroup number_formatting_constants Number Formatting Constants
*/
//@{
//! for the default format with a rounding heuristic to try to remove noise in insignificant digits from the binary to digital conversion of high-precision numbers
const NF_Default = NF_Default;

//! for the scientific format (exponential notation)
const NF_Scientific = NF_Scientific;

//! for the raw format without the noise reduction heuristic in the @ref NF_Default format
/** note that this can be combined with binary or with @ref NF_Scientific as well to get an exponential output without rounding
    @par Example:
    @code
    my string $str = $n.toString(NF_Scientific|NF_Raw);
    @endcode
 */
const NF_Raw = NF_Raw;
//@}

//! Methods in this pseudo-class can be executed on @ref number "arbitrary precision number values"
/** 
 */
qclass <number> [arg=const QoreNumberNode* n;vparent=<value>];

//! Returns Qore::NT_NUMBER
/** 
    @return Qore::NT_NUMBER

    @par Example:
    @code
switch ($f.typeCode()) {
    case NT_NUMBER:
        printf("%y: is a number\n", $f);
        break;
}
    @endcode

    @since %Qore 0.8.6
*/
int <number>::typeCode() [flags=CONSTANT] {
   return NT_NUMBER;
}

//! Returns @ref True if the number is non-zero, @ref False if zero
/** 
    @return @ref True if the number is non-zero, @ref False if zero

    @par Example:
    @code
my bool $b = $f.val();
    @endcode

    @since %Qore 0.8.6
*/
bool <number>::val() [flags=CONSTANT] {
   return !n->zero();
}

//! Returns @ref True because number values can be converted to integers
/**
    @return @ref True because number values can be converted to integers

    @par Example:
    @code
if ($n.intp())
    printf("%y: can be converted to an integer: %d\n", $n, int($n));
    @endcode

    @since %Qore 0.8.6
*/
bool <number>::intp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True because number values can be converted to strings
/**
    @return @ref True because number values can be converted to strings

    @par Example:
    @code
if ($n.strp())
    printf("%y: can be converted to a string: '%s'\n", $n, string($n));
    @endcode

    @since %Qore 0.8.6
*/
bool <number>::strp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True if the number is NaN (not a number)
/**
    @return @ref True if the number is NaN (not a number)

    @par Example:
    @code
if ($n.nan())
    print("the operation resulted in NaN\n");
    @endcode

    @since %Qore 0.8.6
*/
bool <number>::nan() [flags=CONSTANT] {
   return qore_number_private::get(*n)->nan();
}

//! Returns @ref True if the number is infinity (+ or -)
/**
    @return @ref True if the number is infinity (+ or -)

    @par Example:
    @code
if ($n.inf())
    print("the operation resulted in infinity\n");
    @endcode

    @since %Qore 0.8.6
*/
bool <number>::inf() [flags=CONSTANT] {
   return qore_number_private::get(*n)->inf();
}

//! Returns -1 if the number is negative, 0 if it is zero, or 1 if it is positive
/** @return -1 if the number is negative, 0 if it is zero, or 1 if it is positive

    @par Example:
    @code
printf("sign: %d\n", $n.sign());
    @endcode

    @since %Qore 0.8.6
*/
int <number>::sign() [flags=CONSTANT] {
   return qore_number_private::get(*n)->sign();
}

//! Returns the precision of the current number
/** @return the precision of the current number

    @par Example:
    @code
printf("precision: %d\n", $n.prec());
    @endcode

    @since %Qore 0.8.6
*/
int <number>::prec() [flags=CONSTANT] {
   return (int64)qore_number_private::get(*n)->getPrec();
}

//! Returns the string representation of the number according to the format argument
/** @param fmt see @ref number_formatting_constants for possible values; note that this argument is interpreted as a bit field; if the format argument is not a valid format value (i.e. if none of the formatting bits are set in the argument) then @ref NF_Default is assumed instead

    @return the string representation of the number according to the format argument

    @since %Qore 0.8.6
*/
string <number>::toString(int fmt) [flags=CONSTANT] {
   bool raw = !(fmt & NF_Raw);
   QoreStringNode* rv = new QoreStringNode;
   if (fmt & NF_Scientific)
      qore_number_private::get(*n)->getScientificString(*rv, raw);
   else
      qore_number_private::get(*n)->getAsString(*rv, raw);
   return rv;
}

//! Returns a string of a formatted number according to a format string
/** @param fmt the format string has the following format:\n
    <em>\<thousands_separator\></em><tt>[</tt><em>\<decimal_separator\>\<decimals\></em><tt>]</tt>\n
    where:\n
    - \a thousands_separator and \a decimal_separator are single ASCII characters defining the thousands and decimal separator characters respectively, and
    - \a decimals is a single digit defining how may decimals should appear after the decimal point

    @return a string of a formatted number according to a format string; if the format string does not follow the given format, then an empty string is returned

    @par Example:
    @code
my number $n = -48392093894.2349n;
my string $nstr = $n.format(".,3"); # returns "-48.392.093.894,235"
    @endcode

    @see
    - @ref <float>::format(string)
    - @ref <int>::format(string)

    @since %Qore 0.8.6
 */
string <number>::format(string fmt) [flags=CONSTANT] {
   SimpleRefHolder<QoreStringNode> rv(new QoreStringNode(fmt->getEncoding()));
   return qore_number_private::get(*n)->format(**rv, *fmt, xsink) ? 0 : rv.release();
}
