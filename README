Qore README

author: David Nichols <david_nichols@users.sourceforge.net>
updated: 2008-09-02

This document contains some general information on the Qore language.  Please
refer to the following files/locations for specific information:

README-SVN: 
  learn how to build qore from svn sources

README-MODULES: 
  information about qore modules (delivered separately from the qore library)

WHATISQORE: 
  general description of the Qore programming language

RELEASE-NOTES: 
  release notes, known issues, etc

BUILD: 
  information on how to build and install qore from sources - some quick
  information below

docs/qore.html: 
  Qore Programming Language Reference Manual built from the docbook sources
  (docbook sources are only in svn at the moment).

docs/library/html/index.html: 
  API documentation for qore's public API (built during the build process if
  you have doxygen)

test/: 
  test scripts.  test/test.q is the main regression test script; testing is
  not yet automated as a part of the build...

examples/: 
  many example Qore scripts/programs.


************************
*** Quick Build Info ***
************************
 * only UNIX-like platforms are currently supported
 * requires POSIX threading support
 * requires at least flex 2.5.31 (older distributions have flex 2.5.4, flex
   2.5.35 recommended) in order to compile the multithreaded parser; you can
   get this version at: 
      http://sourceforge.net/projects/flex
 * requires libxml2 headers and libraries; libxml2 support is no longer
   optional
 * requires pcre headers and libraries for perl5-compatible regex support;
   POSIX regex support is no longer used
 * requires openssl headers and libraries
 * requires zlib & bzlib headers and libraries
 * optionally support for Oracle, MySQL, PostgreSQL, Sybase, MS SQL Server,
   ncurses, OpenGL, GLUT, QT4, TIBCO Rendezvou and AE Adapters, SSH2, Bea 
   Tuxedo and more can be built (see README-MODULES for details)


***************
*** HISTORY ***
***************
Qore was originally designed to facilitate embedding integration logic in a
workflow/technical order management system (the system is called Qorus
Integration Engine).

The initial requirements for the language were: clean threading model, SMP
scalability, efficient resource sharing, safe embedding of logic in automomous
objects with restricted capabilities, good networking and lightweight (ex
xml-rpc, json-rpc) web-service and other common protocol support, system
stability and memory cleanliness.

However, while qore was originally designed as an embedded application
scripting library (and still excels at this task), it has evolved to be a
fully-functional standalone language as well.

