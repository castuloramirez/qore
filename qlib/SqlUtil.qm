# -*- mode: qore; indent-tabs-mode: nil -*-
# @file SqlUtil.qm Qore user module for working with SQL data

/*  SqlUtil.qm Copyright 2013 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.8 or better
%requires qore >= 0.8.8

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings
%disable-warning non-existent-method-call

module SqlUtil {
    version = "1.0";
    desc = "user module for working with SQL data";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
}

/** @mainpage SqlUtil Module

    The %SqlUtil module provides functionality for parsing SQL-like files.

    To use this module, use \c "%requires SqlUtil" in your code.
    
    All the public symbols in the module are defined in the SqlUtil namespace
*/

#! the SqlUtil namespace contains all the objects in the SqlUtil module
public namespace SqlUtil {
    #! abstract container class that throws an exception if an unknown key is accessed
    public class AbstractHashContainer {
        public {}

        private {
            *hash h;
        }

        constructor(*hash nh) {
            h = nh;
        }

        any memberGate(string k) {
            if (!h.hasKey(k))
                throw "KEY-ERROR", sprintf("cannot access unknown %s %y; expecting one of: %y", getElementName(), k, h.keys());
            return h{k};
        }

        *hash val() {
            return h;
        }

        list keys() {
            return h.keys();
        }

        HashIterator iterator() {
            return h.iterator();
        }

        HashKeyIterator keyIterator() {
            return h.keyIterator();
        }

        HashPairIterator pairIterator() {
            return h.pairIterator();
        }

        bool empty() {
            return h.empty();
        }

        int size() {
            return h.size();
        }

        bool hasKey(string k) {
            return h.hasKey(k);
        }

        bool hasKeyValue(string k) {
            return h.hasKeyValue(k);
        }

        *string firstKey() {
            return h.firstKey();
        }

        *string lastKey() {
            return h.lastKey();
        }

        abstract string getElementName();
    }

    #! column container class that throws an exception if an unknown column is accessed
    public class Columns inherits AbstractHashContainer {
        constructor(*hash c) : AbstractHashContainer(c) {
        }

        Column memberGate(string k) {
            return AbstractHashContainer::memberGate(k);
        }

        Columns subset(list l) {
            return new Columns(h{l});
        }

        string getElementName() {
            return "column";
        }
    }

    #! the base class for column information
    public class Column {
        public {
            #! the name of the column
            string name;

            #! the native type name of the column
            string native_type;

            #! the equivalent qore type name of the column if the native type is known
            *string qore_type;

            #! the size of the column
            int size;

            #! the size of the column in characters
            int char_size;

            #! Qore::True "True" if the column can hold a NULL value, @ref Qore::False "False" if not
            bool nullable; 
        }

        constructor(string n, string nt, *string qt, int sz, int cs, bool nul) {
            name = n;
            native_type = nt;
            qore_type = qt;
            size = sz;
            char_size = cs;
            nullable = nul;
        }
    }

    #! index container class that throws an exception if an unknown index is accessed
    public class Indexes inherits AbstractHashContainer {
        constructor(*hash c) : AbstractHashContainer(c) {
        }

        Index memberGate(string k) {
            return AbstractHashContainer::memberGate(k);
        }

        string getElementName() {
            return "index";
        }
    }

    #! the base class for index information
    public class Index {
        public {
            #! the name of the index
            string name;
            
            #! @ref Qore::True "True" if the index is a unique index, @ref Qore::False "False" if not
            bool unique;

            #! an object of class Columns representing the columns in the index
            Columns columns;
        }

        constructor(string n, bool u, hash c) {
            name = n;
            unique = u;
            columns = new Columns(c);
        }
    }

    #! foreign constraint container class that throws an exception if an unknown index is accessed
    public class ForeignConstraints inherits AbstractHashContainer {
        constructor(*hash c) : AbstractHashContainer(c) {
        }

        ForeignConstraint memberGate(string k) {
            return AbstractHashContainer::memberGate(k);
        }

        string getElementName() {
            return "foreign constraint";
        }
    }

    #! a class describing a foreign constraint target
    public class ForeignConstraintTarget {
        public {
            #! the name of the target table
            string table;

            #! columns in the target table
            Columns columns;
        }

        constructor(string t, Columns c) {
            table = t;
            columns = c;
        }
    }

    #! the base class for foreign key constraint information
    public class ForeignConstraint {
        public {
            #! the name of the constraint
            string name;

            #! an object of class Columns giving the source table that make up the constraint
            Columns columns;

            #! a ForeignConstraintTarget object to describe the target table and columns
            ForeignConstraintTarget target;
        }

        constructor(string n, Columns c, ForeignConstraintTarget t) {
            name = n;
            columns = c;
            target = t;
        }
    }

    #! represents a database table
    public class Table {
        private {
            AbstractTable t;
        }

        constructor(AbstractDatasource ds, string name, *hash opts) {
            t = AbstractTable::getTable(ds, name, opts);
        }

        constructor(string ds, string name, *hash opts) {
            t = AbstractTable::getTable(ds, name, opts);
        }
        
        constructor(hash ds, string name, *hash opts) {
            t = AbstractTable::getTable(ds, name, opts);
        }
        
        #! returns the name of the table
        string getName() {
            return t.getName();
        }

        #! gets the underlying AbstractDatasource
        AbstractDatasource getDatasource() {
            return t.getDatasource();
        }

        #! executes a method on the contained AbstractTable object
        any methodGate(string meth) {
            return callObjectMethodArgs(t, meth, argv);
        }

        # returns the table description hash as acquired in the constructor
        /** @par Example:
            @code
my hash $h = $table.describe();
            @endcode

            @return a hash of column names assigned to Column objects

        */
        Columns describe() {
            return t.describe();
        }

        #! returns an objext of class Columns describing the primary key of the table
        /** If there is no primary key then the object returned will be empty (see @ref Columns::empty())

            @par Example:
            @code
            @endcode

            @return an objext of class Columns describing the primary key of the table
        */
        Columns getPrimaryKey() {
            return t.getPrimaryKey();
        }

        #! returns an object of class Indexes describing the indexes on the table
        /** If there is are no indexes on the table then the object returned will be empty (see @ref Indexes::empty())

            @par Example:
            @code
            @endcode

            @return an objext of class Indexes describing the indexes on the table
        */
        Indexes getIndexes() {
            return t.getIndexes();
        }

        #! returns a ForeignConstraints object describing the foreign constraints that the table has on other tables
        ForeignConstraints getForeignConstraints() {
            return t.getForeignConstraints();
        }

        #! returns the database driver name 
        string getDriverName() {
            return t.getDriverName();
        }
    }

    #! the base abstract class for the table implementation
    public class AbstractTable {
        public {
            #! drivers known to 
            const DriverMap = (
                "oracle": \AbstractTable::getOracleTable(),
                "pgsql": \AbstractTable::getPgsqlTable(),
                #"mysql": \AbstractTable::getMysqlTable(),
                #"sqlite3" : \AbstractTable::getSqlite3Table(),
                );

            #! table options
            const TableOptions = (
                "native-case": True,
                );
        }

        private {
            AbstractDatasource ds;
            # table name
            string name;
            # datasource description
            string dsdesc;
            # column description hash
            Columns columns;
            # primary key description
            Columns primaryKey;
            # index description
            Indexes indexes;
            # foreign constraints description
            ForeignConstraints foreignConstraints;
            # mutex for on-demand retrieval of table attributes
            Mutex l();
            # option hash
            *hash opts;
            # native case option
            bool native_case = False;
        }

        private constructor(AbstractDatasource nds, string nname, *hash nopts, hash rh = TableOptions) {
            checkOptions(nopts, rh);
            opts = nopts;
            name = nname;
            ds = nds;
            # ensure datasource is open
            ds.getServerVersion();
            dsdesc = sprintf("%s:%s@%s", ds.getDriverName(), ds.getUserName(), ds.getDBName());
            if (ds.getHostName())
                dsdesc += "%" + ds.getHostName();
            if (nds.getPort())
                dsdesc += sprintf(":%d", ds.getPort());
        }

        #! returns the name of the table
        string getName() {
            return name;
        }

        #! gets the underlying AbstractDatasource
        AbstractDatasource getDatasource() {
            return ds;
        }

        #! returns the database driver name 
        string getDriverName() {
            return ds.getDriverName();
        }

        # returns the table description hash as acquired in the constructor
        /** @par Example:
            @code
my hash $h = $table.describe();
            @endcode

            @return a hash of column names assigned to Column objects

        */
        Columns describe() {
            getColumnsIntern();
            return columns;
        }

        #! returns an objext of class Columns describing the primary key of the table
        /** If there is no primary key then the object returned will be empty (see @ref Columns::empty())

            @par Example:
            @code
            @endcode

            @return an objext of class Columns describing the primary key of the table
        */
        Columns getPrimaryKey() {
            getPrimaryKeyIntern();
            return primaryKey;
        }

        #! returns an object of class Indexes describing the indexes on the table
        /** If there is are no indexes on the table then the object returned will be empty (see @ref Indexes::empty())

            @par Example:
            @code
            @endcode

            @return an objext of class Indexes describing the indexes on the table
        */
        Indexes getIndexes() {
            getIndexesIntern();
            return indexes;
        }

        #! returns a ForeignConstraints object describing the foreign constraints that the table has on other tables
        ForeignConstraints getForeignConstraints() {
            getForeignConstraintsIntern();
            return foreignConstraints;
        }

        checkOptions(*hash nopts, hash rh) {
            foreach string k in (nopts.keyIterator()) {
                if (!rh{k})
                    throw "TABLE-ERROR", sprintf("option %y is not supported by class %y; possible options: %y", k, self.getClassName(), rh.keys());
            }
            if (nopts."native-case")
                native_case = True;
        }

        static AbstractTable getTable(AbstractDatasource nds, string nname, *hash opts) {
            string drv = nds.getDriverName();
            *code c = DriverMap{drv};
            if (!c)
                throw "TABLE-DRIVER-ERROR", sprintf("no support for driver %y yet in SqlUtil::AbstractTable", drv);
            return c(nds, nname, opts);
        }

        static AbstractTable getTable(string dsstr, string nname, *hash opts) {
            Datasource nds(dsstr);
            string drv = nds.getDriverName();
            *code c = DriverMap{drv};
            if (!c)
                throw "TABLE-DRIVER-ERROR", sprintf("no support for driver %y yet in SqlUtil::AbstractTable", drv);
            return c(nds, nname, opts);
        }

        static AbstractTable getTable(hash dsh, string nname, *hash opts) {
            Datasource nds(dsh);
            string drv = nds.getDriverName();
            *code c = DriverMap{drv};
            if (!c)
                throw "TABLE-DRIVER-ERROR", sprintf("no support for driver %y yet in SqlUtil::AbstractTable", drv);
            return c(nds, nname, opts);
        }

        static OracleTable getOracleTable(AbstractDatasource nds, string nname, *hash opts) {
            return new OracleTable(nds, nname, opts);
        }

        static PgsqlTable getPgsqlTable(AbstractDatasource nds, string nname, *hash opts) {
            return new PgsqlTable(nds, nname, opts);
        }

        /*
        static MysqlTable getMysqlTable(AbstractDatasource nds, string nname, *hash opts) {
            return new MysqlTable(nds, nname, opts);
        }
        
        static Sqlite3Table getSqlite3Table(AbstractDatasource nds, string nname, *hash opts) {
            return new Sqlite3Table(nds, nname, opts);
        }
        */

        private getColumnsIntern() {
            if (columns)
                return;
            l.lock();
            on_exit l.unlock();
            if (!columns)
                columns = describeImpl();            
        }

        private getPrimaryKeyIntern() {
            if (primaryKey)
                return;
            getColumnsIntern();
            l.lock();
            on_exit l.unlock();
            if (!primaryKey)
                primaryKey = getPrimaryKeyImpl();            
        }

        private getIndexesIntern() {
            if (indexes)
                return;
            getColumnsIntern();
            l.lock();
            on_exit l.unlock();
            if (!indexes)
                indexes = getIndexesImpl();            
        }

        private getForeignConstraintsIntern() {
            if (foreignConstraints)
                return;
            getColumnsIntern();
            l.lock();
            on_exit l.unlock();
            if (!foreignConstraints)
                foreignConstraints = getForeignConstraintsImpl();            
        }

        private abstract Columns describeImpl();
        private abstract Columns getPrimaryKeyImpl();
        private abstract Indexes getIndexesImpl();
        private abstract ForeignConstraints getForeignConstraintsImpl();
    }

    public class OracleColumn inherits Column {
        public {
            #! the column uses character semantics
            bool char_used;
            #! any comments on the column
            *string comment;
        }

        constructor(string n, string nt, *string qt, int sz, int cs, bool nul, bool cu, *string cm) : Column(n, nt, qt, sz, cs, nul) {
            char_used = cu;
            comment = cm;
        }
    }

    public class OracleIndex inherits Index {
        public {
            #! the native type of the index (if supported)
            string native_type;

            #! the tablespace name of the index (if supported)
            string tablespace;
        }

        constructor(string n, bool u, hash c, string nt, string t) : Index(n, u, c) {
            native_type = nt;
            tablespace = t;
        }
    }

    public class OracleForeignConstraint inherits ForeignConstraint {
        public {
            #! @ref Qore::True if the constraint is enabled, @ref Qore::False if not
            bool enabled;
        }

        constructor(string n, Columns c, ForeignConstraintTarget t, bool e) : ForeignConstraint(n, c, t) {
            enabled = e;
        }
    }

    public class OracleTable inherits AbstractTable {
        public {
            const OraTypeMap = (
                "NUMBER": ("qore": "number",),
                "VARCHAR2": ("qore": "string",),
                "CHAR": ("qore": "string",),
                "DATE": ("qore": "date",),
                "TIMESTAMP(6)": ("qore": "date",),
                "CLOB": ("qore": "string",),
                "BLOB": ("qore": "binary",),
                );

            const QoreTypeMap = (
                "integer": "NUMBER",
                "float": "NUMBER",
                "number": "NUMBER",
                "string": "VARCHAR2",
                "date": "TIMESTAMP",
                "binary": "BLOB",
                );
        }

        private {
            string schema;
            string tablespace;
            bool readonly;
            *string comment;
        }

        constructor(AbstractDatasource nds, string nname, *hash opts) : AbstractTable(nds, nname, opts) {
            # see if there is a schema in the name
            *string sstr = (nname =~ x/^(\w+)\.\w+/)[0];
            hash row;
            if (sstr) {
                schema = sstr;
                splice nname, 0, schema.size() + 1;
                name = nname;

                row = setSchemaTable();
            }
            else
                row = setTable();
            
            tablespace = row.tablespace_name;
            readonly = row.read_only == "YES";
            if (!native_case)
                tablespace = tablespace.lwr();

            # get any comment
            any cm = ds.selectRow("select * from all_tab_comments where owner = %v and table_name = %v", schema.upr(), name.upr()).comments;
            comment = cm ? cm : NOTHING;
        }

        private hash setSchemaTable() {
            # get the table information if possible
            *hash row = ds.selectRow("select * from all_tables where owner = %v and table_name = %v", schema.upr(), name.upr());
            if (!row)
                throw "TABLE-ERROR", sprintf("table %y.%y does not exist or is not accessible to this user (%s)", schema, name, getDBString());
            return row;
        }

        private hash setTable() {
            # see if the current user has the table
            *hash row = ds.selectRow("select * from user_tables where table_name = %v", name.upr());
            if (row)
                schema = getUserSchema();
            else {
                bool pub = False;
                # see if there is a user synonym with this name
                row = ds.selectRow("select * from user_synonyms where synonym_name = %v", name.upr());
                if (!row) {
                    # see if there is a public synonym with this name
                    row = ds.selectRow("select * from all_synonyms where owner = 'PUBLIC' and synonym_name = %v", name.upr());
                    if (!row)
                        throw "TABLE-ERROR", sprintf("table %y or synonym %y does not exist or is not accessible to this user (%s)", name, name, ds.getDBString());
                    pub = True;
                }

                # update the table name if necessary
                string orig_name = name;
                if (name.upr() != row.table_name) {
                    name = row.table_name;
                    if (!native_case)
                        name = name.lwr();
                }
                
                schema = row.table_owner;
                if (!native_case)
                    schema = schema.lwr();

                # get the table information if possible
                row = ds.selectRow("select * from all_tables where owner = %v and table_name = %v", schema.upr(), name.upr());
                if (!row)
                    throw "TABLE-ERROR", sprintf("%y is a %ssynonym pointing to table %y.%y which does not exist or is not accessible to this user (%s)", orig_name, pub ? "public " : "", schema, name, getDBString());
            }
            return row;
        }

        private string getUserSchema() {
            string rv = ds.getUserName();
            if (native_case)
                rv = rv.upr();
            return rv;
        }

        private string getDBString() {
            return sprintf("%s@%s", ds.getUserName(), ds.getDBName());
        }

        string getSchemaName() {
            return schema;
        }

        string getTablespaceName() {
            return tablespace;
        }

        *string getComment() {
            return comment;
        }

        bool readOnly() {
            return readonly;
        }

        private Columns describeImpl() {
            # get column descriptions
            *hash qh = ds.select("select col.column_name, data_type, data_length, data_precision, data_scale, nullable, char_length, char_used, comments from all_tab_columns col, all_tab_comments com where col.owner = %v and col.table_name = %v and com.owner = col.owner and com.table_name = col.table_name order by column_id", schema.upr(), name.upr());
            if (!qh.column_name)
                throw "TABLE-ERROR", sprintf("cannot retrieve table information for table %y in %y", name, dsdesc);

            hash rv;
            foreach hash row in (qh.contextIterator()) {
                *hash th = OraTypeMap.(row.data_type);
                int size = row.data_type == "NUMBER" && row.data_precision ? row.data_precision : row.data_length;
                if (!native_case) {
                    row.column_name = row.column_name.lwr();
                    row.data_type = row.data_type.lwr();
                }
                rv.(row.column_name) = new OracleColumn(row.column_name, row.data_type, th.qore, size, row.char_length, row.nullable == "Y", row.char_used == "C", row.comments ? row.comments : NOTHING);
            }

            return new Columns(rv);
        }

        private Columns getPrimaryKeyImpl() {
            hash rv;

            # get primary key description
            *hash qh = ds.select("select cols.column_name, cols.position, cons.status, cons.owner from all_constraints cons, all_cons_columns cols where cols.owner = %v and cols.table_name = %v and cons.constraint_type = 'P' and cons.owner = %v and cons.constraint_name = cols.constraint_name order by cols.position", schema.upr(), name.upr(), schema.upr());
            foreach string col in (qh.column_name) {
                string cn = native_case ? col : col.lwr();
                rv{cn} = columns{cn};
            }

            return new Columns(rv);
        }

        private Indexes getIndexesImpl() {
            hash rv;

            # get index description
            *hash qh = ds.select("select index_name, index_type, uniqueness, tablespace_name from all_indexes where owner = %v and table_name = %v", schema.upr(), name.upr());
            if (qh.index_name) {
                hash ih;
                # get column info for all indexes in 1 query
                *hash iqh = ds.select("select * from all_ind_columns where table_owner = %v and table_name = %v order by index_name, column_position", schema.upr(), name.upr());
                foreach hash row in (iqh.contextIterator()) {
                    if (!native_case) {  
                        row.index_name = row.index_name.lwr();
                        row.column_name = row.column_name.lwr();
                    }
                    ih{row.index_name}{row.column_name} = columns{row.column_name};
                }
                
                foreach hash row in (qh.contextIterator()) {
                    if (!native_case) {
                        row.index_name = row.index_name.lwr();
                        row.tablespace_name = row.tablespace_name.lwr();
                    }
                    # skip system indexes
                    if (!ih{row.index_name})
                        continue;
                    rv.(row.index_name) = new OracleIndex(row.index_name, row.uniqueness == "UNIQUE", ih{row.index_name}, row.index_type, row.tablespace_name);
                }

            }

            return new Indexes(rv);
        }

        private ForeignConstraints getForeignConstraintsImpl() {
            hash ch;

            # get foreign referential constraints
            *hash qh = ds.select("select constraint_name, status from user_constraints where owner = %v and table_name = %v and constraint_type = 'R'", schema.upr(), name.upr());
            if (qh.status) {
                hash rv;
                foreach hash row in (qh.contextIterator()) {
                    if (!native_case)
                        row.constraint_name = row.constraint_name.lwr();
                    rv.(row.constraint_name) = (
                        "enabled": row.status == "ENABLED",
                        );
                }
                qh = ds.select("select c.constraint_name, status, cols1.column_name source_column, cols1.position, cols2.table_name target_table, cols2.column_name target_column from all_constraints c, all_cons_columns cols1, all_cons_columns cols2 where c.owner = %v and c.table_name = %v and c.constraint_name = cols1.constraint_name and constraint_type = 'R' and c.r_constraint_name = cols2.constraint_name and cols1.position = cols2.position and cols1.owner = %v and cols2.owner = %v order by cols1.position", schema.upr(), name.upr(), schema.upr(), schema.upr());
                foreach hash row in (qh.contextIterator()) {
                    if (!native_case) {
                        row.constraint_name = row.constraint_name.lwr();
                        row.source_column = row.source_column.lwr();
                        row.target_column = row.source_column.lwr();
                        row.target_table = row.target_table.lwr();
                    }
                    reference c = \rv.(row.constraint_name);
                    c.columns.(row.source_column) = columns{row.source_column};
                    c.target.table = row.target_table;
                    c.target.columns.(row.target_column) = True;
                }

                # temporary foreign table buffer hash
                hash fth;
                foreach hash c in (rv.pairIterator()) {
                    # get a description of the target table for the target column descriptions
                    if (!fth{c.value.target.table})
                        fth{c.value.target.table} = new OracleTable(ds, c.value.target.table, opts);
                    ForeignConstraintTarget fct(c.value.target.table, fth{c.value.target.table}.describe().subset(c.value.target.columns.keys()));
                    ch.(c.key) = new OracleForeignConstraint(c.key, new Columns(c.value.columns), fct, c.value.enabled);
                }
            }

            return new ForeignConstraints(ch);
        }
    }

    public class PgsqlIndex inherits Index {
        public {
            #! the tablespace name of the index
            *string tablespace;
        }

        constructor(string n, bool u, hash c, *string t) : Index(n, u, c) {
            tablespace = t;
        }
    }

    public class PgsqlTable inherits AbstractTable {
        public {
            const PgsqlTypeMap = (
                "numeric": ("qore": "number",),
                "smallint": ("qore": "number",),
                "oid": ("qore": "number",),
                "varchar": ("qore": "string",),
                "character": ("qore": "string",),
                "character varying": ("qore": "string",),
                "date": ("qore": "date",),
                "timestamp without time zone": ("qore": "date",),
                "timestamp with time zone": ("qore": "date",),
                "text": ("qore": "string",),
                "bytea": ("qore": "binary",),
                "boolean": ("qore": "bool",),
                );

            const QoreTypeMap = (
                "integer": "numeric",
                "float": "numeric",
                "number": "numeric",
                "string": "varchar",
                "date": "timestamp with time zone",
                "binary": "bytea",
                "bool": "boolean",
                );
        }

        private {
            *string tablespace;
        }

        constructor(AbstractDatasource nds, string nname, *hash opts) : AbstractTable(nds, nname, opts) {
            # get table info
            *hash row = ds.selectRow("select * from pg_tables where tablename = %v", name);
            tablespace = row.tablespace;
        }

        *string getTablespaceName() {
            return tablespace;
        }

        private Columns describeImpl() {
            # get column descriptions
            *hash qh = ds.select("select column_name, data_type, character_maximum_length, character_octet_length, numeric_precision, datetime_precision, is_nullable from information_schema.columns where table_name = %v order by ordinal_position", name);
            if (!qh.column_name)
                throw "TABLE-ERROR", sprintf("cannot retrieve table information for table %y in %y", name, dsdesc);

            hash rv;
            foreach hash row in (qh.contextIterator()) {
                *hash th = PgsqlTypeMap.(row.data_type);
                softint size = row.character_octet_length ? row.character_octet_length : row.numeric_precision;
                if (!size)
                    size = row.datetime_precision;
                softint cs = row.character_maximum_length ? row.character_maximum_length : 0;
                rv.(row.column_name) = new Column(row.column_name, row.data_type, th.qore, exists size ? size : 0, cs, row.is_nullable == "YES");
            }

            return new Columns(rv);
        }

        private Columns getPrimaryKeyImpl() {
            hash rv;

            # get primary key description
            *hash qh = ds.select("select a.attname, format_type(a.atttypid, a.atttypmod) coltype from pg_index i , pg_class c, pg_attribute a where c.oid = %v::regclass and indrelid = c.oid and a.attrelid = c.oid and a.attnum = any(i.indkey) and indisprimary", name);
            foreach string col in (qh.attname)
                rv{col} = columns{col};

            return new Columns(rv);
        }

        private Indexes getIndexesImpl() {
            hash rv;

            # get index description
            *hash qh = ds.select("select i.relname index_name, a.attname column_name, indisunique, tablespace from pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_indexes xs where t.oid = ix.indrelid and i.oid = ix.indexrelid and a.attrelid = t.oid and a.attnum = any(ix.indkey) and t.relkind = 'r' and t.relname = %v and not indisprimary and i.relname = xs.indexname group by i.relname, a.attname, indisunique, tablespace order by i.relname", name);
            if (qh.index_name) {
                hash ih;
                foreach hash row in (qh.contextIterator()) {
                    if (!ih.(row.index_name))
                        ih.(row.index_name) = (
                            "unique": row.indisunique,
                            "tablespace": row.tablespace,
                        );
                    ih.(row.index_name).columns{row.column_name} = columns{row.column_name};
                }

                foreach hash i in (ih.pairIterator())
                    rv.(i.key) = new PgsqlIndex(i.key, i.value.unique, i.value.columns, i.value.tablespace);
            }

            return new Indexes(rv);
        }

        private ForeignConstraints getForeignConstraintsImpl() {
            hash rv;

            # get foreign referential constraints
            *hash qh = ds.select("select tc.constraint_name, kcu.column_name source_column, ccu.table_name target_table, ccu.column_name target_column from information_schema.table_constraints tc join information_schema.key_column_usage kcu on tc.constraint_name = kcu.constraint_name join information_schema.constraint_column_usage as ccu on ccu.constraint_name = tc.constraint_name where constraint_type = 'FOREIGN KEY' and tc.table_name = %v order by ordinal_position", name);
            if (qh.constraint_name) {
                hash ch;
                foreach hash row in (qh.contextIterator()) {
                    reference c = \ch.(row.constraint_name); 
                    c.columns.(row.source_column) = columns{row.source_column};
                    c.target.table = row.target_table;
                    c.target.columns.(row.target_column) = True;
                }
                
                # temporary foreign table buffer hash
                hash fth;
                foreach hash c in (ch.pairIterator()) {
                    # get a description of the target table for the target column descriptions
                    if (!fth{c.value.target.table})
                        fth{c.value.target.table} = new PgsqlTable(ds, c.value.target.table);
                    
                    ForeignConstraintTarget fct(c.value.target.table, fth{c.value.target.table}.describe().subset(c.value.target.columns.keys()));
                    rv.(c.key) = new ForeignConstraint(c.key, new Columns(c.value.columns), fct);
                }
            }

            return new ForeignConstraints(rv);
        }
    }

    public class MysqlTable inherits AbstractTable {
        constructor(AbstractDatasource nds, string nname, *hash opts) : AbstractTable(nds, nname, opts) {
        }

        private hash describeImpl() {
            return hash();
        }
    }

/*
    public class Sqlite3Table inherits AbstractTable {

        public {
            const Sqlite3TypeMap = (
                "INTEGER": ("qore": "integer",),
                "NUMERIC": ("qore": "number",),
                "TEXT": ("qore": "string",),
                "BLOB": ("qore": "binary",),
                "NONE": ("qore": "any",),
                "REAL": ("qore": "float",),
                );

            const QoreTypeMap = (
                "integer": "INTEGER",
                "float": "NUMBER",
                "number": "NUMBER",
                "string": "VARCHAR2",
                #"date": "TIMESTAMP",
                "binary": "BLOB",
                );
        }

        constructor(AbstractDatasource nds, string nname, *hash opts) : AbstractTable(nds, nname, opts) {
        }

        private hash describeImpl() {
            hash rv;
            
            # NOTE: sqlite3's pragmas cannot use %v binding
            
            # table info - PK is part of the table description
            hash tableInfo = ds.select("pragma table_info(%s)", name);
            context(tableInfo) {
                rv.columns{%name} = (
                        "native_type"   : %type,
                        "qore_type"     : Sqlite3TypeMap{%type}.qore,
                        "size"          : NOTHING,
                        "nullable"      : %notnull == 1 ? NOTHING : "YES",
                    );
                if (%pk)
                    rv.primary_key{%name} = True;
            }
            
            # get index description
            hash indexes = ds.select("pragma index_list(%s)", name);
            context(indexes) {
                rv.indexes{%name}.unique = %unique == 0 ? False : True;
                hash indexColumns = ds.select("pragma index_info(%s)", %name);
                string columnName = %name;
                context (indexColumns) {
                    rv.indexes{columnName}.columns{%name} = True;
                }
            }
            
            # TODO/FIXME: FKs
            
            return rv;
        }
    }
*/
}
