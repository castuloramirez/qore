#!/usr/bin/env qore
%require-types
%new-style
%enable-all-warnings
%requires UnitTest
%requires FixedLengthUtil

UnitTest unit();

string file = unit.tmpLocation() + "/file.fll";
unlink(file);

list data = (
    ("col1" : 11111, "col2" : "bb"),
    ("col3" : "c", "col4" : "ddd", "col5" : "31122014"),
    ("col1" : 22222, "col2" : "gg"),
);

string data_text = "11111bb\ncddd31122014\n22222gg\n";


code identify_type = *string sub (string line) {
    if (line.length() == 7) {
        return "type1";
    }
    if (line.length() == 12) {
        return "type2";
    }
    return NOTHING;
};

hash specs = (
    "type1" : (
        "col1" : (
            "length" : 5,
            "type"   : "int"
        ),
        "col2" : (
            "length" : 2,
            "type"   : "string",
        ),
    ),
    "type2" : (
        "col3" : (
            "length" : 1,
            "type"   : "string",
        ),
        "col4" : (
            "length" : 3,
            "type"   : "string",
        ),
        "col5" : (
            "length"   : 8,
            "type"     : "date",
            "format"   : "DDMMYYYY",
            "timezone" : "Europe/Prague",
        ),
    ),
);

hash global_options = (
    "eol" : "\n",
);

MyFixedLengthDataWriter1 w1(specs, identify_type, global_options);
unit.cmp(w1.write(data), data_text, 'file content check');

MyFixedLengthDataWriter2 w2(specs, identify_type, global_options);
code wr = sub (list d) {
    w2.write(d);
};
unit.exception(wr, list(data), 'State type1 cannot follow state <START> for line >11111bb<', 'invalid transition');

unlink(file);


public class MyFixedLengthDataWriter1 inherits FixedLengthUtil::FixedLengthDataWriter {
    constructor(hash h, code i, *hash g) : FixedLengthUtil::FixedLengthDataWriter(h, i, g) {
    }

    bool checkTransition(*string from, *string to) {
        if (   (from == 'type1' && to == 'type2')
            || (from == NOTHING && to == 'type1')
            || (from == 'type2' && to == 'type1')) {
            return True;
        }

        return False;
    }
}

public class MyFixedLengthDataWriter2 inherits FixedLengthUtil::FixedLengthDataWriter {
    constructor(hash h, code i, *hash g) : FixedLengthUtil::FixedLengthDataWriter(h, i, g) {
    }

    bool checkTransition(*string from, *string to) {
        if (   (from == 'type1' && to == 'type2')
            || (from == 'type2' && to == 'type1')) {
            return True;
        }

        return False;
    }
}
