#!/usr/bin/env qore

%requires Util

%requires ../../../../qlib/FsUtil.qm
%requires ../../../../qlib/QUnit.qm

%new-style
%require-types
%enable-all-warnings

%exec-class SamefileTest

public class SamefileTest inherits QUnit::Test {

    constructor() : Test ("SamefileTest", "1.0") {
        addTestCase("samefile test", \test_samefile());
        addTestCase("samefile test - exception", \test_samefile_exception());
        set_return_value(main());
    }

    test_samefile() {
        # get some paths
        string tmp_path = make_tmp_dir();
        string file1 = make_tmp_file(NOTHING, NOTHING, tmp_path).path;
        string file2 = make_tmp_file(NOTHING, NOTHING, tmp_path).path;
        string file3 = make_tmp_file().path;
        string subdir = make_tmp_dir(NOTHING, NOTHING, tmp_path);
        on_exit {
            rmtree(tmp_path);
            # file1 and file2 will be removed with tmp_path but file3 won't
            unlink(file3);
        }

        # the same paths
        assertTrue(samefile(tmp_path, tmp_path, True));
        assertTrue(samefile(tmp_path, tmp_path, False));
        assertTrue(samefile(file1, file1, True));
        assertTrue(samefile(file1, file1, False));
        assertTrue(samefile(file2, file2, True));
        assertTrue(samefile(file2, file2, False));
        assertTrue(samefile(file3, file3, True));
        assertTrue(samefile(file3, file3, False));
        assertTrue(samefile(subdir, subdir, True));
        assertTrue(samefile(subdir, subdir, False));

        # different paths
        assertFalse(samefile(tmp_path, file1, True));
        assertFalse(samefile(tmp_path, file2, True));
        assertFalse(samefile(tmp_path, file3, True));
        assertFalse(samefile(tmp_path, subdir, True));
        assertFalse(samefile(file1, file2, True));
        assertFalse(samefile(file1, file3, True));
        assertFalse(samefile(file1, subdir, True));
        assertFalse(samefile(file2, file3, True));
        assertFalse(samefile(file2, subdir, True));
        assertFalse(samefile(file3, subdir, True));
        assertFalse(samefile(tmp_path, file1, False));
        assertFalse(samefile(tmp_path, file2, False));
        assertFalse(samefile(tmp_path, file3, False));
        assertFalse(samefile(tmp_path, subdir, False));
        assertFalse(samefile(file1, file2, False));
        assertFalse(samefile(file1, file3, False));
        assertFalse(samefile(file1, subdir, False));
        assertFalse(samefile(file2, file3, False));
        assertFalse(samefile(file2, subdir, False));
        assertFalse(samefile(file3, subdir, False));
    }

    test_samefile_exception() {
        string tmp_path = make_tmp_dir();
        on_exit {
            rmtree(tmp_path);
        }
        string non_file = join_paths(tmp_path, "non_file.txt");

        assertThrows("FILE-STAT-ERROR", \samefile(), (tmp_path, non_file, True));
        assertThrows("FILE-STAT-ERROR", \samefile(), (tmp_path, non_file, False));
        assertThrows("FILE-STAT-ERROR", \samefile(), (non_file, tmp_path, True));
        assertThrows("FILE-STAT-ERROR", \samefile(), (non_file, tmp_path, False));
        assertThrows("FILE-STAT-ERROR", \samefile(), (non_file, non_file, True));
        assertThrows("FILE-STAT-ERROR", \samefile(), (non_file, non_file, False));
    }
}
