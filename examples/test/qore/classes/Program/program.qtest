#!/usr/bin/env qore

%require-types
%enable-all-warnings
%new-style

%requires UnitTest

my UnitTest unit();

our Test to("program-test.q");
our Test ro("readonly");

class_test_Program();

int sub t(any a) {
    return a + 1;
}

sub class_test_Program() {
    my string func = "namespace ITest { const val = 1.0; class X; } our int gv2 = 123; int sub t2(int a) { return a + 2; } int sub et(int a) { return t(a); } string sub tot() { return get_class_name(to); } Queue sub getObject() { return new Queue(); } X sub get_x() { return new X(); } sub deleteException() { ro.getData(0); delete ro; } bool sub check_ro() { return exists ro; }";

    my string pf = "newfunc();";
    my string nf = "bool sub newfunc() { return True; }";

    my Program a();
    a.parsePending(pf, "pending test part1", 0);
    a.parsePending(nf, "pending test part2", 0);
    a.parseCommit();
    a.importFunction("t");
    a.importGlobalVariable("to");
    a.importGlobalVariable("ro", True);
    a.parse(func, "test");

    unit.cmp(a.callFunction("newfunc"), True, "Program::parsePending()");
    unit.cmp(a.callFunction("t2", 1), 3, "Program::parse()");
    unit.cmp(a.callFunctionArgs("t2", list(int(2))), 4, "program imported function");
    unit.cmp(a.callFunction("et", 1), 2, "program imported function");
    unit.cmp(a.callFunction("tot"), "Test", "program imported object variable");
    unit.cmp(to.member, "memberGate-member", "program imported object member gate");
    unit.cmp(to.method(), "method", "program imported object method gate");
    try
        a.callFunction("deleteException");
    catch (ex)
        unit.cmp(ex.err, "ACCESS-ERROR", "Program::importGlobalVariable() readonly");

    unit.cmp(a.callFunction("check_ro"), True, "delete read-only");

    my Queue o = a.callFunction("getObject");
    my object ox = a.callFunction("get_x");
    delete a;
    unit.cmp(get_class_name(o), "Queue", "builtin class returned from deleted subprogram object");
    unit.cmp(get_class_name(ox), "X", "user class returned from deleted subprogram object");

    # test for incorrect parse location when processing constants after a commit
    a = new Program();
    a.parse("sub x() {}", "lib");
    my *hash h = a.parse("const X1 = 'a'; const X2 = 'a'; const h = (X1: 1, X2: 2);", "warn", WARN_ALL);
    unit.cmp(h.file, "<run-time-loaded: warn>", "constant parse location");

    # make sure recursive constant definitions are handled
    try {
        a.parse("const A = B; const B = A; any a = A;", "rec");
    }
    catch (hash ex) {
        unit.cmp(ex.err, "PARSE-EXCEPTION", "recursive constant ref");
    }

    my string pstr = "class T { private { int i = 1; static *int j = 4; const X = 2; } int get() { return i; } static other (int x) {} } T sub getT() { return new T(); } int sub checkT(T t) { return t.get(); }";

    my Program p1(PO_NEW_STYLE);
    my Program p2(PO_NEW_STYLE);

    p1.parse(pstr, "p");
    p2.parse(pstr, "p");

    my object o2 = p1.callFunction("getT");
    unit.cmp(1, p1.callFunction("checkT", o2), "first cross-Program class");
    unit.cmp(1, p2.callFunction("checkT", o2), "second cross-Program class");

    my Program p4();
    try {
        p4.parse("error", "error", 0, "source", 10);
        unit.cmp(True, False, "exception source & offset");
    }
    catch (hash ex) {
        unit.cmp(ex.source, "source", "exception source");
        unit.cmp(ex.offset, 10, "exception offset");
    }
}

class Test inherits Socket {
    private {
        int a;
        int b;
    }
    public {
        list data;
        hash t;
    }

    constructor(any a, any b, any c) {
        a = 1;
        b = 2;
        data = (a, b, c);
    }
    any getData(int elem) {
        if (exists elem)
            return data[elem];
        return data;
    }
    string methodGate(string m) {
        return m;
    }
    string memberGate(string m) {
        return "memberGate-" + m;
    }
    memberNotification(string m) {
        t.m = self.m;
    }
    code closure(any x) {
        my int a = 1;
        # return a closure encapsulating the state of the object
        return string sub (any y) {
            return sprintf("%s-%n-%n-%n", data[1], x, y, ++a);
        };
    }
    any argTest() {
        return argv;
    }
}
