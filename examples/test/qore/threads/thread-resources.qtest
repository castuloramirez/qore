#!/usr/bin/env qr
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style

%requires ../../../../qlib/QUnit.qm

%exec-class ThreadResourcesTest

class TR1 inherits AbstractThreadResource {
    cleanup() {
	throw "TR1";
    }
}

class TRS inherits AbstractThreadResource {
    cleanup() {
    }
}

class ThreadResourcesTest inherits QUnit::Test {
    constructor() : QUnit::Test("ThreadResourcesTest", "1.0") {
        addTestCase("thread resource tests", \threadResourcesTests());
        set_return_value(main());
    }

    threadResourcesTests() {
	TR1 tr1();

	set_thread_resource(tr1);
	testAssertion("cleanup-1", \throw_thread_resource_exceptions(), NOTHING, new TestResultExceptionType("TR1"));
	testAssertionValue("remove-1", remove_thread_resource(tr1), False);

	set_thread_resource(tr1);
	mark_thread_resources();
	testAssertionValue("cleanup-to-mark-neg-1", throw_thread_resource_exceptions_to_mark(), True);
	testAssertionValue("remove-2", remove_thread_resource(tr1), True);

	mark_thread_resources();
	testAssertion("auto-cleanup-1", \doCleanup(), NOTHING, new TestResultExceptionType("TR1"));

	testAssertionValue("cleanup-to-mark-neg-2", throw_thread_resource_exceptions_to_mark(), True);

	testAssertion("auto-cleanup-2", \doCleanup(), NOTHING, new TestResultExceptionType("TR1"));

	TRS trs();
	set_thread_resource(trs);
    }

    doCleanup() {
	TR1 tr1();

	set_thread_resource(tr1);
    }
}
