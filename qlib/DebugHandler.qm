# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DebugHandler.qm Qore handler definition for the HttpServer module for providing debug server via WebSocket server services

/*  DebugHandler.qm Copyright 2013 - 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.12 or better
%requires qore >= 0.8.13
%requires WebSocketHandler >= 1.2
%requires json >= 1.5

/*
%try-module json >= 1.5
%define NoJson
%endtry
*/

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%requires HttpServerUtil >= 0.3.11
%requires WebSocketUtil >= 1.0

%new-style

module DebugHandler {
    version = "0.1";
    desc = "user module for providing debug server via WebSocket server services";
    author = "Tomas Mandys <tomas.mandys@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage DebugHandler Module

TODO
    @tableofcontents

    @section websockethandlerintro Introduction to the WebSocketHandler Module

    The %WebSocketHandler module provides a handler to be used with the <a href="../../HttpServer/html/index.html">HttpServer module</a> to
    provide server-side <a href="http://tools.ietf.org/html/rfc6455">RFC-6455 based WebSocket services</a> to clients.

    To use this module, use \c "%requires WebSocketHandler" and \c "%requires HttpServer" in your code.

    All the public symbols in the module are defined in the WebSocketHandler namespace.

    The main classes provided in this module are:
    - @ref WebSocketHandler::WebSocketConnection
    - @ref WebSocketHandler::WebSocketHandler

    @section websockethandler_relnotes WebSocketHandler Release History

    @subsection websockethandler_v1_3 Version 1.3
    - added timeout values to @ref Qore::Socket "Socket" calls (<a href="https://github.com/qorelanguage/qore/issues/1725">issue 1725</a>)

    @subsection websockethandler_v1_2 Version 1.2
    - fixed a bug parsing and generating the websocket close status code (<a href="https://github.com/qorelanguage/qore/issues/1216">issue 1216</a>)

    @subsection websockethandler_v1_1 Version 1.1
    - bug fix: do not delete the connection object when the connection closes, remove it so it can go out of scope naturally to avoid excess exceptions in the server code
    - added the WebSocketConnection::connectionClosed() method which is called when the connection is closed

    @subsection websockethandler_v1_0 Version 1.0
    - the initial version of the WebSocketHandler module
*/

#! the DebugHandler namespace contains all the objects in the DebugHandler module
public namespace DebugHandler {
    #! this class represents a connection to a debug server via websocket client
    /** @par Receiving Debug commands from Clients
        The class implements @ref WebSocketHandler::WebSocketConnection::gotMessage() "WebSocketConnection::gotMessage()" 
        to handle incomming commands passed as JSON objects to control assigned @ref DebugProgram instance
        Such a command is handled on request/response basis.

        Unsolicited messages are send to client when an event occurs in program being debugged.

    */
    public class WebSocketDebugConnection inherits WebSocketHandler::WebSocketConnection {
        public {
            WebSocketDebugHandler dhandler;

            # wait a maximum of 1/2 second for data
            #const DefaultQueuePollingInterval = 500ms;
        }

        private {
            #! websocket context, cx.id is used for sending messages to particular client
            hash cx;
        }

        #! the constructor is called by the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when a new connection is made by a websocket client; it is called from @ref WebSocketHandler::WebSocketHandler::getConnectionImpl() "WebSocketHandler::getConnectionImpl()", which can be overridden in subclasses to allow a subclass of this class to be used as the connection object
        constructor(WebSocketDebugHandler n_handler, hash n_cx): WebSocketConnection(n_handler) {
            dhandler = n_handler;
            cx = n_cx;
            dhandler.debugProgram.registerSocketConnection(cx);
        }

        #! this method is called by the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when message from the client is received
        /** 
        */
        gotMessage(string msg) {
            try {
                any receiveData = parse_json(msg);
                dhandler.debugProgram.handleSocket(cx, receiveData);
            } catch (hash ex) {
            }
        }

        #! this method is called by the @ref @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when the connection is closed
        /** the implementation in this class is empty; implement this method in a subclass to provide custom behavior
        */
        connectionClosed() {
            dhandler.debugProgram.unregisterSocketConnection(cx);
        }
    }

    #! the main web socket handler class
    /** connections are represented by object descended from @ref WebSocketHandler::WebSocketConnection "WebSocketConnection".
        @ref WebSocketHandler::WebSocketHandler::getConnectionImpl() returns a suitable object for each connection, this method
        can be overridden in subclasses to return a custom object for each connection if required.

        @par Receiving WebSocket Messages from Clients
        When the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" class receives a message from the client, the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" class calls the @ref WebSocketHandler::WebSocketConnection::gotMessage() "WebSocketConnection::gotMessage()" on the object that represents that connection.

        @par Sending WebSocket Message to Clients
        To send a message to a websocket client, call one of the following methods:
        - @ref WebSocketHandler::WebSocketHandler::sendOne() "WebSocketHandler::sendOne()": send a message to single connection given its connection ID
        - @ref WebSocketHandler::WebSocketHandler::sendAll() "WebSocketHandler::sendAll()": send a message to all connected clients

        Websocket connections are identified by their HTTP connection ID as passed in @ref WebSocketHandler::WebSocketHandler::handleRequest() "WebSocketHandler::handleRequest()" in the \c "cx.id" argument when the connection is first established.
    */
    public class WebSocketDebugHandler inherits WebSocketHandler::WebSocketHandler {
        public {
            WebSocketDebugProgram debugProgram;
            # default socket send timeout
            #const DefaultSocketSendTimeout = 30s;
        }

        #! create the object optionally with the given @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator"
        /** @param auth the authentication object to use to authenticate connections (see @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator"); if no @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator" object is passed, then by default no authentication will be required
         */
        constructor(*HttpServer::AbstractAuthenticator auth, WebSocketDebugProgram dpgm) : WebSocketHandler::WebSocketHandler(auth) {
            debugProgram = dpgm;
        }

        #! called when a connection is established; the default implementation creates a WebSocketConnection object
        WebSocketConnection getConnectionImpl(hash cx, hash hdr, string cid) {
            return new WebSocketDebugConnection(self, cx);
        }

    }

    public class WebSocketDebugProgram inherits DebugProgram {
        private {
            WebSocketDebugHandler handler;
            #!data pool related to suspended thread, key is threadId
            hash ctxThread;
            #! data pool for data related to cx.id 
            hash ctxConnection;
            #! lock for @ref ctxThread access
            Qore::Thread::RWLock rwlThread();
            #! lock for @ref ctxConnection access
            Qore::Thread::RWLock rwlConnection();

            const runStateStrings = ('detach': DebugDetach, 'run': DebugRun, 'step': DebugStep, 'stepover': DebugStepOver, 'untilreturn': DebugUntilReturn);
            const retCodeStrings = ('return': DebugBlockReturn, 'break': DebugBlockBreak, 'continue': DebugBlockContinue);
            const boolStrings = ('false': False, 'true': True);
            const policyStrings = ('none': BreakpointPolicyNone, 'accept': BreakpointPolicyAccept, 'reject': BreakpointPolicyReject);

            const frameOffset = 2;
        }
        constructor(*HttpServer::AbstractAuthenticator auth) : DebugProgram() {
            handler = new WebSocketDebugHandler(auth, self);
        }

        public registerSocketConnection(hash cx) {
            rwlConnection.writeLock();
            on_exit rwlConnection.writeUnlock();
            ctxConnection{cx.id} = ();
        }

        public unregisterSocketConnection(hash cx) {
            rwlConnection.writeLock();
            on_exit rwlConnection.writeUnlock();
            delete ctxConnection{cx.id};
            # if (!ctxConnection)  run stopped programs ?
        }

        private updateConnectionContext(hash cx, any cx_data) {
        }

        public WebSocketHandler getHandler() {
            return handler;
        }

        #! handle message from socket thread, if message is related to debugged thread then put it in particular queue
        public handleSocket(hash cx, hash receiveData) {
            hash sendData;
            any result;
            try {
                list cmd = receiveData.cmd.split('/');

                switch (shift cmd) {
                case 'help':
                    result = list('TODO: help text');
                    break;

                case 'program':
                    Program pgm;
                    if (cmd[0] != 'list') {
                        pgm = Program::resolveProgramId(shift cmd);
                    }
                    switch (shift cmd) {
                    case 'stop':
                        # no locking
                        breakProgram(pgm);
                        result = 'ok';
                        break;

                    case 'thread':
                        softint tid = shift cmd;
                        switch (shift cmd) {
                        case 'stop':
                            breakProgramThread(pgm, tid);
                            result = 'ok';
                            break;
                        }
                        break;

                    case 'list':
                        map result{$1.getProgramId()}.scriptPath = $1.getScriptPath(), Program::getAllPrograms();
                        map result{$1.getProgramId()}.debug = True, getAllPrograms();
                        {
                            rwlThread.readLock();
                            on_exit rwlThread.readUnlock();
                            foreach int tid in (keys ctxThread) {
                                if (exists ctxThread{tid}.pgmId) {
                                    result{ctxThread{tid}.pgmId}.interrupted += list(tid);
                                }
                            }
                        }
                        break;

                    case 'add':
                        addProgram(pgm);
                        result = 'ok';
                        break;

                    case 'remove':
                        removeProgram(pgm);
                        result = 'ok';
                        break;

                    case 'var':
                        string name = shift cmd;
                        switch (shift cmd) {
                        case 'set':
                            pgm.setGlobalVarValue(name, receiveData.value);
                            result = 'ok';
                            break;

                        case 'get':
                            bool existF;
                            any v = pgm.getGlobalVariable(name, \existF);
                            if (existF) {
                                result = v;
                            }
                            break;
                        }
                        break;

                    case 'breakpoint':
                        Breakpoint b;
                        switch (cmd[0]) {
                        case 'list':
                            break;
                        case 'create':
                            b = new Breakpoint();
                            break;
                        default:
                            b = resolveBreakpoint(pgm, shift cmd);
                            break;
                        }
                        switch (shift cmd) {
                        case 'list':
                            list bkpts = pgm.getBreakpoints();
                            result = ();
                            foreach Breakpoint b2 in (bkpts) {
                                push result, serializeBreakpoint(b2);
                            }
                            break;

                        case 'create':
                            b.assignProgram(pgm);
                            result = serializeBreakpoint(b);
                            break;

                        case 'delete':
                            # TODO: if (b.getProgram().getProgramId() != pgm.getProgramId()
                            #  throw DEBUG-HANDLER-ERROR, "Program mismatch";
                            b.unassignProgram();
                            b.clearThreadIds();
                            list sl = b.getStatementIds();
                            foreach string s in (sl) {
                                b.unassignStatement(s);
                            }
                            # delete b;   ??
                            result = 'ok';
                            break;

                        case 'enable':
                            b.setEnabled(True);
                            result = 'ok';
                            break;

                        case 'disable':
                            b.setEnabled(False);
                            result = 'ok';
                            break;

                        case 'statement':
                            switch (shift cmd) {
                            case 'list':
                                result = b.getStatementIds();
                                break;

                            case 'assign':
                                b.assignStatement(shift cmd);
                                result = 'ok';
                                break;

                            case 'unassign':
                                b.unassignStatement(shift cmd);
                                result = 'ok';
                                break;
                            }
                            break;

                        case 'thread':
                            switch (shift cmd) {
                            case 'add':
                                b.addThreadId(receiveData.value);
                                result = 'ok';
                                break;
                            case 'remove':
                                b.removeThreadId(receiveData.value);
                                result = 'ok';
                                break;
                            case 'get':
                                result = b.getThreadIds();
                                result = 'ok';
                                break;
                            case 'set':
                                b.setThreadIds(list(receiveData.value));
                                result = 'ok';
                                break;
                            }
                            break;

                        case 'policy':
                            switch (shift cmd) {
                            case 'get':
                                result = b.getPolicy();
                                break;
                            case 'set':
                                b.setPolicy(receiveData.value);
                                result = 'ok';
                                break;
                            }
                            break;
                        }
                        break;
                    }
                    break;

                case 'thread':
                    
                default:
                    if (exists receiveData.tid) {
                        rwlThread.readLock();
                        on_exit rwlThread.readUnlock();
                        if (ctxThread{receiveData.tid}) {
                            ctxThread{receiveData.tid}.queue.push(('cx': cx, 'data': receiveData));
                        } else {
                            throw "DEBUG-HANDLER-ERROR", sprintf("threadId %y is not stopped", receiveData.tid);
                        }
                    } else {
                        throw "DEBUG-HANDLER-ERROR", sprintf("cannot process command %y", receiveData.cmd);
                    }
                }
                if (result) {
                    sendData.type = 'response';
                }
            } catch (hash ex) {
                sendData.type = 'error';
                result.err = ex.err;
                result.desc = ex.desc;
            }
            if (sendData) {
                sendData.uid = receiveData.uid;
                sendData.cmd = receiveData.cmd;
                if (exists receiveData.tid) {
                    sendData.tid = receiveData.tid;
                }
                sendData.result = result;
                handler.sendOne(receiveData.cx.id, sendData);
            }
        }

        private hash serializeBreakpoint(Breakpoint b) {

        }

        private Breakpoint resolveBreakpoint(Program pgm, string bkptId) {
        }

        private any resolveValue(string name, *string val, hash strings, any defVal) {
            if (exists val) {
                if (!exists strings{val}) {
                    throw "DEBUG-HANDLER-ERROR", sprintf("%y value %y is not found in %y", name, val, keys strings);
                }
                return strings{val};
            } else {
                return defVal;
            }
        }

        private string encodeValue(string name, any val, hash strings) {
            foreach string k in (keys strings) {
                if (strings{k} == val) {
                    return k;
                }
            }
            throw "DEBUG-HANDLER-ERROR", sprintf("Cannot encode %y value %y", name, val);
        }

        private *hash handleInterrupt(string func, Program pgm, reference runState, *string statementId, *string refName, *reference refValue, *hash except) {
            # serialize data, send to all websockets, break/suspend thread
            int tid = gettid();
            hash ctx.queue = new Thread::Queue();
            ctx.pgmId = pgm.getProgramId();
            {
                rwlThread.writeLock();
                on_exit rwlThread.writeUnlock();
             #   assert(!exists ctxThread{tid});
                ctxThread{tid} = ctx;
            }
            hash sendData1 = (
              'type': 'event',
              'cmd': 'interrupt',
              'tid': tid,
              'func': func,
              'runstate': runState,
              'frame': 0,
            );
            if (exists statementId) {
                hash location = pgm.getStatementIdInfo(statementId);
                sendData1.file = location.file;
                sendData1.line = location.start_line;
            }
            if (exists except) {
                sendData1.exception = except;
            }
            if (exists refName) {
                sendData1{refName} = refValue;
            }
            handler.sendAll(make_json(sendData1));

            {
                rwlConnection.writeLock();
                on_exit rwlConnection.writeUnlock();
                hash ctxCT;
                # default values
                ctxCT.runstate = runState;
                ctxCT{refName} = refValue;
                ctxCT.frameId = 0;
                ctxConnection{ctx.id}.thread{tid} = ctxCT;
            }

            # wait to process command passed as marshalled call from websocket thread
            bool ret = False;
            while (!ret) {
                hash response;
                hash sd;
                hash ctxCT;
                any rd = ctx.queue.get();
                {
                    rwlConnection.readLock();
                    on_exit rwlConnection.readUnlock();
                    ctxCT = ctxConnection{ctx.id}.thread{tid};
                }

                try {
                    list cmd = rd.cmd.split('/');
                    shift cmd;  # remove thread
                    switch (shift cmd) {
                    case 'go':
                        runState = ctxCT.runstate;
                        if (exists refName) {
                            refValue = ctxCT{refName};
                        }
                        ret = True;
                        break;

                    case 'local':
                        switch (shift cmd) {
                        case 'get':
                            hash lv = get_local_vars(ctxCT.frameId + frameOffset);
                            if (exists lv{rd.name}) {
                                response.value = lv{rd.name};
                            }
                            break;
                        case 'set':
                            set_local_var_value(rd.name, rd.value);
                            break;
                        }
                        break;

                    case 'debug':
                        switch (shift cmd) {
                        case 'get':
                            switch (shift cmd) {
                            case 'runstate':
                                ctxCT{rd.name} = resolveValue(rd.name, rd.value, runStateStrings, ctxCT{rd.name});
                                break;

                            case 'loop':
                                if (rd.name == refName) {
                                    ctxCT{rd.name} = resolveValue(rd.name, rd.value, retCodeStrings, ctxCT{rd.name});
                                }
                                break;

                            case 'dismiss':
                                if (rd.name == refName) {
                                    ctxCT{rd.name} = resolveValue(rd.name, rd.value, boolStrings, ctxCT{rd.name});
                                }
                                break;

                            case 'result':
                                if (rd.name == refName) {
                                    ctxCT{rd.name} = rd.value;
                                }
                                break;

                            case 'frame':
                                if (rd.value <= 0) {
                                    ctxCT.frameId = 0;
                                } else {
                                    ctxCT.frameId = int(rd.value);
                                }
                                break;
                            }
                            break;
                        }
                        break;

                    case 'get':
                        switch (rd.type) {
                        case 'local':
                            hash lv = get_local_vars(ctxCT.frameId + frameOffset);
                            if (exists lv{rd.name}) {
                                response.value = lv{rd.name};
                            }
                            break;

                        case 'global':
                            bool existF;
                            any v = pgm.getGlobalVariable(rd.name, existF);
                            if (existF) {
                                response.value = v;
                            }
                            break;

                        case 'debug':
                            switch (rd.name) {
                            case 'runstate':
                                response.value = encodeValue(rd.name, ctxCT{rd.name}, runStateStrings);
                                break;

                            case 'loop':
                                if (rd.name == refName) {
                                    response.value = encodeValue(rd.name, ctxCT{rd.name}, retCodeStrings);
                                }
                                break;

                            case 'dismiss':
                                if (rd.name == refName) {
                                    response.value = encodeValue(rd.name, ctxCT{rd.name}, boolStrings);
                                }
                                break;

                            case 'result':
                                if (rd.name == refName) {
                                    response.value = ctxCT{rd.name};
                                }
                                break;

                            case 'frame':
                                response.value = ctxCT.frameId;
                                break;

                            case 'program':
                                response.value.programId = pgm.getProgramId();
                                break;
                            }
                            break;
                        }
                        break;

                    case 'list':
                        switch (rd.name) {
                        case 'programs':
                        case 'breakpoint':
                        case 'stack':
                        }
                        break;

                    case 'stack':
                        list stack = get_thread_call_stack();
                        int i = frameOffset;
                        while (i > 0) {
                            shift stack;
                            i--;
                        }
                        response.stack = stack;
                        break;

                    case 'breakpoint':

                        break;
                    }

                } catch (hash ex) {
                    sd = ('event': 'error', 'description': ex.description);
                    handler.sendOne(rd.lid, sd);

                }
                if (response) {
                    sd = ('event': 'response');
                    sd.event = 'response';
                    sd.tid = tid;
                    sd += response;
                    try {
                        handler.sendOne(rd.lid, sd);
                    } catch (hash ex) {
                    }
                }
            }
            {
                rwlThread.writeLock();
                on_exit rwlThread.writeUnlock();
                remove ctxThread{tid};
            }
            # notify program is running again
            hash sd = (
              'type': 'event', 
              'cmd': 'run',
              'tid': tid,
              'runstate': runState,
            );
            handler.sendAll(make_json(sd));



/*
            #printf("%y: pgm: %y, %y, %y, %y\n", func, pgm, sb, location, extra);
            hash it = (
              'func': stResolve{func},
              'tid': gettid(),
            );
            *hash location;
            if (statementId) {
              location = pgm.getStatementIdInfo(statementId);
              it.file = location.file;
              it.line = location.start_line;
            }
            any act = getAction(func);
            if (exists act.localVars) {
              hash v = get_local_vars(2); # get local vars from program being debugged
              hash vv;
              foreach string lv in (act.localVars) {
                vv{lv}= v{lv}.value;
              }
              it.localVars = vv;
            }
            it += extra;
            push traceLog, it;
            if (exists act) {
              shift actions;
              if (act.typeCode() == NT_HASH) {
                if (exists act.sb)
                  sb = act.sb;
              } else {
                sb = act;
              }
            }
        #printf("it:%y, sb:%d, act:%y\n", it, sb, act);  */
        }

        onAttach(Program pgm, reference rs) {
            handleInterrupt("attach", pgm, \rs);
          }

        onDetach(Program pgm, reference rs) {
            handleInterrupt("detach", pgm, \rs);
        }

        onStep(Program pgm, string blockStatementId, *string statementId, reference retCode, reference rs) {
            handleInterrupt(statementId ? 'step' : 'block', pgm, \rs, statementId ?? blockStatementId, "loop", \retCode);
        }

        onFunctionEnter(Program pgm, string statementId, reference rs) {
            handleInterrupt('funcEnter', pgm, \rs, statementId);
        }

        onFunctionExit(Program pgm, string statementId, reference result, reference rs) {
            handleInterrupt('funcExit', pgm, \rs, statementId, "result", \result);
        }

        onException(Program pgm, string statementId, hash ex, reference dismiss, reference rs) {
            handleInterrupt('exception', pgm, \rs, statementId, "dismiss", \dismiss, ex);
        }
    }
}
