# -*- mode: qore; indent-tabs-mode: nil -*-
# @file FixedLengthUtil.qm Qore user module for working with files with fixed lines length

# TODO: remove key "types" from specs because there is the only key so it is possible to simplify
# TODO: transition state error checking - keep type of the current line in some attribute variable and check possibility of this transition if the current state changes

/*  FixedLengthUtil.qm Copyright 2012 - 2014 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.11
%requires Util
%requires TextUtil
%require-types
%enable-all-warnings
%new-style

module FixedLengthUtil {
    version = "1.0";
    desc    = "user module for working with files with fixed length lines";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage FixedLengthUtil Module

    @tableofcontents

    @section fixedlengthutilintro Introduction to the FixedLengthUtil Module

    The %FixedLengthUtil module provides functionality for parsing files with fixed length lines.

    To use this module, use \c "%requires FixedLengthUtil" in your code.
    
    All the public symbols in the module are defined in the FixedLengthUtil namespace

    Currently the module provides the following classes:
    - @ref FixedLengthUtil::FixedLengthAbstractIterator "FixedLengthAbstractIterator": iterator class allowing for fixed-length-line data to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthFileIterator "FixedLengthFileIterator": iterator class allowing for fixed-length-line file to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthDataIterator "FixedLengthDataIterator": iterator class allowing for fixed-length-line strings to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthAbstractWriter "FixedLengthAbstractWriter": Fixed length line writer
    - @ref FixedLengthUtil::FixedLengthFileWriter "FixedLengthFileWriter": Fixed length line writer into the file
    - @ref FixedLengthUtil::FixedLengthDataWriter "FixedLengthDataWriter": Fixed length line writer into the variable

    <b>Example of reading:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthUtil

code identify_type = *string sub (string line) {
    if (line.length() == 7) {
        return "type1";
    }
    if (line.length() == 12) {
        return "type2";
    }
    return NOTHING;
};

hash specs = (
    "type1" : (
        "col1" : (
            "length" : 5,
            "type"   : "int"
        ),
        "col2" : (
            "length" : 2,
            "type"   : "string",
        ),
    ),
    "type2" : (
        "col3" : (
            "length" : 1,
            "type"   : "string",
        ),
        "col4" : (
            "length" : 3,
            "type"   : "string",
        ),
        "col5" : (
            "length"   : 8,
            "type"     : "date",
            "format"   : "DDMMYYYY",
            # "timezone" : "Europe/Prague", # use global if omitted
        ),
    ),
);

hash global_options = (
    "encoding"     : "UTF-8",
    "eol"          : "\n",
    "ignore-empty" : True,
    "timezone"     : "Europe/Prague", # used if not in some date column specification
);

FixedLengthFileIterator i(file, specs, identify_type, global_options);
while(i.next()) {
    printf("%s\n", i.getValue());
}
    @endcode

    <b>Example of writing:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthUtil

list data = (
    ("col1" : 11111, "col2" : "bb"),
    ("col3" : "c", "col4" : "ddd", "col5" : "31122014"),
    ("col1" : 22222, "col2" : "gg"),
);

code identify_type = *string sub (string line) {
    if (line.length() == 7) {
        return "type1";
    }
    if (line.length() == 12) {
        return "type2";
    }
    return NOTHING;
};

hash specs = (
    "type1" : (
        "col1" : (
            "length" : 5,
            "type"   : "int"
        ),
        "col2" : (
            "length" : 2,
            "type"   : "string",
        ),
    ),
    "type2" : (
        "col3" : (
            "length" : 1,
            "type"   : "string",
        ),
        "col4" : (
            "length" : 3,
            "type"   : "string",
        ),
        "col5" : (
            "length"   : 8,
            "type"     : "date",
            "format"   : "DDMMYYYY",
            "timezone" : "Europe/Prague",
        ),
    ),
);

hash global_options = (
    "eol" : "\n",
);

FixedLengthFileWriter w(file, specs, identify_type, global_options);
w.write(data);
    @endcode

    @section fixedlengthutil_relnotes Release Notes

    @subsection fixedlengthutil_v1_0 Version 1.0
    - initial version of module
*/

#! the FixedLengthUtil namespace contains all the definitions in the FixedLengthUtil module
public namespace FixedLengthUtil {
}

#! structured line iterator for abstract data allowing efficient "pipelined" processing
public class FixedLengthUtil::FixedLengthAbstractIterator inherits TextUtil::AbstractTextIterator {
    private {
        hash specs;
        code identify_record;
        # hash opts; # encoding, eol, ignore-empty, timezone
    }

    #! creates the FixedLengthAbstractIterator object
    /**
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(hash h, code i, *hash g) : TextUtil::AbstractTextIterator(hash() + (g.encoding ? ("encoding" : g.encoding) : hash()) + (g.eol ? ("eol" : g.eol) : hash()) + (g{"ignore-empty"} ? ("ignore-empty" : g{"ignore-empty"}) : hash()) + (g.timezone ? ("timezone" : g.timezone) : hash()) + (g.number_format ? ("number_format" : g.number_format) : hash()) + (g.date_format ? ("date_format" : g.date_format) : hash())) { # TODO : this is ugly! how to do it better? hashmap? or call in sub body?
        specs           = h;
        identify_record = i;
        m_opts          = m_opts + checkOptions(g);
    }

    abstract *string getLine();

    #! returns the current record as a hash
    /** @par Example:
        @code
my hash $h = $i.getValue();
        @endcode

        @return the current record as a hash
    */
    *hash getValue() {
        *string line = getLine();

        if (!line) {
            return NOTHING;
        }

        hash result = hash();

        *string type = call_function_args(identify_record, line);
        if (!type || !specs{type}) {
            throw 'NON-MATCHING-TYPE', 'Line type not detected correctly for line >' + line + '<';
        }
        int pos = 0;
        foreach string col in (specs{type}.keys()) {
            hash field = specs{type}{col};
            if (!field.timezone) {
                field.timezone = m_opts.timezone;
            }
            result{col} = transform(line.substr(pos, field.length), field);
            pos += field.length;
        }
        return result;
    }

    private hash checkOptions(*hash opts) { # put special options here
        return opts;
    }
}

#! structured line iterator for fixed-length-line files allowing efficient "pipelined" processing of fixed-length-line data
public class FixedLengthUtil::FixedLengthFileIterator inherits private FixedLengthUtil::FixedLengthAbstractIterator, FileLineIterator {
    private {
        string file;
    }

    #! creates the FixedLengthFileIterator object
    /**
    @param f file to read
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(string f, hash h, code i, *hash g) : FixedLengthUtil::FixedLengthAbstractIterator(h, i, g), FileLineIterator(f, g.encoding.typeCode() == NT_STRING ? g.encoding : NOTHING, g.eol.typeCode() == NT_STRING ? g.eol : NOTHING) {
        file  = f;
    }

    #! returns a line
    /** @return the current line
    */
    private string getLine() {
        return FileLineIterator::getValue();
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        bool status = FileLineIterator::next();
        if (m_opts{"ignore-empty"}) {
            while (status && getLine() == '') {
                status = FileLineIterator::next();
            }
        }
        return status;
    }
}

#! structured line iterator for fixed-length-line strings allowing efficient "pipelined" processing of fixed-length-line data
public class FixedLengthUtil::FixedLengthDataIterator inherits private FixedLengthUtil::FixedLengthAbstractIterator {
    private {
        int position;
        int max_index;

        list lines;
        int lines_pos;

        string data;
    }

    #! creates the FixedLengthFileIterator object
    /**
    @param r string to process
    @param h specification of fixed-length-line file   
    @param g global options
    */
    constructor(string r, hash h, code i, *hash g) : FixedLengthUtil::FixedLengthAbstractIterator(h, i, g) {
        data  = r;
    }

    private createLines() {
        string separator = m_opts.eol ? m_opts.eol : "\n";
        lines = data.split(separator);
        lines_pos = 0;
    }

    private *string getLine() {
        if (!lines) {
            createLines();
        }

        return lines[lines_pos];
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        lines_pos++;
        if (!lines) {
            createLines();
        }
        bool status = boolean(getLine() !== NOTHING);
        if (m_opts{"ignore-empty"}) {
            while (status && getLine() == "") { # skip empty lines
                lines_pos++;
                status = boolean(getLine() !== NOTHING);
            }
        }
        return status;
    }
}



#! structured writer
public class FixedLengthUtil::FixedLengthAbstractWriter inherits TextUtil::AbstractTextWriter {
    private {
        hash specs;
        code identify_record;
    }

    #! creates the FixedLengthAbstractWriter object
    /**
    @param h specification of fixed-length-line file   
    @param g global options
    */
    constructor(hash h, *code i, *hash g) : TextUtil::AbstractTextWriter(hash() + (g.eol ? ("eol" : g.eol) : hash())) {
        specs           = h;
        identify_record = i;
        delete g.eol;
        m_opts          = m_opts + checkOptions(g);
    }

    private bool checkItemTypeCombination(hash item, string type, string line_candidate) {
        hash type_specs = specs{type};
        # not this line if columns count mismatch
        if (elements type_specs.keys() != elements item.keys()) {
            return False;
        }

        # not this line type if columns sizes mismatch
        bool skip = False; # TODO: I don't like this :-(
        foreach string col in (type_specs.keys()) {
            if (!item{col} || string(item{col}).length() != type_specs{col}{"length"}) {
                skip = True;
            }
        }
        if (skip) {
            return False;
        }

        # not this line type if check fails
        if (type != call_function_args(identify_record, line_candidate)) {
            return False;
        }

        return True;
    }

#    abstract write();
}


#! writer for fixed-length-line files
public class FixedLengthUtil::FixedLengthFileWriter inherits FixedLengthUtil::FixedLengthAbstractWriter {
    private {
        string file;
    }
    
    #! creates the FixedLengthFileWriter object
    /**
    @param f file to write
    @param h specification of fixed-length-line file
    @param g global options
    */
    constructor(string f, hash h, code i, *hash g) : FixedLengthUtil::FixedLengthAbstractWriter(h, i, g)  {
        file  = f;
    }

    #! stream iterator into the file.
    /**
    @param iterator an iterator to stream data into file
    */
    write(list lines) {
        File FW = new File();
        FW.open(file, O_WRONLY | O_CREAT);

        foreach hash item in (lines) {
            foreach string type in (specs.keyIterator()) {
                string line_candidate = join("", map string($1), item.values());
                if (checkItemTypeCombination(item, type, line_candidate)) {
                    FW.write(line_candidate + (m_opts.eol ? m_opts.eol : "\n"));
                    break;
                }
            }
        }

        FW.close();
    }
}


#! writer for fixed-length-line data
public class FixedLengthUtil::FixedLengthDataWriter inherits FixedLengthUtil::FixedLengthAbstractWriter {
    #! creates the FixedLengthFileWriter object
    /**
    @param f file to write
    @param h specification of fixed-length-line file        
    @param g global options
    */
    constructor(hash h, code i, *hash g) : FixedLengthUtil::FixedLengthAbstractWriter(h, i, g) {
    }

    #! stream iterator into the string
    /**
    @param iterator an iterator to stream data into string
    */
    string write(list lines) {
        string result = "";

        foreach hash item in (lines) {
            foreach string type in (specs.keys()) {
                string line_candidate = join("", map string($1), item.values());
                if (checkItemTypeCombination(item, type, line_candidate)) {
                    result += line_candidate + (m_opts.eol ? m_opts.eol : "\n");
                    break;
                }
            }
        }

        return result;
    }
}
