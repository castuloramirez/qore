/** @page release_notes Release Notes

    @tableofcontents

    @section qore_086 Qore 0.8.6

    @par Release Summary
    Major new features and a few bug fixes

    @subsection qore_086_compatibility Changes That Can Affect Backwards-Compatibility

    @par Changes in the Socket Class
    The @ref Qore::Socket "Socket" class was enhanced to support timeouts with non-blocking I/O on all send operations; 
    many Socket methods that send data were originally implemented to return an error code on error, however they would
    also throw exceptions if the socket were not open, so the error handling was inconsistent (exceptions versus return codes).\n\n
    Additionally it was not possible to get error information at all for SSL errors if the socket was connected with SSL, which,
    according to %Qore's socket design, should be transparent for the programmer.\n\n
    For these reasons the implementation was deemed inconsistent and unintuitive; the change was to add optional timeout parameters
    to all send methods and to allow the methods to throw exceptions (instead of simply returning -1 and not being able to determine the cause of the error in many cases).\n\n
    The following methods were updated to accept optional timeout parameters and throw exceptions on all errors rather than a return code for I/O errors:
    - Qore::Socket::send()
    - Qore::Socket::sendBinary()
    - Qore::Socket::sendi1()
    - Qore::Socket::sendi2()
    - Qore::Socket::sendi4()
    - Qore::Socket::sendi8()
    - Qore::Socket::sendi2LSB()
    - Qore::Socket::sendi4LSB()
    - Qore::Socket::sendi8LSB()

    @par New Abstract Method in AbstractIterator
    The following abstract method was added:
    - Qore::AbstractIterator::valid() was added (with concrete implementations in all iterator classes derived from this base class delivered with %Qore); this method tells if the object is currently pointing to a valid iterator.\n\n For any user classes inherting @ref Qore::AbstractIterator "AbstractIterator" directly (as opposed to another concrete iterator class in %Qore, where the method has already been added), a concrete implementation of this method will have to be added as well or that class will become @ref abstract with this release of %Qore.

    @subsection qore_086_new_features New Features in Qore
    @par Perl-Style Boolean Evaluation
    The @ref perl-bool-eval "%perl-bool-eval" parse option was implemented to address one of the oldest design bugs in %Qore: strict mathematical boolean evaluation.  Setting @ref perl-bool-eval "%perl-bool-eval" is highly recommended as it makes boolean evaluation much more logical and intuitive for qore scripts / programs.

    @par Arbitrary-Precision Numeric Support
    %Qore now uses the <a href="http://www.mpfr.org/">MPFR</a> and <a href="http://gmplib.org">GMP</a> libraries to provide arbitrary-precision numeric support.  This type can be used for high-precision mathematics or for storing \c NUMERIC (ie \c DECIMAL or \c NUMBER) column values when retrieved from databases by %Qore DBI drivers that support the new capability @ref Qore::SQL::DBI_CAP_HAS_NUMBER_SUPPORT "DBI_CAP_HAS_NUMBER_SUPPORT" (previously these values would be retrieved as %Qore strings in order to avoid information loss).\n\n
    For more information, see the new @ref number "number" type, @ref number_type, and @ref Qore::zzz8numberzzz9

    @par DBI Improvements
    Three new DBI capabilities were implemented, including a new option API as follows:
    - @ref Qore::SQL::DBI_CAP_HAS_NUMBER_SUPPORT "DBI_CAP_HAS_NUMBER_SUPPORT": DBI drivers declaring this capability can accept @ref number "number" values and can also return @ref number "number" values, if a DBI driver does not declare this capability, then @ref number "number" values sent for binding by value are automatically converted to @ref float "float" values before being sent to the driver
    - @ref Qore::SQL::DBI_CAP_HAS_OPTION_SUPPORT "DBI_CAP_HAS_OPTION_SUPPORT": this indicates that the driver supports the new option API, allowing options to be set on each connection.  See the following for more information:
      - @ref Qore::SQL::Datasource::constructor(hash) "Datasource::constructor(hash)": now passes options to the DBI driver if the driver supports the option API
      - @ref Qore::SQL::Datasource::constructor(string) "Datasource::constructor(string)": (new in 0.8.6) passes options to the DBI driver if the driver supports the option API
      - @ref Qore::SQL::Datasource::getOption(string) "Datasource::getOption(string)": (new in 0.8.6) returns the value of the given option if the driver supports the option API
      - @ref Qore::SQL::Datasource::getOptionHash() "Datasource::getOptionHash()": (new in 0.8.6) returns a hash of the current option values for the current connection if the driver supports the option API
      - @ref Qore::SQL::Datasource::setOption() "Datasource::setOption()": (new in 0.8.6) allows options to be changed after the object is created
      - @ref Qore::SQL::DatasourcePool::constructor(hash) "DatasourcePool::constructor(hash)": now passes options to the DBI driver if the driver supports the option API
      - @ref Qore::SQL::DatasourcePool::constructor(string) "DatasourcePool::constructor(string)": (new in 0.8.6) passes options to the DBI driver if the driver supports the option API
      - @ref Qore::SQL::DatasourcePool::getOption(string) "DatasourcePool::getOption(string)": (new in 0.8.6) returns the value of the given option if the driver supports the option API
      - @ref Qore::SQL::DatasourcePool::getOptionHash() "DatasourcePool::getOptionHash()": (new in 0.8.6) returns a hash of the current option values for the current connection if the driver supports the option API
      - @ref Qore::SQL::dbi_get_driver_options(string) "dbi_get_driver_options(string)": (new in 0.8.6) returns a hash of driver option information without values
    - @ref Qore::SQL::DBI_CAP_SERVER_TIME_ZONE "DBI_CAP_SERVER_TIME_ZONE": indicates that the DBI driver will convert any bound date/time values to the server's time zone before binding and also will tag date/time values retrieved from the server with the server's time zone.  This capability also implies that the driver supports the new \c "timezone" option.

    @par Socket Improvements
    The @ref Qore::Socket "Socket" class was updated to support non-blocking I/O on all send methods; the following methods were updated to accept optional timeout parameters:
    - Qore::Socket::send2()
    - Qore::Socket::sendBinary2()
    - Qore::Socket::sendHTTPMessage()
    - Qore::Socket::sendHTTPResponse()
    .
    The following methods were enhanced to provide better error information when throwing exceptions:
    - Qore::Socket::recvi1()
    - Qore::Socket::recvi2()
    - Qore::Socket::recvi4()
    - Qore::Socket::recvi8()
    - Qore::Socket::recvi2LSB()
    - Qore::Socket::recvi4LSB()
    - Qore::Socket::recvi8LSB()
    - Qore::Socket::recvu1()
    - Qore::Socket::recvu2()
    - Qore::Socket::recvu4()
    - Qore::Socket::recvu2LSB()
    - Qore::Socket::recvu4LSB()

    @par Iterator Improvements
    The following improvements were made in qore to support more flexible and ubiquitous iterators:
    - new iterator classes:
      - @ref Qore::SingleValueIterator "SingleValueIterator": allows single values (or any value without an iterator class) to be iterated
      - @ref Qore::FileLineIterator "FileLineIterator": allows files to be iterated line by line
      - @ref Qore::ObjectIterator "ObjectIterator": a generic iterator for objects
      - @ref Qore::ObjectReverseIterator "ObjectReverseIterator": a generic reverse iterator for objects
      - @ref Qore::RangeIterator "RangeIterator": a numerical sequence generator (the base for the return type for the new @ref Qore::xrange() "xrange()" function
    - new pseudo-methods were added to return iterator objects based on the value type:
      - <value>::iterator()
      - <hash>::iterator()
      - <list>::iterator()
      - <object>::iterator()
      .
      The base pseudo-method (<value>::iterator()) ensures that any value can be iterated, and the type-specific methods ensure that the most suitable iterator for container types is returned for container values; values without an iterator class are iterated with the @ref Qore::SingleValueIterator "SingleValueIterator"
    - the @ref Qore::HashIterator "HashIterator" and @ref Qore::HashReverseIterator "HashReverseIterator" classes had an additional optional boolean argument added to their constructors; if @ref Qore::True "True", then the @ref Qore::HashIterator::getValue() "HashIterator::getValue()" and @ref Qore::HashReverseIterator::getValue() "HashReverseIterator::getValue()" methods return a hash with the following keys: \c "key" and \c "value", allowing for more convenient iteration with constructions that only use \c getValue() methods (such as the @ref foreach "foreach statement")
    - all iterator classes had copy methods added to them (ex: @ref Qore::HashIterator::copy())
    - new Python-inspired @ref Qore::range() "range()" and @ref Qore::xrange() "xrange()" functions (the latter returning a @ref Qore::RangeIterator "RangeIterator" object to efficiently iterate large integral sequences or ranges
 
    @par Text File Parsing Enhancements
    The following improvements were made in qore to support more flexible file parsing:
    - the @ref Qore::ReadOnlyFile class was added as a parent class of @ref Qore::File to allow for a more convenient API for reading files (the @ref Qore::File class's API remains the same as it publically inherits  @ref Qore::ReadOnlyFile)
    - the @ref Qore::ReadOnlyFile::readLine() "ReadOnlyFile::readLine()" method (formerlly a method of the @ref Qore::File class) was enhanced to accept 2 optional arguments, allowing the end of line character(s) to be stripped from the line returned, and also to allow the end of line characters to be specified.  If no end of line characters are specified, then the method automatically determines the end of line characters (can be \c "\n", \c "\r", or \c "\r\n"; the last one only if the underlying file is not a TTY in order to avoid stalling I/O on an interactive TTY)
    - the @ref file_stat_constants were moved from the @ref Qore::File class to the @ref Qore::ReadOnlyFile class
    - added a new @ref Qore::FileLineIterator "FileLineIterator" iterator class
    - added a new optional parameter to <string>::split(string, string, bool) and Qore::split(string, string, string, bool) to allow for automatic stripping unquoted fields of leading and trailing whitespace (the default is the old behavior; i.e. leave the whitespace as it is read)
    - added a new @ref Qore::TimeZone "TimeZone" method for parsing string dates in a specific @ref Qore::TimeZone "TimeZone": @ref Qore::TimeZone::date(string, string)
    - added a new function for parsing text as a boolean value: @ref Qore::parse_boolean() "parse_boolean()"

    @par Other Improvements and Changes
    - the @ref foreach "foreach statement" now iterates objects derived from @ref Qore::AbstractIterator "AbstractIterator"
    - added a @ref Qore::Option::HAVE_SYMLINK "HAVE_SYMLINK" constant for the symlink() function added in qore 0.8.5
    - added the @ref Qore::SQL::SQLStatement::memberGate() "SQLStatement::memberGate()" method so @ref Qore::SQL::SQLStatement "SQLStatement" objects can be dereferenced directly to a column value when iterated with @ref Qore::SQL::SQLStatement::next() "SQLStatement::next()"; also this method will throw exceptions when an unknown column name is used so that typos in column names can be caught (instead of being silently ignored producing hard to find bugs)
    - implemented @ref Qore::SQL::Datasource::constructor(string) "Datasource::constructor(string)" and @ref Qore::SQL::DatasourcePool::constructor(string) "DatasourcePool::constructor(string)" variants to allow for creating datasources from a string that can be parsed by Qore::SQL::parse_datasource(string) "parse_datasource(string)"
    - added the following new DBI-related functions:
      - @ref Qore::SQL::dbi_get_driver_list() "dbi_get_driver_list()"
      - @ref Qore::SQL::dbi_get_driver_capability_list(string) "dbi_get_driver_capability_list(string)"
      - @ref Qore::SQL::dbi_get_driver_capabilities(string) "dbi_get_driver_capabilities(string)"
      - @ref Qore::SQL::dbi_get_driver_options(string) "dbi_get_driver_options(string)"
      - @ref Qore::SQL::parse_datasource(string) "parse_datasource(string)"
    - implemented support for \c "A" and \c "a", (hexadecimal floating-point output) \c "G", \c "g", (compact floating-point output) \c "F", (non-scientific floating-point output) and \c "E" and \c "e" (scientific/exponential floating-point output) format arguments for @ref float "floats" and @ref number "numbers" (new arbitrary-precision @ref number "number type values"); see @ref string_formatting
    - new pseudo-methods:
      - <value>::toString()
      - <value>::toInt()
      - <value>::toFloat()
      - <value>::toBool()
      - <float>::format(string fmt)
      - <int>::format(string fmt)
      - <string>::isDataAscii()
      - <string>::isDataPrintableAscii()
      - <value>::callp() (also <callref>::callp())
    - the value of the @ref Qore::SQL::NUMBER "NUMBER", @ref Qore::SQL::NUMERIC "NUMERIC", and @ref Qore::SQL::DECIMAL "DECIMAL" @ref sql_constants is now \c "number" instead of \c "string" (see also @ref sql_binding)
    - new constants:
      - @ref Qore::M_PIn "M_PIn"
      - @ref Qore::MAXINT "MAXINT"
      - @ref Qore::MININT "MININT"
    - new functions:
      - @ref Qore::range() "range()"
      - @ref Qore::xrange() "xrange()"
    - new methods:
      - @ref Qore::ReadOnlyFile::isTty() and @ref Qore::ReadOnlyFile::getFileName() (the @ref Qore::ReadOnlyFile class was added in qore 0.8.6 otherwise made up of methods formerly belonging to the @ref Qore::File class)
    - updated docs to show functional restrictions tagged at the class level

    @subsection qore_086_bug_fixes Bug Fixes in Qore
    - fixed a bug in the @ref map "map operator" with a select expression when the list operand is @ref nothing; it was returning a list with one @ref nothing element instead of @ref nothing
    - applied a patch by Reini Urban to allow for multi-arch builds on Debian
    - fixed bugs calculating the byte offset for string searches in the c++ %QoreString::index() and %QoreString::rindex() functions when the offset is negative and the strings have a multi-byte character encoding (such as UTF-8)
    - fixed a bug where calling an abstract method from a class where the abstract method is implemented was causing a parse error to be thrown
    - fixed a bug where the wrong source code location was displayed when raising a parse exception in operator expression parse initialization for some operators
    - fixed bugs in regexes in the HttpServer::addListeners() and HttpServer::addListenersWithHandler() methods (HttpServer module version updated to 0.3.5)
    - fixed bugs handling non-blocking reads in the @ref Qore::Socket "Socket" class; the timeout setting was only enforced for the first read; subsequent reads were made as blocking reads
    - fixed a bug handling in the @ref Qore::Socket "Socket" class when the SSL session requires renegotiation during non-blocking I/O
    - File::constructor() now throws an exception if called with a tty target and @ref no-terminal-io "%no-terminal-io" is set
    - fixed a bug in split with quote (<string>::split(string, string, bool) and Qore::split(string, string, string, bool)) if the separator pattern was not found and the single field was not quoted either
    - fixed a bug in nested %ifdef and %ifndef blocks with %else in the inside block
    - added code tags to @ref Qore::File "File" methods without side effects
    - made many minor documentation fixes

    @section qore_0851 Qore 0.8.5.1

    @par Release Summary
    Bugfix release

    @subsection qore_0851_bug_fixes Bug Fixes in Qore
    - fixed a race condition accessing global and closure-bound thread-local variables in multithreaded contexts
    - fixed a bug in transaction management with the @ref Qore::SQL::DatasourcePool "DatasourcePool" class when used with the @ref Qore::SQL::SQLStatement "SQLStatement" class
    - fixed an error in the <a href="../../modules/MailMessage/html/index.html">MailMessage.qm</a> user module where mail headers requiring encoding were not encoded and those not requiring encoding were encoded with Q encoding
    - fixed an error in the <a href="../../modules/Mime/html/index.html">Mime.qm</a> user module where \c "_" characters in q-encoded headers were not encoded correctly

    <hr>
    @section qore_085 Qore 0.8.5

    @par Release Summary
    Major new features and a few bug fixes

    @subsection qore_085_new_features New Features in Qore
    @par Abstract Methods and Interfaces
    %Qore now supports the <b>abstract</b> keyword when declaring methods; an <b>abstract</b> method has no implementation and must be
    implemented in child classes with the same signature for the child class to be instantiated.\n\n
    Classes with <b>abstract</b> methods define interfaces; a concrete implementation of the interface is a class that inherits the class with <b>abstract</b> methods and implements all the <b>abstract</b> methods.\n\n
    Abstract methods are defined with the following syntax:
    @code
class MyAbstractInterface {
    abstract string doSomething(int $param);
    abstract bool checkSomething(string $arg);
}
    @endcode
    The following abstract classes now exist in %Qore:
    - @ref Qore::SQL::AbstractDatasource "AbstractDatasource"
    - @ref Qore::AbstractIterator "AbstractIterator"
      - @ref Qore::AbstractQuantifiedIterator "AbstractQuantifiedIterator"
      - @ref Qore::AbstractBidirectionalIterator "AbstractBidirectionalIterator"
      - @ref Qore::AbstractQuantifiedBidirectionalIterator "AbstractQuantifiedBidirectionalIterator"
    - @ref Qore::Thread::AbstractSmartLock "AbstractSmartLock" (which was already present in Qore but now implements abstract methods)
    .
    The following new iterator classes have been added to %Qore:
    - @ref Qore::HashIterator "HashIterator"
      - @ref Qore::HashReverseIterator "HashReverseIterator"
    - @ref Qore::HashListIterator "HashListIterator"
      - @ref Qore::HashListReverseIterator "HashListReverseIterator"
    - @ref Qore::ListHashIterator "ListHashIterator"
      - @ref Qore::ListHashReverseIterator "ListHashReverseIterator"
    - @ref Qore::ListIterator "ListIterator"
      - @ref Qore::ListReverseIterator "ListReverseIterator"
    - @ref Qore::SQL::SQLStatement "SQLStatement" (which was already present in %Qore but now implements the @ref Qore::AbstractIterator "AbstractIterator" interface)
    .
    Classes inheriting @ref Qore::AbstractIterator "AbstractIterator" have special support so that objects can be easily iterated in the following list operators:
    - @ref map
    - @ref foldr and @ref foldl
    - @ref select
    .
    @par Universal References
    All restrictions on references have been removed from %Qore; references to local variables may now be passed to the @ref background "background operator" and passed as arguments to @ref closure "closures".\n\n
    Basically when a reference is taken of a local variable that could result in the local variable being accessed in a multi-threaded context, the variable is treated as a closure-bound local variable in the sense that it's lifetime is reference-counted, and all accesses are wrapped in a dedicated mutual-exclusion lock to ensure thread safety.

    @par Pop3Client Module
    A <a href="../../modules/Pop3Client/html/index.html">Pop3Client</a> module has been added providing an API for communicating with <a href="http://en.wikipedia.org/wiki/Post_Office_Protocol">POP3</a> servers and retrieving email messages.\n\n
    The module uses functionality provided by the new <a href="../../modules/MailMessage/html/index.html">MailMessage</a> module to represent email messages (and attachment data) downloaded from the server.

    @par MailMessage Module
    The <a href="../../modules/MailMessage/html/index.html">MailMessage</a> module provides common functionality to the <a href="../../modules/Pop3Client/html/index.html">Pop3Client</a> and <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a> modules to represent email messages for receiving and sending, respectively.  This module was created mostly from functionality removed from the <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a> and enhanced to provide support for reading email messages in the new <a href="../../modules/Pop3Client/html/index.html">Pop3Client</a> module.

    @par SmtpClient Module Changes
    The Message and Attachment classes were removed from the <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a> module to the <a href="../../modules/MailMessage/html/index.html">MailMessage</a> module.  Backwards-compatible definitions for the Message and Attachment classes are provided in the <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a> module to rexport the removed functionality for backwards compatibility.

    @par Other Minor Improvements and Changes
    - qpp updated to support abstract methods and multiple inheritance (+ other minor qpp enhancements)
    - improved the \c QOREADDRINFO-GETINFO-ERROR exception description by adding information about the arguments passed
    - added a string argument to @ref Qore::chr(softint, __7_ string) "char(softint, *string)" to accept an output encoding
    - added a @ref Qore::int(string, softint) "int(string, softint)" variant to parse a string as a number and give the base
    - added a new parameter to parse_url() and parseURL() to allow for any [] in the hostname to be included in the \c "host" output key for indicating that the <a href="http://wikipedia.org/wiki/IPv6">ipv6</a> protocol be used
    - added the following pseudo-methods:
      - Qore::zzz8valuezzz9::lsize()
      - Qore::zzz8binaryzzz9::split()
      - Qore::zzz8binaryzzz9::toMD5()
      - Qore::zzz8binaryzzz9::toSHA1()
      - Qore::zzz8binaryzzz9::toSHA224()
      - Qore::zzz8binaryzzz9::toSHA256()
      - Qore::zzz8binaryzzz9::toSHA384()
      - Qore::zzz8binaryzzz9::toSHA512()
      - Qore::zzz8datezzz9::midnight()
      - Qore::zzz8listzzz9::first()
      - Qore::zzz8listzzz9::join()
      - Qore::zzz8listzzz9::last()
      - Qore::zzz8listzzz9::lsize()
      - Qore::zzz8nothingzzz9::lsize()
      - Qore::zzz8stringzzz9::regex()
      - Qore::zzz8stringzzz9::regexExtract()
      - Qore::zzz8stringzzz9::split()
      - Qore::zzz8stringzzz9::substr()
      - Qore::zzz8stringzzz9::toMD5()
      - Qore::zzz8stringzzz9::toSHA1()
      - Qore::zzz8stringzzz9::toSHA224()
      - Qore::zzz8stringzzz9::toSHA256()
      - Qore::zzz8stringzzz9::toSHA384()
      - Qore::zzz8stringzzz9::toSHA512()
    - added the <a href="http://code.google.com/p/xxhash/">xxhash FAST algorithm</a> with unordered_map to %Qore on supported platforms resuling in nearly 2x haster hash lookups
    - added the Qore::File::isOpen() method
    - added the Qore::call_pseudo() function to explicitly call a pseudo method on a value
    - added the Qore::symlink() function to create symbolic links
    - added Qore::TypeCodeMap and Qore::TypeNameMap to lookup type codes from type names and vice versa
    - added the following functions to allow the time zone to be set per thread:
      - Qore::set_thread_tz()
      - Qore::get_thread_tz()

    @subsection qore_085_bug_fixes Bug Fixes in Qore
    - fixed format_date() output for \c "MON" and \c "DAY", etc
    - fixed a memory leak in the parser related to parse exception handling with namespace members
    - fixed an invalid assert() in module handling when an error occurs loading the module (only affected debug builds)
    - tagged digest and crypto functions internally as @ref RET_VALUE_ONLY
    - do not kill TID 1 (the initial / main thread) when calling exit() in background threads as a crash can result with some 3rd party libraries that spawn their own threads on some platforms (observed on Darwin & Solaris 10 at least)
    - fixed a memory bug in the new builtin function API used by modules built with qpp
    - fixed memory bugs in the type system where uninitialized type pointers could be used causing a crash
    - fixed a memory bug in handling "or nothing" types where a non-null pointer would be assumed to be a pointer to the type, however it could actually be a pointer to the NOTHING object, the fix was to ensure that any NOTHING objects in argument lists would be substituted with a null pointer
    - fixed a bug in parse-time variant matching where an argument with parse-time type "object" would be matched as a perfect match to any parameter with any class restriction; this would cause run-time type errors if another valid class was passed that matched another variant of the method or function
    - fixed a build bug that caused qore to be built twice

    <hr>
    @section qore_084 Qore 0.8.4

    @par Release Summary
    Major new features and changes that can affect backwards-compatibility, plus 40 bug fixes

    @subsection qore_084_compatibility Changes That Can Affect Backwards-Compatibility

    @par Namespace Changes
    %Qore's internal namespace handling was nearly completely rewritten for %Qore 0.8.4.  This is because the old code was inefficient and applied namespaces inconsistently to @ref Qore::Program "Program" objects.\n\n
    The main change that can cause backwards-compatibility issues is that now functions are full namespace members.  If no namespace is explicitly given in a function definition, the function is a member of the unnamed root namespace.\n\n
    Also the distinction between builtin and user functions was removed.  Internally, there is only one kind of function object, which can contain both builtin and user function variants (overloaded variants of the same function with the same name but different arguments).\n\n
    All %Qore builtin functions were moved to the Qore namespace.\n\n
    Other namespace changes:
    - loading namespaces provided by builtin modules into a @ref Qore::Program "Program" object is now an atomic operation that may fail, if, for example, objects have already been defined in the target @ref Qore::Program "Program" with the same name as objects provided by the builtin module.  Previously this could cause undefined behavior.
    - namespace lookups are now truly breadth-first as documented; previously the algorithm was depth-first (contrary to the documentation)
    - namespace lookups are now done (both at parse time and runtime) with the help of symbol lookup tables for fast lookups; tables are maintained for both committed and temporary uncomitted parse symbols; this leads to up to 3x faster parsing for %Qore code
    - global variables are also now full namespace members, however this does not cause problems with backwards-compatibility

    @subsection qore_084_new_features New Features in Qore

    @par User Modules
    It is now possible to develop user modules in %Qore; several user modules are now included in the %Qore distribution, forming %Qore-language components of %Qore's runtime library.\n\n
    User modules delivered with %Qore 0.8.4:
    - <a href="../../modules/HttpServer/html/index.html">HttpServer</a>: a multi-threaded HTTP server implementation
    - <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a>: an SMTP client library
    - <a href="../../modules/TelnetClient/html/index.html">TelnetClient</a>: a TELNET client implementation
    - <a href="../../modules/Mime/html/index.html">Mime</a>: a set of MIME definitions and functions for manipulating MIME data
    .
    There are also new example programs for the above modules in the examples/ directory.\n\n
    User modules are subject to %Qore's functional restriction framework.

    @par Namespace Changes
    As listed above:\n
    - global variables and functions are now full namespace members
    - all builtin functions are now in the Qore namespace
    - real depth-first searches are used for namespace symbols
    - symbols are resolved first in the current namespace when parsing declarations/code in a namespace

    @par The <b><tt>final</tt></b> Keyword
    Classes and methods can now be declared "final" to prevent subclassing or overriding in a subclass

    @par Pseudo Methods
    Pseudo-methods are class methods that can be implemented on any value; they are also part of class hierarchy.  The methods that can be executed on the value depend on the value's type, and all "pseudo-classes" inherit methods from a common base class.\n\n
    For example:
    @code
"string".strlen()
<abf05da3>.size()
500.typeCode()
    @endcode
    Are examples of pseudo-methods on literal values.\n\n
    Some expensive operations such as getting the first or last key (or value) of a hash are now cheap using pseudo-methods, for example:
    @code
$hash.firstKey()
$hash.lastValue()
    @endcode

    @par New Doxygen-Based Documentation
    The %Qore reference documentation is now generated by Doxygen, and is generated directly from the %Qore sources.  In fact, a new preprocessor known as "qpp" was developed for %Qore 0.8.4 to facilitate and enforce doxygen documentation on %Qore's runtime library (as well as abstract the relatively complex APIs used to bind C++ code to the %Qore runtime library from the C++ programmer).\n\n
    The documentation is more comprehensive, and corresponds much closer to the actual internal implementation since the documentation is now also contained in and directly generated from the internal C++ implementation of %Qore.\n\n
    For example, there is the <value>::val() method.  This method is implemented in the base pseudo class and is reimplemented in other pseudo-classes for other runtime data types as necessary.  This method returns @ref Qore::True "True" if the value has a value in the same sense as Perl's boolean context evaluation.  For example, if the value is a hash with no keys, it returns @ref Qore::False "False"; if it is a hash with keys, it returns @ref Qore::True "True"; if it is an empty string, it returns @ref Qore::False "False";
if it is a non-empty string, it returns @ref Qore::True "True", etc.

   @par LValue Handling Changes
   lvalue handling was rewritten as the old implementation was ugly and subject to deadlocks (in rare corner cases).\n\n
   Furthermore, medium-term, an architectural goal of %Qore is to store all ints, floats, and bools internally as the basic C++ type instead of using a class wrapper for each value, which needs dynamic allocation and destruction, which takes up more memory and negatively affects execution speed.\n\n
   With %Qore 0.8.4, all local and global variables are stored using optimized C++ types when declared with the appropriate type restrictions; for example:
   @code
my int $i0;
our int $i1;
   @endcode
   These declares local and global variables that can only be assigned integer values; in %Qore 0.8.4 the value internally will be stored as an "int64" value (and not a dynamically-allocated QoreBigIntNode object).\n\n
   The same holds for:
   - @ref int_type "int"
   - @ref softint_type "softint"
   - @ref float_type "float"
   - @ref softfloat_type "softfloat"
   - @ref bool_type "bool"
   - @ref softbool_type "softbool"
   .
   Note that the optimized lvalue handling has not yet been applied to all lvalues, in particular non-static object members with declared types are not yet implemented with optimized storage; to do this requires a rewrite of %Qore's API and ABI (will happen in the next major release of %Qore).\n\n
   This change leads to improved integer and floating-point performance and a smaller runtime memory footprint.

   @par Runtime Optimizations
   In addition to the up to 3x faster parsing (as decribed in the namespace changes above), %Qore 0.8.4 contains many runtime optimizations designed to reduce the number of dynamic memory allocations performed at runtime.\n\n
   The optimizations included in this version of %Qore are only a half-measure compared to future changes that will necessitate a new binary %Qore API.

   @par Per-Thread Initialization
   the new set_thread_init() function allows a call reference or closure to be set which will be automatically executed when new threads are started (or a new thread accesses a @ref Qore::Program "Program" object) which can be used to transparently initialize thread-local data.

   @par More Control Over Thread Resource Exceptions
   new functions:
   - throw_thread_resource_exceptions_to_mark()
   - mark_thread_resources()
   .
   Allow for only thread resouces created after a certain point to be processed (for example only thread resources left after some embedded code was called)

   @par New Socket Methods
   new methods:
   - Qore::Socket::upgradeClientToSSL()
   - Qore::Socket::upgradeServerToSSL()
   .
   Allow upgrading an already-existing socket connection to SSL

   @par Better Socket Error Messages
   More information has been added to socket exceptions to provide better feedback when errors occur.

   @par New Socket Event Fields
   - added \c "type" and \c "typename" keys to the @ref EVENT_HOSTNAME_RESOLVED event
   - added \c "type", \c "typename", and \c "address" keys to the @ref EVENT_CONNECTING event

   @par Support For Blocking Writes in the Queue Class
   @ref Qore::Thread::Queue "Queue" objects can now be used as a blocking message channel (similar to a Go channel); if a maximum size is given to the @ref Qore::Thread::Queue "Queue" constructor, then trying to write data to the @ref Qore::Thread::Queue "Queue" when it is full will block until the @ref Qore::Thread::Queue "Queue"'s size goes below the maximum size; optional timeout parameters have been added to @ref Qore::Thread::Queue "Queue" methods that write to the @ref Qore::Thread::Queue "Queue".

   @par New Queue::clear() Method
   Does just what you think it does :)

   @par date(string, string) Improvement
   added the possibility to specify microseconds when parsing dates against a mask with the date() function

   @par New Support For ++ And -- Operators With Floating-Point Lvalues
   previously this would either convert the lvalue to an int or throw an exception if the lvalue could not be converted to an int due to type restrictions

   @par Class Recognition/Compatibility Between Program Objects
   The problem is that a user class created from the same source code in two different @ref Qore::Program "Program" objects would be recognized as a different class with parameter and variable type restrictions - ie you could not declare a variable or parameter with a class type restrictions and assign it an object created from the same class source code but created in another @ref Qore::Program "Program" object.\n\n
   This problem is analogous to a similar problem with java in that classes built from the same source but from different classloaders are also recognized as different classes.\n\n
   In %Qore 0.8.4 a class signature is created of all public and private objects, and an SHA1 hash is maintained of the class signature, and if the class names and signatures match, then the classes are assumed to be identical, even if they have different internal class IDs (because they were created in different @ref Qore::Program "Program" objects, for example).

   @par New TimeZone::date(string) Method
   to support creating arbitrary dates in a given @ref Qore::TimeZone "TimeZone"

   @par New GetOpt::parse3() method
   This method will display any errors on @ref Qore::stderr "stderr" and exit the program (which is the most typical way of handling command line errors anyway)

   @par += Operator Optimization For object += hash
   this operation is faster in this release

   @par New Parse Option PO_NO_MODULES
   Using this option disables module loading

   @par New Parse Option PO_NO_EMBEDDED_LOGIC
   Using this option disables all dynamic parsing

   @par New Parse Directives
   - @ref assume-global "%assume-global": the opposite of @ref assume-local "%assume-local"
   - @ref old-style "%old-style": the opposite of @ref new-style "%new-style"
   - @ref require-dollar "%require-dollar": the opposite of @ref allow-bare-refs "%allow-bare-refs"
   - @ref push-parse-options "%push-parse-options": allows parse options to be saved and restored when the current file is done parsing; very useful for %include files

   @par New Context Functions
   - cx_value(): returns the value of the given key
   - cx_first(): returns @ref Qore::True "True" if iterating the first row
   - cx_last(): returns @ref Qore::True "True" if iterating the last row
   - cx_pos(): returns the current row number (starting from 0)
   - cx_total(): returns the total number of rows in the set

   @par SOCKET-HTTP-ERROR Exception Enhancement
   The invalid header info received is reported in the exception's \c "arg" key

   @par Improved Parse Error Messages
   Improved some parse error messages dealing with namespace and class declaration errors

   @par Added NT_CLOSURE Constant
   type code for runtime closure values

    @subsection qore_084_bug_fixes Bug Fixes in Qore
    - fixed a race condition with @ref Qore::Program "Program" objects when a signal handler is left active and the @ref Qore::Program "Program" terminates
    - fixed a bug in the @ref Qore::File "File" class where the encoding given in the constructor was ignored; if no encoding was given in the File::open*() method then the @ref Qore::File "File"'s encoding would always be set to the default encoding, now it's set to the encoding given in the constructor (as documented)
    - runtime checks have been implemented so that references to local variables cannot be passed to a closure; this would cause a runtime crash
    - a fix has been made to the @ref delete "delete" and @ref remove "remove" operators; lists will not be extended when trying to remove/delete list elements that do not exist
    - fixed some bugs showing the error location with bugs in the second stage of parsing (symbol resolution)
    - apply type filters to blocks with a designated return type but no @ref return "return statement"
    - fixed crashing bugs on some 32bit platforms where size_t was assumed to be 64 bits
    - fixed a crashing bug parsing invalid @ref requires "%requires" directives in the scanner
    - fixed a bug in usleep() with relative date/time values (added a new usleep() variant to support this)
    - fixed a typo in the command-line help for the qore binary with unknown parse options	  
    - fixed @ref Qore::Option::HAVE_SIGNAL_HANDLING "HAVE_SIGNAL_HANDLING" to be @ref Qore::False "False" if signal handling is disabled on platforms where signal handling is otherwise available
    - fixed a scanner bug parsing out of line class definitions with a root-justified namespace path (ex: \c "class ::X::ClassName ...")
    - merging code from binary modules at parse time and at runtime is now transaction-safe (before it would cause memory errors and/or a crash), now if errors are detected then an exception is raised and changes are not applied.
    - fixed a crashing bug in the C++ API function QoreHashNode::setKeyValue() when the value is 0 and an exception occurs or is already active before the call is made
    - fixed a bug in date parsing with a format string - off by one with integer months - added a regression test for this case
    - fixed a memory error with the @ref rethrow "rethrow statement" in enclosing but nested try-catch blocks
    - fixed a crashing bug where qore would try to instantiate a class for a type that did not represent a class (ex: \c "my int $i();")
    - fixed a memory leak in the @ref softlist_type "softlist" and @ref softlist_or_nothing_type "*softlist" type implementation
    - make sure and raise a \c SOCKET-CLOSED error when reading a HTTP header if no data is received
    - make sure and convert encodings with @ref Qore::index() "index()" and @ref Qore::rindex() "rindex()" functions if the encodings don't match
    - build fix: only use a lib64 directory if the directory exists already
    - raise a parse exception in the scanner if a numeric overflow occurs in literal integer values
    - fixed a bug in @ref Qore::Thread::AbstractSmartLock::lockTID() "AbstractSmartLock::lockTID()"
    - fixed a major crashing error in the C++ API function QoreStringNode::createAndConvertEncoding(); this function is used by the xml module when parsing XML-RPC sent in a non-UTF-8 character encoding
    - fixed Qore::File::getchar() to always retrieve 1 character (even for multi-byte character encodings)
    - fixed string evaluation in a boolean context to return @ref Qore::True "True" with floating-point numbers between -1.0 and 1.0 exclusive
    - printf formatting fix: output YAML-style \c "null" for @ref nothing with %%y
    - scanner fix: accept \c "\r" as whitespace to allow better parsing of sources with Windows EOL markers
    - fixed parse-time type processing/checks for the keys, + and * operators
    - foreach statement fix: unconditionally evaluate the hash when iterating as otherwise it could change during iteration which could cause a crash
    - fixed another parse-time variant matching bug where the variant-matching algorithm was too aggressive and excluded possible matches at parse time which could result in a false parse-time definitive match even though a better match could be available at runtime
    - fixed a static memory leak when signal handlers are left registered when the qore library terminates
    - fixed static memory leaks and 1 dynamic memory leak in strmul()
    - fixed a crashing bug in handling recursive constant references
    - fixed a bug in the C++ API function HashIterator::deleteKey() when the node's value is NULL
    - fixed time zone/DST calculations for time zone regions with DST with dates before the epoch but after the last DST transition before the epoch
    - fixed a memory error where invalid source expressions referenced in a regular expression substitution expression would cause a crash (ex: @verbatim str =~ s/public (name)/$2/g @endverbatim
    - fixed a memory error in regular expression substitution where the unconverted string (if not given in UTF-8 encoding) was used when copying source expressions to the target string
    - fixed a bug where a recursive class inheritance tree would cause a crash
    - fixed a bug where a static class method could not access private members of the class
*/
