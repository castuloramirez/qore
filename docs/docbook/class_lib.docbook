<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="System_Namespaces_and_Class_Library">
  <title>System Namespaces and Class Library</title>

    <table id="Qore_Class_List">
      <title>Qore Class List</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code><link linkend="File_Class">File</link></code></para></entry>
	    <entry><para>For reading and writing files.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Dir_Class">Dir</link></code></para></entry>
	    <entry><para>For handling of directories, listing files, and creating/removing subdirectories.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="FtpClient_Class">FtpClient</link></code></para></entry>
	    <entry><para>For communicating with FTP servers.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="GetOpt_Class">GetOpt</link></code></para></entry>
	    <entry><para>For processing command-line options.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Program_Class">Program</link></code></para></entry>
	    <entry><para>For parsing and executing application-embedded or user-supplied logic.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Socket_Class">Socket</link></code></para></entry>
	    <entry><para>For communication with IPv4 sockets with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="TermIOS_Class">TermIOS</link></code></para></entry>
	    <entry><para>Used when getting or setting terminal settings.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="HTTPClient_Class">HTTPClient</link></code></para></entry>
	    <entry><para>For communication with HTTP servers with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="XmlRpcClient_Class">XmlRpclient</link></code></para></entry>
	    <entry><para>For communication using the XML-RPC protocol with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="JsonRpcClient_Class">JsonRpclient</link></code></para></entry>
	    <entry><para>For communication using the JSON-RPC protocol with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="SSLCertificate_Class">SSLCertificate</link></code></para></entry>
	    <entry><para>For working with X.509 certificates.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="SSLPrivateKey_Class">SSLPrivateKey</link></code></para></entry>
	    <entry><para>For working with private key data.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Datasource_Class">SQL::Datasource</link></code></para></entry>
	    <entry><para>For working with databases; provides the user interface to qore DBI drivers.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="DatasourcePool_Class">SQL::DatasourcePool</link></code></para></entry>
	    <entry><para>Provides transparent per-thread, per-transaction Datasource connection pooling.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="AbstractSmartLock_Class">Thread::AbstractSmartLock</link></code></para></entry>
	    <entry><para>The abstract base class for locks that support the internal API for use with the <link linkend="Condition_Class">Condition</link> class.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="AutoGate_Class">Thread::AutoGate</link></code></para></entry>
	    <entry><para>A helper class for the <link linkend="Gate_Class">Gate</link> class for exception-safe Gate handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="AutoLock_Class">Thread::AutoLock</link></code></para></entry>
	    <entry><para>A helper class for the <link linkend="Mutex_Class">Mutex</link> class for exception-safe Mutex handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="AutoReadLock_Class">Thread::AutoReadLock</link></code></para></entry>
	    <entry><para>A helper class for the <link linkend="RWLock_Class">RWLock</link> class for exception-safe read lock handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="AutoWriteLock_Class">Thread::AutoWriteLock</link></code></para></entry>
	    <entry><para>A helper class for the <link linkend="RWLock_Class">RWLock</link> class for exception-safe write lock handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Condition_Class">Thread::Condition</link></code></para></entry>
	    <entry><para>For blocking a thread until a condition becomes true.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Counter_Class">Thread::Counter</link></code></para></entry>
	    <entry><para>For blocking a thread until a counter becomes zero.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Gate_Class">Thread::Gate</link></code></para></entry>
	    <entry><para>A reentrant thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Mutex_Class">Thread::Mutex</link></code></para></entry>
	    <entry><para>A simple thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Queue_Class">Thread::Queue</link></code></para></entry>
	    <entry><para>A blocking, thread-safe queue class, useful for message passing (can also be used as a stack).</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="RMutex_Class">Thread::RMutex</link></code></para></entry>
	    <entry><para>DEPRECATED: A reentrant thread lock; use Gate instead.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="RWLock_Class">Thread::RWLock</link></code></para></entry>
	    <entry><para>A read-write thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="Sequence_Class">Thread::Sequence</link></code></para></entry>
	    <entry><para>A thread-safe integral counter.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="XmlDoc_Class">Xml::XmlDoc</link></code></para></entry>
	    <entry><para>For analyzing and manipulating XML documents.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="XmlNode_Class">Xml::XmlNode</link></code></para></entry>
	    <entry><para>Gives information about XML data in an XML document.</para></entry>
	  </row>
	  <row>
	    <entry><para><code><link linkend="XmlReader_Class">Xml::XmlReader</link></code></para></entry>
	    <entry><para>For parsing or iterating through the elements of an XML document.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

  <sect1 id="Qore_Constants">
    <title>Qore Constants</title>

    <para>The following constants are defined in the Qore namespace.</para>

    <table id="Build_and_Version_Constants">
      <title>Build and Version Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><code>PlatformOS</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The operating system used to build the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PlatformCPU</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The CPU used as a target for the Qore library build.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionString</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The full version string for this version of the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionMajor</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>An integer giving the Qore library's major version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionMinor</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>An integer giving the Qore library's minor version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionSub</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>An integer giving the Qore library's release version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>Build</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>An integer giving the Qore library's subversion revision number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>BuildHost</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>A string giving information about the host used to compile the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>Compiler</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The compiler used to build the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CFLAGS</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The compiler flags used to compile the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>LDFLAGS</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>The linker flags used to link the Qore library.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <table id="Machine_Constants">
      <title>Machine Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><code>MACHINE_MSB</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>If <code>True</code> the machine stores memory with <ulink url="http://en.wikipedia.org/wiki/Most_significant_bit">MSB byte order</ulink>, <code>False</code> if it uses <ulink url="http://en.wikipedia.org/wiki/Least_significant_bit">LSB byte order</ulink>.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Library_Options">
      <title>Library Options</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="HAVE_ATOMIC_OPERATIONS">
	    <entry><para><code>HAVE_ATOMIC_OPERATIONS</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the Qore library supports fast atomic reference counting.  Note that if this constant is <code>False</code>, atomic operations are supported by mutexes and are therefore slower than with native atomic reference counting operations.</para></entry>
	  </row>
	  <row id="HAVE_STACK_GUARD">
	    <entry><para><code>HAVE_STACK_GUARD</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if protection against stack overruns is provided</para></entry>
	  </row>
	  <row id="HAVE_RUNTIME_THREAD_STACK_TRACE">
	    <entry><para><code>HAVE_RUNTIME_THREAD_STACK_TRACE</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if active thread stack tracing has been enabled as a debugging option and if the <link linkend="getAllThreadCallStacks">getAllThreadCallStacks()</link> function is available.</para></entry>
	  </row>
	  <row id="HAVE_ROUND">
	    <entry><para><code>HAVE_ROUND</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the <link linkend="round">round()</link> function is available.</para></entry>
	  </row>
	  <row id="HAVE_TIMEGM">
	    <entry><para><code>HAVE_TIMEGM</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Always <code>True</code> (as of qore 0.8.0+): indicates that the <link linkend="timegm">timegm()</link> function is available.</para></entry>
	  </row>
	  <row id="HAVE_SETEUID">
	    <entry><para><code>HAVE_SETEUID</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the <link linkend="seteuid">seteuid()</link> function is available.</para></entry>
	  </row>
	  <row id="HAVE_SETEGID">
	    <entry><para><code>HAVE_SETEGID</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the <link linkend="setegid">setegid()</link> function is available.</para></entry>
	  </row>
	  <row id="HAVE_PARSEXMLWITHRELAXNG">
	    <entry><para><code>HAVE_PARSEXMLWITHRELAXNG</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if <link linkend="parseXMLWithRelaxNG">parseXMLWithRelaxNG()</link> and <link linkend="XmlReader_relaxNGValidate">XmlReader::relaxNGValidate()</link> are available.</para></entry>
	  </row>
	  <row id="HAVE_PARSEXMLWITHSCHEMA">
	    <entry><para><code>HAVE_PARSEXMLWITHSCHEMA</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if <link linkend="parseXMLWithSchema">parseXMLWithSchema()</link> and <link linkend="XmlReader_schemaValidate">XmlReader::schemaValidate()</link> are available.</para></entry>
	  </row>
	  <row id="HAVE_SHA224">
	    <entry><para><code>HAVE_SHA224</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA224 algorithm and therefore if the <link linkend="SHA224">SHA224()</link> and <link linkend="SHA224_bin">SHA224_bin()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_SHA256">
	    <entry><para><code>HAVE_SHA256</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA256 algorithm and therefore if the <link linkend="SHA256">SHA256()</link> and <link linkend="SHA256_bin">SHA256_bin()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_SHA384">
	    <entry><para><code>HAVE_SHA384</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA384 algorithm and therefore if the <link linkend="SHA384">SHA384()</link> and <link linkend="SHA384_bin">SHA384_bin()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_SHA512">
	    <entry><para><code>HAVE_SHA512</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA512 algorithm and therefore if the <link linkend="SHA512">SHA512()</link> and <link linkend="SHA512_bin">SHA512_bin()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_MDC2">
	    <entry><para><code>HAVE_MDC2</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the MDC2 algorithm and therefore if the <link linkend="MDC2">MDC2()</link> and <link linkend="MDC2_bin">MDC2_bin()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_RC5">
	    <entry><para><code>HAVE_RC5</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the RC5 encryption algorithm and therefore if the <link linkend="rc5_encrypt_cbc">rc5_encrypt_cbc()</link>, <link linkend="rc5_decrypt_cbc">rc5_decrypt_cbc()</link> and <link linkend="rc5_decrypt_cbc_to_string">rc5_encrypt_cbc_to_string()</link> functions are available.</para></entry>
	  </row>
	  <row id="HAVE_MD2">
	    <entry><para><code>HAVE_MD2</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the MD2 algorithm and therefore if the <link linkend="MD2">MD2()</link> and <link linkend="MD2_bin">MD2_bin()</link> functions are available.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Boolean_Constants">
      <title>Boolean Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>True</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>True</para></entry>
	  </row>
	  <row>
	    <entry><para><code>False</code></para></entry>
	    <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	    <entry><para>False</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_IO_Constants">
      <title>I/O Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="stdin_constant">
	    <entry><para><code>stdin</code></para></entry>
	    <entry><para><link linkend="File_Class">File</link> Object</para></entry>
	    <entry><para>Standard input File object.</para></entry>
	  </row>
	  <row id="stdout_constant">
	    <entry><para><code>stdout</code></para></entry>
	    <entry><para><link linkend="File_Class">File</link> Object</para></entry>
	    <entry><para>Standard output File object.</para></entry>
	  </row>
	  <row id="stderr_constant">
	    <entry><para><code>stderr</code></para></entry>
	    <entry><para><link linkend="File_Class">File</link> Object</para></entry>
	    <entry><para>Standard error File object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Warning_Constants">
      <title>Warning Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>WARN_NONE</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>No warnings are enabled with this constant</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_WARNING_MASK_UNCHANGED</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>This warning means that the embedded code tried to change the warning mask, but it was locked, so the warning mask was actually unchanged</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_DUPLICATE_LOCAL_VARS</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that a local variable was redeclared with the same name in the same local scope</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_UNKNOWN_WARNING</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that the embedded code tried to enable or disable an unknown warning</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_UNDECLARED_VAR</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that the embedded code referenced an undeclared variable that will be assumed to be a global variable</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_DUPLICATE_GLOBAL_VARS</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that the embedded code has declared the same global variable more than once</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_UNREACHABLE_CODE</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that code cannot be reached (for example; code in the same local block after an unconditional <command>return</command> or <command>thread_exit</command> statement)</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_NONEXISTENT_METHOD_CALL</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that the embedded code is calling an unknown method in a class; this may be vaild if the calling method is only called from a base class that actually implements the method</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_INVALID_OPERATION</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Indicates that the embedded code performs some operation that is guaranteed to produce no result (for example, using the [] operator on an integer value)</para></entry>
          </row>
          <row>
            <entry><para><code>WARN_ALL</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
            <entry><para>Enables all warnings</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table id="event_constants">
      <title>Event Constants</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></entry>
	    <entry><para><code>1</code></para></entry>
	    <entry><para>Raised when a network packet is received.</para></entry>
	  </row>
          <row>
            <entry><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></entry>
	    <entry><para><code>2</code></para></entry>
            <entry><para>Raised when a network packet is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link></code></para></entry>
	    <entry><para><code>3</code></para></entry>
            <entry><para>Raised when the HTTP &quot;Content-Length&quot; header is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link></code></para></entry>
	    <entry><para><code>4</code></para></entry>
            <entry><para>Raised when HTTP chunked data is about to be received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link></code></para></entry>
	    <entry><para><code>5</code></para></entry>
            <entry><para>Raised when all HTTP chunked data has been received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></entry>
	    <entry><para><code>6</code></para></entry>
            <entry><para>Raised when an HTTP redirect message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
	    <entry><para><code>7</code></para></entry>
            <entry><para>Raised when a socket is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
	    <entry><para><code>8</code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link></code></para></entry>
	    <entry><para><code>9</code></para></entry>
            <entry><para>Raised immediately before an FTP control message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link></code></para></entry>
	    <entry><para><code>10</code></para></entry>
            <entry><para>Raised when an FTP reply is received on the control channel.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link></code></para></entry>
	    <entry><para><code>11</code></para></entry>
            <entry><para>Raised when a hostname lookup is attempted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></entry>
	    <entry><para><code>12</code></para></entry>
            <entry><para>Raised when a hostname lookup is resolved.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
	    <entry><para><code>13</code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
	    <entry><para><code>14</code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link></code></para></entry>
	    <entry><para><code>15</code></para></entry>
            <entry><para>Raised when HTTP footers are received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link></code></para></entry>
	    <entry><para><code>16</code></para></entry>
            <entry><para>Raised when a block of HTTP chunked data is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link></code></para></entry>
	    <entry><para><code>17</code></para></entry>
            <entry><para>Raised when the next chunk size for HTTP chunked data is known.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connecting">EVENT_CONNECTING</link></code></para></entry>
	    <entry><para><code>18</code></para></entry>
            <entry><para>Raised right before a socket connection attempt is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connected">EVENT_CONNECTED</link></code></para></entry>
	    <entry><para><code>19</code></para></entry>
            <entry><para>Raised when the socket connection has been established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_start_ssl">EVENT_START_SSL</link></code></para></entry>
	    <entry><para><code>20</code></para></entry>
            <entry><para>Raised when socket SSL negotiation starts.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></entry>
	    <entry><para><code>21</code></para></entry>
            <entry><para>Raised when SSL communication has been negotiated and established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link></code></para></entry>
	    <entry><para><code>22</code></para></entry>
            <entry><para>Raised right before a file is opened.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></entry>
	    <entry><para><code>23</code></para></entry>
            <entry><para>Raised when a file has been successfully opened.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></entry>
	    <entry><para><code>24</code></para></entry>
            <entry><para>Raised when data has been read from a file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_written">EVENT_DATA_WRITTEN</link></code></para></entry>
	    <entry><para><code>25</code></para></entry>
            <entry><para>Raised when data has been written to a file.</para></entry>
          </row>

          <row>
            <entry><para><code><link linkend="event_map_constant">EVENT_MAP</link></code></para></entry>
	    <entry><para><link linkend="event_map_constant">Event Map Hash</link></para></entry>
            <entry><para>This constant is a hash that maps event numbers to string descriptions as described in <link linkend="event_map_constant">this table</link>.</para></entry>
          </row>

	</tbody>
      </tgroup>
    </table>

    <table id="event_map_constant">
      <title>Event Map Hash Constant</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>String Value</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>EVENT_PACKET_READ</code> (&quot;1&quot;)</para></entry>
            <entry><para><code>&quot;PACKET_READ&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_PACKET_SENT</code> (&quot;2&quot;)</para></entry>
            <entry><para><code>&quot;PACKET_SENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CONTENT_LENGTH</code> (&quot;3&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CONTENT_LENGTH&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_START</code> (&quot;4&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_START&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_END</code> (&quot;5&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_END&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_REDIRECT</code> (&quot;6&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_REDIRECT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CHANNEL_CLOSED</code> (&quot;7&quot;)</para></entry>
            <entry><para><code>&quot;CHANNEL_CLOSED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DELETED</code> (&quot;8&quot;)</para></entry>
            <entry><para><code>&quot;DELETED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FTP_SEND_MESSAGE</code> (&quot;9&quot;)</para></entry>
            <entry><para><code>&quot;FTP_SEND_MESSAGE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FTP_MESSAGE_RECEIVED</code> (&quot;10&quot;)</para></entry>
            <entry><para><code>&quot;FTP_MESSAGE_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HOSTNAME_LOOKUP</code> (&quot;11&quot;)</para></entry>
            <entry><para><code>&quot;HOSTNAME_LOOKUP&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HOSTNAME_RESOLVED</code> (&quot;12&quot;)</para></entry>
            <entry><para><code>&quot;HOSTNAME_RESOLVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_SEND_MESSAGE</code> (&quot;13&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_SEND_MESSAGE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_MESSAGE_RECEIVED</code> (&quot;14&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_MESSAGE_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_FOOTERS_RECEIVED</code> (&quot;15&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_FOOTERS_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_DATA_RECEIVED</code> (&quot;16&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_DATA_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNK_SIZE</code> (&quot;17&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNK_SIZE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CONNECTING</code> (&quot;18&quot;)</para></entry>
            <entry><para><code>&quot;CONNECTING&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CONNECTED</code> (&quot;19&quot;)</para></entry>
            <entry><para><code>&quot;CONNECTED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_START_SSL</code> (&quot;20&quot;)</para></entry>
            <entry><para><code>&quot;START_SSL&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_SSL_ESTABLISHED</code> (&quot;21&quot;)</para></entry>
            <entry><para><code>&quot;SSL_ESTABLISHED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_OPEN_FILE</code> (&quot;22&quot;)</para></entry>
            <entry><para><code>&quot;OPEN_FILE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FILE_OPENED</code> (&quot;23&quot;)</para></entry>
            <entry><para><code>&quot;FILE_OPENED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DATA_READ</code> (&quot;24&quot;)</para></entry>
            <entry><para><code>&quot;DATA_READ&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DATA_WRITTEN</code> (&quot;25&quot;)</para></entry>
            <entry><para><code>&quot;DATA_WRITTEN&quot;</code></para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table id="event_source_constants">
      <title>Event Source Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
            <entry><para><code>SOURCE_SOCKET</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link> raised from the <link linkend="Socket_Class">Socket</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_HTTPCLIENT</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link>
raised from the <link linkend="HTTPClient_Class">HTTPClient</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_FTPCLIENT</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link>
raised from the <link linkend="FtpClient_Class">FtpClient</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_FILE</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link> raised from the <link linkend="File_Class">File</link> class.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table id="network_address_constants">
      <title>Network Address Type Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="AF_INET">
	    <entry><para><code>AF_INET</code></para></entry>
	    <entry><para>Designates an IPv4 network addresses.</para></entry>
	  </row>
	  <row id="AF_INET6">
	    <entry><para><code>AF_INET6</code></para></entry>
	    <entry><para>Designates an IPv6 network addresses.</para></entry>
	  </row>
	  <row id="AF_UNIX">
	    <entry><para><code>AF_UNIX</code></para></entry>
	    <entry><para>Designates a local socket file name (interchangeable with <code>AF_LOCAL</code>).</para></entry>
	  </row>
	  <row id="AF_LOCAL">
	    <entry><para><code>AF_LOCAL</code></para></entry>
	    <entry><para>POSIX synonym for <code>AF_UNIX</code>; designates a local socket file name.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Local_Mode_Constants">
      <title>Terminal Attributes Local Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ECHOKE</code></para></entry>
	    <entry><para>visual erase for line kill</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHOE</code></para></entry>
	    <entry><para>visually erase chars</para></entry>
	 </row>
	  <row>
	    <entry><para><code>ECHO</code></para></entry>
	    <entry><para>enable echoing</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHONL</code></para></entry>
	    <entry><para>echo NL even if ECHO is off</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHOPRT</code></para></entry>
	    <entry><para>visual erase mode for hardcopy</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ISIG</code></para></entry>
	    <entry><para>enable signals INTR, QUIT, [D]SUSP</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ICANON</code></para></entry>
	    <entry><para>canonicalize input lines</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IEXTEN</code></para></entry>
	    <entry><para>enable DISCARD and LNEXT</para></entry>
	  </row>
	  <row>
	    <entry><para><code>TOSTOP</code></para></entry>
	    <entry><para>stop background jobs from output</para></entry>
	  </row>
	  <row>
	    <entry><para><code>FLUSHO</code></para></entry>
	    <entry><para>output being flushed (state)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PENDIN</code></para></entry>
	    <entry><para>retype pending input (state)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>NOFLSH</code></para></entry>
	    <entry><para>don't flush after interrupt</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ALTWERASE</code></para></entry>
	    <entry><para>use alternate WERASE algorithm (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>EXTPROC</code></para></entry>
	    <entry><para>external processing (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>NOKERNINFO</code></para></entry>
	    <entry><para>no kernel output from VSTATUS (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Control_Mode_Constants">
      <title>Terminal Attributes Control Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>CSIZE</code></para></entry>
	    <entry><para>character size mask</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS5</code></para></entry>
	    <entry><para>5 bits (pseudo)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS6</code></para></entry>
	    <entry><para>6 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS7</code></para></entry>
	    <entry><para>7 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS8</code></para></entry>
	    <entry><para>8 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CSTOPB</code></para></entry>
	    <entry><para>send 2 stop bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CREAD</code></para></entry>
	    <entry><para>enable receiver</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARENB</code></para></entry>
	    <entry><para>parity enable</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARODD</code></para></entry>
	    <entry><para>odd parity, else even</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HUPCL</code></para></entry>
	    <entry><para>hang up on last close</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CLOCAL</code></para></entry>
	    <entry><para>ignore modem status lines</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CCTS_OFLOW</code></para></entry>
	    <entry><para>CTS flow control of output (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CRTSCTS</code></para></entry>
	    <entry><para>same as CCTS_OFLOW (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CRTS_IFLOW</code></para></entry>
	    <entry><para>RTS flow control of input (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>MDMBUF</code></para></entry>
	    <entry><para>flow control output via Carrier (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Output_Mode_Constants">
      <title>Terminal Attributes Output Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>OPOST</code></para></entry>
	    <entry><para>enable following output processing</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONLCR</code></para></entry>
	    <entry><para>map NL to CR-NL (ala CRMOD)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OCRNL</code></para></entry>
	    <entry><para>map CR to NL</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONOCR</code></para></entry>
	    <entry><para>No CR output at column 0</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONLRET</code></para></entry>
	    <entry><para>NL performs CR function</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OXTABS</code></para></entry>
	    <entry><para>expand tabs to spaces (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONOEOT</code></para></entry>
	    <entry><para>discard EOT's ctrl-D on output (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OLCUC</code></para></entry>
	    <entry><para>translate lower case to upper case (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Input_Mode_Constants">
      <title>Terminal Attributes Input Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>IGNBRK</code></para></entry>
	    <entry><para>ignore BREAK condition</para></entry>
	  </row>
	  <row>
	    <entry><para><code>BRKINT</code></para></entry>
	    <entry><para>map BREAK to SIGINTR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IGNPAR</code></para></entry>
	    <entry><para>ignore (discard) parity errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARMRK</code></para></entry>
	    <entry><para>mark parity and framing errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>INPCK</code></para></entry>
	    <entry><para>enable checking of parity errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ISTRIP</code></para></entry>
	    <entry><para>strip 8th bit off chars</para></entry>
	  </row>
	  <row>
	    <entry><para><code>INLCR</code></para></entry>
	    <entry><para>map NL into CR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IGNCR</code></para></entry>
	    <entry><para>ignore CR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ICRNL</code></para></entry>
	    <entry><para>map CR to NL (ala CRMOD)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXON</code></para></entry>
	    <entry><para>enable output flow control</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXOFF</code></para></entry>
	    <entry><para>enable input flow control</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXANY</code></para></entry>
	    <entry><para>any char will restart after stop</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IMAXBEL</code></para></entry>
	    <entry><para>ring bell on input queue full</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IUCLC</code></para></entry>
	    <entry><para>translate upper case to lower case (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Control_Character_Constants">
      <title>Terminal Attributes Control Character Constants</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Special Character</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>VEOF</code></para></entry>
	    <entry><para><code>EOF</code></para></entry>
	    <entry><para>^D</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VEOL</code></para></entry>
	    <entry><para><code>EOL</code></para></entry>
	    <entry><para><code>_POSIX_VDISABLE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>VEOL2</code></para></entry>
	    <entry><para><code>EOL2</code></para></entry>
	    <entry><para><code>_POSIX_VDISABLE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>VERASE</code></para></entry>
	    <entry><para><code>ERASE</code></para></entry>
	    <entry><para>^? `177'</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VWERASE</code></para></entry>
	    <entry><para><code>WERASE</code></para></entry>
	    <entry><para>^W</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VKILL</code></para></entry>
	    <entry><para><code>KILL</code></para></entry>
	    <entry><para>^U</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VINTR</code></para></entry>
	    <entry><para><code>INTR</code></para></entry>
	    <entry><para>^C</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VQUIT</code></para></entry>
	    <entry><para><code>QUIT</code></para></entry>
	    <entry><para>^\ `34'</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSUSP</code></para></entry>
	    <entry><para><code>SUSP</code></para></entry>
	    <entry><para>^Z</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTART</code></para></entry>
	    <entry><para><code>START</code></para></entry>
	    <entry><para>^Q</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTOP</code></para></entry>
	    <entry><para><code>STOP</code></para></entry>
	    <entry><para>^S</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VLNEXT</code></para></entry>
	    <entry><para><code>LNEXT</code></para></entry>
	    <entry><para>^V</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VMIN</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>1</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VTIME</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>0</para></entry>
	  </row>

	  <row>
	    <entry><para><code>VREPRINT</code></para></entry>
	    <entry><para><code>REPRINT</code></para></entry>
	    <entry><para>^R (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VDSUSP</code></para></entry>
	    <entry><para><code>DSUSP</code></para></entry>
	    <entry><para>^Y (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VDISCARD</code></para></entry>
	    <entry><para><code>DISCARD</code></para></entry>
	    <entry><para>^O (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTATUS</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>^T (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <para id="X509_VerificationReasons_Hash">The <code>X509_VerificationReasons_Hash</code> is a constant in the Qore namespace that maps verfication code strings (as returned from <link linkend="FtpClient_verifyPeerCertificate">FtpClient::verifyPeerCertificate()</link> and <link linkend="Socket_verifyPeerCertificate">Socket::verifyPeerCertificate()</link>) to textual descriptions.</para>

    <table id="X509_VerificationReasons_Hash_Table">
      <title>X506_VerificationReasons Hash</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Value</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>X509_V_OK</code></para></entry>
            <entry><para><code>&quot;OK</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT</code></para></entry>
            <entry><para><code>&quot;Unable to get issuer certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_CRL</code></para></entry>
            <entry><para><code>&quot;Unable to get certificate CRL&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE</code></para></entry>
            <entry><para><code>&quot;Unable to decrypt certificate's signature. This means that the actual signature value could not be determined rather than it not matching the expected value; this is only meaningful for RSA&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE</code></para></entry>
            <entry><para><code>&quot;Unable to decrypt CRL's signature&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</code></para></entry>
            <entry><para><code>&quot;Unable to decode issuer public key (SubjectPublicKeyInfo)&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_SIGNATURE_FAILURE</code></para></entry>
            <entry><para><code>&quot;Certificate signature failure; the signature of the certificate is invalid&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_SIGNATURE_FAILURE</code></para></entry>
            <entry><para><code>&quot;CRL signature failure; the signature of the certificate is invalid&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_NOT_YET_VALID</code></para></entry>
            <entry><para><code>&quot;Certificate is not yet valid&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_HAS_EXPIRED</code></para></entry>
            <entry><para><code>&quot;Certificate has expired&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_NOT_YET_VALID</code></para></entry>
            <entry><para><code>&quot;CRL is not yet valid&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_HAS_EXPIRED</code></para></entry>
            <entry><para><code>&quot;CRL has expired&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD</code></para></entry>
            <entry><para><code>&quot;Format error in certificate's notBefore field (invalid time)&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD</code></para></entry>
            <entry><para><code>&quot;Format error in certificate's notAfter field (invalid time)&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD</code></para></entry>
            <entry><para><code>&quot;Format error in CRL's lastUpdate field (invalid time)&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD</code></para></entry>
            <entry><para><code>&quot;Format error in CRL's nextUpdate field (invalid time)&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_OUT_OF_MEM</code></para></entry>
            <entry><para><code>&quot;Out of memory error&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</code></para></entry>
            <entry><para><code>&quot;Certificate is self-signed and cannot be found in the trusted list&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN</code></para></entry>
            <entry><para><code>&quot;Self signed certificate in certificate chain&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY</code></para></entry>
            <entry><para><code>&quot;Unable to get local issuer certificate. This normally means the list of trusted certificates is not complete&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE</code></para></entry>
            <entry><para><code>&quot;Unable to verify the first certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_CHAIN_TOO_LONG</code></para></entry>
            <entry><para><code>&quot;Certificate chain too long&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_REVOKED</code></para></entry>
            <entry><para><code>&quot;Certificate has been revoked&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_INVALID_CA</code></para></entry>
            <entry><para><code>&quot;Invalid CA certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_PATH_LENGTH_EXCEEDED</code></para></entry>
            <entry><para><code>&quot;The basicConstraints pathlength parameter has been exceeded&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_INVALID_PURPOSE</code></para></entry>
            <entry><para><code>&quot;The certificate cannot be used for the specified purpose&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_UNTRUSTED</code></para></entry>
            <entry><para><code>&quot;Root CA is not marked as trusted for the specified purpose&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_REJECTED</code></para></entry>
            <entry><para><code>&quot;Root CA is marked to reject the specified purpose&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_SUBJECT_ISSUER_MISMATCH</code></para></entry>
            <entry><para><code>&quot;The current candidate issuer certificate was rejected because its subject name did not match the issuer name of the current certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_AKID_SKID_MISMATCH</code></para></entry>
            <entry><para><code>&quot;The current candidate issuer certificate was rejected because its subject key identifier was present and did not match the authority key identifier of the current certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH</code></para></entry>
            <entry><para><code>&quot;Issuer name and serial number of candidate certificate do not match the authority key identifier of the current certificate&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_KEYUSAGE_NO_CERTSIGN</code></para></entry>
            <entry><para><code>&quot;The keyUsage extension does not permit certificate signing&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_APPLICATION_VERIFICATION</code></para></entry>
            <entry><para><code>&quot;Verification failure&quot;</code></para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>The following gives a list of signal constants that may be present in Qore.  Signal constants and their values are system-dependent; only signals that the host system defines will be present in Qore, therefore not all of the signals in the following list will be present in any given version of Qore.  All signal constants are <link linkend="Integer">integers</link>.</para>

    <table id="Signal_Constants">
      <title>Signal Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>SIGHUP</code></para></entry>
            <entry><para>Hangup signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGINT</code></para></entry>
            <entry><para>Interrupt signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGQUIT</code></para></entry>
            <entry><para>Quit signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGILL</code></para></entry>
            <entry><para>Illegal instruction signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTRAP</code></para></entry>
            <entry><para>Trace trap signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGABRT</code></para></entry>
            <entry><para>Abort signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPOLL</code></para></entry>
            <entry><para>Pollable event signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGIOT</code></para></entry>
            <entry><para>Synonym for SIBABRT</para></entry>
          </row>
          <row>
            <entry><para><code>SIGEMT</code></para></entry>
            <entry><para>EMT instruction signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGFPE</code></para></entry>
            <entry><para>Floating-point exception signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGKILL</code></para></entry>
            <entry><para>Kill signal (cannot be caught)</para></entry>
          </row>
          <row>
            <entry><para><code>SIGBUS</code></para></entry>
            <entry><para>Bus error signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSEGV</code></para></entry>
            <entry><para>Segmentation violation signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSYS</code></para></entry>
            <entry><para>Bad argument to a system call.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPIPE</code></para></entry>
            <entry><para>Write on pipe with no reader (this signal is always ignored in Qore).</para></entry>
          </row>
          <row>
            <entry><para><code>SIGALRM</code></para></entry>
            <entry><para>Alarm clock signal.</para></entry>
          </row>
         <row>
            <entry><para><code>SIGTERM</code></para></entry>
            <entry><para>Software termination signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGURG</code></para></entry>
            <entry><para>Urgent condition on I/O channel.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSTOP</code></para></entry>
            <entry><para>Sendable stop signal (not from tty).</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTSTP</code></para></entry>
            <entry><para>Stop signal from tty.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCONT</code></para></entry>
            <entry><para>Continue a stopped process.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCHLD</code></para></entry>
            <entry><para>To parent on child stop or exit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTTIN</code></para></entry>
            <entry><para>To reader's process group on background tty read.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTTOU</code></para></entry>
            <entry><para>To writer's process group on background tty write.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGIO</code></para></entry>
            <entry><para>Input/Output possible signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXCPU</code></para></entry>
            <entry><para>Exceeded CPU time limit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXFSZ</code></para></entry>
            <entry><para>Exceeded file size limit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGVTALRM</code></para></entry>
            <entry><para>Virtual time alarm signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPROF</code></para></entry>
            <entry><para>Profiling time alarm signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGWINCH</code></para></entry>
            <entry><para>Window size changes signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGINFO</code></para></entry>
            <entry><para>Information request signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGUSR1</code></para></entry>
            <entry><para>User-defined signal 1.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGUSR2</code></para></entry>
            <entry><para>User-defined signal 2.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSTKFLT</code></para></entry>
            <entry><para>Stack fault on coprocessor.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCLD</code></para></entry>
            <entry><para>Synonym for SIGCHLD on some systems.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPWR</code></para></entry>
            <entry><para>Power failure signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGLOST</code></para></entry>
            <entry><para>Resource (ex: file lock) lost signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGWAITING</code></para></entry>
            <entry><para>(Solaris) Waiting signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGLWP</code></para></entry>
            <entry><para>(Solaris) Light-weight process (thread) signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGFREEZE</code></para></entry>
            <entry><para>(Solaris) Checkpoint freeze signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTHAW</code></para></entry>
            <entry><para>(Solaris) Checkpoint freeze thaw signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCANCEL</code></para></entry>
            <entry><para>(Solaris) Cancel signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXRES</code></para></entry>
            <entry><para>(Solaris) Resource control exceeded.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGJVM1</code></para></entry>
            <entry><para>(Solaris) Java virtual machine 1 signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGJVM2</code></para></entry>
            <entry><para>(Solaris) Java virtual machine 2 signal.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>There are two special system-specific constants mapping signal names to signal number and vice-versa as given in the following table.</para>

    <table id="Special_Signal_Constants">
      <title>Signal Mapping Hash Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>SignalToName</code></para></entry>
            <entry><para>A hash mapping signal numbers to signal names (ex: <code>SignalToName."1"</code> gives the signal name corresponding to signal number <code>1</code>).</para></entry>
          </row>
          <row>
            <entry><para><code>NameToSignal</code></para></entry>
            <entry><para>A hash mapping signal names to signal numbers (ex: <code>NameToSignal."SIGINT"</code> gives the signal number corresponding to <code>"SIGINT"</code>).</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>The Err namespace contains error constants, returned by the <link linkend="errno">errno()</link> function.</para>

    <table id="Qore_Error_Constants">
      <title>Error Constants in the Err Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Err::*</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>System-dependent integer ERRNO constants (ex: ENOMEM, etc)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Exception_Constants">
      <title>Exception Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ET_System</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>Exception Type System: used for system exceptions.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ET_User</code></para></entry>
	    <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	    <entry><para>Exception Type User: used for user exceptions (thrown using the <command>throw</command> statement.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_User</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>Call Type User: used for user function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_Builtin</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>Call Type Builtin: used for builtin function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_NewThread</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>Call Type New Thread: used in a call stack when a new thread is started with the <command>background</command> expression.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_Rethrow</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	    <entry><para>Call Type Rethrow: a marker for a rethrown exception in a call stack.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Regex_Constants">
      <title>Regular Expression Option Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type and Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>RE_Caseless</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link>: 1</code></para></entry>
	    <entry><para>Ignores case when matching regular expressions, equivalent to /i</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_MultiLine</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link>: 2</code></para></entry>
	    <entry><para>makes start-of-line (^) or end-of-line ($) match after or before any newline in the subject string, equivalent to /m</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_DotAll</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link>: 4</code></para></entry>
	    <entry><para>makes a dot (.) match a newline character, equivalent to /s</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_Extended</code></para></entry>
	    <entry><para><code><link linkend="int_type">int</link>: 8</code></para></entry>
	    <entry><para>ignores whitespace characters and enables comments prefixed by #, equivalent to /x</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Qore_Type_Namespace">
    <title>Type Namespace</title>

    <para>The Type namespace only has constant definitions for basic Qore datatypes in it. There are no class definitions in the Type namespace.  The <link linkend="type">type() function</link> returns values in the set of the following constants.  All of the following constants have <link linkend="String">string</link> values.</para>

    <table id="Qore_Type_Constants">
      <title>Type Constant Definitions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Corresponding Type</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Type::Boolean</code></para></entry>
	    <entry><para><code>&quot;bool&quot;</code></para></entry>
	    <entry><para><link linkend="Boolean">Boolean</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Int</code></para></entry>
	    <entry><para><code>&quot;integer&quot;</code></para></entry>
	    <entry><para><link linkend="Integer">Integer</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::String</code></para></entry>
	    <entry><para><code>&quot;string&quot;</code></para></entry>
	    <entry><para><link linkend="String">String</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Float</code></para></entry>
	    <entry><para><code>&quot;float&quot;</code></para></entry>
	    <entry><para><link linkend="Float">Float</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Date</code></para></entry>
	    <entry><para><code>&quot;data&quot;</code></para></entry>
	    <entry><para><link linkend="Date">Date</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Binary</code></para></entry>
	    <entry><para><code>&quot;binary&quot;</code></para></entry>
	    <entry><para><link linkend="Binary">Binary</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Hash</code></para></entry>
	    <entry><para><code>&quot;hash&quot;</code></para></entry>
	    <entry><para><link linkend="Hashes">Hash</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::List</code></para></entry>
	    <entry><para><code>&quot;list&quot;</code></para></entry>
	    <entry><para><link linkend="Lists">List</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Object</code></para></entry>
	    <entry><para><code>&quot;object&quot;</code></para></entry>
	    <entry><para><link linkend="Objects">Object</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::NullType</code></para></entry>
	    <entry><para><code>&quot;NULL&quot;</code></para></entry>
	    <entry><para><link linkend="NULL">SQL NULL</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::NothingType</code></para></entry>
	    <entry><para><code>&quot;nothing&quot;</code></para></entry>
	    <entry><para><link linkend="nothing_type">NOTHING</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::CallReference</code></para></entry>
	    <entry><para><code>&quot;call reference&quot;</code></para></entry>
	    <entry><para><link linkend="call_references">call references</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Closure</code></para></entry>
	    <entry><para><code>&quot;closure&quot;</code></para></entry>
	    <entry><para><link linkend="closures">closures</link></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="File_Class">
    <title>File Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> parse option.</para>

    <para>The File class allows Qore programs to read, write, and create files.</para>

    <para>File objects can be created and/or opened with a specific
    <link linkend="Qore_Strings_and_Character_Encoding">character encoding</link>,
    meaning that any string read from the file will be tagged with the file's character
    encoding, and any string data written to the file will be transparently converted
    to that character encoding before being written (if necessary). If no character
    encoding is specified, then the <link linkend="Default_Character_Encoding">default Qore character encoding</link> is assumed for the file.</para>

    <para>This class supports posting events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="file_events">
      <title>File Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></entry>
            <entry><para>Raised when data is read from the file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_written">EVENT_DATA_WRITTEN</link></code></para></entry>
            <entry><para>Raised when data is written to the file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
            <entry><para>Raised when the file is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link></code></para></entry>
            <entry><para>Raised right before an attempt to open a file is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></entry>
            <entry><para>Raised when the file has been successfully opened.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table>
      <title>File Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="File_constructor">File::constructor</link>()</code></para>
              <para><code><link linkend="File_constructor">File::constructor</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the object and optionally sets the file's character encoding.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_destructor">File::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file if it is open and destroys the file object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_copy">File::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new file object with the same character encoding specification as the original, otherwise no other information is copied.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_chown">File::chown</link>(<link linkend="softint_type">softint</link> <replaceable>$uid</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$gid</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Changes the user and group owners of the file on the filesystem (if the current user has sufficient permission to do so).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_close">File::close</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file object</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_f_printf">File::f_printf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, ...) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_f_printf">File::f_printf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_f_vprintf">File::f_vprintf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_f_vprintf">File::f_vprintf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_getchar">File::getchar</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Reads one character from the file; returns <link linkend="nothing_type">NOTHING</link></para> if no data can be read from the file.</entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_getCharset">File::getCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character encoding for the file</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_getLockInfo">File::getLockInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns a hash of lock information.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_getPos">File::getPos</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current file position (in bytes)</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_getTerminalAttributes">File::getTerminalAttributes</link>(<link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Saves the current terminal attributes for the file in the <link linkend="TermIOS_Class">TermIOS</link> object passed; changes the object passed to reflect the terminal attributes as set for the file.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_isDataAvailable">File::isDataAvailable</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns True if there is data available for reading from the file within the timeout period.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_lock">File::lock</link>(<link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link>, <link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Attempts to lock the file according to the arguments passed, does not block.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_lockBlocking">File::lockBlocking</link>(<link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link>, <link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Attempts to lock the file according to the arguments passed, blocking.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_open">File::open</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_open">File::open</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a file in a particular mode, returns an error code on failure.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_open2">File::open2</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="File_open2">File::open2</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a file in a particular mode; throws an exception on failure.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_printf">File::printf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, ...) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_printf">File::printf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_read">File::read</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file within an optional timeout period and returns a string of the data read or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readBinary">File::readBinary</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 1) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file within an optional timeout period and returns binary data or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi1">File::readi1</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 1-byte signed integer from the file or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi2">File::readi2</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte signed integer from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi4">File::readi4</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte signed integer from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi8">File::readi8</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads an 8-byte signed integer from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi2LSB">File::readi2LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi4LSB">File::readi4LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readi8LSB">File::readi8LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads an 8-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readu1">File::readu1</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 1-byte unsigned integer from the file or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readu2">File::readu2</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte unsigned integer from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readu4">File::readu4</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte unsigned integer from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readu2LSB">File::readu2LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte unsigned integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readu4LSB">File::readu4LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte unsigned integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_readLine">File::readLine</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads until an EOL marker is found and returns the string read or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_setCharset">File::setCharset</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="File_setCharset">File::setCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character encoding for the file; if passed with no argument, the <link linkend="Default_Character_Encoding">default encoding</link> is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_setPos">File::setPos</link>(<link linkend="softint_type">softint</link> <replaceable>$pos</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the current file position (in bytes).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_setTerminalAttributes">File::setTerminalAttributes</link>(<link linkend="softint_type">softint</link> <replaceable>$action</replaceable> = TCSANOW, <link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the current terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed; does not change the object passed.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_sync">File::sync</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Flushes the file's buffer to disk.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_vprintf">File::vprintf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_vprintf">File::vprintf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_write">File::write</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes string or binary data to a file</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei1">File::writei1</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 1-byte integer to the file.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei2">File::writei2</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei4">File::writei4</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei4">File::writei8</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes an 8-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei2LSB">File::writei2LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei4LSB">File::writei4LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="File_writei8LSB">File::writei8LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes an 8-byte integer in little-endian format.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Constants">
      <title>File Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="O_RDONLY">
	    <entry><para><code>O_RDONLY</code></para></entry>
	    <entry><para>Open the file read-only.</para></entry>
	  </row>
	  <row id="O_WRONLY">
	    <entry><para><code>O_WRONLY</code></para></entry>
	    <entry><para>Open the file write-only.</para></entry>
	  </row>
	  <row id="O_CREAT">
	    <entry><para><code>O_CREAT</code></para></entry>
	    <entry><para>Create the file if it doesn't exist.</para></entry>
	  </row>
	  <row id="O_APPEND">
	    <entry><para><code>O_APPEND</code></para></entry>
	    <entry><para>Open the file in append mode.</para></entry>
	  </row>
	  <row id="O_RDWR">
	    <entry><para><code>O_RDWR</code></para></entry>
	    <entry><para>Open for reading and writing.</para></entry>
	  </row>
	  <row id="O_TRUNC">
	    <entry><para><code>O_TRUNC</code></para></entry>
	    <entry><para>Truncate the size to zero.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Locking_Constants">
      <title>File Locking Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="F_RDLCK">
	    <entry><para><code>F_RDLCK</code></para></entry>
	    <entry><para>Use for read-only locking.</para></entry>
	  </row>
	  <row id="F_WRLCK">
	    <entry><para><code>F_WRLCK</code></para></entry>
	    <entry><para>Use for exclusive write locking.</para></entry>
	  </row>
	  <row id="F_UNLCK">
	    <entry><para><code>F_UNLCK</code></para></entry>
	    <entry><para>Use for unlocking a lock.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Seek_Constants">
      <title>File Seek Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="SEEK_SET">
	    <entry><para><code>SEEK_SET</code></para></entry>
	    <entry><para>Indicates that the offset is from the start of the file.</para></entry>
	  </row>
	  <row id="SEEK_CUR">
	    <entry><para><code>SEEK_CUR</code></para></entry>
	    <entry><para>Indicates that the offset is from the current position in the file.</para></entry>
	  </row>
	  <row id="SEEK_END">
	    <entry><para><code>SEEK_END</code></para></entry>
	    <entry><para>Indicates that the offset is from the end of the file.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="File_constructor">
      <title>File::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the File object. It accepts one optional argument that will set the default character encoding for the file (only affects reading and writing string data).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_constructor">File::constructor</link>()</code></para>
              <para><code><link linkend="File_constructor">File::constructor</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> File $f("ISO-8859-1"); # specify ISO-8859-1 encoding for the file</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
	<title>Arguments for File::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><replaceable>encoding</replaceable></code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The character encoding for the file.  Any strings written to the file will be converted to this character encoding if necessary.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_destructor">
      <title>File::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file if it's open and destroys the File object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $f;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="File_copy">
      <title>File::copy()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new File object with the same character encoding specification as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> File $f1 = $f.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="File_chown">
      <title>File::chown()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Changes the file's user and group owner (if the user has sufficient permissions to do so).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_chown">File::chown</link>(<link linkend="softint_type">softint</link> <replaceable>$uid</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$gid</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.chown(0, 0);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$uid</replaceable></code></para></entry>
	      <entry><para>The user id of the user to change to; -1 means do not change uid.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$gid</replaceable></code></para></entry>
	      <entry><para>The group id of the user to change to; -1 means do not change gid.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return a value; if an error occurs, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-CHOWN-ERROR</code></para></entry>
	      <entry><para>File is not open or the chown operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_close">
      <title>File::close()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file object if it's open.  Note that this is automatically called by <link linkend="File_destructor">File::destructor()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_close">File::close</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.close();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, -1 for an error (see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error information)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_f_printf">
      <title>File::f_printf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, enforces hard field limits (similar to the <link linkend="f_printf">f_printf()</link> function). See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_f_printf">File::f_printf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, ...) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_f_printf">File::f_printf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.f_printf("%5s\n", "long string"); # will print "long \n", respecting the 5-character field width</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$fmt</replaceable></code></para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_f_vprintf">
      <title>File::f_vprintf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.   See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_f_vprintf">File::f_vprintf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_f_vprintf">File::f_vprintf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.f_vprintf("%5s %3d\n", ("a long string", 5000)); # outputs "a lon 500", truncating output</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$fmt</replaceable></code></para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
	      <entry><para>This single argument or list of arguments will be used as the argument list or the format string.  If a single argument is passed instead of a list, it will be used as the first argument as if a list were passed.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getchar">
      <title>File::getchar()</title><para></para>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads one character from the file and returns it as a one-character string.  Returns <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read from the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_getchar">File::getchar</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$char = $f.getchar();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::getchar()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The single character read from the file or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read from the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getCharset">
      <title>File::getCharset()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_getCharset">File::getCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$encoding = $f.getCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The character encoding for the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getLockInfo">
      <title>File::getLockInfo()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a hash of lock information for the file.  The hash contains the following keys: <code>start, len, pid, type, whence</code>.  If no lock is set on the file, the key type has the value <code><link linkend="F_UNLCK">F_UNLCK</link></code>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term> 
	  <listitem>
              <para><code><link linkend="File_getLockInfo">File::getLockInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> hash $hash = $f.getLockInfo();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::getLockInfo()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>The hash contains the following keys: <code>start, len, pid, type, whence</code>.  If no lock is set on the file, the key type has the value <code><link linkend="F_UNLCK">F_UNLCK</link></code>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::getLockInfo()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_getPos">
      <title>File::getPos()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the current file position as an integer giving the offset in bytes from the beginning of the file (starting from zero).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_getPos">File::getPos</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pos = $f.getPos();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::getPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The byte position in the file starting at 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getTerminalAttributes">
      <title>File::getTerminalAttributes()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Saves the current terminal attributes for the file in the <link linkend="TermIOS_Class">TermIOS</link> object passed; changes the object passed to reflect the terminal attributes as set for the file.  Do not pass a reference to the  <link linkend="TermIOS_Class">TermIOS</link> object; pass the object itself.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_getTerminalAttributes">File::getTerminalAttributes</link>(<link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TermIOS $termios();
stdin.getTerminalAttributes($termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable></code></para></entry>
	      <entry><para>The method writes the current terminal attributes for the file to the object passed.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::getTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPERATION-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TERMIOS-GET-ERROR</code></para></entry>
	      <entry><para>Error reading terminal attributes from the file descriptor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_isDataAvailable">
      <title>File::isDataAvailable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> is data becomes available for reading on the file within a timeout period.  With a timeout of zero (the default if no timeout value is passed), this method can be used for non-blocking polling the file for data.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>25ms</code>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_isDataAvailable">File::isDataAvailable</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $b = $file.isDataAvailable(0); # returns <code>True</code> if data is available now</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable></code></para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if data becomes available for reading from the file within the timeout period, <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_lock">
      <title>File::lock()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks or unlocks a portion of the file or the entire file, for reading or writing, non-blocking.  The file must be opened in the appropriate mode before this call or the call will fail with an exception.  For a blocking version of this method, see <link linkend="File_lockBlocking">File::lockBlocking()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_lock">File::lock</link>(<link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link>, <link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># lock the entire file exclusively
$f.lock(F_WRLCK);

# lock a section of the file for reading, start byte 512, 2K range
$f.lock(F_RDLCK, 512, 2048);

# release all locks
$f.lock(F_UNLCK);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link></code></para></entry>
	      <entry><para>Type of lock (or unlock); see <link linkend="File_Locking_Constants">File locking constants</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0</code></para></entry>
	      <entry><para>Start byte for lock, 0 is the default (start of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0</code></para></entry>
	      <entry><para>Length in bytes for range to lock, 0 is the default (rest of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link></code></para></entry>
	      <entry><para>Indicates how the relative offset of the file should be calculated for the lock; see <link linkend="File_Seek_Constants">File seek constants</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, <code>EACCES</code> if the lock would block (only in the case that the lock would block is no exception thrown and <code>EACCES</code> returned).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open, lock length is negative, or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_lockBlocking">
      <title>File::lockBlocking()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks or unlocks a portion of the file or the entire file, for reading or writing, blocking.  The file must be opened in the appropriate mode before this call or the call will fail with an exception.  For a non-blocking version of this method, see <link linkend="File_lock">File::lock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_lockBlocking">File::lockBlocking</link>(<link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link>, <link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># lock the entire file exclusively
$f.lockBlocking(F_WRLCK);

# lock a section of the file for reading, start byte 512, 2K range
$f.lockBlocking(F_RDLCK, 512, 2048);

# release all locks
$f.lockBlocking(F_UNLCK);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::lockBlocking()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$type</replaceable> = <link linkend="F_RDLCK">F_RDLCK</link></code></para></entry>
	      <entry><para>Type of lock (or unlock), see <link linkend="File_Locking_Constants">File locking constants</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$start</replaceable> = 0</code></para></entry>
	      <entry><para>Start byte for lock, 0 is the default (start of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$len</replaceable> = 0</code></para></entry>
	      <entry><para>Length in bytes for range to lock, 0 is the default (rest of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$whence</replaceable> = <link linkend="SEEK_SET">SEEK_SET</link></code></para></entry>
	      <entry><para>Indicates how the relative offset of the file should be calculated for the lock; see <link linkend="File_Seek_Constants">File seek constants</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::lockBlocking()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return a value; exceptions are thrown if errors occur.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::lockBlocking()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open, lock length is negative, or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_printf">
      <title>File::printf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string with soft field widths to the file.  See <link linkend="File_f_printf">File::f_printf()</link> for a similar method that enforces field widths.  See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_printf">File::printf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, ...) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_printf">File::printf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.printf("%5s\n", "hello there"); # outputs "hello there\n", exceeding field width</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$fmt</replaceable></code></para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para>...</para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_open">
      <title>File::open()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens the file in the mode given.  Aditionally, the file permissions can be given if the file is to be created, and optionally the file's default character encoding can be specified.</para>
	    <para>Note that if no encoding is specified, the file will be tagged with the <link linkend="Default_Character_Encoding">default character encoding</link> for the process.  Any string data written to the file will be converted to the file's <link linkend='Qore_Strings_and_Character_Encoding'>encoding</link>, and any string data read from the file will be automatically tagged with the file's <link linkend='Qore_Strings_and_Character_Encoding'>encoding</link>.</para>
	    <para>For a version of this method that throws an exception when errors occur opening the file, see <link linkend="File_open2">File::open2()</link>.</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_open">File::open</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_open">File::open</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a file for writing, truncate data if already exists, create the file if doesn't exist
# set 0644 permissions, and convert all string data to ISO-8859-1 encoding
$f.open("new_file.txt", O_CREAT | O_TRUNC | O_WRONLY, 0644, "ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link></code>, <code><link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></listitem>
        </varlistentry>

      </variablelist>

      <table>
	<title>Arguments for File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
	      <entry><para>The path to the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link></code></para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, <code><link linkend="O_RDONLY">O_RDONLY</link></code> will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666</code></para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0666)</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>]</code></para></entry>
	      <entry><para>The name of the default character encoding for this file; if this argument is not given, the file will be tagged with the <link linkend="Default_Character_Encoding">default character encoding</link> for the process.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 = no error, -1 = see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error message</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPEN-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing filename argument.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_open2">
      <title>File::open2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens the file in the mode given.  Aditionally, the file permissions can be given if the file is to be created, and optionally the file's default character encoding can be specified.</para>
	    <para>Note that if no encoding is specified, the file will be tagged with the <link linkend="Default_Character_Encoding">default character encoding</link> for the process.  Any string data written to the file will be converted to the file's <link linkend='Qore_Strings_and_Character_Encoding'>encoding</link>, and any string data read from the file will be automatically tagged with the file's <link linkend='Qore_Strings_and_Character_Encoding'>encoding</link>.</para>
	    <para>If an error occurs, a <code>FILE-OPEN2-ERROR</code> exception is thrown.  For a version of this method that returns an error code, see <link linkend="File_open">File::open()</link>.</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_open2">File::open2</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="File_open2">File::open2</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a file for writing, truncate data if already exists, create the file if doesn't exist
# set 0644 permissions, and convert all string data to ISO-8859-1 encoding
$f.open2("new_file.txt", O_CREAT | O_TRUNC | O_WRONLY, 0644, "ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link>, <link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::open2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
	      <entry><para>The path to the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link></code></para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, <code><link linkend="O_RDONLY">O_RDONLY</link></code> will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666</code></para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0666)</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>]</code></para></entry>
	      <entry><para>The name of the default character encoding for this file; if this argument is not given, the file will be tagged with the <link linkend="Default_Character_Encoding">default character encoding</link> for the process.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::open2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPEN2-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing filename argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-OPEN2-ERROR</code></para></entry>
	      <entry><para>Error opening the file; attempted to reopen a system file (<link linkend="Qore_IO_Constants">I/O constants</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="File_read">
      <title>File::read()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a certain amount of string data from the file; the size argument is required.  To read binary data, use the <link linkend="File_readBinary">File::readBinary()</link> method.</para>
	    <para>Note that the amount of data read from the file may be less than the size given, for example if the file does not contain enough data to fulfill the request.  In this case, only the data available in the file is returned.</para>
	    <para>An optional timeout period in milliseconds can be passed as well (or a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear; ex: <code>25ms</code>).  If a timeout value is passed and the data cannot be read within the timeout period, then a <code>FILE-READ-TIMEOUT</code> exception is thrown.  If no timeout value is passed or a negative value is given, then the call will never timeout until either the requested amount of data has been read from the file or an end-of-file condition has been reached.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="File_read">File::read</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $f.read(-1); # read an entire text file into a variable</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$size</replaceable></code></para></entry>
	      <entry><para>The number of bytes to read of the file, -1 will read the entire file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>A timeout period with a resolution of milliseconds (an integer argument will be assumed to be milliseconds)); if not given or negative the call will never time out and will only return when the data has been read.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The data read from the file, returned as a string.  <command><link linkend="NOTHING">NOTHING</link></command> is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and <command><link linkend="NOTHING">NOTHING</link></command> (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open; timeout limit exceeded.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_readi1">
      <title>File::readi1()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 1-byte signed integer from the file and returns the integer value read.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi1">File::readi1</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi1();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 1-byte signed integer as read from the file in binary format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi2">
      <title>File::readi2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in big-endian (MSB, network byte order) format.  See <link linkend="File_readi2LSB">File::readi2LSB()</link> for an equivalent method reading a 2-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi2">File::readi2</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi2();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 2-byte signed integer as read from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi4">
      <title>File::readi4()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readi4LSB">File::readi4LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi4">File::readi4</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi4();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi8">
      <title>File::readi8()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readi8LSB">File::readi8LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi8">File::readi8</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$i = $f.readi8();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi2LSB">
      <title>File::readi2LSB()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in little-endian (LSB) format.  See <link linkend="File_readi2">File::readi2()</link> for an equivalent method reading a 2-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi2LSB">File::readi2LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi2LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Reads a 2-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi4LSB">
      <title>File::readi4LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in little-endian format.  See <link linkend="File_readi4">File::readi4()</link> for an equivalent method reading a 4-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi4LSB">File::readi4LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi4LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Reads a 4-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi8LSB">
      <title>File::readi8LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads an 8-byte signed integer from the file in little-endian format.  See <link linkend="File_readi8">File::readi8()</link> for an equivalent method reading a 8-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readi8LSB">File::readi8LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readi8LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Reads a 4-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="File_readu1">
      <title>File::readu1()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 1-byte unsigned integer from the file and returns the integer value read.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readu1">File::readu1</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readu1();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 1-byte unsigned integer as read from the file in binary format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu2">
      <title>File::readu2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in big-endian (MSB, network byte order) format.  See <link linkend="File_readu2LSB">File::readu2LSB()</link> for an equivalent method reading a 2-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readu2">File::readu2</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readu2();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 2-byte signed integer as read from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu4">
      <title>File::readu4()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readu4LSB">File::readu4LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readu4">File::readu4</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readu4();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu2LSB">
      <title>File::readu2LSB()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in little-endian (LSB) format.  See <link linkend="File_readu2">File::readu2()</link> for an equivalent method reading a 2-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readu2LSB">File::readu2LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readu2LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>


      <table>
	<title>Return Value for File::readu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Reads a 2-byte signed integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu4LSB">
      <title>File::readu4LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte unsigned integer from the file in little-endian format.  See <link linkend="File_readu4">File::readu4()</link> for an equivalent method reading a 4-byte signed integer in big-endian (MSB, network byte order) format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readu4LSB">File::readu4LSB</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $i = $f.readu4LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Reads a 4-byte unsigned integer from the file in little-endian format or <command><link linkend="NOTHING">NOTHING</link></command> if no data can be read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readBinary">
      <title>File::readBinary()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Read a certain amount of data and return a binary object; the size parameter is mandatory.</para>
	    <para>Note that the amount of data read from the file may be less than the size given, for example if the file does not contain enough data to fulfill the request.  In this case, only the data available in the file is returned.</para>
	    <para>An optional timeout period in milliseconds can be passed as well (or a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear; ex: <code>25ms</code>).  If a timeout value is passed and the data cannot be read within the timeout period, then a <code>FILE-READ-TIMEOUT</code> exception is thrown.  If no timeout value is passed or a negative value is given, then the call will never timeout until either the requested amount of data has been read from the file or an end-of-file condition has been reached.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="File_readBinary">File::readBinary</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 1) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $f.readBinary(); # reads an entire binary file into a variable</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> <replaceable>#size</replaceable></code></para></entry>
	      <entry><para>The number of bytes to read of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms = -1</replaceable></code></para></entry>
	      <entry><para>A timeout period in milliseconds; if negative (the default) the call will never time out and will only return when the data has been read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="binary_type">binary</link></code></para></entry>
	      <entry><para>A binary object containing the data read from the file.  <command><link linkend="NOTHING">NOTHING</link></command> is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and <command><link linkend="NOTHING">NOTHING</link></command> (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-BINARY-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open; timeout limit exceeded.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readLine">
      <title>File::readLine()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads until an EOL marker is found and returns a string containing the EOL marker.  Returns <command><link linkend="NOTHING">NOTHING</link></command> on end of file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_readLine">File::readLine</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>while</command> (<command>exists</command> (<command>my</command> $line = $f.readLine())) {
    # remove EOL marker
    <command>chomp</command> $line;
    # print out the line just read
    printf("%s\n", $line);
}</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The line read from the file.  <command><link linkend="NOTHING">NOTHING</link></command> is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and <command><link linkend="NOTHING">NOTHING</link></command> (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READLINE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_setCharset">
      <title>File::setCharset()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the characte encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_setCharset">File::setCharset</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="File_setCharset">File::setCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.setCharset("ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>]</code></para></entry>
	      <entry><para>The character encoding for the file.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="File_setPos">
      <title>File::setPos()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the current file position in bytes starting with zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_setPos">File::setPos</link>(<link linkend="softint_type">softint</link> <replaceable>$pos</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.setPos(0); # go to the beginning of the file</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$pos</replaceable> = 0</code></para></entry>
	      <entry><para>The position in the file as offset from position 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::setPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns the new offset in the file, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_setTerminalAttributes">
      <title>File::setTerminalAttributes()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed; does not change the object passed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_setTerminalAttributes">File::setTerminalAttributes</link>(<link linkend="softint_type">softint</link> <replaceable>$action</replaceable> = TCSANOW, <link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TermIOS $termios();
stdin.getTerminalAttributes($termios);
<command>my</command> TermIOS $orig = $termios.copy();
<command>on_exit</command>
    stdin.setTerminalAttributes(TCSADRAIN, $orig);

<command>my</command> $lflag = $termios.getLFlag();
$lflag &amp;= ~ICANON;
$lflag &amp;= ~ECHO;
$lflag &amp;= ~ISIG;
$termios.setLFlag($lflag);
$termios.setCC(VMIN, 1);
$termios.setCC(VTIME, 0);
stdin.setTerminalAttributes(TCSADRAIN, $termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$action</replaceable> = TCSANOW, <link linkend="TermIOS_Class">TermIOS</link> <replaceable>$termios</replaceable></code></para></entry>
	      <entry><para>Sets the current terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::setTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Always returns 0; if an error is encountered, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::setTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPERATION-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TERMIOS-GET-ERROR</code></para></entry>
	      <entry><para>Error setting terminal attributes on the file descriptor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_sync">
      <title>File::sync()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Flushes the file's buffer to disk.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_sync">File::sync</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.sync();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for File::sync()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_vprintf">
      <title>File::vprintf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the first argument is a <link linkend="String_Formatting">format string</link>,and the second argument is the formatting argument list.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_vprintf">File::vprintf</link>(<link linkend="string_type">string</link> <replaceable>$fmt</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="File_vprintf">File::vprintf</link>() <command>returns</command> <link linkend="int_type">int</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.vprintf("%5s\n", "hello");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::vprintf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$fmt</replaceable></code></para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
	      <entry><para>This single argument or list of arguments will be used as the argument list or the format string.  If a single argument is passed instead of a list, it will be used as the first argument as if a list were passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_write">
      <title>File::write()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes string or binary data to a file.  String data will be converted to the file's character encoding if necessary before writing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_write">File::write</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.write($data);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="data_type">data</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>Writes the data to the file.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing string or binary argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei1">
      <title>File::writei1()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 1-byte integer to the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei1">File::writei1</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei1($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; only the least-significant 8 bits will be written to the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei2">
      <title>File::writei2()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei2">File::writei2</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei2($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei4">
      <title>File::writei4()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei4">File::writei4</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei4($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei8">
      <title>File::writei8()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes an 8-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei4">File::writei8</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei8($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes an 8-byte integer in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei2LSB">
      <title>File::writei2LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei2LSB">File::writei2LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei2LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei4LSB">
      <title>File::writei4LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei4LSB">File::writei4LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei4LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei8LSB">
      <title>File::writei8LSB()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes an 8-byte integer to the file in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="File_writei8LSB">File::writei8LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei8LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to write; writes an 8-byte integer in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::writei8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>


  <sect1 id="Dir_Class">
    <title>Dir Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> parse option.</para>

    <para>The Dir class allows Qore programs to list and manipulate directories.</para>

    <para>Directory objects can be created/opened with a specific character encoding. This means that any entry read from the directory
    will be tagged with the directory's character encoding. If no character encoding is given the <link linkend="Default_Character_Encoding">default Qore character encoding</link> is assumed.</para>

    <table>
      <title>Dir Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_constructor">Dir::constructor</link>()</code></para>
              <para><code><link linkend="Dir_constructor">Dir::constructor</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Create a Directory object with optional character encoding. It points to the directory the script is started.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_destructor">Dir::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the directory object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_copy">Dir::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new directory object with the same character encoding specification and the same path as the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_chdir">Dir::chdir</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Change the path of the directory. The path specification can be relative or absolute (with leading '/'). This path does not necessarily need to exist.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_path">Dir::path</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a string giving the current path of the object, stripped of all '.' and '..' entries or <command><link linkend="NOTHING">NOTHING</link></command> if no path is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_exists">Dir::exists</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Checks if the path in the object is an openable directory.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_create">Dir::create</link>(<link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Try to create all directories of the object if they do not exist yet; if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_chown">Dir::chown</link>(<link linkend="softint_type">softint</link> <replaceable>$uid</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Dir_chown">Dir::chown</link>(<link linkend="string_type">string</link> <replaceable>$username</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the ownership of the directory to the given user.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_chgrp">Dir::chgrp</link>(<link linkend="softint_type">softint</link> <replaceable>$gid</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Dir_chgrp">Dir::chgrp</link>(<link linkend="string_type">string</link> <replaceable>$groupname</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the group membership of the directory to the given group.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_chmod">Dir::chmod</link>(<link linkend="softint_type">softint</link> <replaceable>$mode</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the permissions of the directory to the given mode; if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_mkdir">Dir::mkdir</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Create a subdirectory with the name in the directory; if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_rmdir">Dir::rmdir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Delete an empty subdirectory with the name in the directory; if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_list">Dir::list</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_list">Dir::list</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_list">Dir::list</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in this directory, except '.' and '..' directories (takes an optional regular expression filter); if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in the directory which are not subdirectories (takes an optional regular expression filter); if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in the directory which are subdirectories, except '.' and '..' directories (takes an optional regular expression filter); if any errors occur an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_openDir">Dir::openDir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>) <command>returns</command> <link linkend="Dir_Class">Dir</link></code></para>
              <para><code><link linkend="Dir_openDir">Dir::openDir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="Dir_Class">Dir</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get a Dir object as an subdir entry of the current directory.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Dir_openFile">Dir::openFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="File_Class">File</link></code></para>
              <para><code><link linkend="Dir_openFile">Dir::openFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="File_Class">File</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get a File object which represents a file in the directory.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Dir_removeFile">Dir::removeFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Remove (unlink) a file in this directory.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>


    <sect2 id="Dir_constructor">
      <title>Dir::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a Dir object. It accepts one optional argument that will set the default character encoding encoding for the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_constructor">Dir::constructor</link>()</code></para>
              <para><code><link linkend="Dir_constructor">Dir::constructor</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Dir $d("UTF-8");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
	<title>Arguments for Dir::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$encoding</replaceable></code></para></entry>
	      <entry><para>The character encoding for the directory.  Any entry of the directory will be converted to this character encoding if necessary, and entries read will be tagged with this encoding.  If no encoding is given, the <link linkend="Default_Character_Encoding">default encoding</link> is used.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_destructor">
      <title>Dir::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the Dir object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $d;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>


    <sect2 id="Dir_copy">
      <title>Dir::copy()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Dir object with the same character encoding specification and path as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Dir $d2 = $d.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>


    <sect2 id="Dir_chdir">
      <title>Dir::chdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the directory of the Dir object to the path; you can use either an absolute path (leading with '/') or a directory realtive to the actual path.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_chdir">Dir::chdir</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($d.chdir("../doc")) {
   printf("the directory does not exist or is not readable\n");
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
	      <entry><para>The new directory name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::chdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if the new path is openable as directory (see <link linkend="Dir_exists">exists()</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_path">
      <title>Dir::path()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Return the path of the Dir object or <command><link linkend="NOTHING">NOTHING</link></command> if no path is set.  This path does not necessarily need to exist.  '.' and '..' str stripped from the path if present.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_path">Dir::path</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $mypath = $d.path();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for Dir::path()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The path of the Dir object or <command><link linkend="NOTHING">NOTHING</link></command> if no path is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_exists">
      <title>Dir::exists()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> if the path in the Dir object points to a directory that already exists and is openable by the current user.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_exists">Dir::exists</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> (!$d.exists()) {
   printf("the directory %s does not exist or cannot be opened\n", $d.path());
   exit(-1);
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for Dir::exists()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if the directory exists and is openable.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_create">
      <title>Dir::create()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Create the whole directory tree the Dir object points to, if it does not exist till now.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_create">Dir::create</link>(<link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> (!$d.exists()) {
   printf("directory '%s' does not exist; creating...\n", $d.path());
   $cnt = $d.create();
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::create()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777</code></para></entry>
	      <entry><para>The mode of the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::create()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Number directories created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::create()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CREATE-ERROR</code></para></entry>
	      <entry><para>One of the directories in the path could not be created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_chown">
      <title>Dir::chown()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the ownership of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_chown">Dir::chown</link>(<link linkend="softint_type">softint</link> <replaceable>$uid</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Dir_chown">Dir::chown</link>(<link linkend="string_type">string</link> <replaceable>$username</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.chown("nobody");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$uid</replaceable></code></para></entry>
	      <entry><para>The userid to be used.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$username</replaceable></code></para></entry>
	      <entry><para>A username which is known by the system.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHOWN-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-CHOWN-ERROR</code></para></entry>
	      <entry><para>The error occoured in the chown() call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chgrp">
      <title>Dir::chgrp()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the group membership of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_chgrp">Dir::chgrp</link>(<link linkend="softint_type">softint</link> <replaceable>$gid</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Dir_chgrp">Dir::chgrp</link>(<link linkend="string_type">string</link> <replaceable>$groupname</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.chgrp("nogroup");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chgrp()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$gid</replaceable></code></para></entry>
	      <entry><para>The groupid to be set for the directory.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$groupname</replaceable></code></para></entry>
	      <entry><para>The name of the group to be set. Must be known in the system.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chgrp()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHGRP-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-CHGRP-ERROR</code></para></entry>
	      <entry><para>Error occoured during the change group chown() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chmod">
      <title>Dir::chmod()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the mode of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_chmod">Dir::chmod</link>(<link linkend="softint_type">softint</link> <replaceable>$mode</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.chmod(0711); # set mode to u(rwx) and go(x)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chmod()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$mode</replaceable></code></para></entry>
	      <entry><para>The mode of the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chmod()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHMOD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-CHMOD-ERROR</code></para></entry>
	      <entry><para>The error returned from the chmod() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_mkdir">
      <title>Dir::mkdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Make a subdirectory in the Dir object's path. There are no path info allowed (the '/'). If no mode is given the mode 0777 is used.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_mkdir">Dir::mkdir</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.mkdir("newSubDir", 0755);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::mkdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0777</code></para></entry>
	      <entry><para>The name and mode of the subdirectory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir:mkdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-MKDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-MKDIR-ERROR</code></para></entry>
	      <entry><para>The error returned from the mkdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_rmdir">
      <title>Dir::rmdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Remove a subdirectory from the Dir object's path. There is no pathinfo allowed in the name (the '/' delimiter).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_rmdir">Dir::rmdir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.rmdir("emptySubdir");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::rmdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$subdir</replaceable></code></para></entry>
	      <entry><para>The name of the directory to be removed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::rmdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-RMDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-RMDIR-ERROR</code></para></entry>
	      <entry><para>The error returned from the rmdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_list">
      <title>Dir::list()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object. It supresses the '.' and '..' directory.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_list">Dir::list</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_list">Dir::list</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_list">Dir::list</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>foreach</command> <command>my</command> string $e <command>in</command> ($d.list()) {
   printf("entry: %s\n");
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, [<link linkend="int_type">int</link> <replaceable>$options</replaceable>]]</code></para></entry>
	      <entry><para>An optional regular expression string used to filter the arguments followed by bitwise-or'ed <link linkend="Qore_Regex_Constants">regex option constants</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="list_type">list</link></para></entry>
	      <entry><para>A list of Strings with the directories content.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_listFiles">
      <title>Dir::listFiles()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object, which are not subdirectories.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listFiles">Dir::listFiles</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>foreach</command> <command>my</command> string $e <command>in</command> ($d.listFiles()) {
   printf("entry: %s\n");
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::listFiles()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, [<link linkend="int_type">int</link> <replaceable>$options</replaceable>]]</code></para></entry>
	      <entry><para>An optional regular expression string used to filter the arguments followed by bitwise-or'ed <link linkend="Qore_Regex_Constants">regex option constants</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::listFiles()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="list_type">list</link></para></entry>
	      <entry><para>A list of strings with the file names as elements.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::listFiles()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_listDirs">
      <title>Dir::listDirs()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object that are subdirectories, not including the '.' and '..' directories.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
              <para><code><link linkend="Dir_listDirs">Dir::listDirs</link>(<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, <link linkend="int_type">int</link> <replaceable>$options</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>foreach</command> <command>my</command> string $e <command>in</command> ($d.listDirs()) {
   printf("entry: %s\n");
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::listDirs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$regex</replaceable>, [<link linkend="int_type">int</link> <replaceable>$options</replaceable>]]</code></para></entry>
	      <entry><para>An optional regular expression string used to filter the arguments followed by bitwise-or'ed <link linkend="Qore_Regex_Constants">regex option constants</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::listDirs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="list_type">list</link></para></entry>
	      <entry><para>A list of strings with the directory names found.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::listDirs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_openDir">
      <title>Dir::openDir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Return a Dir object in the directory of the Dir object.
	          The dirname does not allow path information (the '/').
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_openDir">Dir::openDir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>) <command>returns</command> <link linkend="Dir_Class">Dir</link></code></para>
              <para><code><link linkend="Dir_openDir">Dir::openDir</link>(<link linkend="string_type">string</link> <replaceable>$subdir</replaceable>, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="Dir_Class">Dir</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a subdir for working with
<command>my</command> Dir $sd = $d.openDir("mysubdir", "ISO-8859-1");
<command>my</command> list $sd_list = $sd.list();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::openDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$subdir</replaceable>, [<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>]</code></para></entry>
	      <entry><para>The name of the subdirectory. The directory must not exist and can be created with create() afterwards.  If no encoding is given, the <link linkend="Default_Character_Encoding">default encoding</link> is used.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::openDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="Dir_Class">Dir</link></code></para></entry>
	      <entry><para>The Dir object created for the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::openDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-OPENDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>The directory name to be opened contains path information ('/').</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Dir_openFile">
      <title>Dir::openFile()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Create or open a File object in the directory of the Dir object.
	          The filename does not allow path information (the '/').
		  Uses the <link linkend="File_open2">File::open2()</link> method.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_openFile">Dir::openFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666) <command>returns</command> <link linkend="File_Class">File</link></code></para>
              <para><code><link linkend="Dir_openFile">Dir::openFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link>, <link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666, <link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="File_Class">File</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a file for writing in the directory and set the mode to
# 0644 and the encoding to UTF-8
<command>my</command> $f = $d.openFile("myfile.txt", O_CREAT|O_WRONLY, 0644, "UTF-8");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::openFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>name</replaceable></code></para></entry>
	      <entry><para>The name of the file in the current directory.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$flags</replaceable> = <link linkend="O_RDONLY">O_RDONLY</link></code></para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, <code><link linkend="O_RDONLY">O_RDONLY</link></code> will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$mode</replaceable> = 0666</code></para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0666)</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>]</code></para></entry>
	      <entry><para>The name of the default character encoding for this file; if this argument is not given, the file will be tagged with the <link linkend="Default_Character_Encoding">default character encoding</link> for the process.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::openFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The File object created or opened in the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::openFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-OPENFILE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>The file name to be opened contains path information ('/').</para></entry>
	    </row>
	    <row>
	      <entry><para>File Exceptions</para></entry>
	      <entry><para>Exceptions thrown by the <link linkend="File_open2">File::open2()</link> call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_removeFile">
      <title>Dir::removeFile()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Remove the file with the given name in the Dir object's directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Dir_removeFile">Dir::removeFile</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d.removeFile("myTestFile.dat");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::removeFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$name</replaceable></code></para></entry>
	      <entry><para>The name of the file in the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::removeFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if the file was present and could be removed. <code>False</code> if the file did not exist.  If any errors occur unlinking an existing file, then an exception occurs.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::removeFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-REMOVEFILE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DIR-REMOVEFILE-ERROR</code></para></entry>
	      <entry><para>The error returned by the unlink() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="TermIOS_Class">
    <title>TermIOS Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-terminal-io">PO_NO_TERMINAL_IO</link></code> parse option.</para>

    <para>This class contains the data structure used to read and set terminal attributes on <link linkend="Qore_IO_Constants">terminal I/O constants</link>.</para>

    <para>This class is used with <link linkend="File_getTerminalAttributes">File::getTerminalAttributes()</link>, <link linkend="File_setTerminalAttributes">File::setTerminalAttributes()</link>, and the <link linkend="Qore_IO_Constants">terminal I/O constants</link> to manipulate terminal attributes.</para>

    <para>For example, here is some code to set terminal attributes, read in a character from stanrdard input with a timeout, and reset the terminal attributes:</para>

    <programlisting><command>my</command> TermIOS $t();
stdin.getTerminalAttributes($t);
<command>my</command> TermIOS $orig = $t.copy();
<command>on_exit</command>
    stdin.setTerminalAttributes(TCSADRAIN, $orig);

<command>my</command> $lflag = $t.getLFlag();
$lflag &amp;= ~ICANON;
$lflag &amp;= ~ECHO;
$lflag &amp;= ~ISIG;
$t.setLFlag($lflag);
$t.setCC(VMIN, 1);
$t.setCC(VTIME, 0);
stdin.setTerminalAttributes(TCSADRAIN, $t);

stdout.printf("Press any key: ");
<command>while</command> (!stdin.isDataAvailable(20ms)) {
    stdout.printf(".");
    stdout.sync();
    usleep(1ms);
}
<command>my</command> $c = stdin.read(1);
stdout.printf(" GOT ASCII 0x%02x (%d) '%s'\n", ord($c), ord($c), $c);</programlisting>

    <para>For more information on terminal attributes, see your system's manual pages for &quot;termios&quot;.</para>

    <table>
      <title>TermIOS Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::constructor">TermIOS::constructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the TermIOS object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::destructor">TermIOS::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the TermIOS object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::copy">TermIOS::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a copy of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::getLFlag">TermIOS::getLFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Local_Mode_Constants">local mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::getCFlag">TermIOS::getCFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Control_Mode_Constants">control mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::getOFlag">TermIOS::getOFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Output_Mode_Constants">output mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::getIFlag">TermIOS::getIFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Input_Mode_Constants">input mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::setLFlag">TermIOS::setLFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Local_Mode_Constants">local mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::setCFlag">TermIOS::setCFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Control_Mode_Constants">control mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::setOFlag">TermIOS::setOFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Output_Mode_Constants">output mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::setIFlag">TermIOS::setIFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Input_Mode_Constants">input mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::getCC">TermIOS::getCC</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets the value of a <link linkend="Control_Character_Constants">control character</link> for the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::setCC">TermIOS::setCC</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$value</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the value of a <link linkend="Control_Character_Constants">control character</link> for the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TermIOS::isEqual">TermIOS::isEqual</link>(<link linkend="TermIOS_Class">TermIOS</link> <replaceable>$other</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns true if the object passed is equal to the current object, false if not.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><command>static</command> <link linkend="TermIOS::getWindowSize">TermIOS::getWindowSize</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns a hash giving the current terminal window size in hash keys <code>rows</code> and <code>columns</code>.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="TermIOS::constructor">
      <title>TermIOS::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the TermIOS object with random contents.  Use <link linkend="File_getTerminalAttributes">File::getTerminalAttributes()</link> with a <link linkend="Qore_IO_Constants">terminal I/O constant</link> to initialize the object with terminal settings.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="TermIOS::constructor">TermIOS::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TermIOS $termios();
stdin.getTerminalAttributes($termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="TermIOS::destructor">
      <title>TermIOS::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the TermIOS object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $termios;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="TermIOS::copy">
      <title>TermIOS::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a copy of the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TermIOS $t2 = $t.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="TermIOS::getLFlag">
      <title>TermIOS::getLFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::getLFlag">TermIOS::getLFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TermIOS::getLFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="int_type">int</link></code></para></entry>
              <entry><para>The <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TermIOS::getCFlag">
      <title>TermIOS::getCFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::getCFlag">TermIOS::getCFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for TermIOS::getCFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getIFlag">
      <title>TermIOS::getIFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::getIFlag">TermIOS::getIFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for TermIOS::getIFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getOFlag">
      <title>TermIOS::getOFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::getOFlag">TermIOS::getOFlag</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for TermIOS::getOFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setLFlag">
      <title>TermIOS::setLFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::setLFlag">TermIOS::setLFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setLFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0</code></para></entry>
              <entry><para>The <link linkend="Local_Mode_Constants">local mode</link> to set for the object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setCFlag">
      <title>TermIOS::setCFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::setCFlag">TermIOS::setCFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setCFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0</code></para></entry>
              <entry>
                <para>The <link linkend="Control_Mode_Constants">control mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setIFlag">
      <title>TermIOS::setIFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::setIFlag">TermIOS::setIFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setIFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0</code></para></entry>
              <entry>
                <para>The <link linkend="Input_Mode_Constants">input mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setOFlag">
      <title>TermIOS::setOFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::setOFlag">TermIOS::setOFlag</link>(<link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setOFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$val</replaceable> = 0</code></para></entry>
              <entry>
                <para>The <link linkend="Output_Mode_Constants">output mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getCC">
      <title>TermIOS::getCC()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the <link linkend="Control_Character_Constants">control character</link> corresponding to the argument passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::getCC">TermIOS::getCC</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getCC()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0</code></para></entry>
              <entry><para>The <link linkend="Control_Character_Constants">control character</link> to get from th object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getCC()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The value of the given <link linkend="Control_Character_Constants">control character</link>.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setCC">
      <title>TermIOS::setCC()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Control_Character_Constants">control character</link> corresponding to the first argument to the value of the second argument.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::setCC">TermIOS::setCC</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0, <link linkend="softint_type">softint</link> <replaceable>$value</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setCC()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0</code></para></entry>
              <entry>
                <para>The <link linkend="Control_Character_Constants">control character</link> to set.</para>
              </entry>
            </row>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>value</replaceable> = 0</code></para></entry>
              <entry>
                <para>The value to set</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::isEqual">
      <title>TermIOS::isEqual()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the TermIOS object passed as an argument is equal to the current object; false if not.  If the argument passed to this method is not a TermIOS object, an exception is raised</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TermIOS::isEqual">TermIOS::isEqual</link>(<link linkend="TermIOS_Class">TermIOS</link> <replaceable>$other</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::isEqual()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="TermIOS_Class">TermIOS</link> <replaceable>$other</replaceable></code></para></entry>
              <entry>
                <para>The object to compare to the current object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::isEqual()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>The result of comparing the current object to the argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TermIOS::isEqual()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TERMIOS-ISEQUAL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>argument passed is not a TermIOS object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TermIOS::getWindowSize">
      <title>static TermIOS::getWindowSize()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash giving the current terminal window size in hash keys <code>rows</code> and <code>columns</code>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><command>static</command> <link linkend="TermIOS::getWindowSize">TermIOS::getWindowSize</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = TermIOS::getWindowSize()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for TermIOS::getWindowSize()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
              <entry><para>Returns a hash giving the current terminal window size in hash keys <code>rows</code> and <code>columns</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="GetOpt_Class">
    <title>GetOpt Class</title>

    <para>The GetOpt class provides an easy way to process POSIX-style command-line options in Qore scripts/programs.</para>

    <table>
      <title>GetOpt Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="GetOpt_constructor">GetOpt::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$options</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the GetOpt object with the option hash passed.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="GetOpt_destructor">GetOpt::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="GetOpt_copy">GetOpt::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse</link>(<link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse</link>(<link linkend="list_type">list</link> <replaceable>$list</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Parses the argument list passed and retuns a hash of the results; if there are any errors, they are returned in the <code>&quot;_ERRORS_&quot;</code> key of the hash returned.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="GetOpt::parse2">GetOpt::parse2</link>(<link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="GetOpt::parse2">GetOpt::parse2</link>(<link linkend="list_type">list</link> <replaceable>$list</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Parses the argument list passed and retuns a hash of the results; if there are any errors, an exception is thrown.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="GetOpt_constructor">
      <title>GetOpt::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the GetOpt object and sets the option hash with the single required argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="GetOpt_constructor">GetOpt::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$options</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>const</command> program_options =
    ( "url"  : "url,u=s",
      "xml"  : "xml,x",
      "lxml" : "literal-xml,X",
      "verb" : "verbose,v",
      "help" : "help,h" );

<command>my</command> GetOpt $getopt(program_options);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$options</replaceable></code></para></entry>
	      <entry><para>Each key defines the key value for the return hash if any arguments are given corresponding to the string value of the key.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>The string value of each hash follows the following pattern:</para>
      <programlisting><replaceable>opts</replaceable>[=|:<replaceable>type</replaceable>[<replaceable>modifier</replaceable>]]</programlisting>

      <table>
	<title>Option Hash Value String</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Component</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><replaceable>opts</replaceable></code></para></entry>
	      <entry><para>At least one short option and/or a long option name; if both are present, then they must be separated by a comma.  The short option must be a single character.</para></entry>
	    </row>
	    <row>
	      <entry><para>[=:<replaceable>type</replaceable>]</para></entry>
	      <entry><para>if &quot;=&quot; is used, then the option takes a mandatory argument, if &quot;:&quot; is used, then the argument is optional.  Types are specified as follows: s=string, i=integer, f=float, d=date, b=boolean</para></entry>
	    </row>
	    <row>
	      <entry><para><code><replaceable>modifier</replaceable></code></para></entry>
	      <entry><para>@ specifies a list, + an additive value (sum; must be integer or float type)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>GETOPT-OPTION-ERROR</code></para></entry>
	      <entry><para>There was a syntax or format error in the option specification.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="GetOpt_destructor">
      <title>GetOpt::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the GetOpt object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $getopt;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="GetOpt_copy">
      <title>GetOpt::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by GetOpt::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>GETOPT-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="GetOpt::parse">
      <title>GetOpt::parse()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the list of parameters according to the option hash passed to the constructor.  If a reference to a list is passed to this function, then all arguments parsed will be removed from the list, leaving only unparsed arguments (for example, file names).</para>
	    <para>If any errors are encountered, the return value hash will have a key <code>&quot;_ERRORS_&quot;</code> giving a list of error messages pertaining to the options parsed.</para>
	    <para>See <link linkend="GetOpt::parse2">GetOpt::parse2()</link> for a similar method that throws an exception instead of putting error information in the <code>_ERRORS_</code> key of the hash value returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse</link>(<link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse</link>(<link linkend="list_type">list</link> <replaceable>$list</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> hash $o = $getopt.parse(\$ARGV);
<command>if</command> (<command>exists</command> $o."_ERRORS_") {
   stderr.printf("%s\n", $o."_ERRORS_"[0]);
   exit(1);
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for GetOpt::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="list_type">list</link> <replaceable>$list</replaceable></code></para></entry>
	      <entry><para>The entire command line to process (ex: <link linkend="Special_Qore_Variables">$ARGV</link>).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable></code></para></entry>
	      <entry><para>The reference should point to a list of arguments to process; any argument accepted by the object will be removed from the list.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for GetOpt::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>A hash keyed by option names (as given in the hash to the GetOpt constructor), where each key's value is the value of the arguments passed in the list argument.  The hash key <code>&quot;_ERRORS_&quot;</code> will contain any errors.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="GetOpt::parse2">
      <title>GetOpt::parse2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the list of parameters according to the option hash passed to the constructor.  If a reference to a list is passed to this function, then all arguments parsed will be removed from the list, leaving only unparsed arguments (for example, file names).</para>
	    <para>If any errors are encountered, an appropriate exception will be thrown.</para>
	    <para>See <link linkend="GetOpt::parse">GetOpt::parse()</link> for a similar method that puts error information in the <code>&quot;_ERRORS_&quot;</code> key of the hash value returned instead of throwing an exception.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse2</link>(<link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="GetOpt::parse">GetOpt::parse2</link>(<link linkend="list_type">list</link> <replaceable>$list</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>try</command> {
   <command>my</command> hash $o = $getopt.parse2(\$ARGV);
}
<command>catch</command> ($ex) {
   stderr.printf("%s\n", $ex.desc);
   exit(1);
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for GetOpt::parse2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="list_type">list</link> <replaceable>$list</replaceable></code></para></entry>
	      <entry><para>The entire command line to process (ex: <link linkend="Special_Qore_Variables">$ARGV</link>).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$list_ref</replaceable></code></para></entry>
	      <entry><para>The reference should point to a list of arguments to process; any argument accepted by the object will be removed from the list.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for GetOpt::parse2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>A hash keyed by option names (as given in the hash to the GetOpt constructor), where each key's value is the value of the arguments passed in the list argument.  If any errors are encountered processing the arguments, an appropriate exception will be thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by GetOpt::parse2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>GETOPT-ERROR</code></para></entry>
	      <entry><para>The description varies according to the error encountered.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="FtpClient_Class">
    <title>FtpClient Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-network">PO_NO_NETWORK</link></code> parse option.</para>

    <para>The FtpClient class allows Qore programs to communicate with FTP servers.  The constructor takes an optional URL with the following format:</para>

    <programlisting>[(ftp|ftps)://][username[:password]@]hostname[:port]</programlisting>

    <para>If the URL is not set with the constructor, then the connection parameters must be set with the FtpClient::set*() methods. At the very minimum the hostname must be set.  If any path name is given in the URL, it is ignored.  See the following table for default URL parameters.</para>

    <table>
      <title>FtpClient::constructor() Default URL Parameters</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Field</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code><replaceable>protocol</replaceable></code></para></entry>
	    <entry><para><code>ftp</code> (unencrypted)</para></entry>
	  </row>
	  <row>
	    <entry><para><code><replaceable>username</replaceable></code></para></entry>
	    <entry><para><code>anonymous</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code><replaceable>password</replaceable></code></para></entry>
	    <entry><para><code>qore@nohost.com</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code><replaceable>port</replaceable></code></para></entry>
	    <entry><para><code>21</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>Once the URL (at least the hostname) has been set, the <link linkend="FtpClient_connect">FtpClient::connect() method</link> must be called to connect and login to the FTP server.</para>

    <para>Objects of this class are capable of making encrypted FTPS connections according to <ulink url="http://www.ietf.org/rfc/rfc4217.txt">RFC-4217</ulink>.  TLS/SSL encrypted control and data connection will be attempted if the protocol is set to 'ftps' or the <link linkend="FtpClient_setSecure">FtpClient::setSecure() method</link> is called before connecting.</para>

    <para>Note that 'sftp', or FTP over ssh, is not supported with this class; FTPS is an extension of the FTP protocol to allow for secure connections; while 'sftp' is FTP over an encrypted ssh connection.  For sftp and ssh support, use the <code>ssh2</code> module.</para>

    <para>When a data connection is required, by default the following modes are tried in series: EPSV (Extended Passive Mode), PASV (Passive Mode), and PORT (Port mode). If the FTP server does not support one of these methods, or network conditions do not allow a data connection of any of these types to be established, then an exception is thrown.</para>

    <para>To manually control which modes are tried, see the <link linkend="FtpClient_setModeEPSV">FtpClient::setModeEPSV()</link>, <link linkend="FtpClient_setModePASV">FtpClient::setModePASV()</link>, and <link linkend="FtpClient_setModePORT">FtpClient::setModePORT()</link> methods.</para>

    <para>This class supports posting network events to a <link linkend="Queue_Class">Queue</link>, either events on the control or data channels or both can be monitored.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="ftpclient_events">
      <title>FtpClient Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Value</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
	<tbody>
	  <row>
            <entry><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para><code>9</code></para></entry>
            <entry><para>Raised immediately before an FTP control message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para><code>10</code></para></entry>
            <entry><para>Raised when an FTP reply is received on the control channel.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>FtpClient Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_constructor">FtpClient::constructor</link>()</code></para>
              <para><code><link linkend="FtpClient_constructor">FtpClient::constructor</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates object and optionally initializes URL</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_destructor">FtpClient::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_copy">FtpClient::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent copying of objects this class.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_connect">FtpClient::connect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects and logs in to FTP server</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_disconnect">FtpClient::disconnect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Disconnects from the FTP server.</para></entry>
	  </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setSecure">FtpClient::setSecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make an FTPS connection to the server on the next connect if the argument is <code>True</code>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setInsecure">FtpClient::setInsecure</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make a non-encrypted connection to the server on the next connect.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setInsecureData">FtpClient::setInsecureData()</link> <command>returns</command> nothing</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make a non-encrypted data connection to the server on the next connect even if the control connection is secure.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_isSecure">FtpClient::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the control connection is a secure TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_isDataSecure">FtpClient::isDataSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the data connections are secure TLS/SSL connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_getSSLCipherName">FtpClient::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if no encrypted connection has been established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_getSSLCipherVersion">FtpClient::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version string of the cipher for encrypted connections or <command><link linkend="NOTHING">NOTHING</link></command> if no encrypted connection has been established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_verifyPeerCertificate">FtpClient::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string code giving the result of verifying the remote certificate or <command><link linkend="NOTHING">NOTHING</link></command> if no encrypted connection has been established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setModeAuto">FtpClient::setModeAuto</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to automatically try to negotiate the data connections in EPSV, PASV, and PORT modes, in this order.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setModeEPSV">FtpClient::setModeEPSV</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using EPSV (<ulink url="http://www.ietf.org/rfc/rfc2428.txt">RFC-2428</ulink> extended passive) mode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setModePASV">FtpClient::setModePASV</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using PASV (<ulink url="http://www.ietf.org/rfc/rfc0959.txt">RFC-959</ulink> passive) mode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setModePORT">FtpClient::setModePORT</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using PORT mode.</para>
            </entry>
          </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_list">FtpClient::list</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="FtpClient_list">FtpClient::list</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of files from the FTP server in the server's long format; returns <command><link linkend="NOTHING">NOTHING</link></command> if the path cannot be found.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_nlst">FtpClient::nlst</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="FtpClient_nlst">FtpClient::nlst</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of file names from the FTP server; returns <command><link linkend="NOTHING">NOTHING</link></command> if the path cannot be found.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_pwd">FtpClient::pwd</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the server-side current working directory.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_cwd">FtpClient::cwd</link>(<link linkend="string_type">string</link> <replaceable>$dir</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Changes the current working directory on the server.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_get">FtpClient::get</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_get">FtpClient::get</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>, <link linkend="string_type">string</link> <replaceable>$local_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a file from the FTP server and stores it on the local filesystem; if any errors occur, an exception is thrown..</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getAsBinary">FtpClient::getAsBinary</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="binary_type">binary</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a file from the FTP server and returns it as a binary value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getAsString">FtpClient::getAsString</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a file from the FTP server and returns it as a string.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_put">FtpClient::put</link>(<link linkend="string_type">string</link> <replaceable>$local_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_put">FtpClient::put</link>(<link linkend="string_type">string</link> <replaceable>$local_file</replaceable>, <link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Transfers a file to the FTP server; if any errors occur, an exception is thrown.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_del">FtpClient::del</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Deletes a file from the FTP server</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_setUserName">FtpClient::setUserName</link>(<link linkend="string_type">string</link> <replaceable>$user</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the user name to use</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_setPassword">FtpClient::setPassword</link>(<link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the password to use</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_setHostName">FtpClient::setHostName</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the hostname to connect to</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_setPort">FtpClient::setPort</link>(<link linkend="softint_type">softint</link> <replaceable>$port</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the port to connect to; throws an exception if the port is &lt;= 0.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_setURL">FtpClient::setURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the URL</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getUserName">FtpClient::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current user name or <command><link linkend="NOTHING">NOTHING</link></command> if not yet set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getPassword">FtpClient::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current password or <command><link linkend="NOTHING">NOTHING</link></command> if not yet set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getHostName">FtpClient::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current hostname or <command><link linkend="NOTHING">NOTHING</link></command> if not yet set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getPort">FtpClient::getPort</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current port number.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="FtpClient_getURL">FtpClient::getURL</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current FTP URL.</para></entry>
	  </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the data and control connections.  Calling with no argument clears the queue.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the data connection.  Calling with no argument clears the queue.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the control connection.  Calling with no argument clears the queue.</para></entry>
          </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="FtpClient_constructor">
      <title>FtpClient::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the FtpClient object. It accepts one optional argument that will set the URL for the FTP connection; the path is ignored in the URL, however the username,  password, hostname and port are respected; additionally if the protocol is &quot;ftps&quot;, the client will attempt to establish a secure connection to the server according to <ulink url="http://www.ietf.org/rfc/rfc4217.txt">RFC-4217</ulink> when the first connection is established.</para>

	    <para>A call to <link linkend="FtpClient_connect">FtpClient::connect()</link> must be made explicitly before any actions requiring a connection to the server are made; connections are not made implicitly by this class.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_constructor">FtpClient::constructor</link>()</code></para>
              <para><code><link linkend="FtpClient_constructor">FtpClient::constructor</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> FtpClient $ftp("ftp://user:pass@hostname");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$url</replaceable></code></para></entry>
	      <entry><para>The URL of the server to connect to; must have at least the hostname to connect to.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>UNSUPPORTED-PROTOCOL</code></para></entry>
	      <entry><para>Only &quot;ftp&quot; or &quot;ftps&quot; are allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-URL-ERROR</code></para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="FtpClient_destructor">
      <title>FtpClient::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $ftp;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="FtpClient_copy">
      <title>FtpClient::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by FtpClient::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_connect">
      <title>FtpClient::connect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects to the FTP server and attempts a login; if any errors occur, an exception is thrown.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_connect">FtpClient::connect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.connect(); # connects to the URL set in the constructor</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>,<link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by FtpClient::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RESPONSE-ERROR</code></para></entry>
	      <entry><para>Invalid response received from FTP server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-CONNECT-ERROR</code></para></entry>
	      <entry><para>Cannot establish connection on data port, no hostname set, FTP server reported an error, etc.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LOGIN-ERROR</code></para></entry>
	      <entry><para>Login denied by FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_disconnect">
      <title>FtpClient::disconnect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Disconnects from an FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_disconnect">FtpClient::disconnect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.disconnect();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></listitem>
        </varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="FtpClient_setSecure">
      <title>FtpClient::setSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make an FTPS connection to the server on the next connect.  This method can only be called before a connection is established; if called when a connection has already been established, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setSecure">FtpClient::setSecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True</code></para></entry>
              <entry>
                <para>if <code>True</code>, will try to make an FTPS connection on the next connect, if <code>False</code>, will try to make a cleartext FTP connection on the next connect.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by FtpClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-SECURE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setInsecure">
      <title>FtpClient::setInsecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make a non-encrypted connection to the server on the next connect.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setInsecure">FtpClient::setInsecure</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setInsecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by FtpClient::setInsecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-INSECURE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setInsecureData">
      <title>FtpClient::setInsecureData()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make a non-encrypted data connection to the server on the next connect even if the control connection is secure.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setInsecureData">FtpClient::setInsecureData()</link> <command>returns</command> nothing</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setInsecureData();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by FtpClient::setInsecureData()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-INSECUREDATA-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_isSecure">
      <title>FtpClient::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the control connection is a secure TLS/SSL connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_isSecure">FtpClient::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> bool $b = $ftp.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for FtpClient::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the control connection is encrypted, <code>False</code> if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_isDataSecure">
      <title>FtpClient::isDataSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the data connections are secure TLS/SSL connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_isDataSecure">FtpClient::isDataSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> bool $b = $ftp.isDataSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for FtpClient::isDataSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if data connections are encrypted, <code>False</code> if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_getSSLCipherName">
      <title>FtpClient::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_getSSLCipherName">FtpClient::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $ftp.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for FtpClient::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para>
              </entry>
              <entry>
                <para>The name of the cipher for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if an excrypted connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_getSSLCipherVersion">
      <title>FtpClient::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version string of the cipher for encrypted connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_getSSLCipherVersion">FtpClient::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $ftp.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for FtpClient::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para>
              </entry>
              <entry>
                <para>The version string of the cipher for encrypted connections or <command><link linkend="NOTHING">NOTHING</link></command> if an excrypted connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_verifyPeerCertificate">
      <title>FtpClient::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate for secure (FTPS) connections.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_verifyPeerCertificate">FtpClient::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $ftp.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for FtpClient::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para>
              </entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if a secure connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setModeAuto">
      <title>FtpClient::setModeAuto()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to automatically try to negotiate the data connections in EPSV, PASV, and PORT modes, in this order.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setModeAuto">FtpClient::setModeAuto</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModeAuto();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="FtpClient_setModeEPSV">
      <title>FtpClient::setModeEPSV()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using EPSV (<ulink url="http://www.ietf.org/rfc/rfc2428.txt">RFC-2428</ulink> extended passive) mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setModeEPSV">FtpClient::setModeEPSV</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModeEPSV();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="FtpClient_setModePASV">
      <title>FtpClient::setModePASV()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using PASV (<ulink url="http://www.ietf.org/rfc/rfc0959.txt">RFC-959</ulink> passive) mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setModePASV">FtpClient::setModePASV</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModePASV();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="FtpClient_setModePORT">
      <title>FtpClient::setModePORT()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using PORT mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setModePORT">FtpClient::setModePORT</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModePORT();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="FtpClient_list">
      <title>FtpClient::list()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a string giving the list of files from the FTP server in the server's long format in the current working directory; returns <command><link linkend="NOTHING">NOTHING</link></command> if the path cannot be found.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_list">FtpClient::list</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="FtpClient_list">FtpClient::list</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $str = $ftp.list();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$path</replaceable>]</code></para></entry>
	      <entry><para>The optional path or argument (filter) to list.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>


      <table>
	<title>Return Values for FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The string returned by the server without any translations or processing or <command><link linkend="NOTHING">NOTHING</link></command> if the path cannot be found.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LIST-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error in response to the LIST command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="FtpClient_nlst">
      <title>FtpClient::nlst()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a list of file names in the current working directory from the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_nlst">FtpClient::nlst</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="FtpClient_nlst">FtpClient::nlst</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $str = $ftp.nlst();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$path</replaceable>]</code></para></entry>
	      <entry><para>The optional path or argument (filter) to list.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The string returned by the server without any translations or processing or <command><link linkend="NOTHING">NOTHING</link></command> if the path cannot be found.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LIST-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error in response to the NSLT command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="FtpClient_pwd">
      <title>FtpClient::pwd()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the server-side current working directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_pwd">FtpClient::pwd</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> string $str = $ftp.pwd();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The server-side current working directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-PWD-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the PWD command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="FtpClient_cwd">
      <title>FtpClient::cwd()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Changes the current working directory on the server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_cwd">FtpClient::cwd</link>(<link linkend="string_type">string</link> <replaceable>$dir</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.cwd("/pub/gnu");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$dir</replaceable></code></para></entry>
	      <entry><para>The directory to change to.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-CWD-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the CWD command.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-CWD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_get">
      <title>FtpClient::get()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a file from the FTP server and stores it on the local system.  If any errors occur, an exception is thrown.</para>
	    <para>This method accesses the filesystem, so it is not available if <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> is set.</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_get">FtpClient::get</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_get">FtpClient::get</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>, <link linkend="string_type">string</link> <replaceable>$local_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.get("file.txt", "/tmp/file-1.txt");</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Restrictions</term>
	  <listitem>
	    <para>Not available with <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code></para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$remote_file</replaceable></code></para></entry>
	      <entry><para>The path on the server to the file to get.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$local_file</replaceable>]</code></para></entry>
	      <entry><para>If given, where to save the local file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not create the local file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-GET-ERROR</code></para></entry>
	      <entry><para>There was an error retrieving the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-GET-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getAsBinary">
      <title>FtpClient::getAsBinary()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a file from the FTP server and returns the file's contents as a binary value.  For a similar function returning the file's contents as a string, see <link linkend="FtpClient_getAsString">FtpClient::getAsString()</link>; for a function that will get a remote file and save it on the local filesystem, see <link linkend="FtpClient_get">FtpClient::get()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getAsBinary">FtpClient::getAsBinary</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="binary_type">binary</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> binary $b = $ftp.getAsBinary("file.bin");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getAsBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$remote_file</replaceable></code></para></entry>
	      <entry><para>The path on the server to the file to get.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getAsBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="binary_type">binary</link></code></para></entry>
	      <entry><para>The file retrieved; if any errors occur an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::getAsBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not create the local file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-GET-ERROR</code></para></entry>
	      <entry><para>There was an error retrieving the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-GET-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getAsString">
      <title>FtpClient::getAsString()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a file from the FTP server and returns the file's contents as a string.  For a similar function returning the file's contents as a binary, see <link linkend="FtpClient_getAsBinary">FtpClient::getAsBinary()</link>; for a function that will get a remote file and save it on the local filesystem, see <link linkend="FtpClient_get">FtpClient::get()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="FtpClient_getAsString">FtpClient::getAsString</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> string $str = $ftp.getAsString("file.txt");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getAsString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$remote_file</replaceable></code></para></entry>
	      <entry><para>The path on the server to the file to get.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getAsString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The file retrieved; if any errors occur an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::getAsString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not create the local file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-GET-ERROR</code></para></entry>
	      <entry><para>There was an error retrieving the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-GET-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_put">
      <title>FtpClient::put()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Transfers a file to the FTP server.  If any errors occur, an exception is thrown.</para>
	    <para>This method accesses the filesystem, so it is not available if <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> is set.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_put">FtpClient::put</link>(<link linkend="string_type">string</link> <replaceable>$local_file</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="FtpClient_put">FtpClient::put</link>(<link linkend="string_type">string</link> <replaceable>$local_file</replaceable>, <link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.put("/tmp/file-1.txt", "file.txt");</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Restrictions</term>
	  <listitem>
	    <para>Not available with <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code></para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>local_file</replaceable></code></para></entry>
	      <entry><para>The path on the local system of the file to send.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>]</code></para></entry>
	      <entry><para>If given, where to save the file on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not open local file for reading.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-PUT-ERROR</code></para></entry>
	      <entry><para>Could not determine file size of local file (stat() failed).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-PUT-ERROR</code></para></entry>
	      <entry><para>An error occurred while sending the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-PUT-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_del">
      <title>FtpClient::del()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Deletes a file on the FTP server; if any errors occur, an exception is thrown.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_del">FtpClient::del</link>(<link linkend="string_type">string</link> <replaceable>$remote_file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.del("file-2.txt");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$remote_file</replaceable></code></para></entry>
	      <entry><para>The path on the server to the file to delete.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Always returns 0, on errors exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-DELETE-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the DELE command.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-DEL-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setUserName">
      <title>FtpClient::setUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username for logging in to the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_setUserName">FtpClient::setUserName</link>(<link linkend="string_type">string</link> <replaceable>$user</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setUserName("ftp");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$user</replaceable></code></para></entry>
	      <entry><para>The username to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETUSERNAME-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setPassword">
      <title>FtpClient::setPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the login password for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_setPassword">FtpClient::setPassword</link>(<link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setPassword("ftp");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$pass</replaceable></code></para></entry>
	      <entry><para>The password to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETPASSWORD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setHostName">
      <title>FtpClient::setHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname value for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_setHostName">FtpClient::setHostName</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setHostName("hostname");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable></code></para></entry>
	      <entry><para>The hostname to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETHOSTNAME-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setPort">
      <title>FtpClient::setPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the control port value (default is 21).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_setPort">FtpClient::setPort</link>(<link linkend="softint_type">softint</link> <replaceable>$port</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setPort(21);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable></code></para></entry>
	      <entry><para>The port to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETPORT-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setURL">
      <title>FtpClient::setURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the connection and login parameters based on the URL passed as an argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_setURL">FtpClient::setURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setURL("ftps://user:pass@host");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$url</replaceable></code></para></entry>
	      <entry><para>The URL to use to set connection and login parameters for the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>UNSUPPORTED-PROTOCOL</code></para></entry>
	      <entry><para>Only &quot;ftp&quot; is allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-URL-ERROR</code></para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-SETURL-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getUserName">
      <title>FtpClient::getUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current username.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getUserName">FtpClient::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $user = $ftp.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current username value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getPassword">
      <title>FtpClient::getPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current login password value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getPassword">FtpClient::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $pass = $ftp.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current password value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getHostName">
      <title>FtpClient::getHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current hostname value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getHostName">FtpClient::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $host = $ftp.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current hostname value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getPort">
      <title>FtpClient::getPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection port value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getPort">FtpClient::getPort</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $port = $ftp.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The current connection port value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getURL">
      <title>FtpClient::getURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection URL string for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="FtpClient_getURL">FtpClient::getURL</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> string $url = $ftp.getURL();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for FtpClient::getURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The current URL value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setEventQueue">
      <title>FtpClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the data and control connections.</para>
	    <para>To remove the event queue and stop monitoring socket events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the data connection or just the control connection, use <link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link> or <link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link> respectively</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setDataEventQueue">
      <title>FtpClient::setDataEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the data connection when retrieving data from an FTP server.</para>
	    <para>To remove the event queue and stop monitoring network events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the control connection or on both connections with the same queue, use <link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link> or <link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link> respectively.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setDataEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setDataEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setControlEventQueue">
      <title>FtpClient::setControlEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the control connection.</para>
	    <para>To remove the event queue and stop monitoring network events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the data connection or for both data and control connections simultaneously, use <link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link> or <link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link> respectively</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setControlEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setControlEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="Program_Class">
    <title>Program Class</title>

    <para>Program objects allow Qore programs to support subprograms with restricted capabilities, for example, to support user-defined logic for application actions.</para>

    <para>Parsing in Qore happens in two steps; first all code is parsed to pending data structures, and then in the second stage, all references are resolved, and, if there are no errors, then all changes are committed to the Program object.  Note that all parse actions (<link linkend="Program_parse">Program::parse()</link>, <link linkend="Program_parsePending">Program::parsePending()</link>, <link linkend="Program_parseCommit">Program::parseCommit()</link>, and <link linkend="Program_parseRollback">Program::parseRollback()</link>) are atomic; there is a thread lock on each Program object to ensure atomicity, and if any parse errors occur in any stage of parsing, any pending changes to the Program object are automatically rolled back.  However parse actions that affect only one stage of the two stages of parsing (<link linkend="Program_parsePending">Program::parsePending()</link>, <link linkend="Program_parseCommit">Program::parseCommit()</link> and  <link linkend="Program_parseRollback">Program::parseRollback()</link>) are atomic within themselves, but not between calls, so one thread may inadvertently commit changes to a Program object if two or more threads are trying to perform transaction-safe two-stage parsing on a Program object without explicit user locking.</para>

    <para>The constants in the following table can be used to limit the capabilities of a Program object.  These options should be binary-OR'ed together and passed to the Program object's constructor.  Also see <link linkend="Command-Line_Parsing">Command-Line Parsing</link> for equivalent command-line options, and <link linkend="Parse_Directives">Parse Directives</link> for equivalent parse directives.</para>

    <para>Note that a program can provide controlled access to functionality otherwise restricted by parse options by exporting a custom API into the child program object using either the <link linkend="Program_importFunction">Program::importFunction()</link> or <link linkend="Program_importGlobalVariable">Program::importGlobalVariable()</link> method.  This is possible because code (functions or object methods) imported into and called from a subprogram will run in the parent's space and therefore with the parent's capabilities.</para>

    <para>The following constants are all in the <code>Qore</code> namespace.</para>

    <table id="Parse_Options">
      <title>Parse Options</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Details</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row id="PO_NO_GLOBAL_VARS">
	    <entry><para><code>PO_NO_GLOBAL_VARS</code></para></entry>
	    <entry><para><code><link linkend="no-global-vars">%no-global-vars</link></code></para></entry>
	    <entry><para>Disallows the use of global variables.</para></entry>
	  </row>
	  <row id="PO_DEFAULT">
	    <entry><para><code>PO_DEFAULT</code></para></entry>
	    <entry><para>no parse options</para></entry>
	    <entry><para>This option is the empty option, meaning no options are set.</para></entry>
	  </row>
	  <row id="PO_NO_SUBROUTINE_DEFS">
	    <entry><para><code>PO_NO_SUBROUTINE_DEFS</code></para></entry>
	    <entry><para><code><link linkend="no-subroutine-defs">%no-subroutine-defs</link></code></para></entry>
	    <entry><para>Disallows subroutine (function) definitions.</para></entry>
	  </row>
	  <row id="PO_NO_THREADS">
	    <entry><para><code>PO_NO_THREADS</code></para></entry>
	    <entry><para><code><link linkend="no-threads">%no-threads</link></code></para></entry>
	    <entry><para>Disallows any thread operations (the <link linkend="Background_Operator"><command>background</command> operator</link> and the <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link>, for example) and the use of thread-relevant classes and functions (equivalent to <link linkend="PO_NO_THREAD_CLASSES">PO_NO_THREAD_CLASSES</link> | <link linkend="PO_NO_THREAD_CONTROL">PO_NO_THREAD_CONTROL</link>).</para></entry>
	  </row>
	  <row id="PO_NO_THREAD_CLASSES">
	    <entry><para><code>PO_NO_THREAD_CLASSES</code></para></entry>
	    <entry><para><code><link linkend="no-thread-classes">%no-thread-classes</link></code></para></entry>
	    <entry><para>Disallows access to any thread classes.</para></entry>
	  </row>
	  <row id="PO_NO_THREAD_CONTROL">
	    <entry><para><code>PO_NO_THREAD_CONTROL</code></para></entry>
	    <entry><para><code><link linkend="no-thread-control">%no-thread-control</link></code></para></entry>
	    <entry><para>Disallows access to any thread-control functions and thread-relevant statements and operators (for example the <link linkend="Background_Operator"><command>background</command> operator</link> and the <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link>).</para></entry>
	  </row>
	  <row id="PO_NO_TOP_LEVEL_STATEMENTS">
	    <entry><para><code>PO_NO_TOP_LEVEL_STATEMENTS</code></para></entry>
	    <entry><para><code><link linkend="no-top-level">%no-top-level</link></code></para></entry>
	    <entry><para>Disallows top level code.</para></entry>
	  </row>
	  <row id="PO_NO_CLASS_DEFS">
	    <entry><para><code>PO_NO_CLASS_DEFS</code></para></entry>
	    <entry><para><code><link linkend="no-class-defs">%no-class-defs</link></code></para></entry>
	    <entry><para>Disallows class definitions.</para></entry>
	  </row>
	  <row id="PO_NO_NAMESPACE_DEFS">
	    <entry><para><code>PO_NO_NAMESPACE_DEFS</code></para></entry>
	    <entry><para><code><link linkend="no-namespace-defs">%no-namespace-defs</link></code></para></entry>
	    <entry><para>Disallows new namespace definitions.</para></entry>
	  </row>
	  <row id="PO_NO_CONSTANT_DEFS">
	    <entry><para><code>PO_NO_CONSTANT_DEFS</code></para></entry>
	    <entry><para><code><link linkend="no-constant-defs">%no-constant-defs</link></code></para></entry>
	    <entry><para>Disallows constant definitions.</para></entry>
	  </row>
	  <row id="PO_NO_NEW">
	    <entry><para><code>PO_NO_NEW</code></para></entry>
	    <entry><para><code><link linkend="no-new">%no-new</link></code></para></entry>
	    <entry><para>Disallows use of the <link linkend="New_Object_Operator"><command>new</command></link> operator.</para></entry>
	  </row>
	  <row id="PO_NO_SYSTEM_CLASSES">
	    <entry><para><code>PO_NO_SYSTEM_CLASSES</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Prohibits system classes from being imported into the new Program object.</para></entry>
	  </row>
	  <row id="PO_NO_USER_CLASSES">
	    <entry><para><code>PO_NO_USER_CLASSES</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Prohibits user classes from being imported into the new Program object.</para></entry>
	  </row>
	  <row id="PO_NO_CHILD_PO_RESTRICTIONS">
	    <entry><para><code>PO_NO_CHILD_PO_RESTRICTIONS</code></para></entry>
	    <entry><para><code><link linkend="no-child-restrictions">%no-child-restrictions</link></code></para></entry>
	    <entry><para>Allows child program objects to have fewer parse restrictions than the parent object.</para></entry>
	  </row>

	  <row id="PO_NO_EXTERNAL_INFO">
	    <entry><para><code>PO_NO_EXTERNAL_INFO</code></para></entry>
	    <entry><para><code><link linkend="no-external-info">%no-external-info</link></code></para></entry>
	    <entry><para>Disallows access to functionality that provides information about the computing environment.</para></entry>
	  </row>

	  <row id="PO_NO_EXTERNAL_PROCESS">
	    <entry><para><code>PO_NO_EXTERNAL_PROCESS</code></para></entry>
	    <entry><para><code><link linkend="no-external-process">%no-external-process</link></code></para></entry>
	    <entry><para>Disallows any access to external processes (with <link linkend="system">system()</link>, <link linkend="backquote">backquote()</link>, <link linkend="exec">exec()</link>, etc).</para></entry>
	  </row>
	  <row id="PO_REQUIRE_OUR">
	    <entry><para><code>PO_REQUIRE_OUR</code></para></entry>
	    <entry><para><code><link linkend="require-our">%require-our</link></code></para></entry>
	    <entry><para>Requires global variables to be declared with <command>our</command> before use.</para></entry>
	  </row>
	  <row id="PO_NO_PROCESS_CONTROL">
	    <entry><para><code>PO_NO_PROCESS_CONTROL</code></para></entry>
	    <entry><para><code><link linkend="no-process-control">%no-process-control</link></code></para></entry>
	    <entry><para>Disallows access to functions that would affect the current process (<link linkend="exit">exit()</link>, <link linkend="exit">exec()</link>, <link linkend="fork">fork()</link>, etc).</para></entry>
	  </row>
	  <row id="PO_LOCK_WARNINGS">
	    <entry><para><code>PO_LOCK_WARNINGS</code></para></entry>
	    <entry><para><code><link linkend="lock-warnings">%lock-warnings</link></code></para></entry>
	    <entry><para>Prohibits the warning mask from being changed.</para></entry>
	  </row>
	  <row id="PO_NO_NETWORK">
	    <entry><para><code>PO_NO_NETWORK</code></para></entry>
	    <entry><para><code><link linkend="no-network">%no-network</link></code></para></entry>
	    <entry><para>Disallows access to network functions.</para></entry>
	  </row>
	  <row id="PO_NO_FILESYSTEM">
	    <entry><para><code>PO_NO_FILESYSTEM</code></para></entry>
	    <entry><para><code><link linkend="no-filesystem">%no-filesystem</link></code></para></entry>
	    <entry><para>Disallows access to the filesystem.</para></entry>
	  </row>
	  <row id="PO_NO_WARNINGS">
	    <entry><para><code>PO_LOCK_WARNINGS</code></para></entry>
	    <entry><para><code><link linkend="lock-warnings">%lock-warnings</link></code></para></entry>
	    <entry><para>Disallows changes to the warning mask.</para></entry>
	  </row>
	  <row id="PO_NO_DATABASE">
	    <entry><para><code>PO_NO_DATABASE</code></para></entry>
	    <entry><para><code><link linkend="no-database">%no-database</link></code></para></entry>
	    <entry><para>Disallows access to database functionality.</para></entry>
	  </row>

	  <row id="PO_NO_GUI">
	    <entry><para><code>PO_NO_GUI</code></para></entry>
	    <entry><para><code><link linkend="no-gui">%no-gui</link></code></para></entry>
	    <entry><para>Disallows access to functionality that draws graphics to the display.</para></entry>
	  </row>

	  <row id="PO_NO_TERMINAL_IO">
	    <entry><para><code>PO_NO_TERMINAL_IO</code></para></entry>
	    <entry><para><code><link linkend="no-terminal-io">%no-terminal-io</link></code></para></entry>
	    <entry><para>Disallows access to reading from and/or writing to the terminal.</para></entry>
	  </row>

	  <row id="PO_NO_THREAD_INFO">
	    <entry><para><code>PO_NO_THREAD_INFO</code></para></entry>
	    <entry><para><code><link linkend="no-thread-info">%no-thread-info</link></code></para></entry>
	    <entry><para>Disallows access to functionality that provides information about threading.</para></entry>
	  </row>

	  <row id="PO_NO_LOCALE_CONTROL">
	    <entry><para><code>PO_NO_LOCALE_CONTROL</code></para></entry>
	    <entry><para><code><link linkend="no-locale-control">%no-locale-control</link></code></para></entry>
	    <entry><para>Disallows access to functionality that can change locale parameters.</para></entry>
	  </row>

	  <row id="PO_REQUIRE_PROTOTYPES">
	    <entry><para><code>PO_REQUIRE_PROTOTYPES</code></para></entry>
	    <entry><para><code><link linkend="require-prototypes">%require-prototypes</link></code></para></entry>
	    <entry><para>Requires all function and method parameters and return types to have <link linkend="Data_Type_Declarations">type declarations</link>.  Variables and object members are not required to have type declarations.</para></entry>
	  </row>

	  <row id="PO_REQUIRE_TYPES">
	    <entry><para><code>PO_REQUIRE_TYPES</code></para></entry>
	    <entry><para><code><link linkend="require-types">%require-types</link></code></para></entry>
	    <entry><para>Requires all function and method parameters, return types, variables, and object members to have <link linkend="Data_Type_Declarations">type declarations</link>.  Additionally, this option implies <code><link linkend="PO_STRICT_ARGS">PO_STRICT_ARGS</link></code>.</para></entry>
	  </row>

	  <row id="PO_STRICT_ARGS">
	    <entry><para><code>PO_STRICT_ARGS</code></para></entry>
	    <entry><para><code><link linkend="strict-args">%strict-args</link></code></para></entry>
	    <entry><para>Prohibits access to builtin functions and methods flagged with <code><link linkend="RT_NOOP_flag">RT_NOOP</link></code> and also causes errors to be raised if excess arguments are given to functions that do not access excess arguments.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>
    <table>
      <title>Program Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Program_constructor">Program::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the program object and optionally sets program capabilities (parse options)</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_destructor">Program::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.  Blocks until all threads have terminated.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_copy">Program::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent objects of this class from being copied.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_callFunction">Program::callFunction</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object and returns the return value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_callFunctionArgs">Program::callFunctionArgs</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Program_callFunctionArgs">Program::callFunctionArgs</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object with the arguments given as a list</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_disableParseOptions">Program::disableParseOptions</link>(<link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Removes the given parse options to the current parse option mask.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_existsFunction">Program::existsFunction</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
              <para><code><link linkend="Program_existsFunction">Program::existsFunction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Checks if a user function exists in the program object</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getGlobalVariable">Program::getGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Program_getGlobalVariable">Program::getGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="reference_type">reference</link> <replaceable>$found</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a the value of the global variable identified by the first string argument.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getParseOptions">Program::getParseOptions</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a code of parse options set in the object.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getScriptDir">Program::getScriptDir</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script directory as a string or <command><link linkend="NOTHING">NOTHING</link></command> if not set.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getScriptName">Program::getScriptName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script name as a string or <command><link linkend="NOTHING">NOTHING</link></command> if not set.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getScriptPath">Program::getScriptPath</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script directory and filename as a string or <command><link linkend="NOTHING">NOTHING</link></command> if not set.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getTimeZone">Program::getTimeZone</link>() <command>returns</command> <link linkend="TimeZone_Class">TimeZone</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the default local time zone for the object.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_getUserFunctionList">Program::getUserFunctionList</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a list of strings of all user functions defined in the program object.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_importFunction">Program::importFunction</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_importFunction">Program::importFunction</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="string_type">string</link> <replaceable>$new_name</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a user function into the program object's space; any calls to the function will run in the parent's space.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_importGlobalVariable">Program::importGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$readonly</replaceable> = False) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a global variable into the Program object's space.  If the variable is an object, then any methods
	    called will run in the parent's space.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_lockOptions">Program::lockOptions</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Locks parse options so that they cannot be changed.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_parse">Program::parse</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parse">Program::parse</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a complete parse and commit of the string passed; if a warning mask is given and warnings are raised, then the method returns an <link linkend="Exception_Hash">exception hash</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_parseCommit">Program::parseCommit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parseCommit">Program::parseCommit</link>(<link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits all pending changes to the program object; if a warning mask is given and warnings are raised, then the method returns an <link linkend="Exception_Hash">exception hash</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_parsePending">Program::parsePending</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parsePending">Program::parsePending</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a 1st stage parse of the string passed; if a warning mask is given and warnings are raised, then the method returns an <link linkend="Exception_Hash">exception hash</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Program_parseRollback">Program::parseRollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Rolls back all pending changes to the program object</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_run">Program::run</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Runs the top-level code of the program object</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_setParseOptions">Program::setParseOptions</link>(<link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Adds the given parse options to the current parse option mask.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_setScriptPath">Program::setScriptPath</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_setScriptPath">Program::setScriptPath</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets (or clears) the script path (directory and filename) for the object.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_setTimeZone">Program::setTimeZone</link>(<link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the default local time zone for the object.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_setTimeZoneRegion">Program::setTimeZoneRegion</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the default local time zone for the object from a path to a zoneinfo time zone region file.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Program_setTimeZoneUTCOffset">Program::setTimeZoneUTCOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the default local time zone for the object from a UTC offset in seconds east of UTC; for zones west of UTC, use negative numbers.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="Program_constructor">
      <title>Program::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Program object. It accepts one optional argument that will set the program capabilities for the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_constructor">Program::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Program $pgm();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link></code></para></entry>
	      <entry><para>A binary OR'ed product of <link linkend="Parse_Options">parse options</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Program_destructor">
      <title>Program::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  If any threads are running in the program, the destructor will block until the threads terminate.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $pgm;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Program_copy">
      <title>Program::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Program::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_callFunction">
      <title>Program::callFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value.  The function runs with the permissions of the Program object containing the function.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_callFunction">Program::callFunction</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$result = $pgm.callFunction("func_name", $arg1, $arg2);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$func</replaceable></code></para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><replaceable>[...]</replaceable></code></para></entry>
	      <entry><para>The remaining arguments passed to the method are passed to the function to be called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Depends on the function being called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_callFunctionArgs">
      <title>Program::callFunctionArgs()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value, using the second argument as the argument list for the function call.  The function runs with the permissions of the Program object containing the function.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_callFunctionArgs">Program::callFunctionArgs</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Program_callFunctionArgs">Program::callFunctionArgs</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$result = $pgm.callFunctionArgs("func_name", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$func</replaceable></code></para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="list_type">list</link> or <link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
	      <entry><para>Argument list to be passed to the function; is a single non-list argument is passed, it will be treated as if it were the sole argument to the function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Depends on the function being called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_disableParseOptions">
      <title>Program::disableParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Disables <link linkend="Parse_Options">parse options</link> in the parse option mask for the Program object.  An exception is thrown if parse options have been locked (for example with <link linkend="Program_lockOptions">Program::lockOptions()</link>).   For a reciprocal method that sets parse options, see <link linkend="Program_setParseOptions">Program::setParseOptions()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="Program_disableParseOptions">Program::disableParseOptions</link>(<link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># allow threading and GUI operations
$pgm.disableParseOptions(<link linkend="PO_NO_THREADS">PO_NO_THREADS</link> | <link linkend="PO_NO_GUI">PO_NO_GUI</link>);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::disableParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link></code></para></entry>
	      <entry><para> A single <link linkend="Parse_Options">parse option</link> or binary-or combination of <link linkend="Parse_Options">parse options</link> to disable in the parse option mask for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::disableParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>OPTIONS-LOCKED</code></para></entry>
	      <entry><para>Parse options have been locked and cannot be changed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Program_existsFunction">
      <title>Program::existsFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Checks if a user function exists in the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <programlisting>Program::existsFunction(<replaceable>function_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
              <para><code><link linkend="Program_existsFunction">Program::existsFunction</link>(<link linkend="string_type">string</link> <replaceable>$func</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
              <para><code><link linkend="Program_existsFunction">Program::existsFunction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::existsFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$func</replaceable></code></para></entry>
	      <entry><para>The name of the function to check.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::existsFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>Returns <code>True</code> if the function exists, <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_getGlobalVariable">
      <title>Program::getGlobalVariable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the value of the global variable identified by the first string argument giving the name of the variable (without any leading &quot;$&quot; symbol.  An lvalue reference can be passed as the second argument in order to determine if the global variable exists (because this method could return <command>NOTHING</command> when the variable exists as well as when it does not).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getGlobalVariable">Program::getGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Program_getGlobalVariable">Program::getGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="reference_type">reference</link> <replaceable>$found</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$val = $pgm.getGlobalVariable("error_count", \$exists);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$name</replaceable></code></para></entry>
	      <entry><para>The string name of the variable to find, not including the leading &quot;$&quot; character.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$found</replaceable></code></para></entry>
	      <entry><para>If a reference is passed in this position, it will contain a boolean value after the method exits: if this value is <code>True</code>, that means that the variable exists in the Program object, <code>False</code> means that the variable does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The value of the global variable (or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist; note that also the variable could exist and return <command><link linkend="NOTHING">NOTHING</link></command> as well; use a reference as the second argument to the method to determine if the variable exists or not).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_getParseOptions">
      <title>Program::getParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current binary-or <link linkend="Parse_Options">parse option mask</link> for the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getParseOptions">Program::getParseOptions</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mask = $pgm.getParseOptions();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>A mask of all <link linkend="Parse_Options">parse options</link> set (combined with binary or) for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_getScriptDir">
      <title>Program::getScriptDir()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script directory set with <link linkend="Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_dir">get_script_dir()</link> function if called from within the Program.  The value returned should normally include the trailing '/' character.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getScriptDir">Program::getScriptDir</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $dir = $pgm.getScriptDir();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getScriptDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current script directory or <command><link linkend="NOTHING">NOTHING</link></command> if not set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_getScriptName">
      <title>Program::getScriptName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script filename set with <link linkend="Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_path">get_script_path()</link> function if called from within the Program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getScriptName">Program::getScriptName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $name = $pgm.getScriptName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getScriptName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current script name if known, otherwise returns <command><link linkend="NOTHING">NOTHING</link></command>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_getScriptPath">
      <title>Program::getScriptPath()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script directory and filename set with <link linkend="Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_path">get_script_path()</link> function if called from within the Program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="Program_getScriptPath">Program::getScriptPath</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $path = $pgm.getScriptPath();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getScriptPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The current script directory and filename if known, otherwise returns <command><link linkend="NOTHING">NOTHING</link></command>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_getTimeZone">
      <title>Program::getTimeZone()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the default local time zone for the object.</para>
	    <para>See also <link linkend="TimeZone::get">TimeZone::get()</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getTimeZone">Program::getTimeZone</link>() <command>returns</command> <link linkend="TimeZone_Class">TimeZone</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TimeZone $zone = $pgm.getTimeZone();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getTimeZone()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="TimeZone_Class">TimeZone</link></code></para></entry>
	      <entry><para>Returns the default local time zone for the object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_getUserFunctionList">
      <title>Program::getUserFunctionList()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a list of all user functions defined in the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_getUserFunctionList">Program::getUserFunctionList</link>() <command>returns</command> <link linkend="list_type">list</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> list $l = $pgm.getUserFunctionList();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::getUserFunctionList()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="list_type">list</link></para></entry>
	      <entry><para>A list of strings giving the names of all functions implemented in the program object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_importFunction">
      <title>Program::importFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a user function into the program object's space; any calls to the imported function will run in the parent's space.  This allows a user-defined API with greater capabilities than the embedded Program object to be imported into the embedded code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="Program_importFunction">Program::importFunction</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	    <para><code><link linkend="Program_importFunction">Program::importFunction</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="string_type">string</link> <replaceable>$new_name</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.importFunction("function");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$name</replaceable>, [<link linkend="string_type">string</link> <replaceable>$new_name</replaceable>]</code></para></entry>
	      <entry><para>The name of the function to import and an optional new name for it to be registered under in the target Program.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No function name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Cannot import a function into the same Program object.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_importGlobalVariable">
      <title>Program::importGlobalVariable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a global variable into the program object's space.  If the variable is an object, then any methods called from the subprogram will run in the parent's space.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_importGlobalVariable">Program::importGlobalVariable</link>(<link linkend="string_type">string</link> <replaceable>$name</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$readonly</replaceable> = False) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.importGlobalVariable("var");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$name</replaceable></code></para></entry>
	      <entry><para>The name of the global variable without the $</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link> <replaceable>$readonly</replaceable> = False</code></para></entry>
	      <entry><para>If this argument is present and is <code>True</code>, then the variable will be imported read-only, and cannot be changed by the subprogram.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTGLOBALVARIABLE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No variable name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTGLOBALVARIABLE-EXCEPTION</code></para></entry>
	      <entry><para>The global variable does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Program_lockOptions">
      <title>Program::lockOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks <link linkend="Parse_Options">parse options</link> so they cannot be changed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_lockOptions">Program::lockOptions</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.lockOptions();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_parse">
      <title>Program::parse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the string argument and adds the code to the program object.</para>
	    <para>If a warning mask is given and masked warnings are raised during parsing, this method will return a hash with warning information.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_parse">Program::parse</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parse">Program::parse</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parse($code, "label");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$code</replaceable></code></para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$label</replaceable></code></para></entry>
	      <entry><para>A label identifying the code.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>]</code></para></entry>
	      <entry><para>An optional warning mask of bitwise-ORed <link linkend="Warning_Constants">warning values</link>; if this option is non-zero and any warnings are raised during parsing, then a hash is returned of warning information.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link></para></entry>
	      <entry><para>If a warning mask is set and any masked warnings are raised during parsing, then an <link linkend="Exception_Hash">exception hash</link> is returned of warning information (multiple warnings are linked in the hash through the &quot;next&quot; key, as with chained exceptions).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_parseCommit">
      <title>Program::parseCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits and pending code processed with <link linkend="Program_parsePending">Program::parsePending()</link> to the Program object and resolves all outstanding references in the pending code.  An exception in this method causes all pending code to be rolled back immediately.</para>
	    <para>If a warning mask is given and masked warnings are raised during parsing, this method will return a hash with warning information.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_parseCommit">Program::parseCommit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parseCommit">Program::parseCommit</link>(<link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parseCommit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>]</code></para></entry>
	      <entry><para>An optional warning mask of bitwise-ORed <link linkend="Warning_Constants">warning values</link>; if this option is non-zero and any warnings are raised during parsing, then a hash is returned of warning information.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link></para></entry>
	      <entry><para>If a warning mask is set and any masked warnings are raised during parsing, then an <link linkend="Exception_Hash">exception hash</link> is returned of warning information (multiple warnings are linked in the hash through the &quot;next&quot; key, as with chained exceptions).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_parsePending">
      <title>Program::parsePending()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the text passed to pending lists in the Program object; does not resolve all references or commit the code to the Program object.  References are resolved in the <link linkend="Program_parseCommit">Program::parseCommit()</link> method.  If an exception occurs in this method, all pending code is backed out, not just code parsed by this method.</para>
	    <para>If a warning mask is given and masked warnings are raised during parsing, this method will return a hash with warning information.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_parsePending">Program::parsePending</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_parsePending">Program::parsePending</link>(<link linkend="string_type">string</link> <replaceable>$code</replaceable>, <link linkend="string_type">string</link> <replaceable>$label</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parsePending($code, "label");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$code</replaceable></code></para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$label</replaceable></code></para></entry>
	      <entry><para>A label identifying the code.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="softint_type">softint</link> <replaceable>$warn_mask</replaceable>]</code></para></entry>
	      <entry><para>An optional warning mask of bitwise-ORed <link linkend="Warning_Constants">warning values</link>; if this option is non-zero and any warnings are raised during parsing, then a hash is returned of warning information.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link></para></entry>
              <entry><para>If a warning mask is set and any masked warnings are raised during parsing, then an <link linkend="Exception_Hash">exception hash</link> is returned of warning information (multiple warnings are linked in the hash through the &quot;next&quot; key, as with chained exceptions).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_parseRollback">
      <title>Program::parseRollback()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back any pending code processed with <link linkend="Program_parsePending">Program::parsePending()</link> that has not yet been committed to the Program object with <link linkend="Program_parseCommit">Program::parseCommit()</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_parseRollback">Program::parseRollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parseRollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Program_run">
      <title>Program::run()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Runs the program and optionally returns a value if the top-level code exits with a <command>return</command> statement.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_run">Program::run</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.run();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Program::run()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Depends on the program; any <command>return</command> statement at the top level of the program will return a value to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Program_setParseOptions">
      <title>Program::setParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets <link linkend="Parse_Options">parse options</link> in the parse option mask for the Program object.  An exception is thrown if parse options have been locked (for example with <link linkend="Program_lockOptions">Program::lockOptions()</link>).  For a reciprocal method that disables parse options, see <link linkend="Program_disableParseOptions">Program::disableParseOptions()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_setParseOptions">Program::setParseOptions</link>(<link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># disallow threading and GUI operations
$pgm.setParseOptions(<link linkend="PO_NO_THREADS">PO_NO_THREADS</link> | <link linkend="PO_NO_GUI">PO_NO_GUI</link>);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> <replaceable>$options</replaceable> = <link linkend="PO_DEFAULT">PO_DEFAULT</link></code></para></entry>
	      <entry><para> A single <link linkend="Parse_Options">parse option</link> or binary-or combination of <link linkend="Parse_Options">parse options</link> to set in the parse option mask for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::setParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>OPTIONS-LOCKED</code></para></entry>
	      <entry><para>Parse options have been locked and cannot be changed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Program_setScriptPath">
      <title>Program::setScriptPath()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the script path (directory and filename) for later retrieval with <link linkend="Program_getScriptPath">Program::getScriptPath()</link>, <link linkend="Program_getScriptDir">Program::getScriptDir()</link>, or <link linkend="Program_getScriptName">Program::getScriptName()</link> calls, or from code within the Program object with the <link linkend="get_script_path">get_script_path()</link>, <link linkend="get_script_dir">get_script_dir()</link>, or <link linkend="get_script_name">get_script_name()</link> functions.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_setScriptPath">Program::setScriptPath</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Program_setScriptPath">Program::setScriptPath</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.setScriptPath("/users/test/test.q");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setScriptPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
	      <entry><para>The path (directory and filename) for the current script.  If the directory component is missing, then &quot;./&quot; is assumed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_setTimeZone">
      <title>Program::setTimeZone()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the default local time zone for the object.</para>
	    <para>See also <link linkend="TimeZone::set">TimeZone::set()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_setTimeZone">Program::setTimeZone</link>(<link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.setTimeZone($zone);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setTimeZone()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable></code></para></entry>
	      <entry><para>The time zone to set as the local time zone for the Program object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Program_setTimeZoneRegion">
      <title>Program::setTimeZoneRegion()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the default local time zone for the object from a path to a zoneinfo time zone region file; if there are errors reading or parsing the file, an exception is thrown.</para>
	    <para>See also <link linkend="TimeZone::setRegion">TimeZone::setRegion()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_setTimeZoneRegion">Program::setTimeZoneRegion</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.setTimeZoneRegion("Europe/Prague");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setTimeZoneRegion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$region</replaceable></code></para></entry>
	      <entry><para>The path to the zoneinfo file for the time zone region to set as the local time zone for the Program object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

     <table>
	<title>Exceptions Thrown by Program::setTimeZoneRegion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TZINFO-ERROR</code></para></entry>
	      <entry><para>Unable to read zoneinfo file; invalid file magic; error parsing zoneinfo file, etc</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Program_setTimeZoneUTCOffset">
      <title>Program::setTimeZoneUTCOffset()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the default time zone for the Program object based on the number of seconds east of UTC; for zones west of UTC, use negative numbers.</para>
	    <para>Time zones set with this method cannot have any daylight savings time information; to set a zone with daylight savings time information, use <link linkend="Program_setTimeZoneRegion">Program::setTimeZoneRegion()</link> instead.</para>
	    <para>See also <link linkend="TimeZone::setUTCOffset">TimeZone::setUTCOffset()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Program_setTimeZoneUTCOffset">Program::setTimeZoneUTCOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <para>The following examples are all equivalent, setting the time zone to +02 UTC:</para>
            <programlisting>$pgm.setTimeZoneUTCOffset(7200);</programlisting>
            <programlisting>$pgm.setTimeZoneUTCOffset(2h);</programlisting>
            <programlisting>$pgm.setTimeZoneUTCOffset(PT2H);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setTimeZone()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable></code></para></entry>
	      <entry><para>The number of seconds east of UTC; for zones west of UTC, use negative numbers</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

  </sect1>

  <sect1 id="Socket_Class">
    <title>Socket Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-network">PO_NO_NETWORK</link></code> parse option.</para>

    <para>Socket objects allow Qore programs safe access to network sockets.  Non-blocking socket I/O can be performed by appending a timeout value in milliseconds to all Socket::recv*() methods, or by using the <link linkend="Socket_isDataAvailable">Socket::isDataAvailable()</link> method with a timeout value in milliseconds (1000 ms = 1 second).  Note that as with all Qore functions and methods accepting a timeout value, <link linkend="Relative_Dates">relative date/time values</link> can be given instead of integers to make the source more readable, for example:</para>

    <programlisting><command>my</command> $rc = $socket.isDataAvailable(1250ms); # times out in 1.25 seconds</programlisting>

    <para>Socket objects can automatically convert character encodings if desired when sending string data with <link linkend="Socket_send">Socket::send()</link>.  Use the <link linkend="Socket_setCharset">Socket::setCharset()</link> method to set the character encoding for the socket.  If a character encoding is set, and string data is read with the <link linkend="Socket_recv">Socket::recv()</link> method, then it will be tagged with the encoding of the socket as well.</para>

    <para>Client applications should call <link linkend="Socket_connect">Socket::connect()</link> to connect to a remote port or a UNIX domain socket (socket file on the local server).  However, if the remote end is expecting a TLS/SSL connection, use <link linkend="Socket_connectSSL">Socket::connectSSL()</link> instead.</para>

    <para>Server applications should call <link linkend="Socket_bind">Socket::bind()</link>, <link linkend="Socket_listen">Socket::listen()</link>, and  <link linkend="Socket_accept">Socket::accept()</link> in this order to accept incoming connections.  Normally a new thread should be started after the Socket::accept() call to handle the new connection in a separate thread (Socket::accept() returns a new Socket object for the accepted connection).</para>

    <para>To support TLS/SSL server connections, first set the certificate and private key with the <link linkend="Socket_setCertificate">Socket::setCertificate()</link> and <link linkend="Socket_setPrivateKey">Socket::setPrivateKey()</link> methods (see the <link linkend="SSLCertificate_Class">SSLCertificate Class</link> and the <link linkend="SSLPrivateKey_Class">SSLPrivateKey Class</link> for more information on the parameters required for these methods).  Then <link linkend="Socket_acceptSSL">Socket::acceptSSL()</link> should be called after the socket is in a listening state to accept client connections and negotiate a TLS/SSL connection.</para>

    <para>This class supports posting events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="socket_events">
      <title>Socket Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></entry>
            <entry><para>Raised when a network packet is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></entry>
            <entry><para>Raised when a network packet is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
            <entry><para>Raised when a socket is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link></code></para></entry>
            <entry><para>Raised when a hostname lookup is attempted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></entry>
            <entry><para>Raised when a hostname lookup is resolved.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connecting">EVENT_CONNECTING</link></code></para></entry>
            <entry><para>Raised right before a socket connection attempt is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connected">EVENT_CONNECTED</link></code></para></entry>
            <entry><para>Raised when the socket connection has been established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_start_ssl">EVENT_START_SSL</link></code></para></entry>
            <entry><para>Raised when socket SSL negotiation starts.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></entry>
            <entry><para>Raised when SSL communication has been negotiated and established.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table>
      <title>Socket Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_constructor">Socket::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the socket object</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_destructor">Socket::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the socket if it's open and destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_copy">Socket::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Socket object, not based on the parent.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_connect">Socket::connect</link>(<link linkend="string_type">string</link> <replaceable>$dest</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to a remote port (if the string has a format &quot;host:port&quot;) or UNIX domain socket file with an optional timeout value with a millisecond resolution.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_connectINET">Socket::connectINET</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to the given host and port with an optional timeout value with a millisecond resolution.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_connectUNIX">Socket::connectUNIX</link>(<link linkend="string_type">string</link> <replaceable>$file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to the UNIX domain socket file.</para></entry>
	  </row>

          <row>
            <entry>
              <para><code><link linkend="Socket_connectSSL">Socket::connectSSL</link>(<link linkend="string_type">string</link> <replaceable>$dest</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Connects to a remote socket and attempts to establish a TLS/SSL connection; accepts an optional timeout value with a millisecond resolution.</para>
            </entry>
          </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_connectINETSSL">Socket::connectINETSSL</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to the given host and port and attempts to establish a TLS/SSL connection; accepts an optional timeout value with a millisecond resolution.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL</link>(<link linkend="string_type">string</link> <replaceable>$file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to the UNIX domain socket file and attempts to establish a TLS/SSL connection.</para></entry>
	  </row>


	  <row>
	    <entry>
              <para><code><link linkend="Socket_bind">Socket::bind</link>(<link linkend="string_type">string</link> <replaceable>$bind_to</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="Socket_bind">Socket::bind</link>(<link linkend="int_type">int</link> <replaceable>$port</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Binds the socket to a port, interface and port (if the <replaceable>$bind_to</replaceable> string has a format &quot;host:port&quot;), or UNIX domain socket file.  If the second parameter is <code>True</code>, then the socket will set the <code>SO_REUSEADDR</code> option, which will allow the socket to be bound to a port that is not yet closed (for example, in a <code>TIME_WAIT</code> state).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_accept">Socket::accept</link>() <command>returns</command> <link linkend="Socket_Class">Socket</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Accepts connections on a listening socket.</para></entry>
	  </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_acceptSSL">Socket::acceptSSL</link>() <command>returns</command> <link linkend="Socket_Class">Socket</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Accepts a remote connection and attempts to negotiate a TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_shutdownSSL">Socket::shutdownSSL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Shuts down the SSL connection on a secure connection.</para>
            </entry>
          </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_listen">Socket::listen</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Listens for connections on the socket; sets the socket in a listening state.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_isDataAvailable">Socket::isDataAvailable</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> or <code>False</code> depending on whether there is data to be read on the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_isWriteFinished">Socket::isWriteFinished</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> or <code>False</code> depending on whether all data has been written to the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_send">Socket::send</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends string or binary data over the socket; string data is converted to the socket's encoding if necessary.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendBinary">Socket::sendBinary</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends string or binary data over the socket; string data is not converted to the socket's encoding, but sent exactly as-is.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi1">Socket::sendi1</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 1-byte integer over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi2">Socket::sendi2</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 2-byte (16-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi4">Socket::sendi4</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 4-byte (32-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi8">Socket::sendi8</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an 8-byte (64-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi2LSB">Socket::sendi2LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 2-byte (16-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi4LSB">Socket::sendi4LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 4-byte (32-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendi8LSB">Socket::sendi8LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an 8-byte (64-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendHTTPMessage">Socket::sendHTTPMessage</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="string_type">string</link> <replaceable>$http_version</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary()) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an HTTP message with a method and user-defined headers given as a hash and an optional message body.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_sendHTTPResponse">Socket::sendHTTPResponse</link>(<link linkend="softint_type">softint</link> <replaceable>$status_code</replaceable>, <link linkend="string_type">string</link> <replaceable>$desc</replaceable>, <link linkend="string_type">string</link> <replaceable>$http_version</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary())</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an HTTP response with user-defined headers given as a hash and an optional message body.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recv">Socket::recv</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives data from the socket and returns a string.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi1">Socket::recvi1</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 1-byte signed integer from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi2">Socket::recvi2</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi4">Socket::recvi4</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi8">Socket::recvi8</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives an 8-byte (64-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi2LSB">Socket::recvi2LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi4LSB">Socket::recvi4LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvi8LSB">Socket::recvi8LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives an 8-byte (64-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvu1">Socket::recvu1</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 1-byte unsigned integer from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvu2">Socket::recvu2</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) unsigned integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvu4">Socket::recvu4</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) unsigned integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvu2LSB">Socket::recvu2LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) unsigned integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvu4LSB">Socket::recvu4LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) unsigned integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_recvBinary">Socket::recvBinary</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="binary_type">binary</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives data on a socket and returns a binary object</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_readHTTPHeader">Socket::readHTTPHeader</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Retuns a hash representing the data in the HTTP header read, or, if the data cannot be parsed as an HTTP header, the data read is returned as a string.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_getPort">Socket::getPort</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the port number of the socket for INET sockets.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_shutdown">Socket::shutdown</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Ensures that a socket will be closed even if shared with other processes.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_close">Socket::close</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_getCharset">Socket::getCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_setCharset">Socket::setCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_getNoDelay">Socket::getNoDelay</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_setNoDelay">Socket::setNoDelay</link>(<link linkend="bool_type">bool</link> <replaceable>$nodelay</replaceable> = True) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Socket_getSocket">Socket::getSocket</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the socket file descriptor number.</para></entry>
	  </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_getSSLCipherName">Socket::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> is a secure connection has not been established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_getSSLCipherVersion">Socket::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version string of the cipher for encrypted connections or <command><link linkend="NOTHING">NOTHING</link></command> is a secure connection has not been established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_isSecure">Socket::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the connection is a secure TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_isOpen">Socket::isOpen</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the socket is open.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="SSLCertificate_Class">SSLCertificate</link> <replaceable>$cert</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="binary_type">binary</link> <replaceable>$cert_der</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the X.509 certificate to use for negotiating encrypted connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> <replaceable>$key</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="binary_type">binary</link> <replaceable>$key_der</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the private key to use for negotiating encrypted connections along with the X.509 certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_verifyPeerCertificate">Socket::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns a string code giving the result of verifying the remote certificate or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection is not currently established.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="Socket_setEventQueue">Socket::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setEventQueue">Socket::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket events, or clears the queue when called with no argument.</link>.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Socket_constructor">
      <title>Socket::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the socket object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_constructor">Socket::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Socket $sock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Socket_destructor">
      <title>Socket::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the socket if it's open and destroys the object.  If the socket was a UNIX domain socket, and was created with <link linkend="Socket_bind">Socket::bind()</link>, then the socket file will be deleted as well.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $sock;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Socket_copy">
      <title>Socket::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Socket object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Socket $new_sock = $sock.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Socket_bind">
      <title>Socket::bind()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Binds the socket to a port, interface and port (if the <replaceable>$bind_to</replaceable> string has a format &quot;host:port&quot;), or UNIX domain socket file.  If the second parameter is <code>True</code>, then the socket will set the <code>SO_REUSEADDR</code> option, which will allow the socket to be bound to a port that is not yet closed (for example, in a <code>TIME_WAIT</code> state).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_bind">Socket::bind</link>(<link linkend="string_type">string</link> <replaceable>$bind_to</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False) <command>returns</command> <link linkend="int_type">int</link></code></para>
              <para><code><link linkend="Socket_bind">Socket::bind</link>(<link linkend="int_type">int</link> <replaceable>$port</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># bind to port 80 on all interfaces on the local system and reuse the address
$sock.bind(80, <code>True</code>);</programlisting>
	    <programlisting># bind to interface 192.168.2.23 port 8080 and do not reuse the address
$sock.bind("192.168.2.23:8080");</programlisting>
	    <programlisting># bind to UNIX domain socket file "/tmp/socket"
$sock.bind("/tmp/socket");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::bind(string $bind_to, bool $reuseaddr = False) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$bind_to</replaceable></code></para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification, and the port on the named IP address will be bound, otherwise, if the string contains no colon, the socket will be bound to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False</code></para></entry>
	      <entry><para>If this optional argument evaluates to <code>True</code>, the <code>SO_REUSEADDR</code> option will be set on the socket, which will allow the socket to be bound to a port that is not yet closed (for example, in a <code>TIME_WAIT</code> state).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Arguments for Socket::bind(int $port, bool $reuseaddr = False) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link> <replaceable>$port</replaceable>, <link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False</code></para></entry>
	      <entry><para>The first argument gives the port number on the local machine; all network interfaces will be bound with this port number.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link> <replaceable>$reuseaddr</replaceable> = False</code></para></entry>
	      <entry><para>If this optional argument evaluates to <code>True</code>, the <code>SO_REUSEADDR</code> option will be set on the socket, which will allow the socket to be bound to a port that is not yet closed (for example, in a <code>TIME_WAIT</code> state).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::bind()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Socket_accept">
      <title>Socket::accept()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Accepts connections on a listening socket (see <link linkend="Socket_listen">Socket::listen()</link>).  As this method does not accept a timeout, use <link linkend="Socket_isDataAvailable">Socket::isDataAvailable()</link> to check if data is available on the socket before calling if necessary.</para>
	    <para>The new Socket object returned will have the same character encoding as the current object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_accept">Socket::accept</link>() <command>returns</command> <link linkend="Socket_Class">Socket</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Socket $new_socket = $sock.accept();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="Socket_Class">Socket</link></code></para></entry>
	      <entry><para>When a new connection has been accepted, a new Socket object is returned for the new connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-ACCEPT-ERROR</code></para></entry>
	      <entry><para>Error in accepting connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_acceptSSL">
      <title>Socket::acceptSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Accepts a remote connection and attempts to negotiate a TLS/SSL connection.  As this method does not accept a timeout, use <link linkend="Socket_isDataAvailable">Socket::isDataAvailable()</link> to check if data is available on the socket before calling if necessary.</para>
	    <para>The new Socket object returned will have the same character encoding as the current object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
               <para><code><link linkend="Socket_acceptSSL">Socket::acceptSSL</link>() <command>returns</command> <link linkend="Socket_Class">Socket</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> Socket $new_sock = $sock.acceptSSL();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::acceptSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code><link linkend="Socket_Class">Socket</link></code></para></entry>
              <entry>
                <para>A new socket object is returned for the new connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by Socket::acceptSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-ACCEPT-ERROR</code></para></entry>
	      <entry><para>Error in accepting connection.</para></entry>
	    </row>
            <row>
              <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
              <entry><para>An error occurred establishing the TLS/SSL connection.</para></entry>
            </row>
            <row>
              <entry><para><code>SOCKET-CLOSED</code></para></entry>
              <entry><para>The TLS/SSL connection was shut down by the remote end.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connect">
      <title>Socket::connect()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a remote (or local) port or UNIX domain socket file, for network (INET) connections, accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectSSL">Socket::connectSSL()</link>, <link linkend="Socket_connectINETSSL">Socket::connectINETSSL()</link>, and <link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_connect">Socket::connect</link>(<link linkend="string_type">string</link> <replaceable>$dest</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting>$sock.connect("192.168.1.45:8080", 30s); # connect to 192.168.1.45 port 8080 with a 30 second timeout</programlisting>
	    <programlisting>$sock.connect("/tmp/socket");            # connect to UNIX domain socket file "/tmp/socket"</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$dest</replaceable></code></para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification to connect to.  If the string contains no colon, the socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>If a timeout value is passed and the connection takes longer to establish than the timeout, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectINET">
      <title>Socket::connectINET()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a remote (or local) port; accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connect">Socket::connect()</link>, <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectSSL">Socket::connectSSL()</link>, <link linkend="Socket_connectINETSSL">Socket::connectINETSSL()</link>, and <link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_connectINET">Socket::connectINET</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># connect to 192.168.1.45 port 8080 with a 30 second timeout
$sock.connectINET("192.168.1.45", 8080, 30s);</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connectINET()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable></code></para></entry>
	      <entry><para>The host name or IP address to connect to.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable></code></para></entry>
	      <entry><para>The port number to connect to.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>If a timeout value is passed and the connection takes longer to establish than the timeout, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connectINET()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectINETSSL">
      <title>Socket::connectINETSSL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a remote (or local) port and attempts to establish a TLS/SSL connection; accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connect">Socket::connect()</link>, <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectSSL">Socket::connectSSL()</link>, <link linkend="Socket_connectINET">Socket::connectINET()</link>, and <link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_connectINETSSL">Socket::connectINETSSL</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># connect to 192.168.1.45 port 8080 with a 30 second timeout
$sock.connectINETSSL("192.168.1.45", 8080, 30s);</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connectINETSSL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable></code></para></entry>
	      <entry><para>The host name or IP address to connect to.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable></code></para></entry>
	      <entry><para>The port number to connect to.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>If a timeout value is passed and the connection takes longer to establish than the timeout, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connectINETSSL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectUNIX">
      <title>Socket::connectUNIX()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a UNIX domain socket file.  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connect">Socket::connect()</link>, <link linkend="Socket_connectINET">Socket::connectINET()</link>, <link linkend="Socket_connectSSL">Socket::connectSSL()</link>, <link linkend="Socket_connectINETSSL">Socket::connectINETSSL()</link>, and <link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_connectUNIX">Socket::connectUNIX</link>(<link linkend="string_type">string</link> <replaceable>$file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># connect to UNIX domain socket file "/tmp/socket"
$sock.connectUNIX("/tmp/socket");</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connectUNIX()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$file</replaceable></code></para></entry>
	      <entry><para>The socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connectUNIX()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectUNIXSSL">
      <title>Socket::connectUNIXSSL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a UNIX domain socket file and attempts to establish a TLS/SSL connection.  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connect">Socket::connect()</link>, <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectSSL">Socket::connectSSL()</link>, <link linkend="Socket_connectINETSSL">Socket::connectINETSSL()</link>, and <link linkend="Socket_connectINET">Socket::connectINET()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL</link>(<link linkend="string_type">string</link> <replaceable>$file</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># connect to UNIX domain socket file "/tmp/socket"
$sock.connectUNIXSSL("/tmp/socket");</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connectUNIXSSL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$file</replaceable></code></para></entry>
	      <entry><para>The socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connectUNIXSSL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectSSL">
      <title>Socket::connectSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Connects to a remote socket and attempts to establish a TLS/SSL connection, for network (INET) connections, accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
	    <para>See also <link linkend="Socket_connect">Socket::connect()</link>, <link linkend="Socket_connectUNIX">Socket::connectUNIX()</link>, <link linkend="Socket_connectUNIXSSL">Socket::connectUNIXSSL()</link>, <link linkend="Socket_connectINETSSL">Socket::connectINETSSL()</link>, and <link linkend="Socket_connectINET">Socket::connectINET()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_connectSSL">Socket::connectSSL</link>(<link linkend="string_type">string</link> <replaceable>$dest</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting>$sock.connectSSL("192.168.1.45:8080", 30s); # connect to 192.168.1.45 port 8080 with a 30-second timeout</programlisting>
	    <programlisting>$sock.connectSSL("/tmp/socket");            # connect to UNIX domain socket file "/tmp/socket"</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></listitem>
	</varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::connectSSL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$dest</replaceable></code></para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification to connect to.  If the string contains no colon, the socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>If a timeout value is passed and the connection takes longer to establish than the timeout, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
        <title>Exceptions thrown by Socket::connectSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
            <row>
              <entry>
                <para>
                  <code>SOCKET-SSL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>An error occurred establishing the TLS/SSL connection.</para>
              </entry>
            </row>
            <row>
              <entry><para><code>SOCKET-CLOSED</code></para></entry>
              <entry><para>The TLS/SSL connection was shut down by the remote end.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_listen">
      <title>Socket::listen()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Listens for new connections on a bound socket (see <link linkend="Socket_bind">Socket::bind()</link>)</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_listen">Socket::listen</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.listen();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_shutdownSSL">
      <title>Socket::shutdownSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Shuts down the SSL connection on a secure connection; if any errors occur, an exception is raised.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
               <para><code><link linkend="Socket_shutdownSSL">Socket::shutdownSSL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.shutdownSSL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by Socket::shutdownSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SOCKET-SSL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>An error occurred shutting down the TLS/SSL connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_getSSLCipherName">
      <title>Socket::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection has not been established.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
               <para><code><link linkend="Socket_getSSLCipherName">Socket::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $sock.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>The name of the cipher for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_getSSLCipherVersion">
      <title>Socket::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version string of the cipher for encrypted connections or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection has not been established.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
	    <para><code><link linkend="Socket_getSSLCipherVersion">Socket::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $sock.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>The version string of the cipher for encrypted connections or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_isSecure">
      <title>Socket::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the connection is a secure TLS/SSL connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_isSecure">Socket::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> bool $b = $sock.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the connection is encrypted, <code>False</code> if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_isOpen">
      <title>Socket::isOpen()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the socket is open.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_isOpen">Socket::isOpen</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> bool $b = $sock.isOpen();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::isOpen()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the socket is open, <code>False</code> if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_setCertificate">
      <title>Socket::setCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the X.509 certificate to use for negotiating encrypted connections.  Requires an <link linkend="SSLCertificate_Class">SSLCertificate</link> object as the only argument to the method or the PEM or DER-encoded form of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="SSLCertificate_Class">SSLCertificate</link> <replaceable>$cert</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setCertificate">Socket::setCertificate</link>(<link linkend="binary_type">binary</link> <replaceable>$cert_der</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.setCertificate($cert);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="SSLCertificate_Class">SSLCertificate</link> <replaceable>$cert</replaceable></code></para></entry>
              <entry><para>This must be an SSL Certificate object.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable></code></para></entry>
              <entry><para>The PEM-encoded string for the SSL Certificate.</para></entry>
            </row>
            <row>
              <entry><para><code>binary <replaceable>$cert_der</replaceable></code></para></entry>
              <entry><para>The DER-encoded binary for the SSL Certificate.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_setPrivateKey">
      <title>Socket::setPrivateKey()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the private key to use for negotiating encrypted connections along with the X.509 certificate.  Requires an <link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> object as the only argument to the method or the PEM or DER-encoded form of the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> <replaceable>$key</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setPrivateKey">Socket::setPrivateKey</link>(<link linkend="binary_type">binary</link> <replaceable>$key_der</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
	  <term>Example</term>
          <listitem>
            <programlisting>$sock.setPrivateKey($pkey);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setPrivateKey()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> <replaceable>$key</replaceable></code></para></entry>
              <entry><para>The private key for the certificate.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, [<link linkend="string_type">string</link> <replaceable>$pass</replaceable>]</code></para></entry>
              <entry><para>The PEM-encoded string for the private key for the certificate and optionally the password if required.</para></entry>
            </row>
            <row>
              <entry><para><code>binary <replaceable>$key_der</replaceable></code></para></entry>
              <entry><para>The DER-encoded binary form of the private key for the certificate.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_verifyPeerCertificate">
      <title>Socket::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_verifyPeerCertificate">Socket::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $sock.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for Socket::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if a secure connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setEventQueue">
      <title>Socket::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket events</link>.  To remove the event queue and stop monitoring socket events; call with no arguments or pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="Socket_setEventQueue">Socket::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Socket_setEventQueue">Socket::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_isDataAvailable">
      <title>Socket::isDataAvailable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> is data is available on the socket, takes an optional timeout.  With a timeout of zero this method can be used for non-blocking polling the socket for data (can also be used to poll for new connections before <link linkend="Socket_accept">Socket::accept()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_isDataAvailable">Socket::isDataAvailable</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $b = $sock.isDataAvailable(); # returns <code>True</code> if data is available now</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if data is available on the socket, <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_isWriteFinished">
      <title>Socket::isWriteFinished()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> if all data has been written to the socket, takes an optional timeout.  With a timeout of zero this method returns immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_isWriteFinished">Socket::isWriteFinished</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $b = $sock.isWriteFinished(0);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::isWriteFinished()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::isWriteFinished()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>True if the send action is complete, <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_send">
      <title>Socket::send()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends string or binary data over a connected socket.  String data will be converted to the encoding set for the socket if necessary.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	    <para>See also <link linkend="Socket_sendBinary">Socket::sendBinary()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_send">Socket::send</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.send($data) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>Sends the string data over the socket without the trailing null ('\0') character; the string's encoding is converted to the socket's encoding if necessary.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="binary_type">binary</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>Sends the binary data over the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SEND-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendBinary">
      <title>Socket::sendBinary()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends string or binary data over a connected socket.  String data will not be converted to the encoding set for the socket, but rather will be sent as-is, even if the string's encoding is different from the socket's encoding.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	    <para>See also <link linkend="Socket_sendBinary">Socket::send()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendBinary">Socket::sendBinary</link>(<link linkend="data_type">data</link> <replaceable>$data</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendBinary($data) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>Sends the string data over the socket without the trailing null ('\0') character; the string's encoding is not converted to the socket's encoding, even if it is different.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="binary_type">binary</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>Sends the binary data over the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SEND-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi1">
      <title>Socket::sendi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 1-byte integer over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi1">Socket::sendi1</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi1($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send; only the least-significant byte will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi2">
      <title>Socket::sendi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in big-endian format (network byte order) over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi2">Socket::sendi2</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi2($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi4">
      <title>Socket::sendi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in big-endian format (network byte order) over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi4">Socket::sendi4</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi4($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi8">
      <title>Socket::sendi8()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends an 8-byte (64-bit) integer in big-endian format (network byte order) over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="Socket_sendi8">Socket::sendi8</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi8($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi2LSB">
      <title>Socket::sendi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in little-endian format over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi2LSB">Socket::sendi2LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi2LSB($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi4LSB">
      <title>Socket::sendi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in little-endian format over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi4LSB">Socket::sendi4LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi4LSB($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi8LSB">
      <title>Socket::sendi8LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends an 8-byte (64-bit) integer in little-endian format over the socket.  If an error occurs, -1 will be returned; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendi8LSB">Socket::sendi8LSB</link>(<link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>if</command> ($sock.sendi8LSB($val) == -1)
    printf("error sending data: %s\n", strerror(errno()));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$i</replaceable> = 0</code></para></entry>
	      <entry><para>The integer to send.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendHTTPMessage">
      <title>Socket::sendHTTPMessage()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendHTTPMessage">Socket::sendHTTPMessage</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="string_type">string</link> <replaceable>$http_version</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary()) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendHTTPMessage("POST", "/RPC2", "1.1", ("Content-Type" : "text/xml"), $xml);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
	      <entry><para>The HTTP method name to send (i.e. POST, HEAD, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
	      <entry><para>The path component of the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$http_version</replaceable></code></para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$headers</replaceable></code></para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary()</code></para></entry>
	      <entry><para>If present (and does not have a length of zero), the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SENDHTTPMESSAGE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SEND-ERROR</code></para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendHTTPResponse">
      <title>Socket::sendHTTPResponse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP response message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_sendHTTPResponse">Socket::sendHTTPResponse</link>(<link linkend="softint_type">softint</link> <replaceable>$status_code</replaceable>, <link linkend="string_type">string</link> <replaceable>$desc</replaceable>, <link linkend="string_type">string</link> <replaceable>$http_version</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable>, data <replaceable>$body</replaceable> = binary()) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendHTTPResponse(200, "OK", "1.1", ("Connection":"Keep-Alive"));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$status_code</replaceable></code></para></entry>
	      <entry><para>The HTTP status code to send (i.e. 200, 404, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$desc</replaceable></code></para></entry>
	      <entry><para>The descriptive text for the status code.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$http_version</replaceable></code></para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$headers</replaceable></code></para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary()</code></para></entry>
	      <entry><para>If present (and does not have a length of zero), the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SENDHTTPRESPONSE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SEND-ERROR</code></para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recv">
      <title>Socket::recv()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a string.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recv">Socket::recv</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $sock.recv(-1); # read all data available</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0</code></para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The data read, returned as a string.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvBinary">
      <title>Socket::recvBinary()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a binary object.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvBinary">Socket::recvBinary</link>(<link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="binary_type">binary</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> binary $bin = $sock.recvBinary(-1); # read all data available</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$size</replaceable> = 0</code></para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="binary_type">binary</link></code></para></entry>
	      <entry><para>The data read, returned as a binary object.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi1">
      <title>Socket::recvi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 1-byte signed integer from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi1">Socket::recvi1</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi1();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 1-byte signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi2">
      <title>Socket::recvi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte signed integer in big-endian format (network byte order) from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi2">Socket::recvi2</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi2();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 2-byte signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi4">
      <title>Socket::recvi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte signed integer in big-endian format (network byte order) from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi4">Socket::recvi4</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi4();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 4-byte signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi8">
      <title>Socket::recvi8()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives an 8-byte (64-bit) signed integer in big-endian format (network byte order) from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi8">Socket::recvi8</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi8();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.  A <link linkend="Relative_Dates">relative date/time value</link> can be used as well (i.e. <code>1250ms</code>) for clarity.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 8-byte (64-bit) signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi2LSB">
      <title>Socket::recvi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte signed integer in little-endian format from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi2LSB">Socket::recvi2LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi2LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 2-byte signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi4LSB">
      <title>Socket::recvi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte signed integer in little-endian format from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi4LSB">Socket::recvi4LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi4LSB(1250ms); # timeout in 1.25 seconds</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 4-byte signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi8LSB">
      <title>Socket::recvi8LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives an 8-byte (64-bit) signed integer in little-endian format from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvi8LSB">Socket::recvi8LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvi8LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.  A <link linkend="Relative_Dates">relative date/time value</link> can be used as well (i.e. <code>1250ms</code>) for clarity.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 8-byte (64-bit) signed integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu1">
      <title>Socket::recvu1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 1-byte unsigned integer from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvu1">Socket::recvu1</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvu1();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 1-byte unsigned integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu2">
      <title>Socket::recvu2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte unsigned integer in big-endian format (network byte order) from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="Socket_recvu2">Socket::recvu2</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	    <para><code><link linkend="Socket_recvu2">Socket::recvu2</link>(<link linkend="date_type">date</link> <replaceable>$timeout</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvu2();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 2-byte unsigned integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu4">
      <title>Socket::recvu4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte unsigned integer in big-endian format (network byte order) from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvu4">Socket::recvu4</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvu4();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 4-byte unsigned integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu2LSB">
      <title>Socket::recvu2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte unsigned integer in little-endian format from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvu2LSB">Socket::recvu2LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvu2LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 2-byte unsigned integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu4LSB">
      <title>Socket::recvu4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte unsigned integer in little-endian format from the socket.  If any errors occur reading from the socket, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_recvu4LSB">Socket::recvu4LSB</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $val = $sock.recvu4LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The 4-byte unsigned integer read.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_readHTTPHeader">
      <title>Socket::readHTTPHeader()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads an HTTP header and returns a hash representing the data read.  If any errors occur reading from the socket, an exception is raised.  Accepts an optional timeout value in milliseconds.</para>
	    <para>This method sets the keys in the following table in the hash returned as well to give additional information about the HTTP header received.</para>

	    <table>
	      <title>Special Keys in Hash Returned By Socket::readHTTPHeader()</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Description of Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>http_version</code></para></entry>
		    <entry><para>A string giving the HTTP version set in the header</para></entry>
		  </row>
		  <row>
		    <entry><para><code>status_code</code></para></entry>
		    <entry><para>An integer giving the status code; this key is only set in HTTP responses</para></entry>
		  </row>
		  <row>
		    <entry><para><code>status_message</code></para></entry>
		    <entry><para>If present in an HTTP response, this key will be set to the message after the status code</para></entry>
		  </row>
		  <row>
		    <entry><para><code>method</code></para></entry>
		    <entry><para>A string giving the HTTP method (i.e. <code>GET</code>, <code>POST</code>, etc); this key is only set when a request header is received</para></entry>
		  </row>
		  <row>
		    <entry><para><code>path</code></para></entry>
		    <entry><para>A string giving the path in a request without any decoding; use <link linkend="decode_url">decode_url()</link> to decode if necessary.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_readHTTPHeader">Socket::readHTTPHeader</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> hash $hash = $sock.readHTTPHeader();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>The return hash will contain keys for each header, plus an http_version key, giving the HTTP protocol version.  For HTTP responses, the following keys will be returned: <code>status_code, status_message</code>.  For outgoing HTTP messages, the following keys will be populated: <code>method, path</code>.  If any errors occur reading from the socket, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-TIMEOUT</code></para></entry>
	      <entry><para>The data requested was not received in the timeout period.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SSL-ERROR</code></para></entry>
	      <entry><para>There was an SSL error while reading data from the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getPort">
      <title>Socket::getPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the port number of the socket for INET sockets.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_getPort">Socket::getPort</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$port = $sock.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns the port number for an INET connection, -1 if no INET connection has been established.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_shutdown">
      <title>Socket::shutdown()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Ensures that a socket will be closed even if the file descriptor is shared with other processes (for example, after a call to <link linkend="fork">fork()</link>).  Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_shutdown">Socket::shutdown</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.shutdown();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::shutdown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_close">
      <title>Socket::close()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes an open socket.  Also deletes the UNIX domain socket file if it was created by a call to <link linkend="Socket_bind">Socket::bind()</link>.  Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_close">Socket::close</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.close();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success, -1 for error; in this case check <link linkend="errno">errno()</link> for the error number.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getCharset">
      <title>Socket::getCharset()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character encoding for the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_getCharset">Socket::getCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$enc = $sock.getCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for Socket::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The character encoding for the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setCharset">
      <title>Socket::setCharset()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the character encoding for the socket.  If any string data is sent over the socket with <link linkend="Socket_send">Socket::send()</link>, then the character encoding will be automatically converted if needed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_setCharset">Socket::setCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.setCharset("ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$encoding</replaceable></code></para></entry>
	      <entry><para>The character encoding for the socket.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Socket_getNoDelay">
      <title>Socket::getNoDelay()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the <code>TCP_NODELAY</code> setting for the socket.  See also <link linkend="Socket_setNoDelay">Socket::setNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_getNoDelay">Socket::getNoDelay</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$nodelay = $sock.getNoDelay();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for Socket::getNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setNoDelay">
      <title>Socket::setNoDelay()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <code>TCP_NODELAY</code> setting for the socket; when this setting is <code>True</code>, then data will be immediately sent out over the socket, when it is <code>False</code>, then data transmission may be delayed to be packaged with other data for the same target.</para>
	    <para>Delayed data transmissions may cause problems when the sender immediately closes the socket after sending data; in this case the receiver may not get the data even though the send succeeded.</para>
	    <para>Note that if no value is given to the method, the argument will be assumed to be <code>True</code>, and output buffering will be turned off for the socket.</para>
	    <para>See also <link linkend="Socket_getNoDelay">Socket::getNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_setNoDelay">Socket::setNoDelay</link>(<link linkend="bool_type">bool</link> <replaceable>$nodelay</replaceable> = True) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.setNoDelay(<code>True</code>);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link> <replaceable>$nodelay</replaceable> = True</code></para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Socket::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, non-zero for errors.  To get error information, see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getSocket">
      <title>Socket::getSocket()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the file descriptor number associated with the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Socket_getSocket">Socket::getSocket</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock = $sock.getSocket();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Socket::getSocket()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The file descriptor associated to the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>


  <sect1 id="HTTPClient_Class">
    <title>HTTPClient Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-network">PO_NO_NETWORK</link></code> parse option.</para>

    <para>The HTTPClient class can be used to communicate with HTTP servers using the HTTP or HTTPS (HTTP using an SSL/TLS encrypted connection) protocol.</para>

    <para>By default 'Connection: Keep-Alive' is always sent regardless of the HTTP protocol level set for the object, however if a server response contains 'Connection: close', the connection will be closed as soon as the full response (including any message body if present) has been read.</para>

    <para>HTTP redirect responses are supported and can be limited with the <code>max_redirects</code> constructor hash key or by using the <link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects()</link> method.  The default number of redirects is 5.</para>

    <para>HTTP basic authentication is supported; set the username and password in the URL (ex: http://username:password@host:port/path).  To change the URL from the one set by the constructor, call <link linkend="HTTPClient_setURL">HTTPClient::setURL()</link>.</para>

    <para>HTTP proxies and basic proxy authentication are supported by setting the <code>proxy</code> constructor hash key to the proxy URL (with a proxy username and password if required) or by calling the <link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL()</link> method.</para>

    <para>Objects of this class are thread-safe and support serializing multiple simultaneous requests from many threads.  If a request is in progress and another thread attempts to make a request at the same time, the second thread will block until the first is complete.  Therefore the total amount of time a thread could wait for a response in a multi-threaded context could be greater than the read timeout value.</para>

    <para>This class understands and automatically decodes &quot;deflate&quot;, &quot;gzip&quot;, and &quot;bzip2&quot; content encodings as well.</para>

    <para>The default read timeout value is 300,000 milliseconds (5 minutes).  Note that the read timeout value applies to individual packets; for this reason for large transfers the overall read time could exceed the read timeout value.</para>

    <para>When an exception is thrown (for example, a response code of &lt; 200 or &gt;= 400 is received from the server), any message body returned will be in the &quot;arg&quot; key of the <link linkend="Exception_Hash">exception hash</link>.</para>

    <para>This class understands the protocols in the following table.</para>

    <table id="HTTPClient_Protocols">
      <title>HTTPClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Protocol</para></entry>
	    <entry><para>Default Port</para></entry>
	    <entry><para>SSL?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>http</code></para></entry>
	    <entry><para>80</para></entry>
	    <entry><para>No</para></entry>
	    <entry><para>Unencrypted HTTP protocol</para></entry>
	  </row>
	  <row>
	    <entry><para><code>https</code></para></entry>
	    <entry><para>443</para></entry>
	    <entry><para>Yes</para></entry>
	    <entry><para>HTTP protocol with SSL/TLS encryption</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>Whenever using an HTTPClient method where a hash of headers can be passed to the method, some headers are generated by default by the class and can be overridden, and some are cannot be overridden and are ignored if passed by the client.  See the following tables for details.</para>

    <table>
      <title>HTTPClient Mandatory Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Content-Length</code></para></entry>
	    <entry><para>This header is only sent if a message body is send, and, if so, the length is calculated automatically.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>HTTPClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>text/html</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>text/html</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore HTTP Client v0.8.0</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Accept-Encoding</code></para></entry>
	    <entry><para><code>deflate,gzip,bzip2</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>This class supports posting network events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="httpclient_events">
      <title>HTTPClient Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link></code></para></entry>
            <entry><para>Raised when the HTTP &quot;Content-Length&quot; header is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link></code></para></entry>
            <entry><para>Raised when HTTP chunked data is about to be received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link></code></para></entry>
            <entry><para>Raised when all HTTP chunked data has been received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></entry>
            <entry><para>Raised when an HTTP redirect message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link></code></para></entry>
            <entry><para>Raised when HTTP footers are received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link></code></para></entry>
            <entry><para>Raised when a block of HTTP chunked data is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link></code></para></entry>
            <entry><para>Raised when the next chunk size for HTTP chunked data is known.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The following table gives an overview of the methods available in the HTTPClient class.</para>

    <table>
      <title>HTTPClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_constructor">HTTPClient::constructor</link>()</code></para>
              <para><code><link linkend="HTTPClient_constructor">HTTPClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>)</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the HTTPClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_destructor">HTTPClient::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the HTTPClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_copy">HTTPClient::copy</link>()</code></para>
	    </entry>
            <entry><para>Y</para></entry>
            <entry><para>Copying objects of this class is not supported, an exception will be thrown.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getURL">HTTPClient::getURL</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current URL.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setURL">HTTPClient::setURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Sets a new URL value for the next connection.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getProxyURL">HTTPClient::getProxyURL</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current proxy URL as a string or <command><link linkend="NOTHING">NOTHING</link></command> if no proxy URL is set.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Sets or clears (in case called with no argument) a new proxy URL value for the next connection.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_clearProxyURL">HTTPClient::clearProxyURL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Clears the proxy URL value.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setProxySecure">HTTPClient::setProxySecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the SSL/TLS flag for the next connection to the proxy.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_isProxySecure">HTTPClient::isProxySecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the SSL/TLS flag.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getMaxRedirects">HTTPClient::getMaxRedirects</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current <code>max_redirects</code> value.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects</link>(<link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Updates the <code>max_redirects</code> value.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_connect">HTTPClient::connect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Connects to the remote socket; SSL/TLS negotiation is performed if required.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_disconnect">HTTPClient::disconnect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Disconnects from the remote socket</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_get">HTTPClient::get</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="HTTPClient_get">HTTPClient::get</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP GET request and returns the message body received as a string or <command><link linkend="NOTHING">NOTHING</link></command> if no message body is received.  In order to get the headers and the body, use the <link linkend="HTTPClient_send">HTTPClient::send()</link> method instead.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_head">HTTPClient::head</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash">hash()</link>, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="HTTPClient_head">HTTPClient::head</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash">hash()</link>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP HEAD request and returns as hash of the headers received.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_post">HTTPClient::post</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash">hash()</link>, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="HTTPClient_post">HTTPClient::post</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash">hash()</link>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP POST request with a message body and returns the message body received as a string or <command><link linkend="NOTHING">NOTHING</link></command> if no message body is received.  In order to get the headers and the body in the response, use the <link linkend="HTTPClient_send">HTTPClient::send()</link> method instead.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_send">HTTPClient::send</link>(<link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary(), <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable> = "", <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>, <link linkend="bool_type">bool</link> <replaceable>$getbody</replaceable> = False, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="HTTPClient_send">HTTPClient::send</link>(<link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary(), <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable> = "", <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>, <link linkend="bool_type">bool</link> <replaceable>$getbody</replaceable> = False) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP request with the specified method and optional message body and returns headers and any body received as a response in a hash format.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setConnectTimeout">HTTPClient::setConnectTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the connect timeout in milliseconds.  Negative numbers mean use the default system connect timeout.  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>30s</code> = 30 seconds, etc.).</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setTimeout">HTTPClient::setTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the default read timeout in milliseconds.  Zero means immediate timeout (will return data only if it is already available), and negative numbers mean never timeout (wait forever for data).  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getConnectTimeout">HTTPClient::getConnectTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the connect timeout as an integer in milliseconds.  Negative numbers mean the system default timeout is used.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getTimeout">HTTPClient::getTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the default read timeout as an integer in milliseconds.  Zero means immediate timeout (only returns data if it is already available), and negative numbers mean never timeout (wait forever for data).</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setHTTPVersion">HTTPClient::setHTTPVersion</link>(<link linkend="string_type">string</link> <replaceable>$ver</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sets the HTTP protocol version string for headers in outgoing messages, allowed values are '1.0' and '1.1'.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getHTTPVersion">HTTPClient::getHTTPVersion</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the HTTP protocol version string used in outgoing messages.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setSecure">HTTPClient::setSecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to make a secure SSL/TLS connection on the next connect if the passed argument is <code>True</code>, or an unencrypted cleartext connection if it is <code>False</code>.  This method overrides the default behaviour for the protocol set for the object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_isSecure">HTTPClient::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the current connection is encrypted, <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_verifyPeerCertificate">HTTPClient::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string code giving the result of verifying the remote certificate or <command><link linkend="NOTHING">NOTHING</link></command> if a secure connection is not established.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getSSLCipherName">HTTPClient::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher as a string for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if a secure connection is not established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getSSLCipherVersion">HTTPClient::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version of the cipher as a string for an encrypted connection or <command><link linkend="NOTHING">NOTHING</link></command> if a secure connection is not established.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setEncoding">HTTPClient::setEncoding</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sets the string encoding for the object; any strings deserialized with this object will be tagged with this character encoding.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_getEncoding">HTTPClient::getEncoding</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the character encoding used for the object</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="HTTPClient_setEventQueue">HTTPClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="HTTPClient_setEventQueue">HTTPClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events or clears the queue if no argument is passed.</para></entry>
          </row>
	  <row>
	    <entry>
              <para><code><link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the <code>TCP_NODELAY</code> setting for the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay</link>(<link linkend="softbool_type">softbool</link> <replaceable>$nodelay</replaceable> = True) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <code>TCP_NODELAY</code> setting for the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="HTTPClient_isConnected">HTTPClient::isConnected</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> or <code>False</code> giving the current connection state.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>

    <sect2 id="HTTPClient_constructor">
      <title>HTTPClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the HTTPClient object based on the parameters passed.  To connect, call any method that requires a connection and an implicit connection is established, or call <link linkend="HTTPClient_connect">HTTPClient::connect()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_constructor">HTTPClient::constructor</link>()</code></para>
              <para><code><link linkend="HTTPClient_constructor">HTTPClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>)</code></para>
           </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> HTTPClient $httpclient(("url":"http://hostname:8080/path"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><replaceable><code>[<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>]</code></replaceable></para>
              </entry>
              <entry>
                <para>sets options and changes default behaviour for the object, etc.  See the table below for information on valid keys and their mening.  Note that the key names are case-sensitive and therefore must all be in lower-case.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table id="HTTPClient_constructor_option_hash_keys">
        <title>HTTPClient::constructor() Option Hash Keys</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Key</para></entry>
	      <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>url</code></para></entry>
              <entry><para>A string giving the URL to connect to.</para></entry>
            </row>
            <row>
              <entry><para><code>default_port</code></para></entry>
              <entry><para>The default port number to connect to if none is given in the URL.</para></entry>
            </row>
            <row>
              <entry><para><code>protocols</code></para></entry>
              <entry><para>A hash describing new protocols, the key is the protocol name and the value is either an integer giving the default port number or a hash with 'port' and 'ssl' keys giving the default port number and a boolean value to indicate that an SSL connection should be established.</para></entry>
            </row>
            <row>
              <entry><para><code>http_version</code></para></entry>
              <entry><para>Either '1.0' or '1.1' for the claimed HTTP protocol version compliancy in outgoing message headers.</para></entry>
            </row>
            <row>
              <entry><para><code>default_path</code></para></entry>
              <entry><para>The default path to use for new connections if a path is not otherwise specified in the connection URL.</para></entry>
            </row>
            <row>
              <entry><para><code>max_redirects</code></para></entry>
              <entry><para>The maximum number of redirects before throwing an exception (the default is 5).</para></entry>
            </row>
            <row>
              <entry><para><code>proxy</code></para></entry>
              <entry><para>The proxy URL for connecting through a proxy.</para></entry>
            </row>
            <row>
              <entry><para><code>timeout</code></para></entry>
              <entry><para>The timeout value in milliseconds (also can be a <link linkend="Relative_Dates">relative date-time value</link> for clarity, ex: <code>5m</code>)</para></entry>
            </row>
            <row>
              <entry><para><code>connect_timeout</code></para></entry>
              <entry><para>The timeout value in milliseconds for establishing a new socket connection (also can be a <link linkend="Relative_Dates">relative date-time value</link> for clarity, ex: <code>30s</code>)</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Exceptions thrown by HTTPClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-OPTION-ERROR</code></para></entry>
              <entry><para>invalid or unknown option passed in option hash</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-UNKNOWN-PROTOCOL</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_destructor">
      <title>HTTPClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the HTTPClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $httpclient;</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="HTTPClient_copy">
      <title>HTTPClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by HTTPClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getURL">
      <title>HTTPClient::getURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the current URL value for the object.  To set the URL, use the <link linkend="HTTPClient_setURL">HTTPClient::setURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getURL">HTTPClient::getURL</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$url = $httpclient.getURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for HTTPClient::getURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link></code></para></entry>
              <entry><para>The current URL value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setURL">
      <title>HTTPClient::setURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the URL value for the object.  To retrieve the current URL value, use the <link linkend="HTTPClient_getURL">HTTPClient::getURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setURL">HTTPClient::setURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setURL("https://user:password@hostname:8080/path");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$url</replaceable></code></para></entry>
              <entry><para>The new URL for the object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-UNKNOWN-PROTOCOL</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getProxyURL">
      <title>HTTPClient::getProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the current proxy URL value for the object (NOTHING if no proxy URL is set).  To set the proxy URL, use the <link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getProxyURL">HTTPClient::getProxyURL</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$proxy_url = $httpclient.getProxyURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for HTTPClient::getProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>The current proxy URL value or <command><link linkend="NOTHING">NOTHING</link></command> if it is not set.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setProxyURL">
      <title>HTTPClient::setProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the proxy URL value for the object; call with no argument or <command><link linkend="NOTHING">NOTHING</link></command> to clear.  To retrieve the current URL value, use the <link linkend="HTTPClient_getProxyURL">HTTPClient::getProxyURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL</link>(<link linkend="string_type">string</link> <replaceable>$url</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setProxyURL("http://user:password@proxy_host:8080/path");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$url</replaceable>]</code></para></entry>
              <entry><para>The new proxy URL for the object; call with no argument or <command><link linkend="NOTHING">NOTHING</link></command> to clear.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Exceptions thrown by HTTPClient::setProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-SET-PROXY-ERROR</code></para></entry>
              <entry><para>invalid authorization credentials in proxy URL (username without password or vice-versa)</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-PROXY-PROTOCOL-ERROR</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_clearProxyURL">
      <title>HTTPClient::clearProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Clears the current proxy URL</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_clearProxyURL">HTTPClient::clearProxyURL</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.clearProxyURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="HTTPClient_setProxySecure">
      <title>HTTPClient::setProxySecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the SSL/TLS flag for the next proxy connection.  To check the flag, use the <link linkend="HTTPClient_isProxySecure">HTTPClient::isProxySecure()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setProxySecure">HTTPClient::setProxySecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setProxySecure(<code>True</code>);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setProxySecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True</code></para></entry>
              <entry><para>sets the SSL/TLS flag for the next proxy connection</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_isProxySecure">
      <title>HTTPClient::isProxySecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the SSL/TLS flag for proxy connection.  To set the flag, use the <link linkend="HTTPClient_setProxySecure">HTTPClient::setProxySecure()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_isProxySecure">HTTPClient::isProxySecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $httpclient.isProxySecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for HTTPClient::isProxySecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>The value of the SSL/TLS flag for the proxy connection.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getMaxRedirects">
      <title>HTTPClient::getMaxRedirects()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the maximum number of redirects allowed for the object.  To set this value, use the <link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getMaxRedirects">HTTPClient::getMaxRedirects</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$num = $httpclient.getMaxRedirects();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for HTTPClient::getMaxRedirects()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="int_type">int</link></code></para></entry>
              <entry><para>The current value of the <code>max_redirects</code> setting.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setMaxRedirects">
      <title>HTTPClient::setMaxRedirects()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the maximum number of redirects allowed for the object.  To retrieve this value, use the <link linkend="HTTPClient_getMaxRedirects">HTTPClient::getMaxRedirects()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects</link>(<link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setMaxRedirects(0); # disable redirections</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setMaxRedirects()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = 0</code></para></entry>
              <entry><para>The maximum number of HTTP redirects allowed for the object before an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_connect">
      <title>HTTPClient::connect()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Connects to the remote socket.  If the protocol indicates that a secure connection should be established (or <link linkend="HTTPClient_setSecure">HTTPClient::setSecure()</link> was called previsouly), SSL/TLS negotiation will be attempted.  Note: For possible exceptions, see the <link linkend="Socket_connect">Socket::connect()</link> method (or <link linkend="Socket_connectSSL">Socket::connectSSL()</link> for secure connections).</para>
	    <para>If the <code>TCP_NODELAY</code> flag has been set (see <link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay()</link>), then after a successful connection to the remote socket, this option will be set on the socket.  If an error occurs setting the <code>TCP_NODELAY</code> option, the internal flag is set to false (use <link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay()</link> to check the flag's state) and the error code can be retrieved with <link linkend="errno">errno()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_connect">HTTPClient::connect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.connect();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>,<link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Exceptions thrown by HTTPClient::connect()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-MAXIMUM-.REDIRECTS-EXCEEDED</code></para></entry>
              <entry><para>The attempt to connect exceeeded the maximum number of redirects allowed for the object.</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-RECEIVE-ERROR</code></para></entry>
              <entry><para>There was an error receiving data on the socket</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-TIMEOUT</code></para></entry>
	      <entry><para>The receive attempt timed out.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_disconnect">
      <title>HTTPClient::disconnect()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Disconnects from the remote socket if a connection is established (otherwise does nothing).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_disconnect">HTTPClient::disconnect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.disconnect();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="HTTPClient_get">
      <title>HTTPClient::get()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP GET request and returns the message body received.  In order to get the headers and the body, use the <link linkend="HTTPClient_send">HTTPClient::send() method</link> instead.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_get">HTTPClient::get</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="HTTPClient_get">HTTPClient::get</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$html = $httpclient.get("/path/file.html");</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
              <entry><para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para></entry>
            </row>
            <row>
	      <entry><para><code><link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link></code></para></entry>
	      <entry><para>An optional hash of headers to include in the message.</para></entry>
            </row>
            <row>
	      <entry><para><code>[<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>]</code></para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>The message body returned; <command><link linkend="NOTHING">NOTHING</link></command> in case of an erroneous reply by the server with no body.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_head">
      <title>HTTPClient::head()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP HEAD request and returns the headers received.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_head">HTTPClient::head</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash_type">hash</link>(), <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="HTTPClient_head">HTTPClient::head</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash_type">hash</link>()) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$response = $httpclient.head("/path");</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::head()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
              <entry><para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para></entry>
            </row>
            <row>
	      <entry><para><code><link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link></code></para></entry>
	      <entry><para>An optional hash of headers to include in the message.</para></entry>
            </row>
            <row>
	      <entry><para><code>[<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>]</code></para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::head()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>The headers received from the HTTP server with all key names converted to lower-case.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::head()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_post">
      <title>HTTPClient::post()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP POST request with a message body and returns the message body received as a response.  In order to get the headers and the body, use <link linkend="HTTPClient_send">HTTPClient::send()</link> instead.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_post">HTTPClient::post</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash_type">hash</link>(), <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="HTTPClient_post">HTTPClient::post</link>(<link linkend="string_type">string</link> <replaceable>$path</replaceable>, <link linkend="data_type">data</link> <replaceable>$body</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$headers</replaceable> = <link linkend="hash_type">hash</link>()) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::post()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
              <entry><para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="data_type">data</link> <replaceable>$body</replaceable></code></para></entry>
              <entry><para>The message body to send.</para></entry>
            </row>
            <row>
	      <entry><para><code><link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link></code></para></entry>
	      <entry><para>An optional hash of headers to include in the message.</para></entry>
            </row>
            <row>
	      <entry><para><code>[<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>]</code></para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::post()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>The message body returned; <command><link linkend="NOTHING">NOTHING</link></command> in case of an erroneous reply by the server with no body.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::post()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_send">
      <title>HTTPClient::send()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP request with the specified method and optional message body and returns headers and optionally the body received as a response in a hash format.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_send">HTTPClient::send</link>(<link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary(), <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable> = "", <link linkend="hash_type">hash</link> $headers = <link linkend="hash_type">hash</link>(), <link linkend="bool_type">bool</link> <replaceable>$getbody</replaceable> = False, <link linkend="reference_type">reference</link> <replaceable>$info</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
              <para><code><link linkend="HTTPClient_send">HTTPClient::send</link>(<link linkend="data_type">data</link> <replaceable>$body</replaceable> = binary(), <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="string_type">string</link> <replaceable>$path</replaceable> = "", <link linkend="hash_type">hash</link> $headers = <link linkend="hash_type">hash</link>(), <link linkend="bool_type">bool</link> <replaceable>$getbody</replaceable> = False) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$msg = $httpclient.send($body, "POST", "/path", ("Connection":"Keep-Alive"));</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><para><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::send()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="data_type">data</link> <replaceable>$body</replaceable></code></para></entry>
              <entry><para>The message body to send; use <command><link linkend="NOTHING">NOTHING</link></command> to send to body.</para></entry>
            </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
	      <entry><para>The name of the HTTP method (<code>'GET', 'POST', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE', or 'CONNECT'</code>).</para></entry>
	    </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$path</replaceable></code></para></entry>
              <entry><para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para></entry>
            </row>
            <row>
	      <entry><para><code><link linkend="hash_type">hash</link> $headers = <link linkend="hash">hash()</link></code></para></entry>
	      <entry><para>An optional hash of headers to include in the message.</para></entry>
            </row>
            <row>
	      <entry><para><code><link linkend="bool_type">bool</link> <replaceable>$getbody</replaceable> = False</code></para></entry>
	      <entry><para>If this argument is true, then the object will try to receive a message body even if no <code>Content-Length</code> header is present in the response.  Use this only with broken servers that send messages bodies without a 'Content-Length' header.</para></entry>
            </row>
            <row>
	      <entry><para><code>[<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>]</code></para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::send()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>The headers received from the HTTP server with all key names converted to lower-case.  The message body, if any, will be assigned to the value of the 'body' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::send()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-METHOD-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid HTTP method passed</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setConnectTimeout">
      <title>HTTPClient::setConnectTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default connect timeout in milliseconds.  Negative numbers mean use the default system timeout.  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setConnectTimeout">HTTPClient::setConnectTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setConnectTimeout(2m); # sets timeout to 2 minutes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setConnectTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
              <entry>
                <para>Connect timeout in milliseconds, 0 = immediate timeout (do not use), negative numbers = use system default connect timeout.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setTimeout">
      <title>HTTPClient::setTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default read timeout in milliseconds.  Zero means immediate timeout (will return data only if it is already available), and negative numbers mean never timeout (wait forever for data).  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setTimeout">HTTPClient::setTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setTimeout(2m); # sets timeout to 2 minutes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = -1</code></para></entry>
              <entry>
                <para>Read timeout in milliseconds, 0 = immediate timeout, negative numbers = never timeout.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getConnectTimeout">
      <title>HTTPClient::getConnectTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the connect timeout as an integer in milliseconds.  Negative numbers mean the default system timeout is used instead.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getConnectTimeout">HTTPClient::getConnectTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$timeout = $httpclient.getConnectTimeout();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getConnectTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The connect timeout value in milliseconds</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getTimeout">
      <title>HTTPClient::getTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the default read timeout as an integer in milliseconds.  Zero means immediate timeout (only returns data if it is already available), and negative numbers mean never timeout (wait forever for data).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getTimeout">HTTPClient::getTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$timeout = $httpclient.getTimeout();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The read timeout value in milliseconds</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setHTTPVersion">
      <title>HTTPClient::setHTTPVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the HTTP protocol version string for headers in outgoing messages, allowed values are '1.0' and '1.1'.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setHTTPVersion">HTTPClient::setHTTPVersion</link>(<link linkend="string_type">string</link> <replaceable>$ver</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setHTTPVersion("1.1");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$ver</replaceable></code></para></entry>
              <entry>
                <para>either '1.0' or '1.1' for the HTTP protocol compliance version.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-VERSION-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid HTTP version passed (allowed values: '1.0', '1.1').</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getHTTPVersion">
      <title>HTTPClient::getHTTPVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the HTTP protocol version string used in outgoing messages.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getHTTPVersion">HTTPClient::getHTTPVersion</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$version = $httpclient.getHTTPVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>The HTTP protocol version string used in outgoing messages (either '1.0' or '1.1').</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setSecure">
      <title>HTTPClient::setSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to make a secure SSL/TLS connection on the next connect if the passed argument is <code>True</code>, or an unencrypted cleartext connection if it is <code>False</code>.  This method overrides the default behaviour for the protocol set for the object.</para>
	    <para>Note that the behavior of this method when called with no argument changed in version 0.8.0; prior to version 0.8.0 calling this method with no argument would turn off secure mode; the behavior was changed to the current functionality in order to make the usage of this method consistent with other methods of the same name and to make it more logical.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
               <para><code><link linkend="HTTPClient_setSecure">HTTPClient::setSecure</link>(<link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setSecure(<code>True</code>);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softbool_type">softbool</link> <replaceable>$secure</replaceable> = True</code></para></entry>
              <entry>
                <para>If <code>True</code>, a SSL/TLS connection will be attempted on the next connection.  If <code>False</code>, an unencrypted cleartext connection will be established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_isSecure">
      <title>HTTPClient::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the current connection is encrypted, <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_isSecure">HTTPClient::isSecure</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $httpclient.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>Returns <code>True</code> if the current connection is encrypted, <code>False</code> if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_verifyPeerCertificate">
      <title>HTTPClient::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate or <command><link linkend="NOTHING">NOTHING</link></command> if an encrypted connection is not established.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_verifyPeerCertificate">HTTPClient::verifyPeerCertificate</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $httpclient.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if a secure connection has not been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getSSLCipherName">
      <title>HTTPClient::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getSSLCipherName">HTTPClient::getSSLCipherName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $httpclient.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>The name of the cipher for a secure connection.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getSSLCipherVersion">
      <title>HTTPClient::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getSSLCipherVersion">HTTPClient::getSSLCipherVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> any $str = $httpclient.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>The version of the cipher for a secure connection.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setEncoding">
      <title>HTTPClient::setEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the string encoding for the object; any strings deserialized with this object will be tagged with this character encoding.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setEncoding">HTTPClient::setEncoding</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setEncoding("ISO-8859-1");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$encoding</replaceable></code></para></entry>
              <entry>
                <para>The string encoding to use for this object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-SETSTRINGENCODING-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing encoding parameter from method call</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getEncoding">
      <title>HTTPClient::getEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the character encoding used for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_getEncoding">HTTPClient::getEncoding</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $httpclient.getEncoding();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for HTTPClient::getEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>The character encoding used for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setEventQueue">
      <title>HTTPClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events.  To remove the event queue and stop monitoring events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="HTTPClient_setEventQueue">HTTPClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="HTTPClient_setEventQueue">HTTPClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getNoDelay">
      <title>HTTPClient::getNoDelay()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the <code>TCP_NODELAY</code> setting for the HTTPClient object.  See also <link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$nodelay = $httpclient.getNoDelay();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for HTTPClient::getNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the HTTPClient object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setNoDelay">
      <title>HTTPClient::setNoDelay()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <code>TCP_NODELAY</code> setting for the HTTPClient object; when this setting is <code>True</code>, then data will be immediately sent out over the HTTPClient object's socket, when it is <code>False</code>, then data transmission may be delayed to be packaged with other data for the same target.</para>
	    <para>Delayed data transmissions may cause problems when the sender immediately closes the socket after sending data; in this case the receiver may not get the data even though the send succeeded.</para>
	    <para>Note that if no value is given to the method, the argument will be assumed to be <code>True</code>, and output buffering will be turned off for the HTTPClient object.</para>
	    <para>If the socket is not connected when this call is made, then an internal flag is set and the <code>TCP_NODELAY</code> option is enabled when the next connection is established.  If the socket is connected, then if an error occurs setting the <code>TCP_NODELAY</code> option on the socket, this method will return a non-zero error code; the actual error can be checked with the <link linkend="errno">errno()</link> function.</para>
	    <para>See also <link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay</link>(<link linkend="softbool_type">softbool</link> <replaceable>$nodelay</replaceable> = True) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$httpclient.setNoDelay(<code>True</code>);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for HTTPClient::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softbool_type">softbool</link> <replaceable>$nodelay</replaceable> = True</code></para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the HTTPClient.</para></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for HTTPClient::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, non-zero for errors.  To get error information, see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_isConnected">
      <title>HTTPClient::isConnected()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the connection state of the HTTPClient object.  Connections are implicitly established whenever a method is callde requiring a connection; to explicitly establish a connection, see <link linkend="HTTPClient_connect">HTTPClient::connect()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="HTTPClient_isConnected">HTTPClient::isConnected</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $connected = $httpclient.isConnected();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for HTTPClient::isConnected()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>The connection state of the HTTPClient object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="XmlRpcClient_Class">
    <title>XmlRpcClient Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-network">PO_NO_NETWORK</link></code> parse option.</para>

    <para>The XmlRpcClient class provides easy access to XML-RPC web services.  This class inherits all public methods of the <link linkend="HTTPClient_Class">HTTPClient class</link>.  The inherited <link linkend="HTTPClient_Class">HTTPClient</link> methods are not listed in this section, see the section on the <link linkend="HTTPClient_Class">HTTPClient class</link> for more information on methods provided by the parent class.  For low-level XML-RPC functions, see the XML-RPC functions in <link linkend="XML_Functions">XML Functions</link>.</para>

    <para>The XmlRpcClient class understands the following protocols in addition to the <link linkend="HTTPClient_Protocols">protocols supported by the HTTPClient class</link>:</para>

    <table>
      <title>XmlRpcClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Protocol</para></entry>
            <entry><para>Default Port</para></entry>
            <entry><para>SSL?</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>xmlrpc</code></para></entry>
            <entry><para>80</para></entry>
            <entry><para>No</para></entry>
            <entry><para>Unencrypted XML-RPC protocol over HTTP</para></entry>
          </row>
          <row>
            <entry><para><code>xmlrpcs</code></para></entry>
            <entry><para>443</para></entry>
            <entry><para>Yes</para></entry>
            <entry><para>XML-RPC protocol over HTTP with SSL/TLS encryption</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The XmlRpcClient supplies default values for HTTP headers as follows:</para>

    <table>
      <title>XmlRpcClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>text/xml</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>text/xml</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore XML-RPC Client v0.8.0</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>XmlRpcClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_constructor">XmlRpcClient::constructor</link>(<link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
              <para><code><link linkend="XmlRpcClient_constructor">XmlRpcClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>, <link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the XmlRpcClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_destructor">XmlRpcClient::destructor</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the XmlRpcClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_copy">XmlRpcClient::copy</link>()</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_call">XmlRpcClient::call</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_callWithInfo">XmlRpcClient::callWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="XmlRpcClient_call">XmlRpcClient::call()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_callArgsWithInfo">XmlRpcClient::callArgsWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="hash_type">hash</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlRpcClient_setEventQueue">XmlRpcClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="XmlRpcClient_setEventQueue">XmlRpcClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events or clears the queue if no argument is passed.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="XmlRpcClient_constructor">
      <title>XmlRpcClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the XmlRpcClient object based on the parameters passed and by default immediately attempts to establish a connection to the server (pass a boolean <code>True</code> value as the second argument to establish a connection on demand).  See <link linkend="HTTPClient_constructor">HTTPClient::constructor()</link> and <link linkend="HTTPClient_connect">HTTPClient::connect()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_constructor">XmlRpcClient::constructor</link>(<link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
              <para><code><link linkend="XmlRpcClient_constructor">XmlRpcClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>, <link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
           </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> XmlRpcClient $xrc(("url":"http://hostname/RPC2"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$opts</replaceable></code></para></entry>
              <entry><para>an option hash, see <link linkend="HTTPClient_constructor_option_hash_keys">HTTPClient::constructor() Option Hash Keys</link> for valid keys in this hash.</para></entry>
            </row>
            <row>
              <entry><para><code><replaceable><link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False</replaceable></code></para></entry>
              <entry><para>If this optional argument is passed with a value of <code>True</code>, then the object will not attempt to make a connection immediately to the remote socket, but instead will wait until a connection is required and made implicitly or manually established with the parent class' <link linkend="HTTPClient_connect">HTTPClient::connect()</link> method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_destructor">
      <title>XmlRpcClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the XmlRpcClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $xrc;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="XmlRpcClient_copy">
      <title>XmlRpcClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by XmlRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLRPCCLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_call">
      <title>XmlRpcClient::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link>, and <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_call">XmlRpcClient::call</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.call("method.name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The XML-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code>...</code></para></entry>
              <entry><para>Optional arguments for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_callArgs">
      <title>XmlRpcClient::callArgs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link>, and <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callArgs("method.name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The XML-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
              <entry><para>An optional list of arguments (or single argument) for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="XmlRpcClient_callWithInfo">
      <title>XmlRpcClient::callWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="XmlRpcClient_call">XmlRpcClient::call()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_callWithInfo">XmlRpcClient::callWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callWithInfo(\$info, "method.name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$info</replaceable></code></para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The XML-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code>...</code></para></entry>
              <entry><para>Optional arguments for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_callArgsWithInfo">
      <title>XmlRpcClient::callArgsWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_callArgsWithInfo">XmlRpcClient::callArgsWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callArgsWithInfo(\$info, "method.name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callArgsWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$info</replaceable></code></para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The XML-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
              <entry><para>An optional list of arguments (or single argument) for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callArgswithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="XmlRpcClient_setEventQueue">
      <title>XmlRpcClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events.  To remove the event queue and stop monitoring events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlRpcClient_setEventQueue">XmlRpcClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="XmlRpcClient_setEventQueue">XmlRpcClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$xrc.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="JsonRpcClient_Class">
    <title>JsonRpcClient Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-network">PO_NO_NETWORK</link></code> parse option.</para>

    <para>The JsonRpcClient class provides easy access to JSON-RPC web services.  This class inherits all public methods of the <link linkend="HTTPClient_Class">HTTPClient class</link>.  The inherited HTTPClient methods are not listed in this section, see the section on the HTTPClient class for more information on methods provided by the parent class.  For low-level JSON-RPC functions, see the JSON-RPC functions in <link linkend="JSON_Functions">JSON Functions</link>.</para>

    <para>The JsonRpcClient class understands the following protocols in addition to the <link linkend="HTTPClient_Protocols">protocols supported by the HTTPClient class</link>:</para>

    <table>
      <title>JsonRpcClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Protocol</para></entry>
            <entry><para>Default Port</para></entry>
            <entry><para>SSL?</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>jsonrpc</code></para></entry>
            <entry><para>80</para></entry>
            <entry><para>No</para></entry>
            <entry><para>Unencrypted JSON-RPC protocol over HTTP</para></entry>
          </row>
          <row>
            <entry><para><code>jsonrpcs</code></para></entry>
            <entry><para>443</para></entry>
            <entry><para>Yes</para></entry>
            <entry><para>JSON-RPC protocol over HTTP with SSL/TLS encryption</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The JsonRpcClient supplies default values for HTTP headers as follows:</para>

    <table>
      <title>JsonRpcClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>application/json</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>application/json</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore JSON-RPC Client v0.8.0</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>JsonRpcClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_constructor">JsonRpcClient::constructor</link>(<link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
              <para><code><link linkend="JsonRpcClient_constructor">JsonRpcClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>, <link linkend="softbool_type">bool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Creates the JsonRpcClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_destructor">JsonRpcClient::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the JsonRpcClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_copy">JsonRpcClient::copy</link>()</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_call">JsonRpcClient::call</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_callWithInfo">JsonRpcClient::callWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="JsonRpcClient_call">JsonRpcClient::call()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_callArgsWithInfo">JsonRpcClient::callArgsWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>

          <row>
            <entry>
              <para><code><link linkend="JsonRpcClient_setEventQueue">JsonRpcClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="JsonRpcClient_setEventQueue">JsonRpcClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events or clears the queue if no argument is passed.</para></entry>
	  </row>

        </tbody>
      </tgroup>
    </table>

    <sect2 id="JsonRpcClient_constructor">
      <title>JsonRpcClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the JsonRpcClient object based on the parameters passed and by default immediately attempts to establish a connection to the server (pass a boolean <code>True</code> value as the second argument to establish a connection on demand).  See <link linkend="HTTPClient_constructor">HTTPClient::constructor()</link> and <link linkend="HTTPClient_connect">HTTPClient::connect()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_constructor">JsonRpcClient::constructor</link>(<link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
              <para><code><link linkend="JsonRpcClient_constructor">JsonRpcClient::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$opts</replaceable>, <link linkend="softbool_type">bool</link> <replaceable>$no_connect</replaceable> = False)</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> JsonRpcClient $jrc(("url":"http://hostname/json"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$opts</replaceable></code></para></entry>
              <entry><para>an option hash, see <link linkend="HTTPClient_constructor_option_hash_keys">HTTPClient::constructor() Option Hash Keys</link> for valid keys in this hash.</para></entry>
            </row>
            <row>
              <entry><para><code><replaceable><link linkend="softbool_type">softbool</link> <replaceable>$no_connect</replaceable> = False</replaceable></code></para></entry>
              <entry><para>If this optional argument is passed with a value of <code>True</code>, then the object will not attempt to make a connection immediately to the remote socket, but instead will wait until a connection is required and made implicitly or manually established with the parent class' <link linkend="HTTPClient_connect">HTTPClient::connect()</link> method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_destructor">
      <title>JsonRpcClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the JsonRpcClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $jrc;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="JsonRpcClient_copy">
      <title>JsonRpcClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by JsonRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>JSONRPCCLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_call">
      <title>JsonRpcClient::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeJSONRPCRequestString">makeJSONRPCRequestString()</link>, and <link linkend="parseJSON">parseJSON()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_call">JsonRpcClient::call</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.call("method_name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The JSON-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code>...</code></para></entry>
              <entry><para>Optional arguments for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callArgs">
      <title>JsonRpcClient::callArgs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeJSONRPCRequestString">makeJSONRPCRequestString()</link>, and <link linkend="parseJSON">parseJSON()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs</link>(<link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callArgs("method_name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The JSON-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
              <entry><para>An optional list of arguments (or single argument) for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="any_type">any</link></code></para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callWithInfo">
      <title>JsonRpcClient::callWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="JsonRpcClient_call">JsonRpcClient::call()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_callWithInfo">JsonRpcClient::callWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callWithInfo(\$info, "method_name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$info</replaceable></code></para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The JSON-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code>...</code></para></entry>
              <entry><para>Optional arguments for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Return Values for JsonRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callArgsWithInfo">
      <title>JsonRpcClient::callArgswithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_callArgsWithInfo">JsonRpcClient::callArgsWithInfo</link>(<link linkend="reference_type">reference</link> <replaceable>$info</replaceable>, <link linkend="string_type">string</link> <replaceable>$method</replaceable>, <link linkend="any_type">any</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callArgsWithInfo(\$info, "method_name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callArgsWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code><link linkend="reference_type">reference</link> <replaceable>$info</replaceable></code></para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$method</replaceable></code></para></entry>
              <entry><para>The JSON-RPC method name to call</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="any_type">any</link> <replaceable>$args</replaceable></code></para></entry>
              <entry><para>An optional list of arguments (or single argument) for the method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::callArgsWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="any_type">any</link></code></para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="JsonRpcClient_setEventQueue">
      <title>JsonRpcClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events.  To remove the event queue and stop monitoring events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="JsonRpcClient_setEventQueue">JsonRpcClient::setEventQueue</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="JsonRpcClient_setEventQueue">JsonRpcClient::setEventQueue</link>(<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$jrc.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="Queue_Class">Queue</link> <replaceable>$queue</replaceable></code>]</para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="SSLPrivateKey_Class">
    <title>SSLPrivateKey Class</title>
    <para>SSLPrivateKey objects are containers for private key data.</para>
    <table>
      <title>SSLPrivateKey Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_constructor">SSLPrivateKey::constructor</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "")</code></para>
              <para><code><link linkend="SSLPrivateKey_constructor">SSLPrivateKey::constructor</link>(<link linkend="binary_type">binary</link> <replaceable>$key_der</replaceable>)</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the SSLPrivateKey object from the data argument passed; as a deprecated, backwards-compatibilty extension, if the string variant is used and a string less then 120 bytes long is passed, it is taken as a filename to use to load the private key data from in PEM format.  In this case <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> is checked at run-time; if set, and exception is thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_destructor">SSLPrivateKey::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the SSLPrivateKey object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_copy">SSLPrivateKey::copy</link>()</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_getType">SSLPrivateKey::getType</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the algorithm used for the private key.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_getVersion">SSLPrivateKey::getVersion</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a constant 1; do not use; only included for backwards compatibility.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_getBitLength">SSLPrivateKey::getBitLength</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the bit length of the private key.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLPrivateKey_getInfo">SSLPrivateKey::getInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of all information for the private key.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="SSLPrivateKey_constructor">
      <title>SSLPrivateKey::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the SSLPrivateKey object from the data argument passed.</para>
	    <para>As a deprecated, backwards-compatibilty extension, if the string variant is used and a string less then 120 bytes long is passed, it is taken as a filename to use to load the private key data from in PEM format.  In this case <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> is checked at run-time; if set, and exception is thrown.  Do not use this feature; load the file first and pass the data to the constructor instead.  This functionality will be removed in a future release of Qore.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLPrivateKey_constructor">SSLPrivateKey::constructor</link>(<link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "")</code></para>
              <para><code><link linkend="SSLPrivateKey_constructor">SSLPrivateKey::constructor</link>(<link linkend="binary_type">binary</link> <replaceable>$key_der</replaceable>)</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> SSLPrivateKey $pkey($data);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$key_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = ""</code></para></entry>
              <entry><para>The PEM-encoded text representation of the private key and optionally its passphrase.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="binary_type">binary</link> <replaceable>$key_der</replaceable></code></para></entry>
              <entry><para>The DER-encoded binary representation of the private key.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by SSLPrivateKey::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLPRIVATEKEY-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid format, invalid or missing password, etc</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_destructor">
      <title>SSLPrivateKey::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the SSLPrivateKey object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $pkey;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="SSLPrivateKey_copy">
      <title>SSLPrivateKey::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by SSLPrivateKey::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLPRIVATEKEY-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getType">
      <title>SSLPrivateKey::getType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string giving the algorithm used for the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLPrivateKey_getType">SSLPrivateKey::getType</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $pkey.getType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLPrivateKey::getType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>Returns values include: RSA, RSA2, DSA, DSA1, DSA2, DSA3, DSA4, DH, and unknown</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getVersion">
      <title>SSLPrivateKey::getVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a constant value of 1; do not use; only included for backwards-compatibility.</para>
	    <para>The openssl library never put any usable value into the internal fields that were used to provide this information; newer versions of openssl do not expose this information at all, therefore this method now returns a constant value of 1 for backwards-compatibility.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLPrivateKey_getVersion">SSLPrivateKey::getVersion</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $pkey.getVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLPrivateKey::getVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>Always returns a value of 1.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getBitLength">
      <title>SSLPrivateKey::getBitLength()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the bit length of the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLPrivateKey_getBitLength">SSLPrivateKey::getBitLength</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $pkey.getBitLength();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLPrivateKey::getBitLength()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The bit length of the private key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getInfo">
      <title>SSLPrivateKey::getInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
              <para><code><link linkend="SSLPrivateKey_getInfo">SSLPrivateKey::getInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
            <programlisting>SSLPrivateKey::getInfo()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $pkey.getInfo();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLPrivateKey::getInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>Keys are 'type', 'version', and 'bitLength' corresponding to the algorithm type, the version, and the bit length of the key respectively.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="SSLCertificate_Class">
    <title>SSLCertificate Class</title>
    <para>SSLCertificate objects are designed to work with X.509 certificate data.</para>
    <table>
      <title>SSLCertificate Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_constructor">SSLCertificate::constructor</link>(<link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable>)</code></para>
              <para><code><link linkend="SSLCertificate_constructor">SSLCertificate::constructor</link>(<link linkend="binary_type">binary</link> <replaceable>$cert_der</replaceable>)</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the SSLCertificate object from the filename argument passed; as a deprecated, backwards-compatibilty extension, if the string variant is used and a string less then 200 bytes long is passed, it is taken as a filename to use to load the private key data from in PEM format.  In this case <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> is checked at run-time; if set, and exception is thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_destructor">SSLCertificate::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the SSLCertificate object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_copy">SSLCertificate::copy</link>()</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getPEM">SSLCertificate::getPEM</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string in PEM format representing the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getVersion">SSLCertificate::getVersion</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getSignatureType">SSLCertificate::getSignatureType</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the signature type of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getSignature">SSLCertificate::getSignature</link>() <command>returns</command> <link linkend="binary_type">binary</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a binary object representing the signature of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getPublicKeyAlgorithm">SSLCertificate::getPublicKeyAlgorithm</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns name of the public key algorithm of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getPublicKey">SSLCertificate::getPublicKey</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a binary object representing the public key of the certificate in DER (Distinguished Encoding Rules) format or <command><link linkend="NOTHING">NOTHING</link></command> if the public key cannot be retrieved.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getSubjectHash">SSLCertificate::getSubjectHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of strings representing the subject information of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getIssuerHash">SSLCertificate::getIssuerHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of strings representing the issuer information of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getSerialNumber">SSLCertificate::getSerialNumber</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the integer serial number of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getPurposeHash">SSLCertificate::getPurposeHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of booleans representing the allowed purposes of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getNotBeforeDate">SSLCertificate::getNotBeforeDate</link>() <command>returns</command> <link linkend="date_type">date</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a date/time value representing the start date of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getNotAfterDate">SSLCertificate::getNotAfterDate</link>() <command>returns</command> <link linkend="date_type">date</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a date/time value representing the end date of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="SSLCertificate_getInfo">SSLCertificate::getInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of all information for the certificate.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="SSLCertificate_constructor">
      <title>SSLCertificate::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the SSLCertificate object from the argument passed.  If a string is passed, the value is assumed to be the PEM representation of the certificate; if a binary is passed, the value is assumed to be the DER-encoded form of the certificate.</para>
	    <para>DEPRECATED: If a string is passed that is less than 200 bytes long, the string is assumed to be a file name; in which case the <code><link linkend="no-filesystem">PO_NO_FILESYSTEM</link></code> parse option is checked at run-time; if this restriction is not set, then the certificate is loaded from the filename (in this case, the certificate must be in PEM format).  Do not use this feature; load the file first and pass the data to the constructor instead.  This functionality will be removed in a future release of Qore.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_constructor">SSLCertificate::constructor</link>(<link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable>)</code></para>
              <para><code><link linkend="SSLCertificate_constructor">SSLCertificate::constructor</link>(<link linkend="binary_type">binary</link> <replaceable>$cert_der</replaceable>)</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> SSLCertificate $cert($pem_cert_string);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$cert_pem</replaceable>, <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = ""</code></para></entry>
              <entry><para>The PEM-encoded text representation of the X509 certificate.</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="binary_type">binary</link> <replaceable>$cert_der</replaceable></code></para></entry>
              <entry><para>The DER-encoded binary representation of the X509 certificate.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by SSLCertificate::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLCERTIFICATE-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument, unable to parse file, etc</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_destructor">
      <title>SSLCertificate::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the SSLCertificate object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $cert;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="SSLCertificate_copy">
      <title>SSLCertificate::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by SSLCertificate::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLCERTIFICATE-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPEM">
      <title>SSLCertificate::getPEM()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string in PEM format representing the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getPEM">SSLCertificate::getPEM</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$pem_str = $cert.getPEM();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getPEM()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>A string in PEM format representing the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getVersion">
      <title>SSLCertificate::getVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version of the certificate as an integer.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getVersion">SSLCertificate::getVersion</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $cert.getVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The version of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSignatureType">
      <title>SSLCertificate::getSignatureType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the signature type of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getSignatureType">SSLCertificate::getSignatureType</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $cert.getSignatureType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getSignatureType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>The signature type of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSignature">
      <title>SSLCertificate::getSignature()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a binary object representing the signature of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getSignature">SSLCertificate::getSignature</link>() <command>returns</command> <link linkend="binary_type">binary</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bin = $cert.getSignature();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getSignature()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="binary_type">binary</link></code></para>
              </entry>
              <entry>
                <para>The signature data for the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPublicKeyAlgorithm">
      <title>SSLCertificate::getPublicKeyAlgorithm()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns name of the public key algorithm of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getPublicKeyAlgorithm">SSLCertificate::getPublicKeyAlgorithm</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $cert.getPublicKeyAlgorithm();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getPublicKeyAlgorithm()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>The name of the public key algorithm of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPublicKey">
      <title>SSLCertificate::getPublicKey()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a binary object representing the public key of the certificate in DER (Distinguished Encoding Rules) format.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getPublicKey">SSLCertificate::getPublicKey</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bin = $cert.getPublicKey();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getPublicKey()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="binary_type">binary</link></code></para>
              </entry>
              <entry>
                <para>The public key of the certificate in DER format.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSubjectHash">
      <title>SSLCertificate::getSubjectHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of strings representing the subject information of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getSubjectHash">SSLCertificate::getSubjectHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getSubjectHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getSubjectHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>Key-value pairs representing the subject information of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getIssuerHash">
      <title>SSLCertificate::getIssuerHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of strings representing the issuer information of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getIssuerHash">SSLCertificate::getIssuerHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getIssuerHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLCertificate::getIssuerHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>Key-value pairs representing the issuer information of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSerialNumber">
      <title>SSLCertificate::getSerialNumber()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the integer serial number of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getSerialNumber">SSLCertificate::getSerialNumber</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getIssuerHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for SSLCertificate::getSerialNumber()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The serial number of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPurposeHash">
      <title>SSLCertificate::getPurposeHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of booleans representing the allowed purposes of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getPurposeHash">SSLCertificate::getPurposeHash</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getPurposeHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLCertificate::getPurposeHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>Key-value pairs representing the allowed purposes of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getNotBeforeDate">
      <title>SSLCertificate::getNotBeforeDate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date/time value representing the start date of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getNotBeforeDate">SSLCertificate::getNotBeforeDate</link>() <command>returns</command> <link linkend="date_type">date</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$date = $cert.getNotBeforeDate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLCertificate::getNotBeforeDate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="date_type">date</link></code></para>
              </entry>
              <entry>
                <para>The start date of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getNotAfterDate">
      <title>SSLCertificate::getNotAfterDate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date/time value representing the end date of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getNotAfterDate">SSLCertificate::getNotAfterDate</link>() <command>returns</command> <link linkend="date_type">date</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$date = $cert.getNotAfterDate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLCertificate::getNotAfterDate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="date_type">date</link></code></para>
              </entry>
              <entry>
                <para>The end date of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getInfo">
      <title>SSLCertificate::getInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of all information for the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="SSLCertificate_getInfo">SSLCertificate::getInfo</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getInfo();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Return Values for SSLCertificate::getInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="hash_type">hash</link></code></para>
              </entry>
              <entry>
                <para>Keys are 'version', 'serialNumber', 'subject', 'issuer', 'purposes', 'notBefore', 'notAfter', 'signatureType', 'signature', and 'publicKey' corresponding to the respective attributes of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="TimeZone_Class">
    <title>TimeZone Class</title>

    <para>The TimeZone class provides access to time zone functionality.</para>
    <para>TimeZone objects based on zoneinfo region files can have daylight savings time information; those based on UTC offsets have none.</para>

    <table>
      <title>TimeZone Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::constructor">TimeZone::constructor</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>)</code></para>
              <para><code><link linkend="TimeZone::constructor">TimeZone::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the TimeZone object based on the region name (ex: &quot;America/Chicago&quot;) or the number of seconds east of UTC (3600 = UTC +01).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::destructor">TimeZone::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the TimeZone object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::copy">TimeZone::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a copy of the TimeZone object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::UTCOffset">TimeZone::UTCOffset</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of seconds east of UTC for the zone; negative numbers indicate a zone west of UTC.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::hasDST">TimeZone::hasDST</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> if the current zone has daylight saving's time rules, <code>False</code> if not.  TimeZone objects based on zoneinfo region files can have (but do not necessarily have) daylight savings time information; those based on UTC offsets have none.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::region">TimeZone::region</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the region name as a string; if the current zone is based on a UTC offset, then the UTC offset is returned as a string like &quot;+01:00&quot;.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::date">TimeZone::date</link>(<link linkend="softint_type">softint</link> <replaceable>$secs</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$us</replaceable> = 0) <command>returns</command> <link linkend="date_type">date</link></code></para>
              <para><code><link linkend="TimeZone::date">TimeZone::date</link>(<link linkend="date_type">date</link> <replaceable>$date</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the equivalent date in the current time zone; when using integer arguments, offsets are in seconds and microseconds from 1970-01-01Z.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::dateMs">TimeZone::dateMs</link>(<link linkend="softint_type">softint</link> <replaceable>$ms</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a date in the object's zone based on an offset in milliseconds from 1970-01-01Z.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="TimeZone::dateUs">TimeZone::dateUs</link>(<link linkend="softint_type">softint</link> <replaceable>$us</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a date in the object's zone based on an offset in microseconds from 1970-01-01Z.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><command>static</command> <link linkend="TimeZone::get">TimeZone::get</link>() <command>returns</command> <link linkend="TimeZone_Class">TimeZone</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the default time zone for the current execution context.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><command>static</command> <link linkend="TimeZone::set">TimeZone::set</link>(<link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the default time zone for the current execution context.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><command>static</command> <link linkend="TimeZone::setUTCOffset">TimeZone::setUTCOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	    </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the default time zone for the current execution context based on the number of seconds east of UTC; for zones west of UTC, use negative numbers.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><command>static</command> <link linkend="TimeZone::setRegion">TimeZone::setRegion</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	    </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the default time zone for the current execution context from a zoneinfo region file; if there are errors reading or parsing the file, an exception is thrown.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="TimeZone::constructor">
      <title>TimeZone::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the TimeZone object based on the region name (ex: &quot;America/Chicago&quot;) or the UTC offset passed as the number of seconds east of UTC for the zone.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="TimeZone::constructor">TimeZone::constructor</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>)</code></para>
              <para><code><link linkend="TimeZone::constructor">TimeZone::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> TimeZone $tz("Europe/Prague");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TimeZone::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$region</replaceable></code></para></entry>
	      <entry><para>The region name for the time zone (ex: &quot;America/Chicago&quot;); if the zoneinfo file for the region cannot be found or parsed, then an exception is thrown.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable></code></para></entry>
	      <entry><para>The number of seconds east of UTC for the time zone; for zones west of UTC, use negative numbers.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by TimeZone::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TZINFO-ERROR</code></para></entry>
	      <entry><para>Unable to read zoneinfo file; invalid file magic; error parsing zoneinfo file, etc</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="TimeZone::destructor">
      <title>TimeZone::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the TimeZone object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $tz;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="TimeZone::copy">
      <title>TimeZone::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a copy of the TimeZone object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>my</command> TimeZone $newzone = $tz.copy();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="TimeZone::UTCOffset">
      <title>TimeZone::UTCOffset()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the number of seconds east of UTC for the zone; negative numbers indicate a zone west of UTC.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::UTCOffset">TimeZone::UTCOffset</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> int $offset = $tz.UTCOffset();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::UTCOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>Returns the number of seconds east of UTC for the zone; negative numbers indicate a zone west of UTC.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::hasDST">
      <title>TimeZone::hasDST()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the current zone has daylight saving's time rules, <code>False</code> if not.  TimeZone objects based on zoneinfo region files can have (but do not necessarily have) daylight savings time information; those based on UTC offsets have none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::hasDST">TimeZone::hasDST</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> bool $hasdst = $tz.hasDST();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::hasDST()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry><para>Returns <code>True</code> if the current zone has daylight saving's time rules, <code>False</code> if not.  TimeZone objects based on zoneinfo region files can have (but do not necessarily have) daylight savings time information; those based on UTC offsets have none.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::region">
      <title>TimeZone::region()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the region name as a string; if the current zone is based on a UTC offset, then the UTC offset is returned as a string like &quot;+01:00&quot;.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::region">TimeZone::region</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> string $region = $tz.region();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::region()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry><para>Returns the region name as a string; if the current zone is based on a UTC offset, then the UTC offset is returned as a string like &quot;+01:00&quot;.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::date">
      <title>TimeZone::date()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the equivalent date in the current time zone; when using integer arguments, offsets are in seconds and microseconds from 1970-01-01Z.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::date">TimeZone::date</link>(<link linkend="softint_type">softint</link> <replaceable>$secs</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$us</replaceable> = 0) <command>returns</command> <link linkend="date_type">date</link></code></para>
              <para><code><link linkend="TimeZone::date">TimeZone::date</link>(<link linkend="date_type">date</link> <replaceable>$date</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> date $dt = $tz.date($other);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TimeZone::set()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$secs</replaceable>, <link linkend="softint_type">softint</link> <replaceable>$us</replaceable> = 0</code></para></entry>
	      <entry><para>Offset in seconds and microseconds from 1970-01-01Z.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="date_type">date</link> <replaceable>$date</replaceable></code></para></entry>
	      <entry><para>A date that will be used to create the date in the time zone of the objects; the same point in time will be returned but in the time zone of the object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
        <title>Return Values for TimeZone::date()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="date_type">date</link></code></para></entry>
              <entry><para>Returns the equivalent date in the current time zone; when using integer arguments, offsets are in seconds and microseconds from 1970-01-01Z.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::dateMs">
      <title>TimeZone::dateMs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date in the object's zone based on an offsets in milliseconds from 1970-01-01Z.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::dateMs">TimeZone::dateMs</link>(<link linkend="softint_type">softint</link> <replaceable>$ms</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> date $dt = $tz.dateMs($ms);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::dateMs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="date_type">date</link></code></para>
              </entry>
              <entry><para>Returns a date in the object's zone based on an offsets in milliseconds from 1970-01-01Z.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::dateUs">
      <title>TimeZone::dateUs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date in the object's zone based on an offset in microseconds from 1970-01-01Z.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="TimeZone::dateUs">TimeZone::dateUs</link>(<link linkend="softint_type">softint</link> <replaceable>$us</replaceable>) <command>returns</command> <link linkend="date_type">date</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> date $dt = $tz.dateUs($us);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::dateUs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="date_type">date</link></code></para>
              </entry>
              <entry><para>Returns a date in the object's zone based on an offset in microseconds from 1970-01-01Z.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::get">
      <title>TimeZone::get()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the default time zone for the current execution context.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><command>static</command> <link linkend="TimeZone::get">TimeZone::get</link>() <command>returns</command> <link linkend="TimeZone_Class">TimeZone</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> TimeZone $tz = TimeZone::get();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for TimeZone::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="TimeZone_Class">TimeZone</link></code></para>
              </entry>
              <entry><para>Returns the default time zone for the current execution context.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="TimeZone::set">
      <title>TimeZone::set()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default time zone for the current execution context.</para>
	    <para>See also <link linkend="Program_setTimeZone">Program::setTimeZone()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><command>static</command> <link linkend="TimeZone::set">TimeZone::set</link>(<link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>TimeZone::set($zone);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TimeZone::set()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="TimeZone_Class">TimeZone</link> <replaceable>$zone</replaceable></code></para></entry>
	      <entry><para>The default time zone to set for the current execution context.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="TimeZone::setUTCOffset">
      <title>TimeZone::setUTCOffset()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default time zone for the current execution context based on the number of seconds east of UTC; for zones west of UTC, use negative numbers.</para>
	    <para>Time zones set with this method cannot have any daylight savings time information; to set a zone with daylight savings time information, use <link linkend="TimeZone::setRegion">TimeZone::setRegion()</link> instead.</para>
	    <para>See also <link linkend="Program_setTimeZoneUTCOffset">Program::setTimeZoneUTCOffset()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><command>static</command> <link linkend="TimeZone::setUTCOffset">TimeZone::setUTCOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <para>The following examples are all equivalent, setting the time zone to +02 UTC:</para>
            <programlisting>TimeZone::setUTCOffset(7200);</programlisting>
            <programlisting>TimeZone::setUTCOffset(2h);</programlisting>
            <programlisting>TimeZone::setUTCOffset(PT2H);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TimeZone::setUTCOffset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$secs_east</replaceable></code></para></entry>
	      <entry><para>The number of seconds east of UTC; for zones west of UTC, use negative numbers</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="TimeZone::setRegion">
      <title>static TimeZone::setRegion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default time zone for the current execution context from a zoneinfo region file; if there are errors reading or parsing the file, an exception is thrown.</para>
	    <para>See also <link linkend="Program_setTimeZoneRegion">Program::setTimeZoneRegion()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><command>static</command> <link linkend="TimeZone::setRegion">TimeZone::setRegion</link>(<link linkend="string_type">string</link> <replaceable>$region</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>TimeZone::setRegion("Europe/Prague");</programlisting>
          </listitem>
        </varlistentry>
	<varlistentry>
	  <term>Restrictions</term>
	  <listitem>
	    <para>Not available with <code><link linkend="no-locale-control">PO_NO_LOCALE_CONTROL</link></code></para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TimeZone::setRegion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$region</replaceable></code></para></entry>
	      <entry><para>The region name for the time zone (ex: &quot;America/Chicago&quot;); if the zoneinfo file for the region cannot be found or parsed, then an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by TimeZone::setRegion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TZINFO-ERROR</code></para></entry>
	      <entry><para>Unable to read zoneinfo file; invalid file magic; error parsing zoneinfo file, etc</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="Qore_SQL_Constants">
    <title>SQL Constants</title>

    <table>
      <title>Database Driver Constants in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><code>SQL::DSOracle</code></para></entry>
	    <entry><para><code>&quot;oracle&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>oracle</code> driver should be used by  <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSMySQL</code></para></entry>
	    <entry><para><code>&quot;mysql&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>mysql</code> driver should be used by <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSPGSQL</code></para></entry>
	    <entry><para><code>&quot;pgsql&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>pgsql</code> driver should be used by  <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSSybase</code></para></entry>
	    <entry><para><code>&quot;sybase&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>sybase</code> driver should be used by <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSFreeTDS, SQL::MSSQL</code></para></entry>
	    <entry><para><code>&quot;freetds&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>freetds</code> driver should be used by <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DB2</code></para></entry>
	    <entry><para><code>&quot;db2&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>db2</code> driver should be used by <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSSQLite3</code></para></entry>
	    <entry><para><code>&quot;sqlite3&quot;</code></para></entry>
	    <entry><para>Indicates that the <code>sqlite3</code> driver should be used by <link linkend="Datasource::constructor">Datasource::constructor()</link> and <link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <table>
      <title>Placeholder Bind Constants in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para>SQL::VARCHAR</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a string buffer</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::CLOB</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a CLOB string buffer.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::BLOB</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a binary buffer.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DATE</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a date-time buffer.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <table id="DBI_Capability_Constants">
      <title>DBI Capability Constant Codes in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para>SQL::DBI_CAP_CHARSET_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports proper character encoding conversions.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_TRANSACTION_MANAGEMENT</para></entry>
	    <entry><para>Indicates that the DBI driver supports transaction management.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_STORED_PROCEDURES</para></entry>
	    <entry><para>Indicates that the DBI driver supports stored procedure execution.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_LOB_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports *LOB columns.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_BIND_BY_VALUE</para></entry>
	    <entry><para>Indicates that the DBI driver supports directly binding qore values into queries using the %v placeholder in the query string.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_BIND_BY_PLACEHOLDER</para></entry>
	    <entry><para>Indicates that the DBI driver supports binding placeholder buffers when executing SQL to retrieve data from queries and procedures, etc.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Datasource_Class">
    <title>SQL::Datasource Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-database">PO_NO_DATABASE</link></code> parse option.</para>

    <para>The Datasource class is the high-level Qore interface to Qore's DBI layer, and as such, Datasource objects allow Qore programs to access databases that have a Qore DBI driver.  The Datasource class will attempt to load any DBI driver that is not currently loaded in the <link linkend="Datasource::constructor">constructor</link>.  For connection pooling support, see the <link linkend="DatasourcePool_Class">DatasourcePool</link> class.</para>

    <para>Datasource objects will implicitly call <link linkend="Datasource::open">Datasource::open()</link> if no connection has yet been established and a method is called requiring a connection to the database server.  Therefore any method that requires communication with the database server can also throw any exception that the open method can throw.</para>

    <para>Some Qore DBI drivers allow &quot;select&quot; queries to be executed through the <link linkend="Datasource::exec">Datasource::exec()</link> method, and allow SQL commands (procedure calls, etc) to be executed through the <link linkend="Datasource::select">Datasource::select()</link> method, and some DBI drivers do not (depends on the underlying DB API).  At any rate, the transaction lock is set when auto-commit is disabled and when the <link linkend="Datasource::exec">Datasource::exec()</link> or  <link linkend="Datasource::beginTransaction">Datasource::beginTransaction()</link> methods are executed as documented above.  Therefore executing a transaction relevant command through the  <link linkend="Datasource::select">Datasource::select()</link> method while auto-commit mode is disabled and a transaction has not yet started will not result in the transaction lock being allocated to the current thread and therefore could cause transaction errors when sharing the Datasource object between multiple threads.</para>

    <para>Only databases with an existing Qore DBI driver can be accessed through the Qore Datasource class.</para>

   <para>All Qore DBI drivers set new connections to use transaction isolation level &quot;read committed&quot;.</para>

   <para>The Datasource class provides consistent, high-level, per-connection locking on requests at a level above the DBI drivers to ensure that the communication between clients and servers is properly serialized.</para>

   <sect2 id="datasource_binding">
     <title>Datasource Binding By Value and By Placeholder</title>

     <para>All Datasource methods accepting SQL strings to execute understand a special syntax used in the query string to bind Qore data by value and to specify placeholders for output variables (for example, when executing a stored procedure or database function).  Placeholder binding is DBI driver specific, but binding by value is supported with the same syntax in all drivers.  Additionally, the <code>%d</code> numeric specifier is supported equally in all Qore DBI drivers.</para>

    <table>
      <title>Datasource Format Specifiers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Format Specification</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>%d</code></para></entry>
	    <entry><para>If any value other than <command><link linkend="NOTHING">NOTHING</link></command> or <command><link linkend="NULL">NULL</link></command> is given, then the value is converted to an integer and this value is substituted in the string at this position; if the value is <command><link linkend="NOTHING">NOTHING</link></command> or <command><link linkend="NULL">NULL</link></command>, then a literal 'null' is substituted instead.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>%s</code></para></entry>
	    <entry><para>The argument is converted to a string and the string is inserted literally without any conversion or escape sequences in the string; this is useful for table or schema prefixes, etc</para></entry>
	  </row>
	  <row>
	    <entry><para><code>%v</code></para></entry>
	    <entry><para>The argument is bound by value according to the DBI driver's implementation.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

     <para>To bind qore data values directly in a binary format in an SQL command, use <code>%v</code> in the command string, and include the value as an argument after the string.  Binding by value means that Qore's DBI driver will take care of formatting the data properly for use in the query with the database server.  That means that strings do not need to be quoted, date/time values do not need special formatting, binary object (with BLOB columns, for example) can be used directly in queries, etc.</para>

     <para>Here is an example:</para>

     <programlisting>$rows = $pool.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col)
values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>

     <para>To insert a numeric value or a literal 'null' in a query, use <code>%d</code> in the command string, and include the value as an argument after the string.  If the value is <command><link linkend="NOTHING">NOTHING</link></command> or NULL, a literal 'null' will be written to the string; otherwise the argument is converted to a floating-point value or integer if necessary and written to the string.  This is useful for working with DECIMAL (NUMERIC, NUMBER) types in a database-independent way; for example PostgreSQL servers do not do type conversions to DECIMAL types when a string, integer, or float is bound by value, therefore to ensure that integral decimal values can be used in a database-independent way (with 'null' substitution when no value is bound), it's best to use the <code>%d</code> code in the command string instead of <code>%v</code>.</para>

     <para>For binding placeholders for output variables, write a unique name in the string and prefix it with a colon (ex: <code>:code</code>).  In this case the method will return a hash of the output variables using the placeholder names as keys, but without the colon prefix.  By default, a string type will be bound to the position.  To bind other variable types to placeholder positions, include the type constant (see <link linkend="Qore_Type_Constants">Type Constants</link>) as an argument after the command string.  For BLOBs, use Binary, for CLOBs, use the string "clob" (constants will be provided in a future release).  Not all DBI drivers require placeholder buffer specifications; see the documentation for the DBI driver in question for more information and examples regarding placeholder buffer specifications.</para>

   </sect2>

    <sect2 id="datasource_transaction_lock">
      <title>Datasource Transaction Locks</title>

      <para>Datasource objects have an internal transaction lock which will be grabbed when the <link linkend="Datasource::exec">Datasource::exec()</link>, <link linkend="Datasource::vexec">Datasource::vexec()</link> <link linkend="Datasource::execRaw">Datasource::execRaw()</link>, or <link linkend="Datasource::beginTransaction">Datasource::beginTransaction()</link> methods are executed and autocommit is not enabled.  This enables a single datasource to be safely used for transaction management by several threads simultaneously. Note that an exception in a Datasource method that would acquire the lock (such as the Datasource::exec() method) when it's not already held, will have the effect that the transaction lock is not acquired.</para>

      <para>Any thread attempting to do transaction-relevant actions on a Datasource with auto-commit disabled while a transaction is in progress by another thread will block until the thread currently executing a transaction executes the <link linkend="Datasource::commit">Datasource::commit()</link> or <link linkend="Datasource::rollback">Datasource::rollback()</link> methods (or the Datasource is deleted, reset, or closed, in which case the lock is released and an exception is raised as well).</para>

      <para>There is a timeout associated with the transaction lock; if a thread waits for the transaction lock for more than the timeout period, then an exception will be raised in the waiting thread. The timeout value can be read and changed with the <link linkend="Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout()</link> and <link linkend="Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout()</link> methods, respectively. The default transaction lock timeout value is 120 seconds.</para>
    </sect2>

    <table>
      <title>SQL::Datasource Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::constructor">Datasource::constructor</link>(<link linkend="string_type">string</link> <replaceable>$driver</replaceable>, <link linkend="string_type">string</link> <replaceable>$user</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$host</replaceable> = "", <link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0)</code></para>
              <para><code><link linkend="Datasource::constructor">Datasource::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$params</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the Datasource object; attempts to load a DBI driver if the driver is not already present in Qore.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::destructor">Datasource::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::copy">Datasource::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::open">Datasource::open</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a connection to a database; an exception is thrown if any errors occur.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::close">Datasource::close</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the connection to the database; an exception is thrown if any errors occur.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::commit">Datasource::commit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits the transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>; an exception is thrown if any errors occur.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::rollback">Datasource::rollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back the transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>; an exception is thrown if any errors occur.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setAutoCommit">Datasource::setAutoCommit</link>(<link linkend="softbool_type">softbool</link> <replaceable>$b</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Turns autocommit on or off for this object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::exec">Datasource::exec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::exec">Datasource::exec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::execRaw">Datasource::execRaw</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code (like <link linkend="Datasource::exec">Datasource::exec()</link>) on the DB connection without any variable binding.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection, taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::select">Datasource::select</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::select">Datasource::select</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::selectRow">Datasource::selectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::selectRow">Datasource::selectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::selectRows">Datasource::selectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::selectRows">Datasource::selectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::beginTransaction">Datasource::beginTransaction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Manually grabs the <link linkend="datasource_transaction_lock">transaction lock</link></para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setUserName">Datasource::setUserName</link>(<link linkend="string_type">string</link> <replaceable>$user</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setUserName">Datasource::setUserName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the username parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getUserName">Datasource::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the username parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setPassword">Datasource::setPassword</link>(<link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setPassword">Datasource::setPassword</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the password parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getPassword">Datasource::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the password parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setDBName">Datasource::setDBName</link>(<link linkend="string_type">string</link> <replaceable>$db</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setDBName">Datasource::setDBName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the DB name parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getDBName">Datasource::getDBName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the dbname parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setDBCharset">Datasource::setDBCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setDBCharset">Datasource::setDBCharset</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the charset (encoding) parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getDBCharset">Datasource::getDBCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the DBI driver specific charset name for the current connection as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getOSCharset">Datasource::getOSCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the Qore charset name for the current connection as a string or <code>&quot;(unknown)&quot;</code> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setHostName">Datasource::setHostName</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setHostName">Datasource::setHostName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the hostname parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getHostName">Datasource::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the hostname parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setPort">Datasource::setPort</link>(<link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the port parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getPort">Datasource::getPort</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the port parameter as an int or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getDriverName">Datasource::getDriverName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the name of the driver used for the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds.  Set to 0 for no timeout.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Retrieves the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value as an integer in milliseconds.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getServerVersion">Datasource::getServerVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific server version data for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Datasource::getClientVersion">Datasource::getClientVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific client library version data.  Not implemented by all drivers.</para></entry>
	  </row>

	  <row>
	    <entry>
              <para><code><link linkend="Datasource::inTransaction">Datasource::inTransaction</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> if a transaction is in progress, <code>False</code> if not.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="Datasource::constructor">
      <title>Datasource::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a Datasource object. The constructor variant taking separate arguments requires the datasource type as the first argument, while most other parameters are optional.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::constructor">Datasource::constructor</link>(<link linkend="string_type">string</link> <replaceable>$driver</replaceable>, <link linkend="string_type">string</link> <replaceable>$user</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$host</replaceable> = "", <link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0)</code></para>
              <para><code><link linkend="Datasource::constructor">Datasource::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$params</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Datasource $db(DSPGSQL, "user", "pass", "database", "utf8", "localhost", 5432);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::constructor(string $driver, string $user = "", string $pass = "", $dbname = "", string $encoding = "", string $host = "", softint $port = 0) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$driver</replaceable></code></para></entry>
	      <entry><para>The name of the DBI driver for the Datasource.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$user</replaceable> = ""</code></para></entry>
	      <entry><para>The user name for the new connection.  Also see <link linkend="Datasource::setUserName">Datasource::setUserName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$pass</replaceable> = ""</code></para></entry>
	      <entry><para>The password for the new connection.  Also see <link linkend="Datasource::setPassword">Datasource::setPassword()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = ""</code></para></entry>
	      <entry><para>The database name for the new connection.  Also see <link linkend="Datasource::setDBName">Datasource::setDBName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = ""</code></para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new connection.  Also see <link linkend="Datasource::setDBCharset">Datasource::setDBCharset()</link> for a method that allows this parameter to be set after the constructor.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable> = ""</code></para></entry>
	      <entry><para>The host name for the new connection.  Also see <link linkend="Datasource::setHostName">Datasource::setHostName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0</code></para></entry>
	      <entry><para>The port number for the new connection.  Also see <link linkend="Datasource::setPort">Datasource::setPort()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Arguments for Datasource::constructor(hash $params) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>params</replaceable></code></para></entry>
	      <entry><para>A hash of parameters for the Datasource; see <link linkend="Datasource_Constructor_Hash">Datasource Constructor Hash</link> for more information.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table id="Datasource_Constructor_Hash">
	<title>Datasource Constructor Hash</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Key</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>type</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The name of the database driver to use; this key is mandatory; if not present, an exception will be raised.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>user</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The user name for the new connection.  Also see <link linkend="Datasource::setUserName">Datasource::setUserName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>pass</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The password for the new connection.  Also see <link linkend="Datasource::setPassword">Datasource::setPassword()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>db</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The database name for the new connection.  Also see <link linkend="Datasource::setDBName">Datasource::setDBName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>charset</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new connection.  Also see <link linkend="Datasource::setDBCharset">Datasource::setDBCharset()</link> for a method that allows this parameter to be set after the constructor.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>host</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The host name for the new connection.  Also see <link linkend="Datasource::setHostName">Datasource::setHostName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>port</code></para></entry>
	      <entry><para><code><link linkend="softint_type">softint</link></code></para></entry>
	      <entry><para>The port number for the new connection. Also see Datasource::setPort() for a method that allows this parameter to be set after the constructor.  If this key is present and is 0 then an exception will be raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCE-PARAMETER-EEROR</code></para></entry>
	      <entry><para>Missing DBI driver identifier as first argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DATASOURCE-UNSUPPORTED-DATABASE</code></para></entry>
	      <entry><para>Could not load a driver for the database identified.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::destructor">
      <title>Datasource::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the datasource if it's open (if any operations are in progress, will block until the operations complete) and destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $db;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCE-TRANSACTION-EXCEPTION</code></para></entry>
	      <entry><para>The Datasource was destroyed while a transaction was still in progress; the transaction will be automatically rolled back.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::copy">
      <title>Datasource::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Datasource $new_ds = $ds.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Datasource::beginTransaction">
      <title>Datasource::beginTransaction()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Manually grabs the <link linkend="datasource_transaction_lock">transaction lock</link>.  This method should be called when the Datasource object will be shared between more than 1 thread, and a transaction will be started with a <link linkend="Datasource::select">Datasource::select()</link> method.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::beginTransaction">Datasource::beginTransaction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.beginTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOCOMMIT-ERROR</code></para></entry>
	      <entry><para>Cannot start a transaction when autocommit is enabled.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::open">
      <title>Datasource::open()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens a connection to the datasouce, using the connection parameters already set.  If any errors are encountered, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::open">Datasource::open</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.open();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::close">
      <title>Datasource::close()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the connection to the database.  If any actions are in progress on the database, the close call will block until the actions complete.  If any errors are encountered, an exception is raised.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::close">Datasource::close</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.close();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Datasource::commit">
      <title>Datasource::commit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits the current transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::commit">Datasource::commit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.commit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::inTransaction">
      <title>Datasource::inTransaction()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> if the Datasource is currently in a transaction (has the transaction lock allocated to the calling thread), <code>False</code> if not.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::inTransaction">Datasource::inTransaction</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $is_trans = $db.inTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for Datasource::inTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>Returns <code>True</code> if the Datasource is currently in a transaction (has the transaction lock allocated to the calling thread), <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::rollback">
      <title>Datasource::rollback()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back the current transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::rollback">Datasource::rollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.rollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::setAutoCommit">
      <title>Datasource::setAutoCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Turns autocommit on or off for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setAutoCommit">Datasource::setAutoCommit</link>(<link linkend="softbool_type">softbool</link> <replaceable>$b</replaceable> = True) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setAutoCommit(<code>False</code>);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setAutoCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softbool_type">softbool</link> <replaceable>$b</replaceable> = True</code></para></entry>
	      <entry><para>True to turn on autocommit (a commit will be executed after every <link linkend="Datasource::exec">Datasource::exec()</link>), <code>False</code> to turn off autocommit (commits must be manually triggered).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::exec">
      <title>Datasource::exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Grabs the <link linkend="datasource_transaction_lock">transaction lock</link> (if autocommit is disabled) and executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::exec">Datasource::exec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::exec">Datasource::exec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col)
values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally, for commands with placeholders, a <link linkend="hash_type">hash</link> is returned holding the values acquired from executing the SQL statement.  For all other commands, normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::execRaw">
      <title>Datasource::execRaw()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Grabs the <link linkend="datasource_transaction_lock">transaction lock</link> (if autocommit is disabled) and executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).</para>
	    <para>This method does not do any variable binding, so it's useful for example for DDL statements etc.</para>
	    <warning><para>Using this method for OLTP statements can affect the application performance. See used DB server documentation for variable binding.</para></warning>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::exec">Datasource::execRaw</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $db.exec("create table my_tab (id number, some_text varchar2(30))");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::execRaw()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::execRaw()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::execRaw()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::vexec">
      <title>Datasource::vexec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="Datasource::exec">Datasource::exec()</link> method, except this method takes a single argument after the SQL command giving the list of bind parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vexec">Datasource::vexec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $db.vexec("insert into example_table value (%v, %v, %v)", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally, for commands with placeholders, a <link linkend="hash_type">hash</link> is returned holding the values acquired from executing the SQL statement.  For all other commands, normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::select">
      <title>Datasource::select()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a hash (column names) of lists (rows).  This format is suitable for use with <link linkend="context_Statements"><command>context</command> Statements</link>, for easy iteration and processing of query results.  Additionally, this format is more efficient format than that returned by the <link linkend="Datasource::selectRows">Datasource::selectRows()</link> method, because the column names are not repeated for each row returned.  Therefore, for retrieving anything greater than small amounts of data, it is recommended to use this method instead of <link linkend="Datasource::selectRows">Datasource::selectRows()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::select">Datasource::select</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::select">Datasource::select</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># bind a string and a date/time value by value in a query
$query = $db.select("select * from table where varchar_column = %v and timestamp_column > %v", $string, 2007-10-11T15:31:26.289);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of <link linkend="list_type">list</link> (each hash key's value is a list giving the row data), however some DBI drivers allow any SQL to be executed through this method, in which case also <link linkend="int_type">int</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::vselect">
      <title>Datasource::vselect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="Datasource::select">Datasource::select()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselect">Datasource::vselect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$query = $db.vselect("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of <link linkend="list_type">list</link> (each hash key's value is a list giving the row data), however some DBI drivers allow any SQL to be executed through this method, in which case also <link linkend="int_type">int</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::selectRow">
      <title>Datasource::selectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the first row as a hash (the column values).  If more than one row is returned, then all but the first row are discarded.  For a similar method taking a list for all bind arguments, see <link linkend="Datasource::vselectRow">Datasource::vselectRow()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::selectRow">Datasource::selectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::selectRow">Datasource::selectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.selectRow("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of row data or <link linkend="nothing_type">nothing</link> if no row is found for the query.  However, DBI could return other types (all known drivers at the time of writing this documentation only return <link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::vselectRow">
      <title>Datasource::vselectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="Datasource::selectRow">Datasource::selectRow()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRow">Datasource::vselectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.vselectRow("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of row data or <link linkend="nothing_type">nothing</link> if no row is found for the query.  However, DBI could return other types (all known drivers at the time of writing this documentation only return <link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::selectRows">
      <title>Datasource::selectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a list (rows) of hashes (the column values).  This format is not as efficient as that returned by the <link linkend="Datasource::select">Datasource::select()</link> method, therefore for larger amounts of data, it is recommended to use <link linkend="Datasource::select">Datasource::select()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::selectRows">Datasource::selectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::selectRows">Datasource::selectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.selectRows("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link> (where the keys are the column names of each row) or <link linkend="nothing_type">nothing</link> if no rows are found for the query.  However, DBI could return other types; for DBI drivers that allow executing generic SQL through this method, any result sets returns should also be in the format <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::vselectRows">
      <title>Datasource::vselectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="Datasource::selectRows">Datasource::selectRows()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="Datasource::vselectRows">Datasource::vselectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.vselectRows("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link> (where the keys are the column names of each row) or <link linkend="nothing_type">nothing</link> if no rows are found for the query.  However, DBI could return other types; for DBI drivers that allow executing generic SQL through this method, any result sets returns should also be in the format <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::setTransactionLockTimeout">
      <title>Datasource::setTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds; set to 0 for no timeout.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setTransactionLockTimeout(5m); # <link linkend="datasource_transaction_lock">transaction lock</link> timeout set to 5 minutes</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>The timeout value to set in milliseconds.  For no timeout, set to 0.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Datasource::getTransactionLockTimeout">
      <title>Datasource::getTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value as an integer in milliseconds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $db.getTransactionLockTimeout();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setUserName">
      <title>Datasource::setUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username to use for the connection.  Invalid usernames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setUserName">Datasource::setUserName</link>(<link linkend="string_type">string</link> <replaceable>$user</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setUserName">Datasource::setUserName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setUserName("user");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$user</replaceable></code></para></entry>
	      <entry><para>The username to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::getUserName">
      <title>Datasource::getUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the username parameter for connections to the database.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getUserName">Datasource::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The username connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if no value is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setPassword">
      <title>Datasource::setPassword()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the password to use for the connection.  Invalid passwords will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setPassword">Datasource::setPassword</link>(<link linkend="string_type">string</link> <replaceable>$pass</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setPassword">Datasource::setPassword</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setPassword("pass");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$pass</replaceable></code></para></entry>
	      <entry><para>The password name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::getPassword">
      <title>Datasource::getPassword()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the password connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getPassword">Datasource::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the password connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setDBName">
      <title>Datasource::setDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database name to use for the connection.  Invalid database names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setDBName">Datasource::setDBName</link>(<link linkend="string_type">string</link> <replaceable>$db</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setDBName">Datasource::setDBName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setDBName("database");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$db</replaceable></code></para></entry>
	      <entry><para>The database name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::getDBName">
      <title>Datasource::getDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the dbname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getDBName">Datasource::getDBName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getDBName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the password connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setDBCharset">
      <title>Datasource::setDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database-specific character encoding to use for the connection.  Invalid character encoding names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setDBCharset">Datasource::setDBCharset</link>(<link linkend="string_type">string</link> <replaceable>$encoding</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setDBCharset">Datasource::setDBCharset</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setDBCharset("ALU32UTF8"); # Oracle UTF-8 encoding equivalent</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$encoding</replaceable></code></para></entry>
	      <entry><para>The database-specific name for the encoding to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setHostName">
      <title>Datasource::setHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname to use for the connection (for DBI drivers that support this parameter, such as the <code>mysql</code> and <code>pgsql</code>, for example).  Invalid hostnames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setHostName">Datasource::setHostName</link>(<link linkend="string_type">string</link> <replaceable>$host</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Datasource::setHostName">Datasource::setHostName</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setHostName("localhost");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable></code></para></entry>
	      <entry><para>The hostname to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::setPort">
      <title>Datasource::setPort()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the port number to use for the connection (for DBI drivers that support this parameter, such as the <code>mysql</code>, <code>pgsql</code>, and <code>oracle</code> drivers, for example).  Invalid port numbers will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::setPort">Datasource::setPort</link>(<link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setPort(5432);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0</code></para></entry>
	      <entry><para>The port number to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Datasource::getDBCharset">
      <title>Datasource::getDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the database-specific charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getDBCharset">Datasource::getDBCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getDBCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the database-specific charset set encoding for the current connection or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Datasource::getOSCharset">
      <title>Datasource::getOSCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the Qore charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getOSCharset">Datasource::getOSCharset</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getOSCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getOSCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>Retrieves the Qore charset set encoding for the current connection or <code>&quot;unknown&quot;</code> if unknown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::getHostName">
      <title>Datasource::getHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the hostname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getHostName">Datasource::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the hostname connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::getPort">
      <title>Datasource::getPort()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the port connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getPort">Datasource::getPort</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$port = $db.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the port connection parameter or no value if no port is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::getDriverName">
      <title>Datasource::getDriverName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the DBI driver used for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getDriverName">Datasource::getDriverName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$name = $db.getDriverName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getDriverName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The name of the database driver used for this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Datasource::getServerVersion">
      <title>Datasource::getServerVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific server version information for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getServerVersion">Datasource::getServerVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $db.getServerVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getServerVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The return type and value depends on the driver; see the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Datasource::getClientVersion">
      <title>Datasource::getClientVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific client library version information.  Not implemented for all drivers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Datasource::getClientVersion">Datasource::getClientVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $db.getClientVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Datasource::getClientVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The return type and value depends on the driver; see the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="DatasourcePool_Class">
    <title>SQL::DatasourcePool Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-database">PO_NO_DATABASE</link></code> parse option.</para>

    <para>The DatasourcePool class provides transparent per-thread, per-transaction <link linkend="Datasource_Class">Datasource</link> connection pooling.</para>

    <para>In most cases, the DatasourcePool class can be used as a drop-in replacement for the <link linkend="Datasource_Class">Datasource</link> class with autocommit disabled; when a transaction begins, a datasource will be automatically assigned to the calling thread, and it will only be released when a commit or rollback is called on the object.  If no Datasource is available, the calling thread will block until a Datasource comes available.</para>

    <para>Note that the same principles apply to SQL and database driver usage as with the Datasource class, see the <link linkend="Datasource_Class">Datasource</link> class documentation for more information.</para>

    <para>The DatasourcePool class uses Qore's thread resource tracking infrastructure to raise an exception if a thread terminates while a connection is allocated to it.  If Qore user code enters a transaction with a DatasourcePool object and the thread terminates without closing the transaction (via <link linkend="DatasourcePool::commit">DatasourcePool::commit()</link> or <link linkend="DatasourcePool::rollback">DatasourcePool::rollback()</link>), an exception will automatically be raised, the transaction will be rolled back, and the Datasource connection will be freed to the pool.</para>

    <sect2 id="datasourcepool_allocations">
      <title>DatasourcePool Connection Allocations</title>

      <para>The following methods allocate a persistent connection to the calling thread: <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, and <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.  The connection is released to the pool when <link linkend="DatasourcePool::commit">DatasourcePool::commit()</link> or <link linkend="DatasourcePool::rollback">DatasourcePool::rollback()</link> are called (or in the case the thread terminates, in which case an exception is raised as well).</para>

      <para>To begin a transaction with one of the select methods (for example, with "select for update"), call <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link> first to manually dedicate a Datasource to the thread before calling the select method.  Otherwise statements that should be in the same transaction may be executed in different connections.</para>

      <para>Executing a DatasourcePool method while not in a transaction is realized by allocating a temporary connection to the calling thread which is re-released when the method returns.  No explicit commits are executed by the class, therefore it is an error to execute transaction-relevant commands without first calling <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

    </sect2>

    <table>
      <title>DatasourcePool Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::constructor">DatasourcePool::constructor</link>(<link linkend="string_type">string</link> <replaceable>$driver</replaceable>, <link linkend="string_type">string</link> <replaceable>$user</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$host</replaceable> = "", <link linkend="softint_type">softint</link> <replaceable>$min</replaceable> = DP_MIN, <link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = DP_MAX, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0)</code></para>
              <para><code><link linkend="DatasourcePool::constructor">DatasourcePool::constructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the DatasourcePool object; attempts to load a DBI driver if the driver is not already present in Qore.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::destructor">DatasourcePool::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::copy">DatasourcePool::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; currently DatasourcePool objects may not be copied.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::commit">DatasourcePool::commit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits the transaction and releases the connection to the pool.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::rollback">DatasourcePool::rollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back the transaction and releases the connection to the pool.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::exec">DatasourcePool::exec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::exec">DatasourcePool::exec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection and dedicates a connection to the calling thread.</para></entry>
	  </row>
          <row>
            <entry>
	      <para><code><link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry><para>Y</para></entry>
            <entry><para>Executes SQL code (like <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>) on the DB connection without any variable binding and dedicates a connection to the calling thread.</para></entry>
          </row>

	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection, taking a list for all bind arguments.  Dedicates a connection to the calling thread.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::select">DatasourcePool::select</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::select">DatasourcePool::select</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Manually allocates a persistent connection to the calling thread.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getUserName">DatasourcePool::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the username parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getPassword">DatasourcePool::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the password parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getDBName">DatasourcePool::getDBName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the dbname parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getDBCharset">DatasourcePool::getDBCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the DBI driver specific charset name for the current connection as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getOSCharset">DatasourcePool::getOSCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the Qore charset name for the current connection as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getHostName">DatasourcePool::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the hostname parameter as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getPort">DatasourcePool::getPort</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the port parameter as an integer or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getDriverName">DatasourcePool::getDriverName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the name of the database driver used for this object as a string.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getServerVersion">DatasourcePool::getServerVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific server version data for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::getClientVersion">DatasourcePool::getClientVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific client library version data.  Not implemented by all drivers.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="DatasourcePool::inTransaction">DatasourcePool::inTransaction</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns <code>True</code> if a transaction is in progress (and therefore a <link linkend="Datasource_Class">Datasource</link> form the pool is dedicated to the calling thread), <code>False</code> if not.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="DatasourcePool::constructor">
      <title>DatasourcePool::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a DatasourcePool object. The constructor taking separate arguments requires the database driver name as the first argument, and normally the dbname; the port number is supplied as the final parameter because support for the port number as a connection parameter was added after this class was already present in Qore.  The constructor variant taking a <link linkend="hash_type">hash</link> accepts a hash as produced from <link linkend="parseDatasource">parseDatasource()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::constructor">DatasourcePool::constructor</link>(<link linkend="string_type">string</link> <replaceable>$driver</replaceable>, <link linkend="string_type">string</link> <replaceable>$user</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$pass</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = "", <link linkend="string_type">string</link> <replaceable>$host</replaceable> = "", <link linkend="softint_type">softint</link> <replaceable>$min</replaceable> = DP_MIN, <link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = DP_MAX, <link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a Datasource pool to a PostgreSQL database, username="user", password="pass", dbname="database"
# use "utf8" for the character encoding for the connection, hostname="localhost", port=5432
# minimum 5 connections (opened immediately), with a maximum of 20
<command>my</command> DatasourcePool $pool(DSPGSQL, "user", "pass", "database", "utf8", "localhost", 5, 20, 5432);</programlisting>
	    <programlisting># same as above but using a hash argument with <link linkend="parseDatasource">parseDatasource()</link>
<command>my</command> DatasourcePool $pool(parseDatasource("pgsql:user/pass@database(utf8)%localhost:5432{min=5,max=20}"));</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::constructor(string $driver, string $user = "", string $pass = "", $dbname = "", string $encoding = "", string $host = "", softint $min = DP_MIN, softint $max = DP_MAX, softint $port = 0) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$driver</replaceable></code></para></entry>
	      <entry><para>The name of the DBI driver for the DatasourcePool.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$user</replaceable> = ""</code></para></entry>
	      <entry><para>The user name for the new pool.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$pass</replaceable> = ""</code></para></entry>
	      <entry><para>The password for the new pool.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$dbname</replaceable> = ""</code></para></entry>
	      <entry><para>The database name for the new pool.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$encoding</replaceable> = ""</code></para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new pool.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$host</replaceable> = ""</code></para></entry>
	      <entry><para>The host name for the new pool.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$min</replaceable> = DP_MIN</code></para></entry>
	      <entry><para>The minimum number of connections for the new pool; this number of connections will be opened immediately when the pool is created.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$max</replaceable> = DP_MAX</code></para></entry>
	      <entry><para>The maximum number of connections for the new pool; must be greater than or equal to <code><replaceable>$min</replaceable></code>.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$port</replaceable> = 0</code></para></entry>
	      <entry><para>The port number for the new pool.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Arguments for DatasourcePool::constructor(hash $params) Variant</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>params</replaceable></code></para></entry>
	      <entry><para>A hash of parameters for the DatasourcePool; see <link linkend="DatasourcePool_Constructor_Hash">DatasourcePool Constructor Hash</link> for more information.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table id="DatasourcePool_Constructor_Hash">
	<title>DatasourcePool Constructor Hash</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Key</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>type</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The name of the database driver to use; this key is mandatory; if not present, an exception will be raised.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>user</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The user name for the new connection.  Also see <link linkend="Datasource::setUserName">Datasource::setUserName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>pass</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The password for the new connection.  Also see <link linkend="Datasource::setPassword">Datasource::setPassword()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>db</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The database name for the new connection.  Also see <link linkend="Datasource::setDBName">Datasource::setDBName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>charset</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new connection.  Also see <link linkend="Datasource::setDBCharset">Datasource::setDBCharset()</link> for a method that allows this parameter to be set after the constructor.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>host</code></para></entry>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The host name for the new connection.  Also see <link linkend="Datasource::setHostName">Datasource::setHostName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>port</code></para></entry>
	      <entry><para><code><link linkend="softint_type">softint</link></code></para></entry>
	      <entry><para>The port number for the new connection. Also see Datasource::setPort() for a method that allows this parameter to be set after the constructor.  If this key is present and is 0 then an exception will be raised.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>options</code></para></entry>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>A hash where the <code>min</code> and <code>max</code> options may be given, giving the minimum and maximum connections for the pool.  <code>min</code> must be greater than zero, and <code>max</code> must be greater than or equal to <code>min</code>.  If <code>min</code> is not present, <code>DP_MIN</code> is assumed; if <code>max</code> is not present, <code>DP_MAX</code> is assumed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-PARAM-EEROR</code></para></entry>
	      <entry><para>Missing DBI driver, negative number of connections specified, or max &lt; min.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-UNSUPPORTED-DATABASE</code></para></entry>
	      <entry><para>Could not load a driver for the database identified.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::destructor">
      <title>DatasourcePool::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception if any transactions are in progress and returns immediately.  The object is destroyed after any in-progress requests are completed.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $pool;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by DatasourcePool::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-ERROR</code></para></entry>
	      <entry><para>The destructor was called while a transaction was still in progress.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="DatasourcePool::copy">
      <title>DatasourcePool::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Thows an exception; DatasourcePool objects cannot be copied at the moment.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="DatasourcePool::beginTransaction">
      <title>DatasourcePool::beginTransaction()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Manually allocates a persistent connection from the pool to the calling thread.  This method should be called when a transaction will be started with a <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method (or vselect*, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.beginTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="DatasourcePool::commit">
      <title>DatasourcePool::commit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits the current transaction and releases the connection to the pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::commit">DatasourcePool::commit</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.commit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by DatasourcePool::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::inTransaction">
      <title>DatasourcePool::inTransaction()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns <code>True</code> if there is a Datasource from the pool currently allocated to the calling thread, <code>False</code> if not.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::inTransaction">DatasourcePool::inTransaction</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> bool $in_trans = $pool.inTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Value for DatasourcePool::inTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>Returns <code>True</code> if there is a Datasource from the pool currently allocated to the calling thread, <code>False</code> if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::rollback">
      <title>DatasourcePool::rollback()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back the current transaction and releases the connection to the pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::rollback">DatasourcePool::rollback</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.rollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by DatasourcePool::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="DatasourcePool::exec">
      <title>DatasourcePool::exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Allocates a persistent connection to the calling thread, executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).  This method takes a special syntax for binding values and placeholders; see the <link linkend="Datasource::exec">Datasource::exec()</link> method for more information.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::exec">DatasourcePool::exec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::exec">DatasourcePool::exec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $pool.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col)
values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally, for commands with placeholders, a <link linkend="hash_type">hash</link> is returned holding the values acquired from executing the SQL statement.  For all other commands, normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::execRaw">
      <title>DatasourcePool::execRaw()</title>

      <variablelist>
  <varlistentry>
    <term>Synopsis</term>
    <listitem>
      <para>Grabs the <link linkend="datasource_transaction_lock">transaction lock</link> (if autocommit is disabled) and executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).</para>
      <para>This method does not do any variable binding, so it's useful for example for DDL statements etc.</para>
      <warning><para>Using this method for OLTP statements can affect the application performance. See used DB server documentation for variable binding.</para></warning>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Prototype</term>
    <listitem>
	      <para><code><link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Example</term>
    <listitem>
      <programlisting>$rows = $pool.execRaw("create table my_tab (id number, some_text varchar2(30))");</programlisting>
    </listitem>
  </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::execRaw()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
  <title>Return Values for DatasourcePool::execRaw()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
        <entry><para>Return Type</para></entry>
        <entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
      </row>
    </tbody>
  </tgroup>
      </table>

      <table>
  <title>Exceptions Thrown by DatasourcePool::execRaw()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
        <entry><para>err</para></entry>
        <entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
        <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
      </row>
      <row>
        <entry><para>depends on DBI driver</para></entry>
        <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
      </row>
    </tbody>
  </tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vexec">
      <title>DatasourcePool::vexec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link> method, except this method takes a single argument after the SQL command giving the list of bind parameters.</para>
	    <para>This method allocates a persistent connection from the pool to the calling thread.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vexec">DatasourcePool::vexec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $pool.vexec("insert into example_table value (%v, %v, %v)", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer or Hash</para></entry>
	      <entry><para>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="any_type">any</link></para></entry>
	      <entry><para>The return value depends on the DBI driver; normally, for commands with placeholders, a <link linkend="hash_type">hash</link> is returned holding the values acquired from executing the SQL statement.  For all other commands, normally an <link linkend="int_type">int</link> row count is returned.  However, some DBI drivers also allow select statements to be executed through this interface, which would also return a <link linkend="hash_type">hash</link> of <link linkend="list_type">list</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::select">
      <title>DatasourcePool::select()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a hash (column names) of lists (rows).  See <link linkend="Datasource::select">Datasource::select()</link> for more information.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::select">DatasourcePool::select</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::select">DatasourcePool::select</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># bind a string and a date/time value by value in a query
$query = $pool.select("select * from table where varchar_column = %v and timestamp_column > %v",
$string, 2007-10-11T15:31:26.289);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of <link linkend="list_type">list</link> (each hash key's value is a list giving the row data), however some DBI drivers allow any SQL to be executed through this method, in which case also <link linkend="int_type">int</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselect">
      <title>DatasourcePool::vselect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselect">DatasourcePool::vselect</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$query = $pool.vselect("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of <link linkend="list_type">list</link> (each hash key's value is a list giving the row data), however some DBI drivers allow any SQL to be executed through this method, in which case also <link linkend="int_type">int</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="DatasourcePool::selectRow">
      <title>DatasourcePool::selectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the first row as a hash (the column values).  If more than one row is returned, then all but the first row are discarded.  For a similar method taking a list for all bind arguments, see <link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.selectRow("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of row data or <link linkend="nothing_type">nothing</link> if no row is found for the query.  However, DBI could return other types (all known drivers at the time of writing this documentation only return <link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselectRow">
      <title>DatasourcePool::vselectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.vselectRow("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="hash_type">hash</link> (the keys are the column names) of row data or <link linkend="nothing_type">nothing</link> if no row is found for the query.  However, DBI could return other types (all known drivers at the time of writing this documentation only return <link linkend="hash_type">hash</link> or <link linkend="nothing_type">nothing</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::selectRows">
      <title>DatasourcePool::selectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a list (rows) of hashes (the column values).  This format is not as efficient as that returned by the <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method, therefore for larger amounts of data, it is recommended to use <link linkend="DatasourcePool::select">DatasourcePool::select()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, ...) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.selectRows("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>...</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link> (where the keys are the column names of each row) or <link linkend="nothing_type">nothing</link> if no rows are found for the query.  However, DBI could return other types; for DBI drivers that allow executing generic SQL through this method, any result sets returns should also be in the format <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselectRows">
      <title>DatasourcePool::vselectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, <link linkend="DatasourcePool::execRaw">DatasourcePool::execRaw()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>, <link linkend="list_type">list</link> <replaceable>$args</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>(<link linkend="string_type">string</link> <replaceable>$sql</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows</link>() <command>returns</command> <link linkend="nothing_type">nothing</link> (<link linkend="RT_NOOP_flag">RT_NOOP</link>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.vselectRows("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$sql</replaceable></code></para></entry>
	      <entry><para>The SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>[<link linkend="list_type">list</link> <replaceable>$args</replaceable>]</code></para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single optional list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Normally returns a <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link> (where the keys are the column names of each row) or <link linkend="nothing_type">nothing</link> if no rows are found for the query.  However, DBI could return other types; for DBI drivers that allow executing generic SQL through this method, any result sets returns should also be in the format <link linkend="list_type">list</link> (rows) of <link linkend="hash_type">hash</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="DatasourcePool::getUserName">
      <title>DatasourcePool::getUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the username parameter for all connections in this pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getUserName">DatasourcePool::getUserName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The username connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if no value is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>


    <sect2 id="DatasourcePool::getPassword">
      <title>DatasourcePool::getPassword()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the password connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getPassword">DatasourcePool::getPassword</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the password connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="DatasourcePool::getDBName">
      <title>DatasourcePool::getDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getDBName">DatasourcePool::getDBName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <programlisting>DatasourcePool::getDBName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getDBName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the password connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getDBCharset">
      <title>DatasourcePool::getDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the database-specific charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getDBCharset">DatasourcePool::getDBCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getDBCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the database-specific charset set encoding for the current connection or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="DatasourcePool::getOSCharset">
      <title>DatasourcePool::getOSCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the Qore charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getOSCharset">DatasourcePool::getOSCharset</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getOSCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getOSCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>Retrieves the Qore charset set encoding for the current connection or <code>&quot;unknown&quot;</code> if unknown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getHostName">
      <title>DatasourcePool::getHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the hostname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getHostName">DatasourcePool::getHostName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the hostname connection parameter or <command><link linkend="NOTHING">NOTHING</link></command> if none is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getPort">
      <title>DatasourcePool::getPort()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the port connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getPort">DatasourcePool::getPort</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$port = $pool.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
              <entry><para><code><link linkend="int_type">int</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>Retrieves the port connection parameter or no value if no port is set.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getDriverName">
      <title>DatasourcePool::getDriverName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the DBI driver used for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getDriverName">DatasourcePool::getDriverName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$name = $pool.getDriverName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getDriverName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The name of the database driver used for this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getServerVersion">
      <title>DatasourcePool::getServerVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific server version information for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getServerVersion">DatasourcePool::getServerVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $pool.getServerVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getServerVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The return type and value depends on the driver; see the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="DatasourcePool::getClientVersion">
      <title>DatasourcePool::getClientVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific client library version information.  Not implemented for all drivers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="DatasourcePool::getClientVersion">DatasourcePool::getClientVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $pool.getClientVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for DatasourcePool::getClientVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>The return type and value depends on the driver; see the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="AbstractSmartLock_Class">
    <title>Thread::AbstractSmartLock Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>This is an abstract class to be inherited by builtin classes that implement the internal Qore API that allows them to be used by the <link linkend="Condition_Class">Condition</link> class.  Currently the <link linkend="RWLock_Class">RWLock</link> and <link linkend="Mutex_Class">Mutex</link> classes inherit this class.</para>
    <para>This class cannot be instantiated directly and also cannot be directly inherited by user-defined classes.</para>

    <table>
      <title>AbstractSmartLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::constructor">AbstractSmartLock::constructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception if called directly; this class can only be instantiated by builtin subclasses.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::destructor">::AbstractSmartLock::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Performs no action.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::copy">AbstractSmartLock::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Performs no action.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::getName">AbstractSmartLock::getName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the name of the threading class directly inheriting this class.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::lockOwner">AbstractSmartLock::lockOwner</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns True if the calling thread owns the lock, False if not.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AbstractSmartLock::lockTID">AbstractSmartLock::lockTID</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the TID of the thread owning the lock or -1 if the lock is currently not acquired.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="AbstractSmartLock::constructor">
      <title>AbstractSmartLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception if called directly or if inherited by a user-defined class; this class can only be instantiated by builtin subclasses.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by AbstractSmartLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>ABSTRACTSMARTLOCK-CONSTRUCTOR-ERROR</code></para></entry>
	      <entry><para>This class cannot be instantiated directly or inherited by user code.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AbstractSmartLock::destructor">
      <title>AbstractSmartLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Performs no action.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AbstractSmartLock::copy">
      <title>AbstractSmartLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Performs no action.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AbstractSmartLock::getName">
      <title>AbstractSmartLock::getName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the threading class directly inheriting this class.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="AbstractSmartLock::getName">AbstractSmartLock::getName</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $name = $lock.getName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for AbstractSmartLock::getName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>Returns the name of the threading class directly inheriting this class.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="AbstractSmartLock::lockOwner">
      <title>AbstractSmartLock::lockOwner()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns True if the calling thread owns the lock, False if not.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="AbstractSmartLock::lockOwner">AbstractSmartLock::lockOwner</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># only grab and release lock if we don't already own it
<command>if</command> (!$lock.lockOwner())
    $lock.lock();
<command>on_exit</command>
    <command>if</command> (!$lock.lockOwner())
	$lock.unlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for AbstractSmartLock::lockOwner()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
	      <entry><para>Returns True if the calling thread owns the lock, False if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="AbstractSmartLock::lockTID">
      <title>AbstractSmartLock::lockTID()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the TID of the thread owning the lock or -1 if the lock is currently not acquired.</para>
	    <para>This method normally not useful in practice for anything except checking that the current thread owns the lock, in which case <link linkend="AbstractSmartLock::lockOwner">AbstractSmartLock::lockOwner()</link> is better, because if the lock is not owned by the current thread the lock ownership can change at any time.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
	    <para><code><link linkend="AbstractSmartLock::lockTID">AbstractSmartLock::lockTID</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $tid = $lock.lockTID();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for AbstractSmartLock::lockTID()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns the TID of the thread owning the lock or -1 if the lock is currently not acquired.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="AutoGate_Class">
    <title>Thread::AutoGate Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>AutoGate objects, when used along with a <link linkend="Gate_Class">Gate</link> object, allow Qore programmers to safely enter and exit a gate lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoGate object is created.  AutoGate objects enter the gate lock for the lifetime of the AutoGate object.  For this reason, it is only appropriate to assign an AutoGate object to a local variable, so when the local variable goes out of scope, the AutoGate object will be deleted and the gate automatically exited.</para>

    <para>For example:</para>

    <programlisting><command>our</command> Gate $gate();

<command>sub</command> check_error($error) {
    # note that the Gate is entered in the AutoGate constructor, and
    # the Gate will be exited as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> AutoGate $ag($gate);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>


    <table>
      <title>AutoGate Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="AutoGate::constructor">AutoGate::constructor</link>(<link linkend="Gate_Class">Gate</link> <replaceable>$gate</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoGate object based on the <link linkend="Gate_Class">Gate</link> argument passed and immediately calls <link linkend="Gate::enter">Gate::enter()</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoGate::destructor">AutoGate::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="Gate::exit">Gate::exit()</link> and destroys the AutoGate object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoGate::copy">AutoGate::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoGate::constructor">
      <title>AutoGate::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoGate object based on the <link linkend="Gate_Class">Gate</link> argument passed and immediately calls <link linkend="Gate::enter">Gate::enter()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="AutoGate::constructor">AutoGate::constructor</link>(<link linkend="Gate_Class">Gate</link> <replaceable>$gate</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> AutoGate $gate($gate);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoGate::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="Gate_Class">Gate</link> <replaceable>$gate</replaceable></code></para></entry>
	      <entry><para>The Gate object to enter for the lifetime of the AutoGate object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoGate::destructor">
      <title>AutoGate::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="Gate::exit">Gate::exit()</link> on the saved Gate object and destroys the AutoGate object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $ag;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoGate::copy">
      <title>AutoGate::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by AutoGate::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOGATE-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoLock_Class">
    <title>Thread::AutoLock Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>AutoLock objects, when used along with a <link linkend="Mutex_Class">Mutex</link> object, allow Qore programmers to safely acquire and release a Mutex lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoLock object is created.  AutoLock objects are helper objects that acquire a Mutex for the lifetime of the object.  For this reason, it is only appropriate to assign an AutoLock object to a local variable, so when the local variable goes out of scope, the AutoLock object will be deleted and the Mutex will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> Mutex $mutex();

<command>sub</command> check_error($error) {
    # note that the Mutex is acquired in the AutoLock constructor, and
    # the Mutex will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> AutoLock $al($mutex);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>

    <table>
      <title>AutoLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="AutoLock::constructor">AutoLock::constructor</link>(<link linkend="Mutex_Class">Mutex</link> <replaceable>$mutex</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoLock object based on the <link linkend="Mutex_Class">Mutex</link> argument passed and immediately calls <link linkend="Mutex::lock">Mutex::lock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoLock::destructor">AutoLock::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="Mutex::unlock">Mutex::unlock()</link> on the saved Mutex and destroys the AutoLock object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoLock::copy">AutoLock::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoLock::constructor">
      <title>AutoLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoLock object based on the Mutex argument passed.  The AutoLock object immediately calls <link linkend="Mutex::lock">Mutex::lock()</link> on the Mutex object passed, and saves it so it can be released when the AutoLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="AutoLock::constructor">AutoLock::constructor</link>(<link linkend="Mutex_Class">Mutex</link> <replaceable>$mutex</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> AutoLock $al($mutex);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="Mutex_Class">Mutex</link> <replaceable>$mutex</replaceable></code></para></entry>
	      <entry><para>The Mutex object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoLock::destructor">
      <title>AutoLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="Mutex::unlock">Mutex::unlock()</link> on the saved Mutex and destroys the AutoLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $al;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoLock::copy">
      <title>AutoLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by AutoLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOLOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoReadLock_Class">
    <title>Thread::AutoReadLock Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>AutoReadLock objects, when used along with a <link linkend="RWLock_Class">RWLock</link> object, allow Qore programmers to safely acquire and release a read lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoReadLock object is created.  AutoReadLock objects are helper objects that acquire a read lock for the lifetime of the AutoReadLock object.  For this reason, it is only appropriate to assign an AutoReadLock object to a local variable, so when the local variable goes out of scope, the AutoReadLock object will be deleted and the read lock will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> RWLock $rwl();

<command>sub</command> check_error($error) {
    # note that the read lock is acquired in the AutoReadLock constructor, and
    # the read lock will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> AutoReadLock $arl($rwl);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>

    <table>
      <title>AutoReadLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="AutoReadLock::constructor">AutoReadLock::constructor</link>(<link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoReadLock object based on the <link linkend="RWLock_Class">RWLock</link> argument passed and immediately calls <link linkend="RWLock::readLock">RWLock::readLock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoReadLock::destructor">AutoReadLock::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link> on the saved <link linkend="RWLock_Class">RWLock</link> and destroys the AutoReadLock object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoReadLock::copy">AutoReadLock::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoReadLock::constructor">
      <title>AutoReadLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoReadLock object based on the <link linkend="RWLock_Class">RWLock</link> argument passed.  The AutoReadLock object immediately calls <link linkend="RWLock::readLock">RWLock::readLock()</link> on the RWLock object passed, and saves it so it can be released when the AutoReadLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="AutoReadLock::constructor">AutoReadLock::constructor</link>(<link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> AutoReadLock $arl($rwlock);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoReadLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable></code></para></entry>
	      <entry><para>The <link linkend="RWLock_Class">RWLock</link> object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoReadLock::destructor">
      <title>AutoReadLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link> on the saved <link linkend="RWLock_Class">RWLock</link> and destroys the AutoReadLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $arl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoReadLock::copy">
      <title>AutoReadLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by AutoReadLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOREADLOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoWriteLock_Class">
    <title>Thread::AutoWriteLock Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>AutoWriteLock objects, when used along with a <link linkend="RWLock_Class">RWLock</link> object, allow Qore programmers to safely acquire and release a write lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoWriteLock object is created.  AutoWriteLock objects are helper objects that acquire a write lock for the lifetime of the AutoWriteLock object.  For this reason, it is only appropriate to assign an AutoWriteLock object to a local variable, so when the local variable goes out of scope, the AutoWriteLock object will be deleted and the write lock will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> RWLock $rwl();

<command>sub</command> check_error($error) {
    # note that the write lock is acquired in the AutoWriteLock constructor, and
    # the write lock will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> AutoWriteLock $arl($rwl);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>

    <table>
      <title>AutoWriteLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="AutoWriteLock::constructor">AutoWriteLock::constructor</link>(<link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoWriteLock object based on the <link linkend="RWLock_Class">RWLock</link> argument passed and immediately calls <link linkend="RWLock::writeLock">RWLock::writeLock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoWriteLock::destructor">AutoWriteLock::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="RWLock::writeUnlock">RWLock::writeUnlock()</link> on the saved <link linkend="RWLock_Class">RWLock</link> and destroys the AutoWriteLock object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="AutoWriteLock::copy">AutoWriteLock::copy</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoWriteLock::constructor">
      <title>AutoWriteLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoWriteLock object based on the <link linkend="RWLock_Class">RWLock</link> argument passed.  The AutoWriteLock object immediately calls <link linkend="RWLock::writeLock">RWLock::writeLock()</link> on the <link linkend="RWLock_Class">RWLock</link> object passed, and saves it so it can be released when the AutoWriteLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="AutoWriteLock::constructor">AutoWriteLock::constructor</link>(<link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> AutoWriteLock $awl($rwlock);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoWriteLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="RWLock_Class">RWLock</link> <replaceable>$rwlock</replaceable></code></para></entry>
	      <entry><para>The RWLock object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoWriteLock::destructor">
      <title>AutoWriteLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="RWLock::writeUnlock">RWLock::writeUnlock()</link> on the saved <link linkend="RWLock_Class">RWLock</link> and destroys the AutoWriteLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $awl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoWriteLock::copy">
      <title>AutoWriteLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by AutoWriteLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOWRITELOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="Condition_Class">
    <title>Thread::Condition Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>Condition objects, when used along with an <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object (such as <link linkend="RWLock_Class">RWLock</link> and <link linkend="Mutex_Class">Mutex</link> objects), allow Qore threads to sleep until a certain condition becomes true.</para>

    <table>
      <title>Condition Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::constructor">Condition::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Condition object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::destructor">Condition::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the Condition object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::copy">Condition::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Condition object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::signal">Condition::signal</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Signals a single blocked thread to wake up.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::broadcast">Condition::broadcast</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Signals all threads blocked on this Condition object to wake up.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::wait">Condition::wait</link>(<link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks a thread until signaled; accepts an optional timeout value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Condition::wait_count">Condition::wait_count</link>(<link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Condition::constructor">
      <title>Condition::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Condition object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Condition::constructor">Condition::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Condition $cond();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Condition::destructor">
      <title>Condition::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $cond;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Condition::copy">
      <title>Condition::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Condition object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Condition $new_cond = $cond.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Condition::signal">
      <title>Condition::signal()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Signals a single blocked thread to wake up.  Normally this method call will be made while the same <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object used for <link linkend="Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Condition::signal">Condition::signal</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$cond.signal();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Condition::signal()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-SIGNAL-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::broadcast">
      <title>Condition::broadcast()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Wakes up all threads waiting on the Condition object.  Normally this method call will be made while the same <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object used for <link linkend="Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Condition::broadcast">Condition::broadcast</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$cond.broadcast();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Condition::broadcast()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-BROADCAST-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::wait">
      <title>Condition::wait()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread on the Condition object.  Must be called with an <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> argument, and the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> must be locked before the call.  This method will atomically unlock the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object and wait on this Condition object to be woken up with a <link linkend="Condition::signal">Condition::signal()</link> or <link linkend="Condition::broadcast">Condition::broadcast()</link> method call in another thread.  At this point, the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> will be reacquired with the same state as it was acquired previously before control returns to the blocked thread.  The wait condition should always be tested again when the thread is unblocked.</para>
	    <para>Also accepts an optional timeout value in milliseconds.   Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  Also if the call times out, the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> will also be acquired when the Condition::wait() call returns and <code>ETIMEDOUT</code> will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Condition::wait">Condition::wait</link>(<link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable>, <link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>{
    $mutex.lock();
    <command>on_exit</command> $mutex.unlock();
    <command>while</command> ($num > 0)
        $cond.wait($mutex);
    # ... do something
}</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable></code></para></entry>
	      <entry><para>The <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> object to use for synchronization on this Condition object.  The <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> must be locked before calling this method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>An optional timeout value; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>0 for success, <code>ETIMEDOUT</code> if a timeout has occurred.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-WAIT-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::wait_count">
      <title>Condition::wait_count()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this object using the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> passed; the <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> can be in any state (locked or unlocked) for this call (does not necessarily have to be locked).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Condition::wait_count">Condition::wait_count</link>(<link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num_threads = $cond.wait_count();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> <replaceable>$lock</replaceable></code></para></entry>
	      <entry><para>The <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> to check for waiting threads.  The <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link> can be in any state (locked or unlocked) for this call (does not necessarily have to be locked).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::wait_count()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of threads currently blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>
  <sect1 id="Counter_Class">
    <title>Thread::Counter Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>Counter objects allow Qore threads to sleep until a counter reaches zero.</para>

    <table>
      <title>Counter Method Overview</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::constructor">Counter::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$count</replaceable> = 0)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Counter object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::destructor">Counter::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Counter object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::copy">Counter::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Counter object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::inc">Counter::inc</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Atomically increments the counter value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::dec">Counter::dec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Atomically decrements the counter value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::waitForZero">Counter::waitForZero</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Counter::waitForZero">Counter::waitForZero</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks a thread until the counter reaches zero; returns zero on sucess, or non-zero if a timeout occurred.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::getCount">Counter::getCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current counter value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Counter::getWaiting">Counter::getWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Counter::constructor">
      <title>Counter::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Counter object; an optional integer argument may be given giving the intial value of the Counter.  If no value is given, then the Counter is initialized with 0.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::constructor">Counter::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$count</replaceable> = 0)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Counter $counter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$count</replaceable> = 0</code></para></entry>
	      <entry><para>If an argument is supplied here, then the Counter will be initialized with this value, otherwise the Counter is initialized with 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Counter::destructor">
      <title>Counter::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $counter;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Counter::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Counter::copy">
      <title>Counter::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Counter object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Counter $new_counter = $counter.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Counter::inc">
      <title>Counter::inc()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::inc">Counter::inc</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.inc();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>
    <sect2 id="Counter::dec">
      <title>Counter::dec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically decrements the counter value.  An exception can only be thrown if the object is deleted in another thread while this call is in progress; this is a race condition caused by a user programming error and should not occur in practise with correct code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::dec">Counter::dec</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.dec();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted in another thread.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Counter::waitForZero">
      <title>Counter::waitForZero()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread until the counter reaches zero.  Takes an optional timeout value in milliseconds.   Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para>
	    <para>Returns -1 if the call times out (only if a timeout value is passed), 0 if the counter reached zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::waitForZero">Counter::waitForZero</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Counter::waitForZero">Counter::waitForZero</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.waitForZero();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::waitForZero()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable></code></para></entry>
	      <entry><para>An optional timeout value to wait for the Counter to reach zero; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::waitForZero()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>If a timeout value was passed, -1 means that the call timed out, 0 means that the counter reached zero.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted in another thread.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Counter::getCount">
      <title>Counter::getCount()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::getCount">Counter::getCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $count = $counter.getCount();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Counter::getCount()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The current counter value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Counter::getWaiting">
      <title>Counter::getWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Counter::getWaiting">Counter::getWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $threads = $counter.getWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Counter::getWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of threads currently blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Queue_Class">
    <title>Thread::Queue Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>Queue objects provide a blocking, thread-safe message-passing object to Qore programs.</para>

    <table>
      <title>Queue Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::constructor">Queue::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Queue object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::destructor">Queue::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Queue object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::copy">Queue::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Queue object with the same elements as the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::get">Queue::get</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.  If a timeout occurs, an exception is thrown.  If the timeout is less than or equal to zero, then the call does not timeout until data is available.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::pop">Queue::pop</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.  If a timeout occurs, an exception is thrown.  If the timeout is less than or equal to zero, then the call does not timeout until data is available.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::push">Queue::push</link>(<link linkend="any_type">any</link> <replaceable>$val</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Puts a value on the end of the queue.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::size">Queue::size</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of elements in the queue.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Queue::getWaiting">Queue::getWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this queue.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Queue::constructor">
      <title>Queue::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Queue object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::constructor">Queue::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Queue $queue();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Queue::destructor">
      <title>Queue::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $queue;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Queue::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted while other threads were blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Queue::copy">
      <title>Queue::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Queue object with the same elements as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Queue $new_queue = $queue.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Queue::get">
      <title>Queue::get()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.  Accepts an optional timeout value in milliseconds (1/1000 second). Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  If no value or a value that converts to integer 0 is passed as the argument, then the call does not timeout until data is available on the queue.</para><para>Note that this function will throw an exception on timeout, in order to enable the case where <command><link linkend="NOTHING">NOTHING</link></command> was pushed on the queue to be differentiated from a timeout.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::get">Queue::get</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $queue.get();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>An optional timeout value to wait for data to become available on the queue; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.  If no value or a value that converts to integer 0 is passed as the argument, then the call does not timeout until data is available on the queue.  If a non-zero timeout argument is passed, and no data is available in the timeout period, a QUEUE-TIMEOUT exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Depends on the value put on the queue; could also be NOTHING, because <command><link linkend="NOTHING">NOTHING</link></command> can be pushed as a value on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-TIMEOUT</code></para></entry>
	      <entry><para>The timeout value was exceeded.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted in another thread while this thread was blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::pop">
      <title>Queue::pop()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.  Accepts an optional timeout value in ms (1/1000 second).  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  If no value or a value that converts to integer 0 is passed as the argument, then the call does not timeout until data is available on the queue.</para><para>Note that this function will throw an exception on timeout, in order to enable the case where <command><link linkend="NOTHING">NOTHING</link></command> was pushed on the queue to be differentiated from a timeout.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::pop">Queue::pop</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $queue.pop();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable> = 0</code></para></entry>
	      <entry><para>An optional timeout value to wait for data to become available on the queue; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.  If no value or a value that converts to integer 0 is passed as the argument, then the call does not timeout until data is available on the queue.  If a non-zero timeout argument is passed, and no data is available in the timeout period, a QUEUE-TIMEOUT exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link></code></para></entry>
	      <entry><para>Depends on the value put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-TIMEOUT</code></para></entry>
	      <entry><para>The timeout value was exceeded.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted in another thread while this thread was blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::push">
      <title>Queue::push()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Adds a value to the end of the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::push">Queue::push</link>(<link linkend="any_type">any</link> <replaceable>$val</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$queue.push($value);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::push()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="any_type">any</link> <replaceable>$val</replaceable></code></para></entry>
	      <entry><para>Value to be put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::size">
      <title>Queue::size()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of elements in the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::size">Queue::size</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $size = $queue.size();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Queue::size()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of elements in the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::getWaiting">
      <title>Queue::getWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Queue::getWaiting">Queue::getWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $num = $queue.getWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Queue::getWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of threads currently blocked on this queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="RWLock_Class">
    <title>Thread::RWLock Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>This class inherits <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link>, so it can be used by <link linkend="Condition_Class">Condition</link> objects, while using either the read lock or the write lock.</para>

    <para>The RWLock class implements a read-write lock for efficient thread locking when write actions must be atomic and reads can be made in parallel if no write is in progress. When a thread holds the write lock, no other thread can grab the read or write lock. Multiple threads can hold the read lock at one time.</para>

    <para>As with all Qore threading primitives, this class supports deadlock detection and throws exceptions when threading errors are encountered (for example, trying to free the read lock while holding the write lock, etc).</para>

    <para>This read-write lock favors readers, so the read lock can be safely acquired recursively.</para>

    <para>See the <link linkend="AutoReadLock_Class">AutoReadLock</link> and the <link linkend="AutoWriteLock_Class">AutoWriteLock</link> classes for classes that assist in exception-safe RWLock locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe RWLock handling at the lexical block level as in the following example:</para>

    <programlisting>{
    $rwl.writeLock();
    <command>on_exit</command>
        $rwl.writeUnlock();

    # ... when this block exits the lock will be released, even in the
    #     case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>RWLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::constructor">RWLock::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the RWLock object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::destructor">RWLock::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the RWLock object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::copy">RWLock::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new RWLock object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::readLock">RWLock::readLock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="RWLock::readLock">RWLock::readLock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the read lock with an optional timeout value; blocks if the write lock is already acquired.  Returns 0 for success, non-zero for timeout; exceptions are thrown for other errors.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::readUnlock">RWLock::readUnlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::writeLock">RWLock::writeLock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="RWLock::writeLock">RWLock::writeLock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the write lock with an optional timeout; blocks if either the read lock or write lock is already acquired.  Returns 0 for success, non-zero for timeout; exceptions are thrown for other errors.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::writeUnlock">RWLock::writeUnlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::tryReadLock">RWLock::tryReadLock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the read lock only if it can be acquired immediately.  Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::tryWriteLock">RWLock::tryWriteLock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the write lock only if it can be acquired immediately.  Returns 0 for success (write lock acquired) or -1 if the call would block.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::numReaders">RWLock::numReaders</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the read lock count.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::getReadWaiting">RWLock::getReadWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads waiting on the read lock.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="RWLock::getWriteWaiting">RWLock::getWriteWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads waiting on the write lock.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="RWLock::constructor">
      <title>RWLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the RWLock object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::constructor">RWLock::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> RWLock $rwl();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="RWLock::destructor">
      <title>RWLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $rwl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by RWLock::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="RWLock::copy">
      <title>RWLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new RWLock object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> RWLock $new_rwl = $rwl.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="RWLock::readLock">
      <title>RWLock::readLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock with an optional timeout value; blocks if the write lock is already acquired.  The read lock may be acquired recursively, however, each call to RWLock::readLock() requires a corresponding call to <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link>. An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::readLock">RWLock::readLock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="RWLock::readLock">RWLock::readLock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.readLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>]</code></para></entry>
	      <entry><para>An optional timeout value to wait to acquire the read lock; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="nothing_type">nothing</link> or <link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Only variants accepting a timeout return a value; they return 0 for success, -1 for timeout</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>readLock() called while already holding the write lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::readUnlock">
      <title>RWLock::readUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::readUnlock">RWLock::readUnlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.readUnlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by RWLock::readUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>readUnlock() called while not holding the read lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::writeLock">
      <title>RWLock::writeLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock; blocks if either the read lock or write lock is already acquired.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	    <para>To release the write lock, use <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::writeLock">RWLock::writeLock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="RWLock::writeLock">RWLock::writeLock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.writeLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>]</code></para></entry>
	      <entry><para>An optional timeout value to wait to acquire the write lock; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="nothing_type">nothing</link> or <link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Only variants accepting a timeout return a value; they return 0 for success, -1 for timeout</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>writeLock() called while holding the read lock, writeLock() called while already holding the write lock in the same thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::writeUnlock">
      <title>RWLock::writeUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::writeUnlock">RWLock::writeUnlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.writeUnlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>writeUnlock() called while not holding the write lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::tryReadLock">
      <title>RWLock::tryReadLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock only if it can be acquired immediately, returns 0 for success, -1 if it would block.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::tryReadLock">RWLock::tryReadLock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $i = $rwl.tryReadLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::tryWriteLock">
      <title>RWLock::tryWriteLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock only if it can be acquired immediately, returns 0 for success, -1 if it would block.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::tryWriteLock">RWLock::tryWriteLock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $i = $rwl.tryWriteLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for RWLock::tryWriteLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success (write lock acquired) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::numReaders">
      <title>RWLock::numReaders()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the read lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::numReaders">RWLock::numReaders</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.numReaders();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for RWLock::numReaders()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The read lock count.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="RWLock::getReadWaiting">
      <title>RWLock::getReadWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on the read lock (only non-zero while the write lock is held).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::getReadWaiting">RWLock::getReadWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.getReadWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for RWLock::getReadWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of threads blocked on the read lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="RWLock::getWriteWaiting">
      <title>RWLock::getWriteWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on the write lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="RWLock::getWriteWaiting">RWLock::getWriteWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.getWriteWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for RWLock::getWriteWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The number of threads blocked on the write lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Mutex_Class">
    <title>Thread::Mutex Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>This class inherits <link linkend="AbstractSmartLock_Class">AbstractSmartLock</link>, so it can be used by <link linkend="Condition_Class">Condition</link> objects.</para>

    <para>The Mutex class implements a mutual-exclusion lock for thread locking.  Like all Qore thread primitives, objects of this class participate in deadlock detection and throw exceptions when threading errors occur (ex: unlocking a Mutex object locked by another thread, etc).  See individual methods for more information on exceptions thrown.</para>

    <para>See the <link linkend="AutoLock_Class">AutoLock class</link> for a class that assists in exception-safe Mutex locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe unlocking at the lexical block level for Mutex objects as in the following example:</para>

    <programlisting>{
    $m.lock();
    <command>on_exit</command>
        $m.unlock();

    # ... when this block exits the lock will be released, even in the
    #     case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>Mutex Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::constructor">Mutex::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Mutex object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::destructor">Mutex::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Mutex object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::copy">Mutex::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Mutex object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::lock">Mutex::lock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Mutex::lock">Mutex::lock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Locks the Mutex object.  Blocks if the lock is already held.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::unlock">Mutex::unlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Mutex::trylock">Mutex::trylock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the lock only if it is not already held.  Returns 0 for success (lock acquired) or -1 if the call would block.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Mutex::constructor">
      <title>Mutex::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Mutex object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Mutex::constructor">Mutex::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Mutex $mutex();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Mutex::destructor">
      <title>Mutex::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $mutex;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Mutex::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Mutex::copy">
      <title>Mutex::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Mutex object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Mutex $new_mutex = $mutex.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Mutex::lock">
      <title>Mutex::lock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks the Mutex object.  Blocks if the lock is already held.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	    <para>To release the Mutex, use <link linkend="Mutex::unlock">Mutex::unlock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Mutex::lock">Mutex::lock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Mutex::lock">Mutex::lock</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex.lock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>]</code></para></entry>
	      <entry><para>An optional timeout value to wait to acquire the lock; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="nothing_type">nothing</link> or <link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Only variants accepting a timeout return a value; they return 0 for success, -1 for timeout</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock called twice in the same thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Mutex::unlock">
      <title>Mutex::unlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Mutex::unlock">Mutex::unlock</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex.unlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Mutex::unlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock not held, lock held by another thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Mutex::trylock">
      <title>Mutex::trylock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock only if it is not already held; the return value indicates success (0, lock acquired) or failure (-1, lock already held).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Mutex::trylock">Mutex::trylock</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $i = $mutex.trylock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Mutex::trylock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success (lock acquired) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="RMutex_Class">
    <title>Thread::RMutex Class</title>
    <para>DEPRECATED: use the <link linkend="Gate_Class">Gate</link> class instead.</para>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

  </sect1>

  <sect1 id="Sequence_Class">
    <title>Thread::Sequence Class</title>

    <para>The Sequence class implements a thread-safe increment-only object.</para>

    <table>
      <title>Sequence Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Sequence::constructor">Sequence::constructor</link>()</code></para>
              <para><code><link linkend="Sequence::constructor">Sequence::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$start</replaceable>)</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Sequence object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Sequence::destructor">Sequence::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the Sequence object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Sequence::copy">Sequence::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Sequence object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Sequence::next">Sequence::next</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Atomically increments the counter and returns the last value.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Sequence::getCurrent">Sequence::getCurrent</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current value of the counter.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Sequence::constructor">
      <title>Sequence::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Sequence::constructor">Sequence::constructor</link>()</code></para>
              <para><code><link linkend="Sequence::constructor">Sequence::constructor</link>(<link linkend="softint_type">softint</link> <replaceable>$start</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Sequence $seq();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="softint_type">softint</link> <replaceable>$start</replaceable>]</code></para></entry>
	      <entry><para>Optional start number for the sequence (default with no argument = 0).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Sequence::destructor">
      <title>Sequence::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $seq;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Sequence::copy">
      <title>Sequence::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Sequence $new_seq = $seq.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Sequence::next">
      <title>Sequence::next()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter and returns the last value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Sequence::next">Sequence::next</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$seq.next();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Sequence::next()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The last value of the sequence.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Sequence::getCurrent">
      <title>Sequence::getCurrent()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current value of the counter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Sequence::getCurrent">Sequence::getCurrent</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $num = $seq.getCurrent();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Sequence::getCurrent()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>The current value of the counter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="Gate_Class">
    <title>Thread::Gate Class</title>

    <para>Note: This class is not available with the <code><link linkend="no-thread-classes">PO_NO_THREAD_CLASSES</link></code> parse option.</para>

    <para>The Gate class implements a reentrant thread lock.  Once a thread grabs the lock, it can call the <link linkend="Gate::enter">Gate::enter()</link> method again without blocking.  Other threads that try to enter the lock will block until the thread holding the lock calls <link linkend="Gate::exit">Gate::exit()</link> an equal number of times to <link linkend="Gate::enter">Gate::enter()</link> calls.</para>

    <para>See the <link linkend="AutoGate_Class">AutoGate class</link> for a class that assists in exception-safe Gate locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe Gate handling at the lexical block level as in the following example:</para>

    <programlisting>{
    $g.enter();
    <command>on_exit</command>
        $g.exit();

    # ... when this block exits the gate lock counter will be decremented,
    #     even in the case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>Gate Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::constructor">Gate::constructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Create a new Gate object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::destructor">Gate::destructor</link>()</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Gate object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::copy">Gate::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Gate object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::enter">Gate::enter</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Gate::enter">Gate::enter</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the lock if it is unlocked or locked by the same thread, otherwise blocks until the lock counter reaches zero.  For variants taking a timeout; returns 0 if no timeout occurred, non-zero if a timeout occurred.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::tryEnter">Gate::tryEnter</link>() return <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the lock if it is unlocked or locked by the same thread, otherwise returns immediately with -1.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::exit">Gate::exit</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken; in this case 0 is returns; in all other cases, non-zero is returned.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::numInside">Gate::numInside</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current lock count.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="Gate::numWaiting">Gate::numWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads blocked on the Gate.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Gate::constructor">
      <title>Gate::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::constructor">Gate::constructor</link>()</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Gate $gate();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Gate::destructor">
      <title>Gate::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $gate;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Gate::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Gate::copy">
      <title>Gate::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> Gate $new_gate = $gate.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="Gate::enter">
      <title>Gate::enter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked by the same thread, otherwise blocks until the lock counter reaches zero.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::enter">Gate::enter</link>() <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
              <para><code><link linkend="Gate::enter">Gate::enter</link>(<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>) <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.enter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>[<link linkend="timeout_type">timeout</link> <replaceable>$timeout_ms</replaceable>]</code></para></entry>
	      <entry><para>An optional timeout value to wait to acquire the lock; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="nothing_type">nothing</link> or <link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Only variants accepting a timeout return a value; they return 0 for success, -1 for timeout</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>object deleted in another thread</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Gate::tryEnter">
      <title>Gate::tryEnter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked by the same thread, otherwise returns immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::tryEnter">Gate::tryEnter</link>() return <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.tryEnter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Gate::tryEnter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns 0 for success (acquired the lock) or -1 for failure (would block).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  <sect2 id="Gate::exit">
    <title>Gate::exit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::exit">Gate::exit</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.exit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Gate::exit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock not held by this thread, object deleted in another thread</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

  <sect2 id="Gate::numInside">
    <title>Gate::numInside()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::numInside">Gate::numInside</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $num = $gate.numInside();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Gate::numInside()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns the current lock count.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Gate::numWaiting">
      <title>Gate::numWaiting()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="Gate::numWaiting">Gate::numWaiting</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> int $num = $gate.numWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for Gate::numWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="int_type">int</link></code></para></entry>
	      <entry><para>Returns the number of threads blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Xml_Namespace">
    <title>Xml Namespace</title>

    <para>The following constants are defined in the Qore namespace.</para>

    <table id="XML_Element_Type_Constants">
      <title>XML Element Type Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><code>XML_ELEMENT_NODE</code></para></entry>
	    <entry><para><code>1</code></para></entry>
	    <entry><para>Indicates an element</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ATTRIBUTE_NODE</code></para></entry>
	    <entry><para><code>2</code></para></entry>
	    <entry><para>Indicates an attribute</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_TEXT_NODE</code></para></entry>
	    <entry><para><code>3</code></para></entry>
	    <entry><para>Indicates text</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_CDATA_SECTION_NODE</code></para></entry>
	    <entry><para><code>4</code></para></entry>
	    <entry><para>Indicates CDATA: unparsed character data</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ENTITY_REF_NODE</code></para></entry>
	    <entry><para><code>5</code></para></entry>
	    <entry><para>Indicates an entity reference</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ENTITY_NODE</code></para></entry>
	    <entry><para><code>6</code></para></entry>
	    <entry><para>Indicates an entity</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_PI_NODE</code></para></entry>
	    <entry><para><code>7</code></para></entry>
	    <entry><para>Indicates a processing instruction</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_COMMENT_NODE</code></para></entry>
	    <entry><para><code>8</code></para></entry>
	    <entry><para>Indicates a comment</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_DOCUMENT_NODE</code></para></entry>
	    <entry><para><code>9</code></para></entry>
	    <entry><para>Indicates a document</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_DOCUMENT_TYPE_NODE</code></para></entry>
	    <entry><para><code>10</code></para></entry>
	    <entry><para>Indicates a document type</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_DOCUMENT_FRAG_NODE</code></para></entry>
	    <entry><para><code>11</code></para></entry>
	    <entry><para>Indicates a document fragment</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_NOTATION_NODE</code></para></entry>
	    <entry><para><code>12</code></para></entry>
	    <entry><para>Indicates a DTD notation</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_HTML_DOCUMENT_NODE</code></para></entry>
	    <entry><para><code>13</code></para></entry>
	    <entry><para>Indicates an HTML document</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_DTD_NODE</code></para></entry>
	    <entry><para><code>14</code></para></entry>
	    <entry><para>Indicates a DTD</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ELEMENT_DECL</code></para></entry>
	    <entry><para><code>15</code></para></entry>
	    <entry><para>Indicates an element declaration</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ATTRIBUTE_DECL</code></para></entry>
	    <entry><para><code>16</code></para></entry>
	    <entry><para>Indicates an attribute declaration</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_ENTITY_DECL</code></para></entry>
	    <entry><para><code>17</code></para></entry>
	    <entry><para>Indicates an entity declaration</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_NAMESPACE_DECL</code></para></entry>
	    <entry><para><code>18</code></para></entry>
	    <entry><para>Indicates a namespace declaration</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_XINCLUDE_START</code></para></entry>
	    <entry><para><code>19</code></para></entry>
	    <entry><para>Indicates an XML xinlude start element</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_XINCLUDE_END</code></para></entry>
	    <entry><para><code>20</code></para></entry>
	    <entry><para>Indicates an XML xinlude end element</para></entry>
	  </row>
	  <row>
	    <entry><para><code>XML_DOCB_DOCUMENT_NODE</code></para></entry>
	    <entry><para><code>21</code></para></entry>
	    <entry><para>Indicates a docbook document element</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>The <code>ElementTypeMap</code> constant in Xml namespace provides a mapping between element codes and the corresponding string code as defined in the following table.</para>
    <table id="ElementTypeMap">
      <title>ElementTypeMap Constant Hash</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>&quot;1&quot;</code></para></entry>
	    <entry><para><code>XML_ELEMENT_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;2&quot;</code></para></entry>
	    <entry><para><code>XML_ATTRIBUTE_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;3&quot;</code></para></entry>
	    <entry><para><code>XML_TEXT_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;4&quot;</code></para></entry>
	    <entry><para><code>XML_CDATA_SECTION_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;5&quot;</code></para></entry>
	    <entry><para><code>XML_ENTITY_REF_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;6&quot;</code></para></entry>
	    <entry><para><code>XML_ENTITY_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;7&quot;</code></para></entry>
	    <entry><para><code>XML_PI_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;8&quot;</code></para></entry>
	    <entry><para><code>XML_COMMENT_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;9&quot;</code></para></entry>
	    <entry><para><code>XML_DOCUMENT_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;10&quot;</code></para></entry>
	    <entry><para><code>XML_DOCUMENT_TYPE_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;11&quot;</code></para></entry>
	    <entry><para><code>XML_DOCUMENT_FRAG_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;12&quot;</code></para></entry>
	    <entry><para><code>XML_NOTATION_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;13&quot;</code></para></entry>
	    <entry><para><code>XML_HTML_DOCUMENT_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;14&quot;</code></para></entry>
	    <entry><para><code>XML_DTD_NODE</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;15&quot;</code></para></entry>
	    <entry><para><code>XML_ELEMENT_DECL</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;16&quot;</code></para></entry>
	    <entry><para><code>XML_ATTRIBUTE_DECL</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;17&quot;</code></para></entry>
	    <entry><para><code>XML_ENTITY_DECL</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;18&quot;</code></para></entry>
	    <entry><para><code>XML_NAMESPACE_DECL</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;19&quot;</code></para></entry>
	    <entry><para><code>XML_XINCLUDE_START</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;20&quot;</code></para></entry>
	    <entry><para><code>XML_XINCLUDE_END</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>&quot;21&quot;</code></para></entry>
	    <entry><para><code>XML_DOCB_DOCUMENT_NODE</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="XML_Node_Type_Constants">
      <title>XML Node Type Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>XML_NODE_TYPE_NONE</code></para></entry>
            <entry><para><code>0</code></para></entry>
            <entry><para>Indicates no node is available</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_ELEMENT</code></para></entry>
            <entry><para><code>1</code></para></entry>
            <entry><para>Indicates an XML element</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_ATTRIBUTE</code></para></entry>
            <entry><para><code>2</code></para></entry>
            <entry><para>Indicates an attribute node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_TEXT</code></para></entry>
            <entry><para><code>3</code></para></entry>
            <entry><para>Indicates a text node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_CDATA</code></para></entry>
            <entry><para><code>4</code></para></entry>
            <entry><para>Indicates a CDATA node: unparsed character data</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_ENTITY_REFERENCE</code></para></entry>
            <entry><para><code>5</code></para></entry>
            <entry><para>Indicates an entity reference node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_ENTITY</code></para></entry>
            <entry><para><code>6</code></para></entry>
            <entry><para>Indicates an entity node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_PROCESSING_INSTRUCTION</code></para></entry>
            <entry><para><code>7</code></para></entry>
            <entry><para>Indicates an XML processing instruction</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_COMMENT</code></para></entry>
            <entry><para><code>8</code></para></entry>
            <entry><para>Indicates an XML comment</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_DOCUMENT</code></para></entry>
            <entry><para><code>9</code></para></entry>
            <entry><para>Indicates a document node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_DOCUMENT_TYPE</code></para></entry>
            <entry><para><code>10</code></para></entry>
            <entry><para>Indicates a document type node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_DOCUMENT_FRAGMENT</code></para></entry>
            <entry><para><code>11</code></para></entry>
            <entry><para>Indicates a document fragment node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_NOTATION</code></para></entry>
            <entry><para><code>12</code></para></entry>
            <entry><para>Indicates a notation node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_WHITESPACE</code></para></entry>
            <entry><para><code>13</code></para></entry>
            <entry><para>Indicates a whitespace node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_SIGNIFICANT_WHITESPACE</code></para></entry>
            <entry><para><code>14</code></para></entry>
            <entry><para>Indicates a significant whitespace node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_END_ELEMENT</code></para></entry>
            <entry><para><code>15</code></para></entry>
            <entry><para>Indicates an end element node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_END_ENTITY</code></para></entry>
            <entry><para><code>16</code></para></entry>
            <entry><para>Indicates an end entity node</para></entry>
          </row>
          <row>
            <entry><para><code>XML_NODE_TYPE_XML_DECLARATION</code></para></entry>
            <entry><para><code>17</code></para></entry>
            <entry><para>Indicates an XML declaration node</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>The <code>NodeTypeMap</code> constant in Xml namespace provides a mapping between node type codes and the corresponding string code as defined in the following table.</para>
    <table id="NodeTypeMap">
      <title>NodeTypeMap Constant Hash</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Value</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>&quot;0&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_NONE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;1&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_ELEMENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;2&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_ATTRIBUTE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;3&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_TEXT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;4&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_CDATA&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;5&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_ENTITY_REFERENCE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;6&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_ENTITY&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;7&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_PROCESSING_INSTRUCTION&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;8&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_COMMENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;9&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_DOCUMENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;10&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_DOCUMENT_TYPE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;11&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_DOCUMENT_FRAGMENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;12&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_NOTATION&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;13&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_WHITESPACE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;14&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_SIGNIFICANT_WHITESPACE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;15&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_END_ELEMENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;16&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_END_ENTITY&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>&quot;17&quot;</code></para></entry>
            <entry><para><code>&quot;XML_NODE_TYPE_XML_DECLARATION&quot;</code></para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>Additionally, the classes in the following table are included in the Xml namespace.</para>

    <table id="Xml_Class_List">
      <title>Xml Class List</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="XmlDoc_Class">XmlDoc</link></para></entry>
	    <entry><para>For analyzing and manipulating XML documents.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="XmlNode_Class">XmlNode</link></para></entry>
	    <entry><para>Gives information about XML data in an XML document.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="XmlReader_Class">XmlReader</link></para></entry>
	    <entry><para>For parsing or iterating through the elements of an XML document.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="XmlDoc_Class">
    <title>Xml::XmlDoc Class</title>

    <para>The XmlDoc class provides access to a parsed XML document by wrapping a C <code>xmlDocPtr</code> from <ulink url="http://www.xmlsoft.org">libxml2</ulink>.  Currently this class provides read-only access to XML documents; it is possible that this restriction will be removed in future versions of Qore.</para>

    <table>
      <title>XmlDoc Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<colspec colnum="2" align="center"/>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::constructor">XmlDoc::constructor</link>(<link linkend="string_type">string</link> <replaceable>$xml</replaceable>)</code></para>
              <para><code><link linkend="XmlDoc::constructor">XmlDoc::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$data</replaceable>)</code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates a new XmlDoc object from an XML string or a Qore hash.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::destructor">XmlDoc::destructor</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the XmlDoc object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::copy">XmlDoc::copy</link>()</code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a copy of the XmlDoc object.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::evalXPath">XmlDoc::evalXPath</link>(<link linkend="string_type">string</link> <replaceable>$xpath</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Evaluates an <ulink url="http://www.w3.org/TR/xpath">XPath</ulink> expression and returns a list of matching <link linkend="XmlNode_Class">XmlNode</link> objects; an empty list is returned if there are no matches.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::getRootElement">XmlDoc::getRootElement</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object representing the root element of the document, if any exists, otherwise returns <command><link linkend="NOTHING">NOTHING</link></command>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::getVersion">XmlDoc::getVersion</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the XML version of the document (normally 1.0).</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::toQore">XmlDoc::toQore</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a Qore hash corresponding to the XML data; multiple out-of-order keys are created in order in the returned hash by appending a suffix to the key names.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::toQoreData">XmlDoc::toQoreData</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a Qore hash corresponding to the XML data; key order is not guaranteed to be maintained as multiple out-or-order keys are merged into the same Qore list.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::toString">XmlDoc::toString</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the XML string for the XML document.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::validateRelaxNG">XmlDoc::validateRelaxNG</link>(<link linkend="string_type">string</link> <replaceable>$relaxng</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Validates the XML document against a <ulink url="http://www.relaxng.org/">RelaxNG</ulink> schema; if any errors occur, exceptions are thrown.  Not available if <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> is <code>False</code>.</para></entry>
	  </row>
	  <row>
	    <entry>
              <para><code><link linkend="XmlDoc::validateSchema">XmlDoc::validateSchema</link>(<link linkend="string_type">string</link> <replaceable>$xsd</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Validates the XML document against an <ulink url="http://www.w3.org/XML/Schema">XSD</ulink> schema; if any errors occur, exceptions are thrown.  Not available if <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> is <code>False</code>.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="XmlDoc::constructor">
      <title>XmlDoc::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new XmlDoc object from the XML string or Qore hash valus passed.  If a Qore hash value is passed, it must have only one top-level key, as the XML string will be created from the hash.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::constructor">XmlDoc::constructor</link>(<link linkend="string_type">string</link> <replaceable>$xml</replaceable>)</code></para>
              <para><code><link linkend="XmlDoc::constructor">XmlDoc::constructor</link>(<link linkend="hash_type">hash</link> <replaceable>$data</replaceable>)</code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> XmlDoc $xd($xml);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for XmlDoc::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$xml</replaceable></code></para></entry>
	      <entry><para>The XML string to use to create the XmlDoc object.</para></entry>
	    </row>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link> <replaceable>$data</replaceable></code></para></entry>
	      <entry><para>The Qore hash will be used to generate the XML string to use to create the XmlDoc object; the Qore hash must have only one top-level key.  The XML will be generated according to the rules documented in <link linkend="XML_Integration">XML Integration</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by XmlDoc::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>XMLDOC-CONSTRUCTOR-ERROR</code></para></entry>
	      <entry><para>Missing argument or invalid XML string passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>Note that if a hash is passed as the argument to the constructor, then the method can throw any of the exceptions documented in <link linkend="makeXMLString">makeXMLString()</link>.</para>

    </sect2>

    <sect2 id="XmlDoc::destructor">
      <title>XmlDoc::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $xd;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="XmlDoc::copy">
      <title>XmlDoc::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new XmlDoc object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> XmlDoc $new_doc = $doc.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="XmlDoc::evalXPath">
      <title>XmlDoc::evalXPath()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Evaluates an <ulink url="http://www.w3.org/TR/xpath">XPath</ulink> expression and returns a list of matching <link linkend="XmlNode_Class">XmlNode</link> objects.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::evalXPath">XmlDoc::evalXPath</link>(<link linkend="string_type">string</link> <replaceable>$xpath</replaceable>) <command>returns</command> <link linkend="list_type">list</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $list = $xd.evalXPath("//list[2]");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for XmlDoc::evalXPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$xpath</replaceable></code></para></entry>
	      <entry><para>The XPath expression to evaluate on the XmlDoc object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for XmlDoc::evalXPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><link linkend="list_type">list</link></para></entry>
	      <entry><para>Returns a list of <link linkend="XmlNode_Class">XmlNode</link> objects that match the XPath expression.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by XmlDoc::evalXPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>XMLDOC-EVAL-XPATH-ERROR</code></para></entry>
	      <entry><para>Missing XPath expression.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>XPATH-CONSTRUCTOR-ERROR</code></para></entry>
	      <entry><para>Cannot create XPath context from the XmlDoc object</para></entry>
	    </row>
	    <row>
	      <entry><para><code>XPATH-ERROR</code></para></entry>
	      <entry><para>An error occured evaluating the XPath expression</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="XmlDoc::getRootElement">
      <title>XmlDoc::getRootElement()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object representing the root element of the document, if any exists, otherwise returns <command><link linkend="NOTHING">NOTHING</link></command>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::getRootElement">XmlDoc::getRootElement</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> any $node = $xd.getRootElement();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for XmlDoc::getRootElement()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
	      <entry><para>The <link linkend="XmlNode_Class">XmlNode</link> object for the root element of the XML document, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>This method does not throw any exceptions.</para>
    </sect2>

    <sect2 id="XmlDoc::getVersion">
      <title>XmlDoc::getVersion()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the XML version of the contained XML document.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::getVersion">XmlDoc::getVersion</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> string $xmlver = $xd.getVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for XmlDoc::getVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The XML version of the contained document (normally &quot;1.0&quot;).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>This method does not throw any exceptions.</para>
    </sect2>

    <sect2 id="XmlDoc::toQore">
      <title>XmlDoc::toQore()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a Qore hash structure correponding to the XML data contained by the XmlDoc object. If duplicate, out-of-order XML elements are found in the input string, they are deserialized to Qore hash elements with the same name as the XML element but including a caret &quot;^&quot; and a numeric prefix to maintain the same key order in the Qore hash as in the input XML string.</para>
	    <para>For a similar method not preserving the order of keys in the XML in the resulting Qore hash by collapsing all elements at the same level with the same name to the same Qore list, see <link linkend="XmlDoc::toQoreData">XmlDoc::toQoreData()</link>.  See also <link linkend="parseXMLAsData">parseXMLAsData()</link> and  <link linkend="parseXML">parseXML()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::toQore">XmlDoc::toQore</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> hash $h = $xd.toQore();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for XmlDoc::toQore()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>The Qore hash corresponding to the data contained in the XML document with out-of-order keys preserved by appending a suffix to hash keys.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>This method does not throw any exceptions.</para>
    </sect2>

    <sect2 id="XmlDoc::toQoreData">
      <title>XmlDoc::toQoreData()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a Qore hash structure corresponding to the XML data contained by the XmlDoc object; does not preserve hash order with out-of-order duplicate keys: collapses all to the same list.</para>
	    <para>Note that data deserialized with this function may not be reserialized to the same input XML string due to the fact that duplicate, out-of-order XML elements are collapsed into lists in the resulting Qore hash, thereby losing the order in the original XML string.</para>
	    <para>For a similar method preserving the order of keys in the XML in the resulting Qore hash by generating Qore hash element names with numeric suffixes, see <link linkend="XmlDoc::toQore">XmlDoc::toQore()</link>.  See also <link linkend="parseXMLAsData">parseXMLAsData()</link> and  <link linkend="parseXML">parseXML()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::toQoreData">XmlDoc::toQoreData</link>() <command>returns</command> <link linkend="hash_type">hash</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> hash $h = $xd.toQoreData();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for XmlDoc::toQoreData()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="hash_type">hash</link></code></para></entry>
	      <entry><para>The Qore hash corresponding to the data contained in the XML document; out-of-order keys are not preserved but are instead collapsed to the same Qore list.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>This method does not throw any exceptions.</para>
    </sect2>

    <sect2 id="XmlDoc::toString">
      <title>XmlDoc::toString()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the XML string for the XML document</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::toString">XmlDoc::toString</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> string $xmlstr = $xd.toString();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Return Values for XmlDoc::toString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link></code></para></entry>
	      <entry><para>The XML string contained by the XmlDoc object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>This method does not throw any exceptions.</para>
    </sect2>

    <sect2 id="XmlDoc::validateRelaxNG">
      <title>XmlDoc::validateRelaxNG()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Validates the XML document against a <ulink url="http://www.relaxng.org/">RelaxNG</ulink> schema; if any errors occur, exceptions are thrown.</para>
            <para>The availability of this function depends on the presence of libxml2's <code>xmlTextReaderRelaxNGSetSchema()</code> function when Qore was compiled; for maximum portability check the constant <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> before running this method.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::validateRelaxNG">XmlDoc::validateRelaxNG</link>(<link linkend="string_type">string</link> <replaceable>$relaxng</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$xd.validateRelaxNG($relaxng);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for XmlDoc::validateRelaxNG()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$relaxng</replaceable></code></para></entry>
	      <entry><para>The RelaxNG schema to use to validate the XmlDoc object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by XmlDoc::validateRelaxNG()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>XMLDOC-VALIDATERELAXNG-ERROR</code></para></entry>
	      <entry><para>Missing RelaxNG schema string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>RELAXNG-ERROR</code></para></entry>
	      <entry><para>The RelaxNG schema could not be parsed.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>XML-RELAXNG-PARSE-ERROR</code></para></entry>
	      <entry><para>The XML document failed RelaxNG validation.</para></entry>
	    </row>
            <row>
              <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
              <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> before calling this function.</para></entry>
            </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="XmlDoc::validateSchema">
      <title>XmlDoc::validateSchema()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Validates the XML document against an <ulink url="http://www.w3.org/XML/Schema">XSD</ulink> schema; if any errors occur, exceptions are thrown.</para>
            <para>The availability of this function depends on the presence of libxml2's <code>xmlTextReaderSetSchema()</code> function when Qore was compiled; for maximum portability check the constant <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> before running this function.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Prototype</term>
	  <listitem>
              <para><code><link linkend="XmlDoc::validateSchema">XmlDoc::validateSchema</link>(<link linkend="string_type">string</link> <replaceable>$xsd</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$xd.validateSchema($xsd);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for XmlDoc::validateSchema()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$xsd</replaceable></code></para></entry>
	      <entry><para>The XSD schema to use to validate the XmlDoc object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by XmlDoc::validateSchema()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>XMLDOC-VALIDATESCHEMA-ERROR</code></para></entry>
	      <entry><para>Missing XSD schema string.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SCHEMA-ERROR</code></para></entry>
	      <entry><para>The XSD schema could not be parsed.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>XML-SCHEMA-PARSE-ERROR</code></para></entry>
	      <entry><para>The XML document failed XSD schema validation.</para></entry>
	    </row>
            <row>
              <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
              <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> before calling this function.</para></entry>
            </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="XmlNode_Class">
    <title>Xml::XmlNode Class</title>
    <para>The XmlNode class provides information about the components of an XML document.  This class currently cannot be constructed manually, but rather can only be returned by the <link linkend="XmlDoc_Class">XmlDoc</link> class.  It is possible that future versions of Qore will remove this restriction.</para>
    <table>
      <title>XmlNode Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_constructor">XmlNode::constructor</link>()</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Cannot be called manually; throws an exception.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_destructor">XmlNode::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the XmlNode object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_copy">XmlNode::copy</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Creates an independent copy of the XmlNode object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_childElementCount">XmlNode::childElementCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the number of child elements of the XmlNode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getSpacePreserve">XmlNode::getSpacePreserve</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the space-preserving behavior of the XmlNode object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getElementType">XmlNode::getElementType</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry><para>Returns the type of the XmlNode object; for possible values see <link linkend="XML_Element_Type_Constants">XML Element Type Constants</link>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getElementTypeName">XmlNode::getElementTypeName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry><para>Returns the name of the type of the XmlNode object if possible, <command><link linkend="NOTHING">NOTHING</link></command> if not; for possible values see the <link linkend="ElementTypeMap">ElementTypeMap</link> constant.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_firstElementChild">XmlNode::firstElementChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry><para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the first child of the current XmlNode object that is an XML element, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para></entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getLastChild">XmlNode::getLastChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last child of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_lastElementChild">XmlNode::lastElementChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last child of the current XmlNode object that is an XML element, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_nextElementSibling">XmlNode::nextElementSibling</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the next element at the same level of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_previousElementSibling">XmlNode::previousElementSibling</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the previous element at the same level of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getPath">XmlNode::getPath</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns a string representing a structured path for the current node.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getNsProp">XmlNode::getNsProp</link>(<link linkend="string_type">string</link> <replaceable>$prop</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns the value of the given property anchored in the given namespace as a string, or <command><link linkend="NOTHING">NOTHING</link></command> if no such property exists in the current XmlNode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getProp">XmlNode::getProp</link>(<link linkend="string_type">string</link> <replaceable>$prop</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns the value of the given property as a string, or <command><link linkend="NOTHING">NOTHING</link></command> if no such property exists in the current XmlNode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getContent">XmlNode::getContent</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string of the content of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no content is available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getName">XmlNode::getName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getLang">XmlNode::getLang</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the language of the current node, determined by the value of the <code>xml:lang</code> attribute of this node or of the nearest ancestor.  If no such property is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_isText">XmlNode::isText</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the node is a text node, <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_isBlank">XmlNode::isBlank</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the node is empty or whitespace only, <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlNode_getXML">XmlNode::getXML</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns XML corresponding to the current node and all its children or <command><link linkend="NOTHING">NOTHING</link></command> if no data is available.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="XmlNode_constructor">
      <title>XmlNode::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Cannot be called manually; throws an exception.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Exceptions thrown by XmlNode::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLNODE-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>XmlNode objects cannot be constructed manually</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_destructor">
      <title>XmlNode::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the XmlNode object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>delete</command> $xmlnode;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="XmlNode_copy">
      <title>XmlNode::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates an independent copy of the XmlNode object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> XmlNode $value = $xmlnode.copy();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="XmlNode_childElementCount">
      <title>XmlNode::childElementCount()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the number of child elements of the XmlNode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_childElementCount">XmlNode::childElementCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.childElementCount();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::childElementCount()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>the number of child elements of the XmlNode</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getSpacePreserve">
      <title>XmlNode::getSpacePreserve()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the space-preserving behavior of the XmlNode object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getSpacePreserve">XmlNode::getSpacePreserve</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getSpacePreserve();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getSpacePreserve()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>The space-preserving behavior of the XmlNode: -1 = xml:space is not inherited, 0 = default, 1 = preserve</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getElementType">
      <title>XmlNode::getElementType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the type of the XmlNode object; for possible values see <link linkend="XML_Element_Type_Constants">XML Element Type Constants</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getElementType">XmlNode::getElementType</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getElementType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getElementType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>the type of the XmlNode object; for possible values see <link linkend="XML_Element_Type_Constants">XML Element Type Constants</link></para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getElementTypeName">
      <title>XmlNode::getElementTypeName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the type of the XmlNode object; for possible values see the <link linkend="ElementTypeMap">ElementTypeMap</link> constant.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getElementTypeName">XmlNode::getElementTypeName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getElementTypeName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getElementTypeName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>the name of the type of the XmlNode object; for possible values see the <link linkend="ElementTypeMap">ElementTypeMap</link> constant</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_firstElementChild">
      <title>XmlNode::firstElementChild()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the first child of the current XmlNode object that is an XML element, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_firstElementChild">XmlNode::firstElementChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.firstElementChild();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::firstElementChild()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>returns an <link linkend="XmlNode_Class">XmlNode</link> object for the first element child of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getLastChild">
      <title>XmlNode::getLastChild()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last child of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getLastChild">XmlNode::getLastChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getLastChild();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getLastChild()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last child of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_lastElementChild">
      <title>XmlNode::lastElementChild()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last child of the current XmlNode object that is an XML element, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_lastElementChild">XmlNode::lastElementChild</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.lastElementChild();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::lastElementChild()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>returns an <link linkend="XmlNode_Class">XmlNode</link> object for the last element child of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_nextElementSibling">
      <title>XmlNode::nextElementSibling()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the next element at the same level of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_nextElementSibling">XmlNode::nextElementSibling</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.nextElementSibling();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::nextElementSibling()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>returns an <link linkend="XmlNode_Class">XmlNode</link> object for the next element sibling of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_previousElementSibling">
      <title>XmlNode::previousElementSibling()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an <link linkend="XmlNode_Class">XmlNode</link> object for the previous element at the same level of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_previousElementSibling">XmlNode::previousElementSibling</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.previousElementSibling();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::previousElementSibling()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlNode_Class">XmlNode</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>returns an <link linkend="XmlNode_Class">XmlNode</link> object for the previous element sibling of the current XmlNode object, or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getPath">
      <title>XmlNode::getPath()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string representing a structured path for the current node.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getPath">XmlNode::getPath</link>() <command>returns</command> <link linkend="string_type">string</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getPath();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getPath()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="string_type">string</link></code></para>
              </entry>
              <entry>
                <para>a string representing a structured path for the current node</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getNsProp">
      <title>XmlNode::getNsProp()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the given property anchored in the given namespace, or <command><link linkend="NOTHING">NOTHING</link></command> if no such property exists in the current XmlNode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getNsProp">XmlNode::getNsProp</link>(<link linkend="string_type">string</link> <replaceable>$prop</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getNsProp($prop, $namespace);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlNode::getNsProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$prop</replaceable></code></para></entry>
              <entry><para>The name of the property to retrieve</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$ns</replaceable></code></para></entry>
              <entry>
                <para>The name of the namespace of the property</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlNode::getNsProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the value of the property or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlNode::getNsProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLNODE-GETNSPROP-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getProp">
      <title>XmlNode::getProp()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the given property, or <command><link linkend="NOTHING">NOTHING</link></command> if no such property exists in the current XmlNode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getProp">XmlNode::getProp</link>(<link linkend="string_type">string</link> <replaceable>$prop</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getProp($prop);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlNode::getProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$prop</replaceable></code></para></entry>
              <entry><para>The name of the property to retrieve</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlNode::getProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the value of the property or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlNode::getProp()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLNODE-GETPROP-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getContent">
      <title>XmlNode::getContent()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string of the content of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getContent">XmlNode::getContent</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getContent();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getContent()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>a string of the content of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if there is no content</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getName">
      <title>XmlNode::getName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getName">XmlNode::getName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the name of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getLang">
      <title>XmlNode::getLang()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the language of the current node, determined by the value of the <code>xml:lang</code> attribute of this node or of the nearest ancestor.  If no such property is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getLang">XmlNode::getLang</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getLang();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getLang()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the language of the current node, determined by the value of the <code>xml:lang</code> attribute of this node or of the nearest ancestor.  If no such property is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_isText">
      <title>XmlNode::isText()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the node is a text node, <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_isText">XmlNode::isText</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.isText();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::isText()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the node is a text node, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_isBlank">
      <title>XmlNode::isBlank()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the node is empty or whitespace only, <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_isBlank">XmlNode::isBlank</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.isBlank();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::isBlank()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the node is empty or whitespace only, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlNode_getXML">
      <title>XmlNode::getXML()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string containing XML corresponding to the current node and all its children or <command><link linkend="NOTHING">NOTHING</link></command> if no information is available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlNode_getXML">XmlNode::getXML</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlnode.getXML();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlNode::getXML()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>XML corresponding to the current node and all its children or <command><link linkend="NOTHING">NOTHING</link></command> if no information is available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="XmlReader_Class">
    <title>Xml::XmlReader Class</title>

    <para>The XmlReader class allows XML strings to be iterated and parsed piecewise.</para>
    <table>
      <title>XmlReader Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
	<colspec colnum="2" align="center"/>
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_constructor">XmlReader::constructor</link>(<link linkend="XmlDoc_Class">XmlDoc</link> <replaceable>$doc</replaceable>)</code></para>
              <para><code><link linkend="XmlReader_constructor">XmlReader::constructor</link>(<link linkend="string_type">string</link> <replaceable>$xml</replaceable>)</code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the XmlReader object based on the <link linkend="XmlDoc_Class">XmlDoc</link> object or XML string passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_destructor">XmlReader::destructor</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the XmlReader object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_copy">XmlReader::copy</link>()</code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Creates an independent copy of the XmlReader object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_read">XmlReader::read</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the next node in the stream.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_readSkipWhitespace">XmlReader::readSkipWhitespace</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the next node in the stream, skipping any whitespace nodes.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_nodeType">XmlReader::nodeType</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the node type of the current node; for return values, see <link linkend="XML_Node_Type_Constants">XML Node Type Constants</link>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_nodeTypeName">XmlReader::nodeTypeName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string giving the node type of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if the node type name cannot be determined; for possible return values, see the values of the <link linkend="NodeTypeMap">NodeTypeMap</link> constant.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_depth">XmlReader::depth</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the depth of the node in the tree.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_name">XmlReader::name</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the qualified name of the node (prefix:LocalName) or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_value">XmlReader::value</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the text value of the node or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_hasAttributes">XmlReader::hasAttributes</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the node has attributes or <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_hasValue">XmlReader::hasValue</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the node has a text value or <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_isDefault">XmlReader::isDefault</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if an attribute node was generated from the default value defined in the DTD or schema, <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_isEmptyElement">XmlReader::isEmptyElement</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the current node is empty or <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_isNamespaceDecl">XmlReader::isNamespaceDecl</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the current node is a namespace declaration rather than a regular attribute or <code>False</code> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_isValid">XmlReader::isValid</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns <code>True</code> if the current reader parser context is valid, <code>False</code> if not</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_toQore">XmlReader::toQore</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns a hash corresponding to the XML string from the current node position, including all its children, or a string if the reader is on an element with no children, or <command><link linkend="NOTHING">NOTHING</link></command> if there is no more data to read.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_toQoreData">XmlReader::toQoreData</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns a hash corresponding to the XML string from the current node position, including all its children, or a string if the reader is on an element with no children, or <command><link linkend="NOTHING">NOTHING</link></command> if there is no more data to read.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_attributeCount">XmlReader::attributeCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the number of attributes of the current node</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_baseUri">XmlReader::baseUri</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the base URI of the node if known, <command><link linkend="NOTHING">NOTHING</link></command> if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_encoding">XmlReader::encoding</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the encoding string given in the XML string or <command><link linkend="NOTHING">NOTHING</link></command> if none is given.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_localName">XmlReader::localName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the local name of the node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_namespaceUri">XmlReader::namespaceUri</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the URI defining the namespace associated with the node, or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_prefix">XmlReader::prefix</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the shorthand reference to the namespace associated with the node, or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_xmlLang">XmlReader::xmlLang</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the xml:lang scope within which the node resides or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_xmlVersion">XmlReader::xmlVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string giving the XML version of the source document (normally &quot;1.0&quot;)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_getAttribute">XmlReader::getAttribute</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns the value of the attribute matching the qualified name passed, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_getAttributeNs">XmlReader::getAttributeNs</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Returns the value of the given attribute anchored in the given namespace, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_getAttributeOffset">XmlReader::getAttributeOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the string value of the attribute with the specified index relative to the containing element, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_lookupNamespace">XmlReader::lookupNamespace</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="XmlReader_lookupNamespace">XmlReader::lookupNamespace</link>(<link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the namespace corresponding to the given prefix in the scope of the current element as a string or <command><link linkend="NOTHING">NOTHING</link></command> if none is found.  Called with no argument this function returns the default namespace.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToAttribute">XmlReader::moveToAttribute</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the attribute with the specified qualified name.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToAttributeNs">XmlReader::moveToAttributeNs</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the attribute with the specified local name and namespace URI.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToAttributeOffset">XmlReader::moveToAttributeOffset</link>(<link linkend="int_type">int</link> <replaceable>$offset</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the attribute with the specified index relative to the containing element.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToElement">XmlReader::moveToElement</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the element node containing the current attribute node.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToFirstAttribute">XmlReader::moveToFirstAttribute</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the first attribute of the current node.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_moveToNextAttribute">XmlReader::moveToNextAttribute</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the next attribute of the current node.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_next">XmlReader::next</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Moves the position of the current instance to the next node in the tree at the same level, skipping any subtree.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_getInnerXml">XmlReader::getInnerXml</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an XML string of the contents of the all current node's child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_getOuterXml">XmlReader::getOuterXml</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns an XML string of the contents of the current node and all child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_relaxNGValidate">XmlReader::relaxNGValidate</link>(<link linkend="string_type">string</link> <replaceable>$relaxng</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Set a RelaxNG schema for schema validation while parsing the XML document.  This method must be called before the first call to <link linkend="XmlReader_read">XmlReader::read()</link>.  Not available if <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> is <code>False</code>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><code><link linkend="XmlReader_schemaValidate">XmlReader::schemaValidate</link>(<link linkend="string_type">string</link> <replaceable>$xsd</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Set an XSD schema for schema validation while parsing the XML document.  This method must be called before the first call to <link linkend="XmlReader_read">XmlReader::read()</link>.  Not available if <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> is <code>False</code>.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="XmlReader_constructor">
      <title>XmlReader::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the XmlReader object based on the <link linkend="XmlDoc_Class">XmlDoc</link> object or XML string passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_constructor">XmlReader::constructor</link>(<link linkend="XmlDoc_Class">XmlDoc</link> <replaceable>$doc</replaceable>)</code></para>
              <para><code><link linkend="XmlReader_constructor">XmlReader::constructor</link>(<link linkend="string_type">string</link> <replaceable>$xml</replaceable>)</code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> XmlReader $xmlreader($xml);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="XmlDoc_Class">XmlDoc</link> <replaceable>$doc</replaceable></code></para></entry>
              <entry>
                <para>The pre-parsed XML document object to iterate through.</para>
              </entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$xml</replaceable></code></para></entry>
              <entry>
                <para>The XML string to parse.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLNODE-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid argument, error in XML string, etc</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_destructor">
      <title>XmlReader::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the XmlReader object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>delete</command> $xmlreader;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="XmlReader_copy">
      <title>XmlReader::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates an independent copy of the XmlReader object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>my</command> XmlReader $xr = $xmlreader.copy();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
    <sect2 id="XmlReader_read">
      <title>XmlReader::read()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the next node in the stream.  Returns <code>True</code> if the read was successful, <code>False</code> if there are no more nodes to read.  If an error occurs parsing the XML string, an exception is raised (see below).</para>
            <para>See also <link linkend="XmlReader_readSkipWhitespace">XmlReader::readSkipWhitespace()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_read">XmlReader::read</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>if</command> (!$xmlreader.read())
    break;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::read()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the read was successful, <code>False</code> if there are no more nodes to read</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::read()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>PARSE-XML-EXCEPTION</code>
                </para>
              </entry>
              <entry>
                <para>cannot move to next node due to an error parsing the XML string (exception description string contains details about the error)</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_readSkipWhitespace">
      <title>XmlReader::readSkipWhitespace()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the next node in the stream, skipping any whitespace nodes.  Returns <code>True</code> if the read was successful, <code>False</code> if there are no more nodes to read.  If an error occurs parsing the XML string, an exception is raised (see below).</para>
            <para>See also <link linkend="XmlReader_read">XmlReader::read()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_readSkipWhitespace">XmlReader::readSkipWhitespace</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting><command>if</command> (!$xmlreader.readSkipWhitespace())
    break;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::readSkipWhitespace()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the read was successful, <code>False</code> if there are no more nodes to read</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::readSkipWhitespace()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>PARSE-XML-EXCEPTION</code>
                </para>
              </entry>
              <entry>
                <para>cannot move to next node due to an error parsing the XML string (exception description string contains details about the error)</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_nodeType">
      <title>XmlReader::nodeType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the node type of the current node; for return values, see <link linkend="XML_Node_Type_Constants">XML Node Type Constants</link>.</para>
            <para>See also <link linkend="NodeTypeMap">NodeTypeMap</link>.</para>
            <para>See also <link linkend="XmlReader_nodeTypeName">XmlReader::nodeTypeName()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_nodeType">XmlReader::nodeType</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.nodeType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::nodeType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>the node type of the current node; for return values, see <link linkend="XML_Node_Type_Constants">XML Node Type Constants</link></para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_nodeTypeName">
      <title>XmlReader::nodeTypeName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string giving the node type of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no current node is available; for possible return values, see the values of the <link linkend="NodeTypeMap">NodeTypeMap</link> constant.</para>
            <para>See also <link linkend="XmlReader_nodeType">XmlReader::nodeType()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_nodeTypeName">XmlReader::nodeTypeName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.nodeTypeName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::nodeTypeName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>a string giving the node type of the current node or <command><link linkend="NOTHING">NOTHING</link></command> if no current node is available; for possible return values, see the values of the <link linkend="NodeTypeMap">NodeTypeMap</link> constant</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_depth">
      <title>XmlReader::depth()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the depth of the node in the tree.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_depth">XmlReader::depth</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.depth();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::depth()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>the depth of the node in the tree</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_name">
      <title>XmlReader::name()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the qualified name of the node (prefix:LocalName) or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
            <para>See also <link linkend="XmlReader_localName">XmlReader::localName()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_name">XmlReader::name</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.name();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::name()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the qualified name of the node (prefix:LocalName) or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_value">
      <title>XmlReader::value()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the text value of the node or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_value">XmlReader::value</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.value();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::value()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the text value of the node or <command><link linkend="NOTHING">NOTHING</link></command> if not available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_hasAttributes">
      <title>XmlReader::hasAttributes()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the node has attributes or <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_hasAttributes">XmlReader::hasAttributes</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.hasAttributes();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::hasAttributes()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the node has attributes, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_hasValue">
      <title>XmlReader::hasValue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the node has a text value or <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_hasValue">XmlReader::hasValue</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.hasValue();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::hasValue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the node has a text value, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_isDefault">
      <title>XmlReader::isDefault()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if an attribute node was generated from the default value defined in the DTD or schema, <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_isDefault">XmlReader::isDefault</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.isDefault();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::isDefault()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the node an attribute node was generated from the default value defined in the DTD or schema, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_isEmptyElement">
      <title>XmlReader::isEmptyElement()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the current node is empty or <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_isEmptyElement">XmlReader::isEmptyElement</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.isEmptyElement();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::isEmptyElement()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the current node is empty, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_isNamespaceDecl">
      <title>XmlReader::isNamespaceDecl()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the current node is a namespace declaration rather than a regular attribute or <code>False</code> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_isNamespaceDecl">XmlReader::isNamespaceDecl</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.isNamespaceDecl();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::isNamespaceDecl()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the current node is a namespace declaration rather than a regular attribute, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_isValid">
      <title>XmlReader::isValid()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns <code>True</code> if the current reader parser context is valid, <code>False</code> if not</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_isValid">XmlReader::isValid</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.isValid();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::isValid()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True if the current reader parser context is valid, <code>False</code> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_toQore">
      <title>XmlReader::toQore()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns Qore data corresponding to the XML starting at the current node position.  If there are sub elements, a hash of the XML is returned, the sub elements representing the current node's children.  If duplicate, out-of-order XML elements are found in the input string, they are deserialized to Qore hash elements with the same name as the XML element but including a caret &quot;^&quot; and a numeric prefix to maintain the same key order in the Qore hash as in the input XML string.</para>
	    <para>If only text is present at the current element, a string is returned.  If no information is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para>
	    <para>See also <link linkend="XmlReader_toQoreData">XmlReader::toQoreData()</link>.</para>
            <para>Functionally similar to <link linkend="parseXML">parseXML()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_toQore">XmlReader::toQore</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.toQore();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::toQore()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="hash_type">hash</link>, <link linkend="string_type">string</link>, or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>Returns Qore data corresponding to the XML starting at the current node position.  If there are sub elements, a hash of the XML is returned, the sub elements representing the current node's children; XML element order is maintained by appending a suffix to key names.  If only text is present at the current element, a string is returned.  If no information is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::toQore()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>PARSE-XML-EXCEPTION</code>
                </para>
              </entry>
              <entry>
                <para>error parsing the XML string (exception description string contains details about the error)</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_toQoreData">
      <title>XmlReader::toQoreData()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
	    <para>Returns Qore data corresponding to the XML starting at the current node position.  If there are sub elements, a hash of the XML is returned, the sub elements representing the current node's children.  Note that data deserialized with this method may not be reserialized to an identical XML string due to the fact that XML elements with the same name are collapsed into Qore lists in the resulting Qore hash irrespective of the order in the original XML string.</para>
	    <para>If only text is present at the current element, a string is returned.  If no information is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para>
	    <para>See also <link linkend="XmlReader_toQore">XmlReader::toQore()</link>.</para>
            <para>Functionally similar to <link linkend="parseXMLAsData">parseXMLAsData()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_toQoreData">XmlReader::toQoreData</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.toQoreData();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::toQoreData()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="hash_type">hash</link>, <link linkend="string_type">string</link>, or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry><para>Returns Qore data corresponding to the XML starting at the current node position.  If there are sub elements, a hash of the XML is returned, the sub elements representing the current node's children; does not guarantee to maintain XML element order in the hash as elements at the same level with the same name are collapsed to a Qore list.  If only text is present at the current element, a string is returned.  If no information is available, then <command><link linkend="NOTHING">NOTHING</link></command> is returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::toQoreData()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>PARSE-XML-EXCEPTION</code>
                </para>
              </entry>
              <entry>
                <para>error parsing the XML string (exception description string contains details about the error)</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_attributeCount">
      <title>XmlReader::attributeCount()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the number of attributes of the current node</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_attributeCount">XmlReader::attributeCount</link>() <command>returns</command> <link linkend="int_type">int</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.attributeCount();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::attributeCount()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="int_type">int</link></code></para>
              </entry>
              <entry>
                <para>the number of attributes of the current node</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_baseUri">
      <title>XmlReader::baseUri()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the base URI of the node if known, <command><link linkend="NOTHING">NOTHING</link></command> if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_baseUri">XmlReader::baseUri</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.baseUri();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::baseUri()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the base URI of the node if known, <command><link linkend="NOTHING">NOTHING</link></command> if not</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_encoding">
      <title>XmlReader::encoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the encoding string given in the XML string or <command><link linkend="NOTHING">NOTHING</link></command> if none is given.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_encoding">XmlReader::encoding</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.encoding();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::encoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>Returns the encoding string given in the XML string or <command><link linkend="NOTHING">NOTHING</link></command> if none is given.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_localName">
      <title>XmlReader::localName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the local name of the node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_localName">XmlReader::localName</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.localName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::localName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the local name of the node or <command><link linkend="NOTHING">NOTHING</link></command> if no name is available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_namespaceUri">
      <title>XmlReader::namespaceUri()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the URI defining the namespace associated with the node, or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_namespaceUri">XmlReader::namespaceUri</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.namespaceUri();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::namespaceUri()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the URI defining the namespace associated with the node or <command><link linkend="NOTHING">NOTHING</link></command> if not available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_prefix">
      <title>XmlReader::prefix()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the shorthand reference to the namespace associated with the node, or <command><link linkend="NOTHING">NOTHING</link></command> if not available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_prefix">XmlReader::prefix</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.prefix();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::prefix()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the shorthand reference to the namespace associated with the node or <command><link linkend="NOTHING">NOTHING</link></command> if not available</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_xmlLang">
      <title>XmlReader::xmlLang()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the xml:lang scope within which the node resides or <command><link linkend="NOTHING">NOTHING</link></command> if there is none.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_xmlLang">XmlReader::xmlLang</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.xmlLang();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::xmlLang()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the xml:lang scope within which the node resides or <command><link linkend="NOTHING">NOTHING</link></command> if there is none</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_xmlVersion">
      <title>XmlReader::xmlVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string giving the XML version of the source document (normally &quot;1.0&quot;) or <command><link linkend="NOTHING">NOTHING</link></command> if none is present.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_xmlVersion">XmlReader::xmlVersion</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.xmlVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::xmlVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>a string giving the XML version of the source document (normally &quot;1.0&quot;) or <command><link linkend="NOTHING">NOTHING</link></command> if none is present</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_getAttribute">
      <title>XmlReader::getAttribute()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the attribute matching the qualified name passed, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            <para>See also <link linkend="XmlReader_getAttributeNs">XmlReader::getAttributeNs()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_getAttribute">XmlReader::getAttribute</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.getAttribute($name);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::getAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$attr</replaceable></code></para></entry>
              <entry><para>The name of the attribute to retrieve</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::getAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the value of the attribute or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::getAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-GETATTRIBUTE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_getAttributeNs">
      <title>XmlReader::getAttributeNs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the given attribute anchored in the given namespace, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            <para>See also <link linkend="XmlReader_getAttribute">XmlReader::getAttribute()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_getAttributeNs">XmlReader::getAttributeNs</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.getAttributeNs($localname, $namespaceuri);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::getAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$attr</replaceable></code></para></entry>
              <entry><para>The name of the attribute to retrieve</para></entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$ns</replaceable></code></para></entry>
              <entry>
                <para>The name of the namespace URI of the attribute</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::getAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the value of the attribute or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::getAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-GETATTRIBUTENS-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_getAttributeOffset">
      <title>XmlReader::getAttributeOffset()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the attribute with the specified index relative to the containing element, or <command><link linkend="NOTHING">NOTHING</link></command> if no such attribute exists in the current XmlReader.</para>
            <para>See also <link linkend="XmlReader_getAttribute">XmlReader::getAttribute()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_getAttributeOffset">XmlReader::getAttributeOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.getAttributeOffset($offset);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::getAttributeOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0</code></para></entry>
              <entry>
                <para>the index of the attribute relative to the containing element</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::getAttributeOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>the value of the attribute or <command><link linkend="NOTHING">NOTHING</link></command> if it does not exist</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_lookupNamespace">
      <title>XmlReader::lookupNamespace()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>returns the namespace corresponding to the given prefix in the scope of the current element.  If no prefix is given, the default namespace is returned.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_lookupNamespace">XmlReader::lookupNamespace</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
              <para><code><link linkend="XmlReader_lookupNamespace">XmlReader::lookupNamespace</link>(<link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.lookupNamespace($prefix);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::lookupNamespace()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>[<link linkend="string_type">string</link> <replaceable>$ns</replaceable>]</code></para></entry>
              <entry>
                <para>The namespace prefix to resolve; if no value is sent for this argument, the default namespace is returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::lookupNamespace()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>The namespace corresponding to the given prefix in the scope of the current element or <command><link linkend="NOTHING">NOTHING</link></command> if the prefix could not be resolved.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToAttribute">
      <title>XmlReader::moveToAttribute()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the attribute with the specified qualified name.</para>
            <para>See also <link linkend="XmlReader_moveToAttributeNs">XmlReader::moveToAttributeNs()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToAttribute">XmlReader::moveToAttribute</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.moveToAttribute($name);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::moveToAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$attr</replaceable></code></para></entry>
              <entry>
                <para>The qualified name of the attribute to move to</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::moveToAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>XMLREADER-MOVETOATTRIBUTE-ERROR</code></para></entry>
              <entry><para>missing or invalid argument</para></entry>
            </row>
            <row>
              <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>error parsing XML</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToAttributeNs">
      <title>XmlReader::moveToAttributeNs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the attribute with the specified local name and namespace URI.</para>
            <para>See also <link linkend="XmlReader_moveToAttribute">XmlReader::moveToAttribute()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToAttributeNs">XmlReader::moveToAttributeNs</link>(<link linkend="string_type">string</link> <replaceable>$attr</replaceable>, <link linkend="string_type">string</link> <replaceable>$ns</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.moveToAttributeNs($localname, $namespaceuri);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::moveToAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$attr</replaceable></code></para></entry>
              <entry>
                <para>The qualified name of the attribute to move to</para>
              </entry>
            </row>
            <row>
              <entry><para><code><link linkend="string_type">string</link> <replaceable>$ns</replaceable></code></para></entry>
              <entry>
                <para>The namespace URI of the attribute</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::moveToAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToAttributeNs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-MOVETOATTRIBUTENS-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToAttributeOffset">
      <title>XmlReader::moveToAttributeOffset()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the attribute with the specified index relative to the containing element.</para>
            <para>See also <link linkend="XmlReader_moveToAttribute">XmlReader::moveToAttribute()</link></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToAttributeOffset">XmlReader::moveToAttributeOffset</link>(<link linkend="softint_type">softint</link> <replaceable>$offset</replaceable>) <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$b = $xmlreader.moveToAttributeOffset($offset);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::moveToAttributeOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="softint_type">softint</link> <replaceable>$offset</replaceable> = 0</code></para></entry>
              <entry>
                <para>the index of the attribute relative to the containing element to move to</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlReader::moveToAttributeOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry>
                <para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToAttributeOffset()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToElement">
      <title>XmlReader::moveToElement()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the element node containing the current attribute node.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToElement">XmlReader::moveToElement</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.moveToElement();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::moveToElement()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToElement()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToFirstAttribute">
      <title>XmlReader::moveToFirstAttribute()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the first attribute of the current node.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToFirstAttribute">XmlReader::moveToFirstAttribute</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.moveToFirstAttribute();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::moveToFirstAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToFirstAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_moveToNextAttribute">
      <title>XmlReader::moveToNextAttribute()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the next attribute of the current node.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_moveToNextAttribute">XmlReader::moveToNextAttribute</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.moveToNextAttribute();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::moveToNextAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="bool_type">bool</link></code></para></entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::moveToNextAttribute()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_next">
      <title>XmlReader::next()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Moves the position of the current instance to the next node in the tree at the same level, skipping any subtree.  Returns <code>True</code> if the operation succeeded, <code>False</code> if there are no more nodes to read.  If an error occurs parsing the XML string, an exception is raised.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_next">XmlReader::next</link>() <command>returns</command> <link linkend="bool_type">bool</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.next();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>


      <table>
        <title>Return Values for XmlReader::next()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><code><link linkend="bool_type">bool</link></code></para>
              </entry>
              <entry><para>True in case of success, <code>False</code> if not found; if an XML parsing error occurs, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::next()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><code>PARSE-XML-EXCEPTION</code></para></entry>
              <entry><para>an error occured parsing the XML string</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_getInnerXml">
      <title>XmlReader::getInnerXml()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an XML string of the contents of the all current node's child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes.</para>
            <para>See also <link linkend="XmlReader_getOuterXml">XmlReader::getOuterXml()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_getInnerXml">XmlReader::getInnerXml</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.getInnerXml();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>


      <table>
        <title>Return Values for XmlReader::getInnerXml()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>an XML string of the contents of all the current node's child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_getOuterXml">
      <title>XmlReader::getOuterXml()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an XML string of the contents of the current node and all child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes.</para>
            <para>See also <link linkend="XmlReader_getInnerXml">XmlReader::getInnerXml()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_getOuterXml">XmlReader::getOuterXml</link>() <command>returns</command> <link linkend="any_type">any</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$value = $xmlreader.getOuterXml();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
        <title>Return Values for XmlReader::getOuterXml()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code><link linkend="string_type">string</link> or <link linkend="nothing_type">nothing</link></code></para></entry>
              <entry>
                <para>an XML string of the contents of the current node and all child nodes and markup, or <command><link linkend="NOTHING">NOTHING</link></command> if the current node is neither an element nor an attribute or has no child nodes</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_relaxNGValidate">
      <title>XmlReader::relaxNGValidate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Set a RelaxNG schema for schema validation while parsing the XML document.  This method must be called before the first call to <link linkend="XmlReader_read">XmlReader::read()</link></para>
        <para>The availability of this function depends on the presence of libxml2's <code>xmlTextReaderRelaxNGValidate()</code> function when Qore was compiled; for maximum portability check the constant <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> before calling this method.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
            <para>If any errors occur, an exception is thrown (see below).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_relaxNGValidate">XmlReader::relaxNGValidate</link>(<link linkend="string_type">string</link> <replaceable>$relaxng</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$xmlreader.relaxNGValidate($rng);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::relaxNGValidate()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>$relaxng</replaceable></code></para></entry>
	      <entry><para>The RelaxNG schema to use to validate the XML string while parsing.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::relaxNGValidate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-RELAXNGVALIDATE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-RELAXNG-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid RelaxNG schema or method called after the first call to XmlReader::read()</para>
              </entry>
            </row>
            <row>
              <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
              <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constant <code><link linkend="HAVE_PARSEXMLWITHRELAXNG">HAVE_PARSEXMLWITHRELAXNG</link></code> before calling this function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlReader_schemaValidate">
      <title>XmlReader::schemaValidate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Set an XSD schema for schema validation while parsing the XML document.  This method must be called before the first call to <link linkend="XmlReader_read">XmlReader::read()</link></para>
        <para>The availability of this function depends on the presence of libxml2's <code>xmlTextReaderSchemaValidate()</code> function when Qore was compiled; for maximum portability check the constant <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> before calling this method.  See <link linkend="Library_Options">Library Option Constants</link> for a list of all option constants.</para>
            <para>If any errors occur, an exception is thrown (see below).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prototype</term>
          <listitem>
              <para><code><link linkend="XmlReader_schemaValidate">XmlReader::schemaValidate</link>(<link linkend="string_type">string</link> <replaceable>$xsd</replaceable>) <command>returns</command> <link linkend="nothing_type">nothing</link></code></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$xmlreader.schemaValidate($xsd);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlReader::schemaValidate()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code><link linkend="string_type">string</link> <replaceable>xsd</replaceable></code></para></entry>
	      <entry><para>The XSD schema to use to validate the XML string while parsing.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlReader::schemaValidate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-SCHEMAVALIDATE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>XMLREADER-XSD-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid RelaxNG schema or method called after the first call to XmlReader::read()</para>
              </entry>
            </row>
            <row>
              <entry><para><code>MISSING-FEATURE-ERROR</code></para></entry>
              <entry><para>This exception is thrown when the function is not available; for maximum portability, check the constan
t <code><link linkend="HAVE_PARSEXMLWITHSCHEMA">HAVE_PARSEXMLWITHSCHEMA</link></code> before calling this function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>
</chapter>
