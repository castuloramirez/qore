# -*- mode: qore; indent-tabs-mode: nil -*-
# @file RestHandler.qm Qore user module for working with SQL data

/*  RestHandler.qm Copyright 2013 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.8 or better
%requires qore >= 0.8.8

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%requires HttpServer >= 0.3.7
%requires Mime >= 1.3

%try-module yaml
%define NoYaml
%endtry

%try-module xml
%define NoXml
%endtry

%try-module json
%define NoJson
%endtry

module RestHandler {
    version = "0.1";
    desc = "user module for implementing REST services with the Qore HTTP server";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
}

/** @mainpage RestHandler Module

    The %RestHandler module provides functionality for implementing REST services with the Qore HTTP server.

    To use this module, use \c "%requires RestHandler" in your code.
    
    All the public symbols in the module are defined in the RestHandler namespace
*/

#! the RestHandler namespace contains all the objects in the RestHandler module
public namespace RestHandler {
    public const Err501 = (
        "code": 501,
        "body": "not implemented",
        );

    public class AbstractRestObject {
        public {
        }

        private {
            AbstractRestClass cls;
        }

        constructor(AbstractRestClass ncls) {
            cls = ncls;
        }

        AbstractRestClass getClass() {
            return cls;
        }

        string getClassName() {
            return cls.getName();
        }
        
        hash post(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }
        
        hash get(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }

        hash del(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }

        hash put(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }
    }

    class AbstractRestClass {
        public {
        }

        abstract string getName();

        abstract *AbstractRestObject getObject(string name);

        hash handleRequest(*string oname, *list args, hash cx, hash hdr, *data body) {
            if (oname) {
                *AbstractRestObject obj = getObject(oname);
                if (!obj)
                    return unknownObjectError(oname);

                switch (hdr.method) {
                    case "GET": return obj.get(args, cx, hdr, body);
                    case "POST": return obj.put(args, cx, hdr, body);
                    case "DEL": return obj.del(args, cx, hdr, body);
                    case "PUT": return obj.put(args, cx, hdr, body);
                }
            }
            
            switch (hdr.method) {
                case "GET": return get(args, cx, hdr, body);
                case "POST": return put(args, cx, hdr, body);
                case "DEL": return del(args, cx, hdr, body);
                case "PUT": return put(args, cx, hdr, body);
            }
        }
        
        hash unknownObjectError(string name) {
            return (
                "code": 500,
                "body": sprintf("object %y of class %y is unknown", name, getName()),
                );
        }
        
        hash post(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }
        
        hash get(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }
        
        hash del(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }

        hash put(any args, hash cx, hash hdr, *data body) {
            return Err501;
        }
    }

    class RestHandler inherits AbstractHttpRequestHandler {
        public {
            #! supported HTTP methods
            const Methods = (
                "GET": True,
                "POST": True,
                "PUT": True,
                "DELETE": True,
                );

            #! supported mime types for serializing responses
            const SerializationTypes = (
%ifndef NoYaml
                MimeTypeYamlRpc: True,
%endif
%ifndef NoXml
                MimeTypeXml: True,
%endif
%ifndef NoJson
                MimeTypeJsonRpc: True,
%endif
                );
        }
        
        private {
            #! class hash: name -> AbstractRestClass
            hash ch;

            #! mutex lock
            Mutex mx();
        }
        
        constructor(*AbstractAuthenticator auth) : AbstractHttpRequestHandler(auth) {
        }

        removeRootPath(reference path) {
        }
        
        hash handleRequest(hash cx, hash hdr, *data body) {
            #log(LL_DEBUG_3, "cx: %N", cx);
            #log(LL_DEBUG_3, "hdr: %N", hdr);
            
            # get rest class name
            string path = cx.url.path;

            removeRootPath(\path);
            # XXXremove root url from path
            # path = regex_subst(path, "^(/)?" + url + "/", "");
            #log(LL_DEBUG_3, "path: %N", path);

            *string cls = (path =~ x/^([^\/]+)/)[0];
            if (!cls)
                return ("code": 500, "body": sprintf("cannot find REST class in path %y", cx.url.path));
            if (!ch{cls})
                return ("code": 500, "body": sprintf("unknown REST class %y in path %y (valid classes: %y)", cls, cx.url.path, ch.keys()));

            # check method
            if (!Methods.(hdr.method))
                return ("code": 501, "body": sprintf("cannot handle HTTP method %y; valid methods: %y", hdr.method, Methods.keys()));
            
            # remove class and trailing "/" from path
            splice path, 0, cls.size() + 1;
            
            # get object and args
            hash ah = parse_uri_query(path);        

            # handle call with class
            hash rv = ch{cls}.handleRequest(ah.method, ah.params, cx, hdr, body);

            # serialize response according to client's capabilities if necessary
            if (exists rv.body && rv.body.typeCode() != NT_STRING) {
                # make a hash of "accept" values
                string astr = hdr.accept;
                astr =~ s/;.*//;#/;
                hash aih;
                map aih.$1 = True, astr.split(",");
                
                # check for yaml-rpc support
                bool decoded;
%ifndef NoYaml
                if (aih{MimeTypeYamlRpc}) {
                    rv.body = makeYAML(rv.body);
                    rv.hdr = MimeTypeYamlRpc;
                    decoded = True;
                }
%endif
%ifndef NoXml
                if (!decoded && aih{MimeTypeXml}) {
                    rv.body = makeXMLRPCValueString(rv.body);
                    rv.hdr = MimeTypeXml;
                    decoded = True;
                }
%endif
%ifndef NoYaml
                if (aih{MimeTypeJsonRpc}) {
                    rv.body = makeJSONString(rv.body);
                    rv.hdr = MimeTypeJsonRpc;
                    decoded = True;
                }
%endif
                if (!decoded) {
                    responseSerializationError(cx, aih, rv);
                    return (
                        "code": 501,
                        "body": sprintf("cannot serialize response; you claim to accept only: %y; types supported: %y; discarding response: %y", aih.keys(), SerializationTypes.keys(), rv.body),
                        );
                }
            }

            return rv;
        }

        responseSerializationError(hash cx, hash aih, hash rv) {
            #log(LL_INFO, "cannot serialize response; client accepts: %y", aih.keys());
            #log(LL_DETAIL_2, "request: %y discarding response: %y", cx.url.path, rv.body);
        }

        addClass(AbstractRestClass cls) {
            mx.lock();
            on_exit mx.unlock();

            string name = cls.getName();
            if (ch{name})
                throw "RETSHANDLER-ERROR", sprintf("class %y has already been registered with this handler", name);
            ch{name} = cls;
        }
    }
}
