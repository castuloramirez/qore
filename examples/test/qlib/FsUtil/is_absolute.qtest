#!/usr/bin/env qore

%requires ../../../../qlib/FsUtil.qm
%requires ../../../../qlib/QUnit.qm

%new-style
%require-types
%enable-all-warnings

%exec-class IsAbsoluteTest

public class IsAbsoluteTest inherits QUnit::Test {

    private {
        list abs_posix;
        list abs_win;
        list rel_posix;
        list rel_win;
    }

    constructor() : Test ("IsAbsoluteTest", "1.0") {
        addTestCase ("Is Absolute test", \test_is_absolute());
        addTestCase ("Is Absolute test Posix", \test_is_absolute_posix());
        addTestCase ("Is Absolute test Windows", \test_is_absolute_win());
        set_return_value(main());
    }

    globalSetUp() {
        abs_posix = ("/path/to/file.txt",
                     "/");
        rel_posix = (".",
                     "..",
                     "relative/path/to/file.txt",
                     "../file.txt",
                     "../../file.txt",
                     "./file.txt",
                     "file.txt");
        abs_win = ('C:\path\to\file.txt',
                   'd:\path\to\file.txt',
                   '\path\to\file.txt',
                   '\\path\to\file.txt');
        rel_win = ('path\to\file.txt',
                   'C:file.txt',
                   'e:path\to\file.txt',
                   '..\tmp.txt',
                   '..\..\tmp.txt',
                   "..");
    }

    test_is_absolute() {
        if (Platform.Windows) {
            foreach string path in (abs_win)
                assertTrue(is_absolute(path));

            foreach string path in (rel_win)
                assertFalse(is_absolute(path));
        } else {
            foreach string path in (abs_posix)
                assertTrue(is_absolute(path));

            foreach string path in (rel_posix)
                assertFalse(is_absolute(path));
        }
    }

    test_is_absolute_posix() {
        PosixPathHandler handler  = new PosixPathHandler();

        foreach string path in (abs_posix)
            assertTrue(handler.is_absolute(path));

        foreach string path in (rel_posix)
            assertFalse(handler.is_absolute(path));
    }

    test_is_absolute_win() {
        WinPathHandler handler  = new WinPathHandler();

        foreach string path in (abs_win)
            assertTrue(handler.is_absolute(path));

        foreach string path in (rel_win)
            assertFalse(handler.is_absolute(path));
    }

}
