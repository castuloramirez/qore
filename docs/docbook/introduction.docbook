<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="Introduction">
  <title>Introduction</title>

  <sect1 id="Qore_Introduction">
    <title>Introduction to the Qore Programming Language</title>

    <para>The Qore programming language is a powerful, thread-capable, embeddable weakly-typed language with optional strong typing and procedural and object-oriented features designed for anything from quick scripting to complex multithreaded, network-aware application development to embedded application scripting.  Qore was initially designed to facilitate the rapid implementation of sophisticated interfaces in embedded code in an enterprise environment, and has since grown into a general-purpose language as well.</para>

    <para>Qore exports a C++ API to allow programs or libraries to embed Qore code; this manual documents Qore's user-level features, for more information about Qore's C++ API, see the <ulink url="http://qore.org">Qore home page</ulink>.</para>

    <para>Flexible character encoding support is also built-in to Qore strings, and automatic character encoding conversions are supported, enabling correct behavior when working in an environment with mixed character encoding requirements (see <link linkend='Qore_Strings_and_Character_Encoding'>Qore Strings and Character Encoding</link>).</para>

    <para>Qore includes the following design points:</para>

    <itemizedlist mark='bullet'>
      <listitem>
	<para>Support for Embedded Logic</para>

	<para>Qore was designed to support embedding logic in applications; this also applies to applications written in Qore as well as applications using the Qore library's public C++ API.  By using the <link linkend="Program_Class">Program</link> class, discrete objects can be created and destroyed at will containing embedded code to extend or modify the behavior of your application in user-defined ways.  The <link linkend="Program_Class">Program</link> class allows the capabilities of embedded code to be arbitrarily <link linkend="Parse_Options">restricted</link> as well.</para>
      </listitem>

      <listitem>
	<para>Thread Safety and SMP Scalability</para>

	<para>All elements of Qore are thread-safe, and the language in general has been designed with SMP scalability in mind.  The internal design and implementation of Qore favors multithreaded performance over single-threaded performance, so multithreaded Qore programs can count on an efficient and stable execution platform, and do not have to limit themselves to a subset of Qore's functionality (see <link linkend='Threading'>Threading</link>).  Additionally, Qore includes optimizations designed to reduce the number of SMP cache invalidations that provide a substantial performance boost on SMP machines.</para>
	<para>Qore supports deadlock detection in complex locking scenarios and will throw an exception rather than allow an operation to be performed that would cause a deadlock.  Furthermore, Qore's threading primitives detect threading errors and throw exceptions in these cases as well.</para>
      </listitem>

      <listitem>
	<para>Database Integration and DBI Layer</para>

	<para>Retrieving, comparing, and manipulating data in a consistent manner from heterogenous database types is made possible by Qore's built-in database integration. Qore was designed with a database independent interfacing (DBI) layer, providing a standard interface for Qore programs to access any database supported by a Qore DBI driver (see the <link linkend="Datasource_Class">Datasource Class</link>).</para>

      </listitem>

      <listitem>
	<para>Function and Class Library</para>
	
	<para>Qore's basic functionality covers areas such as: POSIX-compliant command-line parsing (ex: <link linkend='GetOpt_Class'>GetOpt Class</link>), <link linkend="Cryptographic_Functions">strong encryption</link> and <link linkend="Digest_Functions">digest calculation</link>, thread synchronization (ex: <link linkend='Queue_Class'>Queue Class</link>, <link linkend="Mutex_Class">Mutex Class</link>, <link linkend='Condition_Class'>Condition Class</link>, etc), working with files (<link linkend="File_Class">File class</link>), socket, HTTP, and higher-level protocol communication (<link linkend='Socket_Class'>Socket</link>, <link linkend='HTTPClient_Class'>HTTPClient</link>, <link linkend="FtpClient_Class">FtpClient</link> classes, optionally with TLS/SSL encryption), support for dynamic embedded application logic (<link linkend="Program_Class">Program Class</link>).  Additionally, Qore's functionality is extended with modules delivered separately from the Qore library (see <ulink url="http://qore.org">Qore's home page</ulink> for more information.</para>
      </listitem>

      <listitem>
	<para>Logical Syntax</para>

	<para>Qore syntax is similar to other programming languages, allowing new programmers to rapidly come up to speed in Qore. Qore borrows features from languages such as: C++ (ex: <link linkend="Class_Inheritance">multiple inheritance</link>, <link linkend="Exception_Handling">exception handling</link>, <link linkend="Static_Methods">static methods</link>), Java (ex: the <link linkend="Private_and_Synchronized_Methods"><command>synchronized</command></link> keyword, the <link linkend="Instanceof_Operator"><command>instanceof</command></link> operator, <link linkend="Objects">object</link> and <link linkend="Classes">class</link> implementation), Perl (ex: the <link linkend="foreach_Statements"><command>foreach</command> statement</link>, <link linkend="Splice_Operator"><command>splice</command></link>, <link linkend="Push_Operator"><command>push</command></link>, <link linkend="Pop_Operator"><command>pop</command></link>, <link linkend="Chomp_Operator"><command>chomp</command></link>, <link linkend="Splice_Operator"><command>splice</command></link> operators, <link linkend="Regular_Expressions">perl5-compatible regular expressions</link>, and more), the <ulink url="http://www.digitalmars.com/d">D Programming Language</ulink> (the <command><link linkend='on_exit_Statements'>on_exit</link></command>, <command><link linkend='on_success_Statements'>on_success</link></command>, and <command><link linkend='on_error_Statements'>on_error</link></command> statements provide exception-aware functionality similar to <code>scope(exit), scope(failure)</code>, allowing exception-aware cleanup code to be placed next to the code requiring cleanup), and others, also with many features unique to Qore.  Furthermore, Qore supports <link linkend="closures">closures</link> (including binding local variables in the closure in a way that is safe to use even in multithreaded contexts) and features for advanced list processing (<link linkend="Map_Operator"><command>map</command></link>, <link linkend="Foldl_Operator"><command>foldl</command></link>, <link linkend="Foldr_Operator"><command>foldr</command></link>, and <link linkend="Select_Operator"><command>select</command></link>).</para>

	<para>Qore's <link linkend="Operators">operators</link> are designed to produce the expected results for the programmer even when data types are mixed, a feature meant to further flatten the learning curve for new programmers.</para>
      </listitem>
    </itemizedlist>

    <para>Simple or complex interfaces involving data extraction and manipulation from multiple Oracle, MySQL, PostgreSQL and other databases and/or multiple applications connected with a supported messaging bus or through lightweight web service protocols bus can be developed quickly and easily with Qore, particularly in comparison with Java, Perl, or C/C++. Furthermore, solutions based on Qore are transparent and easily maintainable, bringing advantages for the developer and end-user alike.</para>

    <para>Additionally, Qore is thoroughly tested with valgrind on Linux and dbx on Solaris for memory leaks and memory errors.  While it is possible that there are bugs in some less tested code paths, every effort is made to eliminate all bugs before each new release, particularly memory bugs and race conditions, in order to ensure that Qore releases are of the highest possible quality.</para>

</sect1>

<sect1 id="Document_Conventions">
<title>Document Conventions</title>

<para>Examples of Qore code are given in the following font:</para>

<programlisting>
#!/usr/bin/qore
#
# this is an example of Qore code
</programlisting>

<para>keywords are given in bold:</para>

<!-- 
<para># "if" is a key word</para>
<para><command>if</command> ($a == 1) print("yes\n");</para>
-->
<programlisting>
# "if" is a key word
<command>if</command> ($a == 1) print("yes\n");
</programlisting>

<para>placeholders are given in italics:</para>

<!-- 
<para><command>if</command> ( <replaceable>expression</replaceable> ) 
<replaceable>statement</replaceable></para>
-->
<programlisting>
<command>if</command> ( <replaceable>expression</replaceable> ) 
    <replaceable>statement</replaceable>
</programlisting>

<para>where expressions and statements are 
defined in this document. The text above indicates that any valid expression and 
any valid statement may be used in the positions indicated.</para>

<para>Optional text is given in square brackets "[" and "]" as follows:</para>

<para><code><command>sub</command> name([<replaceable>$variable1</replaceable>,<replaceable> $variable2</replaceable>, ...])</code></para>

<para>indicating that an arbitrarily long list of variable names separated by commas (or nothing at all) may appear in function declarations.</para>

</sect1>

</chapter>

