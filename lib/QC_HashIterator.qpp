/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashIterator.qpp HashIterator class definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/QoreHashIterator.h>

//! This class an iterator class for hashes
/** Call HashIterator::next() to iterate through the hash; do not use the iterator if HashIterator::next() returns @ref False.
    A hash can be iterated in reverse order by calling HashIterator::prev() instead of HashIterator::next()

    @note
    - In general, the HashIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.

    @see HashReverseIterator
 */
qclass HashIterator [arg=QoreHashIterator* i; ns=Qore; vparent=AbstractQuantifiedBidirectionalIterator];

//! Creates the hash iterator object
/** @param h the hash to iterate
    @param value_hash if @ref True "True", @ref getValue() returns a hash with 2 keys: \c "key" and \c "value" (making it easier to iterate hashes with constructions where only @ref getValue() is available, such as the @ref foreach "foreach statement"); the default is @ref Qore::False "False"

    @par Example:
    @code
my HashIterator $hi($h);
    @endcode
 */
HashIterator::constructor(hash h, bool value_hash = False) {
   self->setPrivate(CID_HASHITERATOR, new QoreHashIterator(h, value_hash));
}

//! Creates an empty hash iterator object
/** @par Example:
    @code
my *hash $h = get_hash_or_nothing();
my HashIterator $hi($h);
    @endcode
 */
HashIterator::constructor() {
   self->setPrivate(CID_HASHITERATOR, new QoreHashIterator);
}

//! Creates a copy of the HashIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code
my HashIterator $ni = $i.copy();
    @endcode
 */
HashIterator::copy() {
   self->setPrivate(CID_HASHITERATOR, new QoreHashIterator(*i));
}

//! Moves the current position to the next element in the hash; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the hash if the hash is not empty
/** This method will return @ref True again after it returns @ref False once if hash is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the hash (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.next()) {
    printf(" + %y = %y\n", $i.getKey(), $i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool HashIterator::next() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! Moves the current position to the previous element in the hash; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the hash if the hash is not empty
/** This method will return @ref True again after it returns @ref False once if the hash is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the hash (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.prev()) {
    printf(" + %y = %y\n", $i.getKey(), $i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool HashIterator::prev() {
   if (i->check(xsink))
      return false;
   return i->prev();
}

//! returns @ref True if the hash is empty; @ref False if not
/** @return @ref True if the hash is empty; @ref False if not

    @par Example:
    @code
if ($i.empty())
    printf("the hash is empty\n");
    @endcode
 */
bool HashIterator::empty() [flags=CONSTANT] {
   return i->empty();
}

//! returns @ref True if on the first element of the hash
/** @return @ref True if on the first element of the hash

    @par Example:
    @code
while ($i.next()) {
    if ($i.first())
        printf("START:\n");
}
    @endcode
 */
bool HashIterator::first() [flags=CONSTANT] {
   return i->first();
}

//! returns @ref True if on the last element of the hash
/** @return @ref True if on the last element of the hash

    @par Example:
    @code
while ($i.next()) {
    if ($i.last())
        printf("END.\n");
}
    @endcode
 */
bool HashIterator::last() [flags=CONSTANT] {
   return i->last();
}

//! returns the current value (if the hash was created with the \a get_value flag = @ref Qore::True "True" in the @ref constructor(hash, bool) "constructor", then this method returns a hash with 2 keys: \c "key" and \c "value", otherwise it returns only the hash value and the key can be returned with @ref getKey()) or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current value (if the hash was created with the \a get_value flag = @ref Qore::True "True" in the @ref constructor(hash, bool) "constructor", then this method returns a hash with 2 keys: \c "key" and \c "value", otherwise it returns only the hash value and the key can be returned with @ref getKey()) or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
while ($i.next()) {
    printf("+ %y\n", $i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
any HashIterator::getValue() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return 0;
   return i->getReferencedValue(xsink);
}

//! returns the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
while ($i.next()) {
    printf("+ %y\n", $i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
string HashIterator::getKey() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return 0;
   return i->getKey(xsink);
}

//! returns @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not

    @par Example:
    @code
if ($i.valid())
    printf("current value: %y\n", $i.getValue());
    @endcode
 */
bool HashIterator::valid() [flags=CONSTANT] {
   return i->valid();
}

//! Reset the iterator instance to its initial state
/** Reset the iterator instance to its initial state

   @par Example
   @code
$i.reset();
   @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
HashIterator::reset() {
   if (i->check(xsink))
       return 0;
   i->reset();
}
