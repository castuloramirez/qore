#!/usr/bin/env qr

%require-types
%enable-all-warnings
%new-style

%requires UnitTest

UnitTest t();

t.cmploop(\try_call(), (
    (
        "args" : list(any sub() {return map {$1 : $1 * $1}, (2, 5, 9);}),
        "cmp"  : ("2" : 4, "5" : 25, "9" : 81),
        "msg"  : "hmap for list of ints",
    ),
    (
        "args" : list(any sub() {return map {$1 + $1 : True}, ("a", "rr");}),
        "cmp"  : ("aa" : True, "rrrr" : True),
        "msg"  : "hmap for list of strings",
    ),
    (
        "args" : list(any sub() {return map {$1 + $1 : True}, ();}),
        "cmp"  : {},
        "msg"  : "hmap for empty list",
    ),
    (
        "args" : list(any sub() {return map {"key" : $1}, ("a", "a", "b");}),
        "cmp"  : ("key" : "b"),
        "msg"  : "same keys in resulting hash",
    ),
    (
        "args" : list(any sub() {return map {$1[0] : $1}, ((2, 3), (1, 2, 3), (3, 4));}),
        "cmp"  : ("2" : (2, 3), "1" : (1, 2, 3), "3" : (3, 4)),
        "msg"  : "list is a list of structures",
    ),
    (
        "args" : list(any sub() {return map {$1 + $1 : $1 + 'b'}, "a";}),
        "cmp"  : ("aa" : "ab"),
        "msg"  : "scalar param given",
    ),
    (
        "args" : list(any sub() {return map {$1 + $1 : $1 + 'b'}, NOTHING;}),
        "cmp"  : NOTHING,
        "msg"  : "NOTHING as a list given",
    ),
    (
        "args" : list(any sub() {return map {$1 + $1 : $1 + 'b'}, (1, "4", 6).iterator(); }),
        "cmp"  : ("2" : "1b", "44" : "4b", "12" : "6b"),
        "msg"  : "iterator given",
    ),
    (
        "args" : list(any sub() {return map {$1 : $1 * 2}, (1, 4, 6), $1 != 4;}),
        "cmp"  : ("1" : 2, "6" : 12),
        "msg"  : "select param given",
    ),
    (
        "args" : list(any sub() {return map {$1 : $1 * 2}, (1, 4, 6), False;}),
        "cmp"  : {},
        "msg"  : "select param is always False",
    ),
    (
        "args" : list(any sub() {return map {$1 : $1 * 2}, (1, 4, 6), NOTHING;}),
        "cmp"  : {},
        "msg"  : "select param is NOTHING",
    ),
    (
        "args" : list(any sub() {return map {$1 : $1 * 2}, (1, 4, 6), True;}),
        "cmp"  : ("1" : 2, "4" : 8, "6" : 12),
        "msg"  : "select param is always True",
    ),
));

any sub try_call(code c) {
    any result;
    try {
        result = c();
        t.ok(True, 'call succeeded');
    }
    catch(hash ex) {
        t.ok(False, 'call succeded');
    }

    return result;
}
