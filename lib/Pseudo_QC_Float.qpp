/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Float.qpp

  Qore Programming Language

  Copyright 2003 - 2013 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

//! Methods in this pseudo-class can be executed on @ref float "floating-point values"
/** 
 */
qclass <float> [arg=const QoreFloatNode* f;vparent=<value>];

//! Returns Qore::NT_FLOAT
/** 
    @return Qore::NT_FLOAT

    @par Example:
    @code
switch ($f.typeCode()) {
    case NT_FLOAT:
        printf("%y: is a float\n", $f);
        break;
}
    @endcode
*/
int <float>::typeCode() [flags=CONSTANT] {
   return NT_FLOAT;
}

//! Returns @ref True if the float is non-zero, @ref False if zero
/** 
    @return @ref True if the float is non-zero, @ref False if zero

    @par Example:
    @code
my bool $b = $f.val();
    @endcode

    @see
    - @ref perl-bool-eval "%perl-bool-eval"
    - @ref strict-bool-eval "%strict-bool-eval"
*/
bool <float>::val() [flags=CONSTANT] {
   return (bool)f->f == 0.0 ? false : true;
}

//! Returns @ref True because float values can be converted to integers
/**
    @return @ref True because float values can be converted to integers

    @par Example:
    @code
if ($n.intp())
    printf("%y: can be converted to an integer: %d\n", $n, int($n));
    @endcode
*/
bool <float>::intp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True because float values can be converted to strings
/**
    @return @ref True because float values can be converted to strings

    @par Example:
    @code
if ($n.strp())
    printf("%y: can be converted to a string: '%s'\n", $n, string($n));
    @endcode
*/
bool <float>::strp() [flags=CONSTANT] {
   return true;
}

//! Returns a string of a formatted number according to a format string
/** @param fmt the format string has the following format:\n
    <em>\<thousands_separator\></em><tt>[</tt><em>\<decimal_separator\>\<decimals\></em><tt>]</tt>\n
    where:\n
    - \a thousands_separator and \a decimal_separator are single ASCII characters defining the thousands and decimal separator characters respectively, and
    - \a decimals is a single digit defining how may decimals should appear after the decimal point

    @return a string of a formatted number according to a format string; if the format string does not follow the given format, then an empty string is returned

    @par Example:
    @code
my float $f = -48392093894.2349;
my string $nstr = $f.format(".,3"); # returns "-48.392.093.894,235"
    @endcode

    @note equivalent to format_number(string, softfloat)

    @since %Qore 0.8.6
 */
string <float>::format(string fmt) [flags=CONSTANT] {
   return format_float_intern(*fmt, f->f);
}

//! Returns -1 if the number is negative, 0 if it is zero, or 1 if it is positive
/** @return -1 if the number is negative, 0 if it is zero, or 1 if it is positive

    @par Example:
    @code
printf("sign: %d\n", $f.sign());
    @endcode

    @since %Qore 0.8.6
*/
int <float>::sign() [flags=CONSTANT] {
   if (!f->f)
      return 0;
   return f->f > 0.0 ? 1 : -1;
}

//! Returns the absolute value of the number
/** @par Example:
    @code
$f = $f.abs();
    @endcode

    @return the absolute value of the number

    @note equivalent to abs(float)

    @since %Qore 0.8.8
*/
float <float>::abs() [flags=CONSTANT] {
   return fabs(f->f);
}
