# -*- mode: qore; indent-tabs-mode: nil -*-
# @file Set.qm Qore user module for generally useful routines

/*  Set.qm Copyright 2014 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.11 or better
%requires qore >= 0.8.11

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

module Set {
    version = "1.0";
    desc    = "user module for performing set operations";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/** @mainpage Set Module

    @tableofcontents

    @section setintro Set Module Introduction

    The %Set module provides some routines for handling set theory .

    To use this module, use \c "%requires Set" in your code.
    
    All the public symbols in the module are defined in the Set namespace

    @section setrelnotes Release Notes

    @subsection set_1_0
    - added Set::list_minus()

    @subsection set_1_0
    - the initial version of the Set module
*/

#! the Set namespace contains all the objects in the Set module
public namespace Set {
    #! remove elements of second list from the first list
    /** @par Example:
        @code
        list_minus((0, 1, 2, 3, 3), (2, 3, 4)); # returns (0, 1)
        @endcode

        @param list some list
    */
    public list sub list_minus (list $a, list $b) {
        if (!elements $b) {
            return $a;
        }
        if (!elements $a) {
            return list();
        }
        my list $result = list();
        foreach my any $index_a in (xrange(0, elements $a - 1)) {
            my bool $found = False;
            foreach my any $index_b in (xrange(0, elements $b - 1)) {
                if ($a[$index_a] == $b[$index_b]) {
                    delete $a[$index_a];
                    $found = True;
                    break;
                }
            }
            if (!$found) {
                $result += $a[$index_a];
            }
        }

        return $result;
    }
}
