#!/usr/bin/env qore

%requires UnitTest

my UnitTest $t();

RWLock::methodGate($m) {
    return 0;
}

$o = (
    "key1" : "key1", 
    "key2" : "key2", 
    "key3" : "key3", 
    "key4" : "key4",
);

$iters   = 1000;
$writers = 10;
$readers = 10;

$rwl = new RWLock();
while ($writers) {
    background write_thread($t);
    $writers--;
}
while ($readers) {
    background read_thread($t);
    $readers--;
}

#printf("%s\n", dbg_node_info($rwl));

sub read_thread(UnitTest $t) {
    my bool $pass = True;
    for (my $i = 0; $i < $iters; $i++) {
	my $t;
	$rwl.readLock();
	if ($o.key1 == $o.key2)
	    $t = 1;
	    #printf("read_thread (%02d) %d/%d:  key1 = key2\n", gettid(), $i, $iters);
	else
	    $t = 1;
	    #printf("read_thread (%02d) %d/%d: key1 != key2\n", gettid(), $i, $iters);
	
	$rwl.readLock();
	if ($o.key3 == $o.key4)
	    $t = 1;
	    #printf("read_thread (%02d) %d/%d: key3 = key4\n", gettid(), $i, $iters);
	else
	    $t = 1;
	    #printf("read_thread (%02d) %d/%d: key3 != key4\n", gettid(), $i, $iters);
	$rwl.readUnlock();

	if (my $n = $rwl.numWriters()) {
            $pass = False;
	    break;
	}
	$rwl.readUnlock();
    }
    $t.ok($pass, "read check");
}

sub write_thread(UnitTest $t) {
    my bool $pass = True;
    for (my $i = 0; $i < $iters; $i++) {
	#printf("write_thread (%02d) %d/%d trying to get lock\n",
	#       gettid(), $i, $iters);
	$rwl.writeLock();
	my $t = $o.key2;
	$o.key2 = $o.key1;
	$o.key1 = $t;

	if (my $n = $rwl.numWriters() > 1) {
            $pass = False;
	    break;
	}

	$t = $o.key4;
	$o.key4 = $o.key3;
	$o.key3 = $t;

	$t = rand() % 100;
	$o.$t = rand() % 1000;

	#printf("write_thread (%02d) %d/%d: 1: %s 2: %s 3: %s 4: %s (new %s)\n",
	#       gettid(), $i, $iters, $o.key1, $o.key2, $o.key3, $o.key4, $t);

	$rwl.writeUnlock();
    }
    $t.ok($pass, "write check");
}
