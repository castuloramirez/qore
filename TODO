see docs/roadmap.html

* eliminate needs_eval() and is_value() as virtual functions, including bitfield bools (when reimplementing QoreType as an 20-bit integer)
* have QoreStringNode::getAsString() return a standard empty string ("") when possible (also should not be reference counted)
* make it so that there is only ever one Nothing and Null object
* find out why ref_rv is set to true for op_background even when the result is not used
* implement bool_eval(), etc for VarRefNode
* try implementing QoreNode::ref(), is_unique(), reference_count() as virtual (disable access to reference_count) and making Null and Nothing as not-reference counted objects and see if it improves performance
* remove QoreNothingNode and use 0 everywhere instead
* implement function class hierarchies for returning different types (bool, int64, double, node)
* change get/test_*params() to return const values
* implement optimized foreach statement for hash key iteration
* implement optimization to check a program for use of parse(), parseCommit() and background to convert all global variables to local to avoid locking
* make QoreHash implementation private
* change getExistingVarValue to take a ReferenceHolder argument instead of a temporary QoreNode * arg
* make ThreadResourceList private
* tag functions if they have no effect except returning a value so if the value is not used at the top level a warning may be emitted
* implement find_key operator, taking a regular expression to find a key in a hash
* add API compatibility info to to module data
* implement a way to declare public class members (so typos with class members can be caught)
* implement default argument values
* update round() to allow the specification of significant digits
* implement support for builtin methodGate methods, custom DBI Datasource method extensions
* implement public_instanceof operator
* implement auto-reconnect for mssql and other drivers (mysql has it already)
* implement a mechanism for a thread to sleep until another thread terminates (join)
* add support for special ::toString() method to serialize an object to a string (very useful for debugging)
* add support for ranges [2..9]
* add support for break and continue arguments to affect outer loops
* add error code to exceptions for XML-RPC fault reporting
* add context functions
* allow customizable QORE_INCLUDE_DIR searches
* track include files, make sure they are only included once
* add argument info to functions, throw errors if arguments are not correct
* add parse-time argument checks (instead of just run-time exceptions)
* add "constant" flag to functions, to allow execution in constant expressions
* implement GZFile class

docs:
* add links to HTTPClient::connect() text
* update tibae module docs regarding function class, can be hash lookup or direct class string
* document thread resource tracking
* add examples for modules
* write ncurses module documentation
* document optimizations

done 0.7.0:
* implement -,-= with hash, list of strings to remove lists of hash keys
* update Operator.cc ex: op_plus_eq: use getAsFlaat() on evaluated argument instead of convert()
* migrate to "pimpl" approach for exported classes in qore library
* fix QoreSocket.cc to replace spaces with %20 in paths
* fix qt QShortcut to work on dynamic slots by saving the slot and calling the slot when the shortcut's signal is raised
* added support for dereferencing strings with []
* implement a way to modify table names in queries (support table name prefixes, for example)

done in previous releases:
* update QoreString::trim*() functions to trim all whitespace, and not just blanks, with an optional character array giving the character to trim
* fix +=, -= to use the rhs type if the lhs is NOTHING
* fix signal thread to be a special thread with a special thread list entry
* fix %d Datasource specifier to work with floats
* do block allocations of per-thread local variable slots for performance reasons
* add signal constants/infrastructure
* remove thread call stack tracing in non-debugging mode
* make lists of items disabled with parse restrictions
* make a section for each parse restriction
* implement support for regular expressions in case expressions
* implement function and object/method pointers
* fix Queue class (destructor must wake up any sleeping threads)
* add file functions (is_file() is_dir() is_symlink(), etc)
* do not allow global variable initialization at the top level if NO_TOP_LEVEL is set
* allow user to specify sort callback function for sort()
* implement BigIntOperator for more efficient evaluation of operators returning integer values
* implement a forward-compatible/extensible interface for DBI driver registration
