/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  ql_env.qpp
  
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include <qore/intern/ql_env.h>

#include <stdio.h>
#include <stdlib.h>

/** @defgroup env_functions Environment Functions
    Environment functions
*/
//@{
//! Retrieves the value of an environment variable or @ref nothing if the variable is not set
/** 
    @param var the name of the environment variable

    @return the value of an environment variable or @ref nothing if the variable is not set

    @par Example:
    @code
my *string $v = getenv("PATH");
    @endcode

    @since %Qore 0.8.4 tagged with PO_NO_EXTERNAL_INFO
 */
*string getenv(string var) [flags=CONSTANT;dom=EXTERNAL_INFO] {
   return SysEnv.getAsStringNode(var->getBuffer());
}

//! This function variant does nothing at all; it is only included for backwards-compatibility with qore prior to version 0.8.0 for functions that would ignore type errors in arguments
/** 
 */
nothing getenv() [flags=NOOP;dom=EXTERNAL_INFO] {
}

//! Sets an environment variable to a value
/** 
    @param env the name of the environment variable
    @param val the new value of the environment variable

    @return -1 for error or 0 for success; if an error occurs, errno() and/or strerror() can be used to get the error code or message

    @par Example:
    @code
if (setenv("PATH", "/bin:/usr/bin"))
    printf("error setting PATH: %s\n", strerror());
    @endcode

    @see unsetenv() to unset or clear an environment variable

    @since %Qore 0.8.4 tagged with PO_NO_PROCESS
 */
int setenv(string env, softstring val) [dom=PROCESS] {
   return SysEnv.set(env->getBuffer(), val->getBuffer());
}

//! This function variant does nothing at all; it is only included for backwards-compatibility with qore prior to version 0.8.0 for functions that would ignore type errors in arguments
/** 
 */
nothing setenv() [flags=NOOP;dom=PROCESS] {
}

//! Unsets an environment variable
/** 
    @param env the name of the environment variable to unset

    @return -1 for error or 0 for success; if an error occurs, errno() and/or strerror() can be used to get the error code or message

    @par Example:
    @code
if (unsetenv("PATH"))
    printf("error unsetting PATH: %s\n", strerror());
    @endcode

    @see setenv() to set an environment variable to a value

    @since %Qore 0.8.4 tagged with PO_NO_PROCESS
 */
int unsetenv(string env) [dom=PROCESS] {
   return SysEnv.unset(env->getBuffer());
}

//! This function variant does nothing at all; it is only included for backwards-compatibility with qore prior to version 0.8.0 for functions that would ignore type errors in arguments
/** 
 */
nothing unsetenv() [flags=NOOP;dom=EXTERNAL_INFO] {
}
//@}
