# -*- mode: qore; indent-tabs-mode: nil -*-
# @file RestHandler.qm Qore user module for working with SQL data

/*  RestHandler.qm Copyright 2013 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.8 or better
%requires qore >= 0.8.8

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%requires HttpServer >= 0.3.7
%requires Mime >= 1.3

%try-module yaml
%define NoYaml
%endtry

%try-module xml
%define NoXml
%endtry

%try-module json
%define NoJson
%endtry

module RestHandler {
    version = "0.1";
    desc = "user module for implementing REST services with the Qore HTTP server";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
}

/** @mainpage RestHandler Module

    The %RestHandler module provides functionality for implementing REST services with the Qore HTTP server.

    To use this module, use \c "%requires RestHandler" in your code.
    
    All the public symbols in the module are defined in the RestHandler namespace
*/

#! the RestHandler namespace contains all the objects in the RestHandler module
public namespace RestHandler {
    public class AbstractRestObject {
        public {
        }

        private {
            AbstractRestClass $.cls;
        }

        constructor(AbstractRestClass $ncls) {
            $.cls = $ncls;
        }

        AbstractRestClass getClass() {
            return $.cls;
        }

        string getClassName() {
            return $.cls.getName();
        }
        
        hash post(any $args, hash $cx) {
            return RestHandler::Err501;
        }
        
        hash get(any $args, hash $cx) {
            return RestHandler::Err501;
        }

        hash del(any $args, hash $cx) {
            return RestHandler::Err501;
        }

        hash put(any $args, hash $cx) {
            return RestHandler::Err501;
        }
    }

    public class AbstractRestClass {
        constructor() {
        }

        abstract string getName();

        abstract *AbstractRestObject getObject(string $name);

        hash handleRequest(RestHandler $rh, *string $oname, *list $args, hash $cx) {
            my string $mn;

            my hash $ah;
            if (exists $args[0]) {
                if ($args[0].typeCode() != NT_HASH)
                    return RestHandler::make400("cannot parse arguments to REST class %y%s, the first argument must be a hash with an 'action' key; got type %y instead", $.getName(), $oname ? sprintf(" object %y", $oname) : "", $args[0].type());
                if ($args.size() > 1)
                    return RestHandler::make400("invalid arguments to REST class %y%s, only a single hash argument is accepted; got %y instead", $.getName(), $oname ? sprintf(" object %y", $oname) : "", $args);
                $ah = $args[0];
            }
            # make method name
            /*
            if ($oname) {
                if (!$ah.action)
                    return RestHandler::make400("cannot parse arguments to REST class %y object %y, the first argument must be a hash with an 'action' key; got %y instead", $.getName(), $ah);
            }
            */
            if ($ah.action) {
                if ($ah.action.typeCode() != NT_STRING)
                    return RestHandler::make400("cannot parse arguments to REST class %y object %y, the 'action' key is not assigned to a string; got %y instead", $.getName(), $ah.action.type());
                $mn = $ah.action;
                $ah -= "action";
                # ensure first letter of the action is in upper case
                splice $mn, 0, 1, $mn[0].upr();
                $mn = $cx.hdr.method.lwr() + $mn;
            }
            else
                $mn = $cx.hdr.method.lwr();

            if ($oname) {
                my *AbstractRestObject $obj = $.getObject($oname);
                if (!$obj) {
                    $rh.logDebug("unknown object %y: class %y: method %y args: %y", $oname, $.getName(), $mn, $ah);
                    return $.unknownObjectError($oname);
                }

                $rh.logDebug("object %y: dispatching class %y: method %y args: %y", $oname, $.getName(), $mn, $ah);
                return $.dispatch($rh, $obj, $oname, $mn, $ah, $cx);
            }
            
            $rh.logDebug("dispatching class %y: method %y args: %y", $.getName(), $mn, $ah);
            return $.dispatch($rh, $self, NOTHING, $mn, $ah, $cx);
        }
        
        hash dispatch(RestHandler $rh, object $obj, *string $oname, string $mn, *hash $ah, hash $cx) {
            try {
                return callObjectMethodArgs($obj, $mn, ($cx, $ah));
            }
            catch (hash $ex) {
                if ($ex.err == "METHOD-DOES-NOT-EXIST") {
                    if ($obj == $self) {
                        $rh.logDebug("%s: class %y: method %y args: %y", $ex.err, $.getName(), $mn, $ah);
                        return RestHandler::make501("REST class %y does not implement method %y", $.getName(), $mn);
                    }
                    $rh.logDebug("%s: class %y: object: %y method %y args: %y", $ex.err, $.getName(), $oname, $mn, $ah);
                    return RestHandler::make501("REST class %y object %y does not implement method %y", $.getName(), $oname, $mn);
                }
                $rh.logDebug("class %y: method %y: %s: %s: %s", $.getName(), $mn, get_ex_pos($ex), $ex.err, $ex.desc);
                rethrow;
            }
        }
        
        hash unknownObjectError(string $name) {
            return (
                "code": 500,
                "body": sprintf("object %y of class %y is unknown", $name, $.getName()),
                );
        }
        
        hash post(hash $cx, *hash $ah) {
            return RestHandler::Err501;
        }
        
        hash get(hash $cx, *hash $ah) {
            return RestHandler::Err501;
        }
        
        hash del(hash $cx, *hash $ah) {
            return RestHandler::Err501;
        }

        hash put(hash $cx, *hash $ah) {
            return RestHandler::Err501;
        }
    }

    public class RestHandler inherits AbstractHttpRequestHandler {
        public {
            const Err501 = (
                "code": 501,
                "body": "not implemented",
                );

            #! supported HTTP methods
            const Methods = (
                "GET": True,
                "POST": True,
                "PUT": True,
                "DELETE": True,
                );

            #! supported mime types for serializing responses
            const SerializationTypes = (
%ifndef NoYaml
                MimeTypeYamlRpc: True,
%endif
%ifndef NoXml
                MimeTypeXml: True,
%endif
%ifndef NoJson
                MimeTypeJsonRpc: True,
%endif
                );
        }
        
        private {
            #! class hash: name -> AbstractRestClass
            hash $.ch;

            #! mutex lock
            Mutex $.mx();
        }
        
        constructor(*AbstractAuthenticator $auth) : AbstractHttpRequestHandler($auth) {
        }

        #! handles the HTTP requests
        hash handleRequest(hash $cx, hash $hdr, *data $body) {
            #log(LL_DEBUG_3, "cx: %N", cx);
            #log(LL_DEBUG_3, "hdr: %N", hdr);
            
            # get rest class name
            my string $path = $cx.url.path;

            $.removeRootPath(\$path);

            my *string $cls = ($path =~ x/^([^\/]+)/)[0];
            if (!$cls)
                return RestHandler::makeResponse(500, "cannot find REST class in path %y", $cx.url.path);
            if (!$.ch{$cls})
                return RestHandler::makeResponse(500, "unknown REST class %y in path %y (valid classes: %y)", $cls, $cx.url.path, $.ch.keys());

            # check method
            if (!Methods.($hdr.method))
                return RestHandler::make501("cannot handle HTTP method %y; valid methods: %y", $hdr.method, Methods.keys());
            
            # remove class and trailing "/" from path
            splice $path, 0, $cls.size() + 1;
            
            # get object and args
            my hash $ah = parse_uri_query($path);

            # handle call with class
            my hash $rv = $.ch{$cls}.handleRequest($self, $ah.method, $ah.params, $cx + ("hdr": $hdr, "body": $body));

            # serialize response according to client's capabilities if necessary
            if (exists $rv.body && $rv.body.typeCode() != NT_STRING) {
                # make a hash of "accept" values
                my string $astr = $hdr.accept;
                $astr =~ s/;.*//;#/;
                my hash $aih;
                map $aih.$1 = True, $astr.split(",");
                
                # check for yaml-rpc support
                my bool $decoded;
%ifndef NoYaml
                if ($aih{MimeTypeYamlRpc}) {
                    $rv.body = makeYAML($rv.body);
                    $rv.hdr = MimeTypeYamlRpc;
                    $decoded = True;
                }
%endif
%ifndef NoXml
                if (!$decoded && $aih{MimeTypeXml}) {
                    $rv.body = makeXMLRPCValueString($rv.body);
                    $rv.hdr = MimeTypeXml;
                    $decoded = True;
                }
%endif
%ifndef NoYaml
                if (!$decoded && $aih{MimeTypeJsonRpc}) {
                    $rv.body = makeJSONString($rv.body);
                    $rv.hdr = MimeTypeJsonRpc;
                    $decoded = True;
                }
%endif
                if (!$decoded) {
                    $.responseSerializationError($cx, $aih, $rv);
                    return RestHandler::make501("cannot serialize response; you claim to accept only: %y; types supported: %y; discarding response: %y", $aih.keys(), SerializationTypes.keys(), $rv.body);
                }
            }

            return $rv;
        }

        #! default implementation is empty
        removeRootPath(reference $path) {
        }
        
        #! default implementation is empty
        responseSerializationError(hash $cx, hash $aih, hash $rv) {
        }

        #! default implementation is empty
        logInfo(string $fmt) {
            delete $argv;
        }

        #! default implementation is empty
        logError(string $fmt) {
            delete $argv;
        }

        #! default implementation is empty
        logDebug(string $fmt) {
            delete $argv;
        }

        #! adds a REST class to the handler
        addClass(AbstractRestClass $cls) {
            $.mx.lock();
            on_exit $.mx.unlock();

            my string $name = $cls.getName();
            if ($.ch{$name})
                throw "RETSHANDLER-ERROR", sprintf("class %y has already been registered with this handler", $name);
            $.ch{$name} = $cls;
        }

        #! creates a hash for an HTTP response with the response code and the response message body as a formatted string
        static hash makeResponse(int $code, string $fmt) {
            return (
                "code": $code,
                "body": vsprintf($fmt, $argv),
                );
        }

        #! creates a hash for an HTTP response with the response code and a literal response message body
        static hash makeResponse(int $code, any $body) {
            return (
                "code": $code,
                "body": $body,
                );
        }

        #! creates a hash for an HTTP 400 error response with the response message body as a string
        static hash make400(string $fmt) {
            return RestHandler::makeResponse(400, vsprintf($fmt, $argv));
        }

        #! creates a hash for an HTTP 501 error response with the response message body as a string
        static hash make501(string $fmt) {
            return RestHandler::makeResponse(501, vsprintf($fmt, $argv));
        }
    }
}
