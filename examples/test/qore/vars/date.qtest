#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires UnitTest

# little script to test hash accesses on a large hash
# by David Nichols

my UnitTest $unit();

# here are the two formats for directly specifying date/time values:
# ISO-8601 format (without timezone specification, currently qore does not support time zones)
my date $date  = 2004-02-01T12:30:00;
# qore-specific date/time specification format ('-' instead of 'T' - more readable but non-standard)
my date $ndate = 2004-03-02-12:30:00;
$unit.cmp(format_date("YYYY-MM-DD HH:mm:SS", $date), "2004-02-01 12:30:00", "format_date()");
$unit.cmp($date - 5Y,                1999-02-01T12:30:00, "first date year subtraction");
$unit.cmp($date - 5M,                2003-09-01T12:30:00, "first date month subtraction");
$unit.cmp($date - 10D,               2004-01-22T12:30:00, "first date day subtraction");
$unit.cmp($date - 2h,                2004-02-01T10:30:00, "first date hour subtraction");
$unit.cmp($date - 25m,               2004-02-01T12:05:00, "first date minute subtraction");
$unit.cmp($date - 11s,               2004-02-01T12:29:49, "first date second subtraction");
$unit.cmp($date - 251ms,             2004-02-01T12:29:59.749, "first date millisecond subtraction");

$unit.cmp($date + 2Y,                2006-02-01T12:30:00, "first date year addition");
$unit.cmp($date + 5M,                2004-07-01T12:30:00, "first date month addition");
$unit.cmp($date + 10D,               2004-02-11T12:30:00, "first date day addition");
$unit.cmp($date + 2h,                2004-02-01T14:30:00, "first date hour addition");
$unit.cmp($date + 25m,               2004-02-01T12:55:00, "first date minute addition");
$unit.cmp($date + 11s,               2004-02-01T12:30:11, "first date second addition");
$unit.cmp($date + 251ms,             2004-02-01T12:30:00.251, "first date millisecond addition");

$unit.cmp($date - years(5),          1999-02-01-12:30:00, "second date year subtraction");
$unit.cmp($date - months(5),         2003-09-01-12:30:00, "second date month subtraction");
$unit.cmp($date - days(10),          2004-01-22-12:30:00, "second date day subtraction");
$unit.cmp($date - hours(2),          2004-02-01-10:30:00, "second date hour subtraction");
$unit.cmp($date - minutes(25),       2004-02-01-12:05:00, "second date minute subtraction");
$unit.cmp($date - seconds(11),       2004-02-01-12:29:49, "second date second subtraction");
$unit.cmp($date - milliseconds(500), 2004-02-01-12:29:59.5, "second date millisecond subtraction");

$unit.cmp($date + years(2),          2006-02-01-12:30:00, "second date year addition");
$unit.cmp($date + months(5),         2004-07-01-12:30:00, "second date month addition");
$unit.cmp($date + days(10),          2004-02-11-12:30:00, "second date day addition");
$unit.cmp($date + hours(2),          2004-02-01-14:30:00, "second date hour addition");
$unit.cmp($date + minutes(25),       2004-02-01-12:55:00, "second date minute addition");
$unit.cmp($date + seconds(11),       2004-02-01-12:30:11, "second date second addition");
$unit.cmp($date + milliseconds(578), 2004-02-01-12:30:00.578, "second date millisecond addition");

# testing ISO-8601 alternate period syntax (which is not very readable... :-( )
# date periods
$unit.cmp($date - P0001-00-00T00:00:00, 2003-02-01T12:30:00, "third date year subtraction");
$unit.cmp($date - P1M,          2004-01-01T12:30:00, "third date month subtraction");
$unit.cmp($date - P0000-00-01,          2004-01-31T12:30:00, "third date day subtraction");
$unit.cmp($date + P1Y,          2005-02-01T12:30:00, "third date year addition");
$unit.cmp($date + P0000-01-00,          2004-03-01T12:30:00, "third date month addition");
$unit.cmp($date + P0000-00-01,          2004-02-02T12:30:00, "third date day addition");

# time periods
$unit.cmp($date - P0000-00-00T01:00:00, 2004-02-01T11:30:00, "third date hour subtraction");
$unit.cmp($date - P00:01:00,            2004-02-01T12:29:00, "third date minute subtraction");
$unit.cmp($date - PT00:00:01,           2004-02-01T12:29:59, "third date second subtraction");
$unit.cmp($date + P01:00:00,            2004-02-01T13:30:00, "third date hour addition");
$unit.cmp($date + PT00:01:00,           2004-02-01T12:31:00, "third date minute addition");
$unit.cmp($date + P00:00:01,            2004-02-01T12:30:01, "third date second addition");

# arithmetic on dates with ms overflow
$unit.cmp(2006-01-02T00:00:00.112, 2006-01-01T23:59:59.800 + 312ms, "third millisecond addition");
$unit.cmp(2006-01-01T23:59:59.800, 2006-01-02T00:00:00.112 - 312ms, "third millisecond subtraction");

$unit.cmp($date,        localtime(mktime($date)), "localtime() and mktime()");
$unit.cmp($date - PT1H, 2004-02-01T11:30:00, "fourth date hour subtraction");
$unit.cmp($date + 30D,  $ndate,                   "fourth date day addition");
$unit.cmp($ndate - 30D, $date,                    "fourth date day subtraction");
$unit.cmp($date + 23M,  2006-01-01T12:30:00,      "fourth date month addition");
$unit.cmp($date - 4M,   2003-10-01T12:30:00,      "fourth date month subtraction");
$unit.cmp($date,        date("20040201123000"),   "date function");

$unit.cmp(2001-01-01,   date("2001-01", "YYYY-MM-DD"), "first date mask function");
$unit.cmp(2001-01-01,   date("2001 Jan xx", "YYYY Mon DD"), "second date mask function");
$unit.cmp(2001-01-01T13:01,   date("2001 JAN 01 13:01", "YYYY MON DD HH:mm"), "second date mask function");

# times without a date are assumed to be on Jan 1, 1970
$unit.cmp(11:25:27, 1970-01-01T11:25:27.000, "direct hour");

# test date conversion/calculation functions against known values
$i = 1;
test_date(1068-01-01,              1068, 1, 3, 1,    \$i);
test_date(1783-09-18,              1783, 38, 4, 261, \$i);
test_date(1864-02-29,              1864, 9,  1, 60,  \$i);
test_date(1864-03-01,              1864, 9,  2, 61,  \$i);
test_date(1968-01-01T11:01:20,     1968, 1,  1, 1,   \$i);
test_date(1968-02-29,              1968, 9,  4, 60,  \$i);
test_date(1968-03-01,              1968, 9,  5, 61,  \$i);
test_date(1969-12-31T23:59:59.999, 1970, 1,  3, 365, \$i);
test_date(1969-12-31T00:00:00.100, 1970, 1,  3, 365, \$i);
test_date(1969-01-01T17:25:31.380, 1969, 1,  3, 1,   \$i); # 10

test_date(1970-01-01,              1970, 1,  4, 1,   \$i);
test_date(1970-12-01T00:00:00,     1970, 49, 2, 335, \$i);
test_date(1972-01-01,              1971, 52, 6, 1,   \$i);
test_date(1972-12-30,              1972, 52, 6, 365, \$i);
test_date(1972-12-31,              1972, 52, 7, 366, \$i);
test_date(2004-02-28,              2004, 9,  6, 59,  \$i);
test_date(2004-02-29,              2004, 9,  7, 60,  \$i);
test_date(2004-03-01,              2004, 10, 1, 61,  \$i);
test_date(2004-03-28,              2004, 13, 7, 88,  \$i);
test_date(2006-01-01,              2005, 52, 7, 1,   \$i); # 20

test_date(2006-09-01,              2006, 35, 5, 244, \$i);
test_date(2006-12-01,              2006, 48, 5, 335, \$i);
test_date(2007-12-30,              2007, 52, 7, 364, \$i);
test_date(2007-12-31,              2008, 1,  1, 365, \$i);
test_date(2008-01-01,              2008, 1,  2, 1,   \$i);
test_date(2008-01-06,              2008, 1,  7, 6,   \$i);
test_date(2008-01-07,              2008, 2,  1, 7,   \$i);
test_date(2008-01-08,              2008, 2,  2, 8,   \$i);
test_date(2008-01-09,              2008, 2,  3, 9,   \$i);
test_date(2008-01-10,              2008, 2,  4, 10,  \$i); # 30

test_date(2008-12-28,              2008, 52, 7, 363, \$i);
test_date(2008-12-29,              2009, 1,  1, 364, \$i);
test_date(2008-12-30,              2009, 1,  2, 365, \$i);
test_date(2010-01-03,              2009, 53, 7, 3,   \$i);
test_date(2010-01-04,              2010, 1,  1, 4,   \$i);
test_date(2010-01-09,              2010, 1,  6, 9,   \$i);
test_date(2010-01-10,              2010, 1,  7, 10,  \$i);
test_date(2010-01-11,              2010, 2,  1, 11,  \$i);
test_date(2016-12-01,              2016, 48, 4, 336, \$i);
test_date(2026-08-22,              2026, 34, 6, 234, \$i); # 40

test_date(2036-04-30,              2036, 18, 3, 121, \$i);
test_date(2054-06-19,              2054, 25, 5, 170, \$i);
test_date(2400-12-01,              2400, 48, 5, 336, \$i);
test_date(2970-01-01,              2970, 1,  1, 1,   \$i);
test_date(9999-12-31,              9999, 52, 5, 365, \$i);
test_date(9999-12-31T23:59:59.999, 9999, 52, 5, 365, \$i);

$unit.cmp(date("2012-03-02", "YYYY-MM-DD"), 2012-03-02, "date() format parsing test");

# absolute date difference tests
$unit.cmp(2006-01-02T11:34:28.344 - 2006-01-01,              35h + 34m + 28s +344ms,       "date difference 1");
%ifndef Windows
# this test fails on Windows due to different DST application for dates outside the UNIX epoch
$unit.cmp(2099-04-21T19:20:02.106 - 1804-03-04T20:45:19.956, 2587078h + 34m + 42s + 150ms, "date difference 2");
%endif

my SingleValueIterator $svi(2012-01-01);
$unit.cmp($svi.next(), True, "1st SingleValueIterator::next()");
$unit.cmp($svi.next(), False, "2nd SingleValueIterator::next()");
$unit.cmp($svi.next(), True, "3rd SingleValueIterator::next()");
$unit.cmp($svi.getValue(), 2012-01-01, "SingleValueIterator::getValue()");
$unit.cmp($svi.valid(), True, "SingleValueIterator::valid()");
my SingleValueIterator $ni = $svi.copy();
$unit.cmp($ni.getValue(), 2012-01-01, "SingleValueIterator::getValue() (copy)");
$unit.cmp($ni.next(), False, "SingleValueIterator::next() (copy)");
$unit.cmp($ni.valid(), False, "SingleValueIterator::valid() (copy)");

sub test_date(date $d, int $y, int $w, int $day, int $n, reference $i) {
    my string $str = sprintf("%04d-W%02d-%d", $y, $w, $day);
    my hash $h = ( "year" : $y, "week" : $w, "day" : $day );
    my date $d1;
    # subtract milliseconds from date to compare with timegm value
    if (my int $ms = get_milliseconds($d))
	$d1 = $d - milliseconds($ms);
    else
	$d1 = $d;

    $unit.cmp($d1,                                  date(int($d)),    "date conversion " + $i);
    $unit.cmp(get_iso_week_string($d),              $str,             "getISOWeekString() " + $i);
    $unit.cmp(get_iso_week_hash($d),                $h,               "getISOWeekHash() " + $i);
    $unit.cmp(get_iso_day_of_week($d),              $day,             "getDayOfWeek() " + $i);
    $unit.cmp(get_day_number($d),                   $n,               "getDayNumber() " + $i);
    $unit.cmp(get_date_from_iso_week($y, $w, $day), get_midnight($d), "getDateFromISOWeek() " + $i);
    # not all architectures support the timegm() system call
    #if ($d >= 1970-01-01 && $d < 2038-01-19)
	#$unit.cmp(timegm($d), int($d), "qore epoch conversion " + $i);
    $i++;
}
