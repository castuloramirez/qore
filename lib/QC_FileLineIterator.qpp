/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_FileLIneIterator.qpp FileLIneIterator class (interface) definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

class FileLineIterator : public QoreIteratorBase, public QoreFile {
protected:
   QoreStringNode* line,
      * eol;
   int64 num;
   bool validp;
   bool trim;

   DLLLOCAL ~FileLineIterator() {
      if (eol)
         eol->deref();
      if (line)
         line->deref();
   }

public:
   DLLLOCAL FileLineIterator(ExceptionSink* xsink, const char* name, const QoreEncoding* enc = QCS_DEFAULT, QoreStringNode* n_eol = 0, bool n_trim = true)
   : QoreFile(enc), line(new QoreStringNode(enc)), eol(n_eol), num(0), validp(false), trim(n_trim) {
      if (open(name, O_RDONLY, 0, enc))
         xsink->raiseErrnoException("FILELINEITERATOR-OPEN-ERROR", errno, "cannot open '%s'", name);
   }

   DLLLOCAL bool next() {
      // make sure and use a new string if the iterator was already valid
      if (validp) {
         line->deref();
         line = new QoreStringNode(getEncoding());
      }
      validp = eol ? !readUntil(eol->getBuffer(), *line, !trim) : !readLine(*line, !trim);
      if (validp) {
         // increment line number
         ++num;
      }
      else {
         // reset iterator
         num = 0;
         // reset file position
         setPos(0);
      }
      //printd(5, "FileLineIterator::next() this: %p line: %d validp: %d '%s'\n", this, num, validp, line->getBuffer());
      return validp;
   }

   DLLLOCAL int64 index() const {
      return num;
   }

   DLLLOCAL QoreStringNode* getValue() {
      assert(validp);
      return line->stringRefSelf();
   }

   DLLLOCAL bool valid() const {
      return validp;
   }

   DLLLOCAL int checkValid(ExceptionSink* xsink) const {
      if (!validp) {
         xsink->raiseException("ITERATOR-ERROR", "the %s is not pointing at a valid element; make sure %s::next() returns True before calling this method", getName(), getName());
         return -1;
      }
      return 0;
   }

   DLLLOCAL virtual void deref() {
      if (ROdereference())
         delete this;
   }

   DLLLOCAL virtual const char* getName() const { return "FileLineIterator"; }
};

//! This class defines a line iterator for text files
/** @since %Qore 0.8.6
 */
qclass FileLineIterator [arg=FileLineIterator* i; ns=Qore; vparent=AbstractIterator; dom=FILESYSTEM];

//! opens the given file for reading with the given options and creates the FileLineIterator object
/** @param path the path to open for reading
    @param encoding the character encoding tag for underlying file and therefore the string return values for the lines iterated with this class; if not present, the @ref default_encoding "default character encoding" is assumed
    @param eol the optional end of line character(s) to use to detect lines in the file; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n" (the last one is only automatically detected when not connected to a terminal device in order to keep the I/O from stalling); if this string is passed and has a different @ref character_encoding "character encoding" from this object's (as determined by the \c encoding parameter), then it will be converted to the FileLineIterator's @ref character_encoding "character encoding"
    @param trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the eol bytes

    @throw FILELINEITERATOR-OPEN-ERROR the given file cannot be opened for reading (\c arg will be assigned to the errno value)
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the eol argument has a different @ref character_encoding "character encoding" from the File's and an error occurs during encoding conversion
    @throw ILLEGAL-EXPRESSION FileLineIterator::constructor() cannot be called with a TTY target when @ref no-terminal-io "%no-terminal-io" is set
 */
FileLineIterator::constructor(string path, *string encoding, *string eol, bool trim = True) {
   const QoreEncoding *qe = encoding ? QEM.findCreate(encoding) : QCS_DEFAULT;
   // make sure that we use the same encoding for the EOL marker as for the file, convert if necessary
   SimpleRefHolder<QoreStringNode> neol(eol ? new QoreStringNode(qe) : 0);
   if (eol) {
      if (eol->empty()) {
         xsink->raiseException("FILELINEITERATOR-EOL-ERROR", "the third argument (eol) to FileLineIterator::constructor() was empty");
         return;
      }

      neol->concat(eol, xsink);
      if (*xsink)
         return;
   }

   SimpleRefHolder<FileLineIterator> fli(new FileLineIterator(xsink, path->getBuffer(), qe, neol.release(), trim));
   if (*xsink)
      return;

   if (fli->isTTY()) {
      xsink->raiseException("ILLEGAL-EXPRESSION", "FileLineIterator::constructor() cannot be called with a TTY target when 'no-terminal-io' is set");
      return;
   }

   self->setPrivate(CID_FILELINEITERATOR, fli.release());
}

//! Moves the current position to the next line in the file; returns @ref False if there are no more lines to read; if the iterator is not pointing at a valid element before this call, the iterator will be positioned to the beginning of the file
/** This method will return @ref True again after it returns @ref False once if file is not empty, otherwise it will always return @ref False
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more lines in the file (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.next()) {
    printf("line: %y\n", $i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool FileLineIterator::next() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! returns the current line in the file or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current line in the file or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code
while ($i.next()) {
    printf("+ %y\n", $i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
any FileLineIterator::getValue() [flags=RET_VALUE_ONLY] {
   return i->checkValid(xsink) ? 0 : i->getValue();
}

//! returns @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not

    @par Example:
    @code
if ($i.valid())
    printf("current value: %y\n", $i.getValue());
    @endcode
 */
bool FileLineIterator::valid() [flags=CONSTANT] {
   return i->valid();
}

//! returns the current iterator line number in the file (the first line is line 1) or 0 if not pointing at a valid element
/** @return the current iterator line number in the file (the first line is line 1) or 0 if not pointing at a valid element

    @par Example:
    @code
while ($i.next()) {
    printf("+ %d/%d: %y\n", $i.index(), $i.max(), $i.getValue());
}
    @endcode
 */
int FileLineIterator::index() [flags=CONSTANT] {
   return i->index();
}

//! Returns the @ref character_encoding "character encoding" for the %FileLineIterator
/** @par Example:
    @code
my string $encoding = $f.getEncoding();
    @endcode

    @return the @ref character_encoding "character encoding" for the %FileLineIterator
 */
string FileLineIterator::getEncoding() [flags=CONSTANT] {
   return new QoreStringNode(i->getEncoding()->getCode());
}


//! Returns the current file position as an integer giving the offset in bytes from the beginning of the file (starting from zero)
/** @par Example:
    @code
my int $pos = $i.getPos();
    @endcode

    @return the current file position as an integer giving the offset in bytes from the beginning of the file (starting from zero)

    @throw ILLEGAL-EXPRESSION this exception is only thrown if called with a system constant object (@ref stdin, @ref stdout, @ref stderr) when @ref no-terminal-io is set

    @see File::setPos()
 */
int FileLineIterator::getPos() [flags=RET_VALUE_ONLY] {
   return i->getPos();
}


//! returns @ref Qore::True "True" if the FileLineIterator is connected to a terminal device, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the FileLineIterator is connected to a terminal device, @ref Qore::False "False" if not

    @par Example:
    @code
my bool $b = $i.isTTY();
    @endcode

    @since %Qore 0.8.6
*/
bool FileLineIterator::isTTY() [flags=CONSTANT] {
   return i->isTTY();
}
