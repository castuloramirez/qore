#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires UnitTest

%require-our

our UnitTest $unit();

our bool $dl;  # deadlock flag

synchronized sub internal_deadlock_a(*Counter $c) {
    if ($c) {
	$c.dec();
	$c.waitForZero();
    }
    if ($dl)
	return;
    try {
	return internal_deadlock_b();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "mutex-deadlock");
    }
}

synchronized sub internal_deadlock_b(*Counter $c) {
    if ($c) {
	$c.dec();
	$c.waitForZero();
    }
    if ($dl)
	return;
    try {
	return internal_deadlock_a();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "mutex-deadlock");
	$dl = True;
    }
}

sub mutex_gate_deadlock_a(Counter $c, Mutex $m, Gate $g) {
    my AutoLock $al($m);
    $c.dec();
    $c.waitForZero();
    try {
	$g.enter();
	$g.exit();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "gate-deadlock");
    }
}

sub mutex_gate_deadlock_b(Counter $c, Mutex $m, Gate $g) {
    my AutoGate $ag($g);
    $c.dec();
    $c.waitForZero();
    try {
	$m.lock();
	$m.unlock();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "gate-deadlock");
    }
}

sub readwrite_deadlock_c($c, $rw1, $rw2) {
    my AutoWriteLock $al($rw1);
    $c.dec();
    $c.waitForZero();
    try {
	$rw2.writeLock();
	$rw2.writeUnlock();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "rwl-deadlock-c");
    }
}

sub readwrite_deadlock_d($c, $rw1, $rw2) {
    my AutoReadLock $al($rw2);
    $c.dec();
    $c.waitForZero();
    try {
	$rw1.readLock();
	$rw1.readUnlock();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "THREAD-DEADLOCK", "rwl-deadlock-d");
    }
}

sub test_thread_resources() {
    my Mutex $m();
    $m.lock();

    $unit.exception(sub () {throw_thread_resource_exceptions();}, NOTHING, "terminated while holding", "mutex-resource-error-1");

    my Gate $g();
    $g.enter();
    $unit.exception(sub () {throw_thread_resource_exceptions();}, NOTHING, "terminated while holding", "gate-resource-error-1");

    my RWLock $rw();
    $rw.readLock();
    $rw.readLock();
    $unit.exception(sub () {throw_thread_resource_exceptions();}, NOTHING, "terminated while holding", "rwl-resource-error-1");

    $rw.writeLock();
    $unit.exception(sub () {throw_thread_resource_exceptions();}, NOTHING, "terminated while holding", "rwl-resource-error-2");

    $rw.readLock();
    mark_thread_resources();

    # no exception should be thrown here
    throw_thread_resource_exceptions_to_mark();    

    $unit.exception(sub () {throw_thread_resource_exceptions();}, NOTHING, "terminated while holding", "rwl-resource-error-3");
}

sub cond_test(Counter $c, Condition $cond, Mutex $m, int $n) {
    $m.lock();
    $c.dec();
    try {
	$cond.wait($m);
    }
    catch ($ex) {
	$unit.cmp($ex.err, "LOCK-ERROR", "cond-error-" + $n);
    }        
}

sub rwl_cond_test(Counter $c, Condition $cond, RWLock $rwl, int $n) {
    $rwl.readLock();
    $c.dec();
    try {
	$cond.wait($rwl);
    }
    catch ($ex) {
	$unit.cmp($ex.err, "LOCK-ERROR", "rwl-cond-error-" + $n);
    }        
}

sub counter_test(Counter $c, int $n) {
    try {
	$c.waitForZero();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "COUNTER-ERROR", "counter-error-" + $n);
    }
}

sub queue_test(Queue $q, int $n) {
    try {
	$q.get();
    }
    catch ($ex) {
	$unit.cmp($ex.err, "QUEUE-ERROR", "queue-error-" + $n);
    }
}

sub main() {
    # internal deadlock with synchronized subroutines
    my Counter $c(2);
    background internal_deadlock_a($c);
    internal_deadlock_b($c);

    # deadlock tests with qore classes and explicit locking
    my Mutex $m();
    my Gate $g();
    
    # increment counter for synchronization
    $c.inc();
    $c.inc();
    background mutex_gate_deadlock_a($c, $m, $g);
    mutex_gate_deadlock_b($c, $m, $g);

    # deadlock tests with other classes
    my RWLock $rw1();
    my RWLock $rw2();

    # increment counter for synchronization
    $c.inc();
    $c.inc();
    background readwrite_deadlock_c($c, $rw1, $rw2);
    readwrite_deadlock_d($c, $rw1, $rw2);

    # mutex tests
    $m.lock();
    $unit.exception(sub () {$m.lock();}, NOTHING, "called Mutex::lock", "mutex-lock-error-1");

    $m.unlock();
    $unit.exception(sub () {$m.unlock();}, NOTHING, "called Mutex::unlock", "mutex-lock-error-2");

    delete $m;

    # Gate tests
    $unit.exception(sub () {$g.exit();}, NOTHING, "called Gate::exit", "gate-lock-error-1");
    $g.enter();
    $unit.exception(sub () {delete $g;}, NOTHING, "deleted Gate object", "gate-destructor-error");

    $unit.exception(sub () {$rw1.writeUnlock();}, NOTHING, "RWLock::writeUnlock", "rwl-lock-error-1");
    $unit.exception(sub () {$rw1.readUnlock();}, NOTHING, "RWLock::readUnlock", "rwl-lock-error-2");

    $rw1.writeLock();
    $unit.exception(sub () {$rw1.readUnlock();}, NOTHING, "RWLock::readUnlock", "rwl-lock-error-3");

    $rw1.writeUnlock();
    $rw1.readLock();
    $unit.exception(sub () {$rw1.writeUnlock();}, NOTHING, "RWLock::writeUnlock", "rwl-lock-error-4");

    $rw1.readUnlock();

    # make sure threads sleeping on Condition variable wake up with an exception 
    # if the mutex object is deleted in another thread
    my Condition $cond();
    $m = new Mutex();
    # increment counter for synchronization
    $c.inc();
    $c.inc();
    background cond_test($c, $cond, $m, 1);
    background cond_test($c, $cond, $m, 2);
    $c.waitForZero();
    # lock and unlock to ensure until there are 2 condition variables waiting on this Mutex
    $m.lock();
    $m.unlock();
    $unit.exception(sub () {delete $m;}, NOTHING, "Mutex object deleted", "mutex-destructor-error");

    # try it with a RWLock object
    $c.inc();
    $c.inc();
    background rwl_cond_test($c, $cond, $rw1, 1);
    background rwl_cond_test($c, $cond, $rw1, 2);
    $c.waitForZero();
    # lock and unlock to ensure until there are 2 condition variables waiting on this Mutex
    $rw1.writeLock();
    $rw1.writeUnlock();
    $unit.exception(sub () {delete $rw1;}, NOTHING, "RWLock object deleted", "rwl-destructor-error");

    # make sure threads sleeping on a counter wake up with an exception 
    # when the counter is deleted
    my Counter $c1();
    $c1.inc();
    background counter_test($c1, 1);
    background counter_test($c1, 2);
    # sleep until there are 2 counter variables waiting on this Mutex
    while ($c1.getWaiting() != 2)
	usleep(10ms);
    $unit.exception(sub () {delete $c1;}, NOTHING, "Counter deleted while", "counter-destructor-error");

    # make sure threads sleeping on a Queue wake up with an exception 
    # when the Queue is deleted
    my Queue $q();
    background queue_test($q, 1);
    background queue_test($q, 2);
    # sleep until there are 2 threads waiting on this Queue
    while ($q.getWaiting() != 2)
	usleep(10ms);
    $unit.exception(sub () {delete $q;}, NOTHING, "Queue deleted while", "queue-destructor-error");

    # test thread resource tracking checks
    background test_thread_resources();
}

main();
