/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_AbstractIterator.qpp AbstractIterator class (interface) definition */
/*
  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

//! This class defines an abstract interface for iterators
/**
 */
qclass AbstractIterator [arg=AbstractIterator* i; ns=Qore];

//! Moves the current position to the next element; returns @ref False if there are no more elements
/** This method will return @ref True again after it returns @ref False once if the object being iterated is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code
while ($i.next()) {
    printf(" + %y\n", $i.getValue());
}
    @endcode
 */
abstract bool AbstractIterator::next();

//! returns @ref True if the object to iterate is empty; @ref False if not
/** @return @ref True if the object to iterate is empty; @ref False if not

    @par Example:
    @code
if ($i.empty())
    printf("object is empty\n");
    @endcode
 */
abstract bool AbstractIterator::empty();

//! returns @ref True if on the first element
/** @return @ref True if on the first element

    @par Example:
    @code
while ($i.next()) {
    if ($i.first())
        printf("START:\n");
}
    @endcode
 */
abstract bool AbstractIterator::first();

//! returns @ref True if on the last element
/** @return @ref True if on the last element

    @par Example:
    @code
while ($i.next()) {
    if ($i.last())
        printf("END.\n");
}
    @endcode
 */
abstract bool AbstractIterator::last();

//! returns the current value
/** @return the current value

    @par Example:
    @code
while ($i.next()) {
    printf("+ %y\n", $i.getValue());
}
    @endcode
 */
abstract any AbstractIterator::getValue();
