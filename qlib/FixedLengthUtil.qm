# -*- mode: qore; indent-tabs-mode: nil -*-
# @file FixedLengthUtil.qm Qore user module for working with files with fixed lines length

/*  FixedLengthUtil.qm Copyright 2012 - 2015 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.12
%requires Util
%requires TextUtil
%require-types
%enable-all-warnings
%new-style

module FixedLengthUtil {
    version = "1.0";
    desc    = "user module for working with files with fixed length lines";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>, Zdenek Behan <zdenek.behan@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage FixedLengthUtil Module

    @tableofcontents

    @section fixedlengthutilintro Introduction to the FixedLengthUtil Module

    The %FixedLengthUtil module provides functionality for parsing files with fixed length lines.

    To use this module, use \c "%requires FixedLengthUtil" in your code.
    
    All the public symbols in the module are defined in the FixedLengthUtil namespace.

    Currently the module provides the following classes:
    - @ref FixedLengthUtil::FixedLengthAbstractIterator "FixedLengthAbstractIterator": Iterator class allowing for fixed-length-line data to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthFileIterator "FixedLengthFileIterator": Iterator class allowing for fixed-length-line file to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthDataIterator "FixedLengthDataIterator": Iterator class allowing for fixed-length-line strings to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthAbstractWriter "FixedLengthAbstractWriter": Fixed length line writer
    - @ref FixedLengthUtil::FixedLengthFileWriter "FixedLengthFileWriter": Fixed length line writer into a file
    - @ref FixedLengthUtil::FixedLengthDataWriter "FixedLengthDataWriter": Fixed length line writer into a variable

    <b>Example of reading:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthUtil

hash specs = (
    "type1" : (
        "col1": ( "length": 5, "type": "int"),
        "col2": ( "length": 2, "type": "string"),
    ),
    "type2" : (
        "col3": ( "length": 1, "type": "string"),
        "col4": ( "length": 3, "type": "string"),
        "col5": ( "length": 8, "type": "date", "format" : "DDMMYYYY",
            # "timezone" : "Europe/Prague", # use global if omitted
        ),
    ),
);

hash global_options = (
    "encoding"     : "UTF-8",
    "eol"          : "\n",
    "ignore-empty" : True,
    "timezone"     : "Europe/Prague", # used if not in some date column specification
);

FixedLengthFileIterator i(file, specs, global_options);
while(i.next()) {
	operation_with_hash(i.getValue())
}
    @endcode

    <b>Example of writing:</b>
    @code
#!/usr/bin/env qore

%new-style
%requires FixedLengthUtil

list data = (
    ("type": "type1", "record": {"col1" : 11111, "col2" : "bb"}),
    ("type": "type2", "record": {"col3" : "c", "col4" : "ddd", "col5" : "31122014"}),
    ("type": "type1", "record": {"col1" : 22222, "col2" : "gg"}),
);

hash specs = (
    "type1" : (
        "col1": ("length": 5, "type": "int"),
        "col2": ("length": 2, "type": "string"),
    ),
    "type2" : (
        "col3" : ("length": 1, "type": "string"),
        "col4" : ("length" : 3, "type": "string"),
        "col5" : ("length" : 8, "type": "date", "format": "DDMMYYYY", "timezone" : "Europe/Prague"),
    ),
);

hash global_options = (
    "eol" : "\n",
);

FixedLengthFileWriter w(file, specs, global_options);
w.write(data);
    @endcode

    @section fixedlengthutil_relnotes Release Notes

    @subsection fixedlengthutil_v1_0 Version 1.0
    - initial version of module
*/

#! The FixedLengthUtil namespace contains all the definitions in the FixedLengthUtil module
public namespace FixedLengthUtil;

#! Structured line iterator for abstract data allowing efficient "pipelined" processing
public class FixedLengthUtil::FixedLengthAbstractIterator inherits TextUtil::AbstractTextIterator {
    private {
        hash m_specs;
        hash m_line_lengths;
        string m_state;
    }

    #! Instantiates the FixedLengthAbstractIterator object
    /**
    @param h Fixed-length line specification
    @param g Global options
    */
    constructor(hash h, *hash g) : TextUtil::AbstractTextIterator(g{("encoding", "eol", "ignore-empty", "ignore-empty", "timezone", "number_format", "date_format")}) {
        m_specs           = h;
        m_opts            = m_opts + checkOptions(g);

        # Determine line lengths of each spec, for use by the default identifyType() method. We do this by building a reverse length -> type table.
        m_line_lengths = hash();
        foreach string k in (m_specs.keys()) {
            int len = 0;
            foreach string c in (m_specs{k}.keys()) {
                len += m_specs{k}{c}{"length"};
            }
            if (m_line_lengths{len} != NOTHING) {
                # If any two type line lengths are not unique, dump the table entirely and break out. The default identifyType() will take care of the rest.
                m_line_lengths = hash();
                break;
            }
            m_line_lengths{len} = k;
        }
    }

    abstract *string getLine();

    #! Returns the current record as a hash
    /** @par Example:
        @code
my hash $h = $i.getValue();
        @endcode

        @return The current record as a hash
    */
    *hash getValue() {
        *string line = getLine();

        if (!line) {
            return NOTHING;
        }

        hash result = hash();

        string type = identifyType(line);
        result{"type"} = type;
        if (!type || !m_specs{type}) {
        }
        if (!checkTransition(m_state, type)) {
            throw 'INVALID-TRANSITION', 'State ' + (type ?? '<START>') + ' cannot follow state ' + (m_state ?? '<START>') + ' for line >' + line + '<';
        }
        m_state = type;
        int pos = 0;
        foreach string col in (m_specs{type}.keys()) {
            hash field = m_specs{type}{col};
            if (!field.timezone) {
                field.timezone = m_opts.timezone;
            }
            result{"record"}{col} = transform(line.substr(pos, field.length), field);
            pos += field.length;
        }
        return result;
    }

	#! Validate and prepare global fixed-length options
	/**
	@param opts Options passed during class instatiation.
	*/
    private hash checkOptions(*hash opts) { # put special options here
        return opts;
    }

	#! Identify a fixed-length line type using a second method %identifyTypeImpl, that may be overridden if necessary
	/**
	@param s Input line to be identified
	*/
    string identifyType(string s) {
        *string type = identifyTypeImpl(s);
        if (!type || !inlist(type, m_specs.keys())) {
            throw 'NON-MATCHING-TYPE', 'Line identified to be of type that is not present in ths spec >' + s + '<';
        }
        return type;
    }

	#! Identify a fixed-length line type, given the raw line string. This method performs a lookup to a precalculated table based on line lengths (see @constructor). In case a different criteria is needed, eg. when two line types in a spec have the same length, this methods needs to be overriden, and will throw an exception, because the precalcualted m_line_lenghts mapping will be empty.
	/**
	@param s Input line to be identified
	*/
    *string identifyTypeImpl(string s) {
        if (!m_line_lengths) { # this happens only if it was emptied because lengths of various types were not unique - see how m_line_lengths was constructed
            throw 'NON-MATCHING-TYPE', 'A format specifier has multiple line types of the same length. You need to provide your own identifyType() method.';
        }
        if (!m_line_lengths.hasKey(s.length())) {
            throw 'NON-MATCHING_TYPE', 'Line of unexpected length found >' + s + '<';
        }
        return m_line_lengths{s.length()};
    }

	#! A verification function to be called for each line. This method can be overriden to achieve a begin-to-end validation of the whole input file.
	/**
	@param from Type of previous line being processed
	@param to Type of the current line being processed
	*/
    bool checkTransition(*string from, *string to) {
        return True;
    }
}

#! Structured line iterator for fixed-length line files allowing efficient "pipelined" processing.
public class FixedLengthUtil::FixedLengthFileIterator inherits FixedLengthUtil::FixedLengthAbstractIterator, Qore::FileLineIterator {
    private {
        string file;
    }

    #! Instantiates the FixedLengthFileIterator object.
    /**
    @param f File to read
    @param h Fixed-length line specification
    @param g Global options
    */
    constructor(string f, hash h, *hash g) : FixedLengthUtil::FixedLengthAbstractIterator(h, g), FileLineIterator(f, g.encoding.typeCode() == NT_STRING ? g.encoding : NOTHING, g.eol.typeCode() == NT_STRING ? g.eol : NOTHING) {
        file  = f;
    }

    #! returns a line
    private string getLine() {
        return FileLineIterator::getValue();
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        bool status = FileLineIterator::next();
        if (m_opts{"ignore-empty"}) {
            while (status && getLine() == '') {
                status = FileLineIterator::next();
            }
        }
        return status;
    }
}

#! Structured line iterator for fixed-length line strings allowing efficient "pipelined" processing.
public class FixedLengthUtil::FixedLengthDataIterator inherits FixedLengthUtil::FixedLengthAbstractIterator {
    private {
        int position;
        int max_index;

        list lines;
        int lines_pos;

        string data;
    }

    #! Instantiates the FixedLengthFileIterator object
    /**
    @param r String to process
    @param h Fixed-length line specification
    @param g Global options
    */
    constructor(string r, hash h, *hash g) : FixedLengthUtil::FixedLengthAbstractIterator(h, g) {
        data  = r;
    }

	#! Parse the input string into individual lines
    private createLines() {
        string separator = m_opts.eol ? m_opts.eol : "\n";
        lines = data.split(separator);
        lines_pos = 0;
    }

	#! Returns the current line, for iteration purposes.
    private *string getLine() {
        if (!lines) {
            createLines();
        }

        return lines[lines_pos];
    }

    #! Moves the current line / record position to the next line / record; returns @ref False if there are no more lines to iterate
    /** This method will return @ref True again after it returns @ref False once if the file being iterated has data that can be iterated, otherwise it will always return @ref False. The iterator object should not be used to retrieve a value after this method returns @ref False.
        @return @ref False if there are no lines / records to iterate (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

        @note that empty lines are ignored if "ignore-empty" option is in effect
     */
    bool next() {
        lines_pos++;
        if (!lines) {
            createLines();
        }
        bool status = boolean(getLine() !== NOTHING);
        if (m_opts{"ignore-empty"}) {
            while (status && getLine() == "") { # skip empty lines
                lines_pos++;
                status = boolean(getLine() !== NOTHING);
            }
        }
        return status;
    }
}

#! Structured abstract writer for fixed-length lines
public class FixedLengthUtil::FixedLengthAbstractWriter inherits TextUtil::AbstractTextWriter {
    private {
        hash m_specs;
        string m_state;
    }

    #! creates the FixedLengthAbstractWriter object
    /**
    @param h Fixed-length line specification
    @param g Global options
    */
    constructor(hash h, *hash g) : TextUtil::AbstractTextWriter(hash() + (g.eol ? ("eol" : g.eol) : hash())) {
        m_specs           = h;
        delete g.eol;
        m_opts            = m_opts + checkOptions(g);
    }

	#! Formats a single line from hash of columns
	/**
	@param line Hash of the line columns to be formatted
	*/
    string formatLine(hash line) {
        string type = line{"type"};
        string result = "";
        foreach string column in (m_specs{type}.keyIterator()) {
            string value = string(line{"record"}{column});
            # Validate
            if (value.length() > m_specs{type}{column}{"length"}) {
                throw 'NON-MATCHING-TYPE', 'Value too large to pack into column!';
            }
            # Justify to the right.
            for(int i=0; i<(value.length() - m_specs{type}{column}{"length"}); i++) {
                result += " ";
            }
            result += value;
        }

        if (!checkTransition(m_state, type)) {
            throw 'INVALID-TRANSITION', 'State ' + (type ?? '<START>') + ' cannot follow state ' + (m_state ?? '<START>') + ' for line >' + result + '<';
        }
        m_state = type;
        return result;
    }

	#! A verification function to be called for each line. This method can be overriden to achieve a begin-to-end validation of the whole input file.
	/**
	@param from Type of previous line being processed
	@param to Type of the current line being processed
	*/
    bool checkTransition(*string from, *string to) {
        return True;
    }
}


#! Writer for fixed-length-line files
public class FixedLengthUtil::FixedLengthFileWriter inherits FixedLengthUtil::FixedLengthAbstractWriter {
    private {
        string file;
    }
    
    #! Instantiates the FixedLengthFileWriter object
    /**
    @param f file to write
    @param h Fixed-length line specification
    @param g Global options
    */
    constructor(string f, hash h, *hash g) : FixedLengthUtil::FixedLengthAbstractWriter(h, g)  {
        file  = f;
    }

    #! Stream iterator into the resulting file
    /**
    @param iterator An iterator to stream data into file.
    */
    write(list lines) {
        File FW();
        FW.open(file, O_WRONLY | O_CREAT);

        foreach hash item in (lines) {
            FW.write(formatLine(item) + (m_opts.eol ? m_opts.eol : "\n"));
        }
    }
}


#! Writer class for fixed-length-line data
public class FixedLengthUtil::FixedLengthDataWriter inherits FixedLengthUtil::FixedLengthAbstractWriter {
    #! Instantiates the FixedLengthDataWriter object.
    /**
    @param h Fixed-length line specification
    @param g Global formatting options.
    */
    constructor(hash h, *hash g) : FixedLengthUtil::FixedLengthAbstractWriter(h, g) {
    }

    #! Stream iterator into the resulting string.
    /**
    @param iterator An iterator to stream data into string.
    */
    string write(list lines) {
        string result = "";

        foreach hash item in (lines) {
            result += formatLine(item) + (m_opts.eol ? m_opts.eol : "\n");
        }

        return result;
    }
}
