#!/usr/bin/env qr

%require-types
%enable-all-warnings
%new-style

%requires xml

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Qorize.qm

%exec-class QorizeRealWorldTest

public class QorizeRealWorldTest inherits QUnit::Test {
    public {
        const OLDSTYLE = False;
        const NEWSTYLE = True;

        const MIN_LENGTH = 10000;

        hash m_h;
    }

    constructor() : Test("QorizeRealWorldTest", "1.0") {
        addTestCase("qorize newstyle", \testQorizeNewstyle(), NOTHING);
        addTestCase("qorize oldstyle", \testQorizeOldstyle(), NOTHING);
        addTestCase("qorize named newstyle", \testQorizeNamedNewstyle(), NOTHING);
        addTestCase("qorize named oldstyle", \testQorizeNamedOldstyle(), NOTHING);

	    set_return_value(main());
    }

    setUp() {
        string fname = get_script_dir() + '/complex.xml';

        File f();
        f.open2(fname);

        string xml = f.read(-1);
        m_h = parseXMLAsData(xml);
    }

    testQorizeNewstyle() {
        testAssertion("qorize NEWSTYLE",  bool sub () { return (qorize(m_h, 'name', NEWSTYLE).size() > MIN_LENGTH); }, list());
    }

    testQorizeOldstyle() {
        testAssertion("qorize OLDSTYLE",  bool sub () { return (qorize(m_h, 'name', OLDSTYLE).size() > MIN_LENGTH); }, list());
    }

    testQorizeNamedNewstyle() {
        testAssertion("qorizeNamed NEWSTYLE", bool sub () { return (qorizeNamed(m_h, 'name', NEWSTYLE).size() > MIN_LENGTH); }, list());
    }

    testQorizeNamedOldstyle() {
        testAssertion("qorizeNamed OLDSTYLE", bool sub() { return (qorizeNamed(m_h, 'name', OLDSTYLE).size() > MIN_LENGTH); }, list());
    }
}
