<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="Qore_Language_Description">
  <title>Qore Language Description</title>

  <sect1 id="Language_Overview">
    <title>Language Overview</title>

    <para>A Qore program is composed of a series of declarations, statements, subroutine definitions, and/or class definitions. Non-block statements are terminated by a semi-colon ";". Block statements are grouped by using curly brackets ("{" and "}"), as in C, C++, Java, and Perl.</para>

    <para>Programmers familiar with C, C++, Java, and/or Perl should find the standard Qore syntax intuitive and should be productive fairly quickly with the language. However Qore has unique features that differentiate it from other languages, and these features must be mastered in order to leverage the full power of Qore.</para>
    
    <para>Qore programs/scripts are free form. Formatting does not affect the execution of the program; formatting is at the discretion of the programmer and should be used to enhance readability and clarity of the source code.</para>

    <para>Qore was creaetd as a weakly typed language. That means that variables without type restructions can hold values of any type and subroutines with out type restrictions can return any value type (or none at all, see <link linkend='Variables'>Variables</link>) and take arguments of any type. Furthermore list elements can be of any type (they do not have to be uniform), and multidimensional lists can have a different number of elements in each list. The same type flexibility holds true of hashes, objects, and all combinations of container types.</para>

    <para>Qore can be used a a traditional subroutine-based scripting language or as a pure object-oriented language, where the application is defined as a class. Aside from traditional local and global variables, constants, and subroutines, Qore also supports nested namespaces, classes, multiple inheritance, overriding base class constructor arguments, private members and methods, and static class methods.</para>
    
    <para>All elements of Qore are designed to work together seamlessly: <link linkend="Datasource_Class">database access</link>, <link linkend="XML_Integration">XML transformations</link>, <link linkend="Socket_Class">socket communication</link>, <link linkend="Qore_Program_Class">embedding logic</link> in subprograms, <link linkend="Regular_Expressions">regular expressions</link>, <link linkend="Operators">operators</link>, <link linkend="Function_Library">functions</link>, and all other elements are thread-safe and built on an execution engine that was designed for SMP scalability.</para>

    <para>Qore automatically converts data types when necessary when evaluating operators. The goal is to provide the expected result for the programmer without requiring the programmer to explicitly convert data types. Please see <link linkend='Operators'>Operators</link> for more information.</para>

    <para>Qore supports <link linkend="signal_handling">signal handling</link> by dispatching Qore-language signal handlers in a safe manner, asynchronously to the actual receipt of the signal.</para>

    <para>UNIX operating systems allow an executable script to specify their interpreter. This is done by setting the first line in the program to a special string indicating the location of the Qore binary. For the purposes of this document, the location for the Qore binary is assumed to be <code>/usr/bin/qore</code>. The first line of Qore scripts in this case should look as follows:</para>

    <programlisting>#!/usr/bin/qore</programlisting>

    <para>If another installation directory is used (such as <code>/usr/local/bin</code>), then the correct path must be reflected in the first line of the Qore script.</para>

    <para>Qore convention dictates that Qore script file names end with <code>.q</code>.</para>
  </sect1>

  <sect1 id="Environment_Variables">
    <title>Environment Variables</title>

    <para>This section will outline the environment variables that are used by Qore.</para>

    <table frame='all'><title>Qore Environment Variables</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Environment Variable</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
  
      <tbody>
	<row>
	  <entry><para><code>QORE_AUTO_MODULE_DIR</code></para></entry>
	  <entry><para>This environment variable should contain a colon-separated list of directories which will be searched for Qore modules when Qore starts. If any modules are found, they are loaded automatically before any parsing starts.</para></entry>
	</row>
	<row>
	  <entry><para><code>QORE_MODULE_DIR</code></para></entry>
	  <entry><para>This environment variable should contain a colon-separated list of directories which will be searched when modules are loaded with the <code>%requires</code> parse directive</para></entry>
	</row>
	<row>
	  <entry><para><code>QORE_INCLUDE_DIR</code></para></entry>
	  <entry><para>This variable should be a colon-separated list 
	  of directories where the Qore binary should look for include 
	  files</para></entry>
	</row>
	<row>
	  <entry><para><code>QORE_CHARSET</code></para></entry>
	  <entry><para>If this variable is set, then the default character encoding name for the process will be the value of this variable.  This variable takes precedence over the <code>LANG</code> variable, but can be overridden by the command line using option <code>--charset</code> (see <link linkend='Qore_Strings_and_Character_Encoding'>Qore Strings and Character Encoding</link> for more information on this option)</para></entry>
	</row>
	<row>
	  <entry><para><code>LANG</code></para></entry>
	  <entry><para>If this variable is set and includes a character encoding specification, then, if the <code>QORE_CHARSET</code> variable is not set (and no character encoding was specified on the command line), this character encoding will be the default for the process.</para></entry>
	</row>
      </tbody>
      
    </tgroup>
    </table>
    
  </sect1>
  
  <sect1 id="Qore_Modules">
    <title>Qore Modules</title>
    <para>Qore modules allow the Qore language to be extended at run-time.  Qore modules must conform to the Qore Module API and have the file extension <command><code>*.qmod</code></command>.  Qore modules normally depend on other shared libraries and therefore can only be loaded if the libraries they require are present on the system and can be found in the library path.</para>

  <para>Please note that as of version 0.7.0, modules are no longer delivered with the Qore library.  Modules must be downloaded separately; see <ulink url="http://qore.org">Qore's home page</ulink> for more information.</para>

    <para>To load a module at parse time (normally required for most modules), use the <code><link linkend="requires">%requires</link></code> parse directive. If the named feature is not already present in Qore, Qore looks for a module with this name in the directories listed in the <code>QORE_MODULE_DIR</code> environment variable.</para>

    <para>Use the <link linkend="load_module">load_module()</link> function to load Qore modules at run-time; however, note that any module providing parse support (classes, constants, functions, etc) must be loaded at parse time using the <code><link linkend="requires">%requires</link></code> directive.</para>

    <para>From Qore 0.7.1, you can specify a comparison operator (one of &lt; &lt;=, =, &gt;=, or &gt;) and version information after the module name as well.  Version numbers are compared via integer comparisons of each element, where elements are separated by a '.'.  If one of the versions does not have as many elements as another, the missing elements are assumed to be '0' (i.e. version &quot;1.0&quot; compared with version &quot;1.0.1&quot; will be exteneded to &quot;1.0.0&quot;).</para>

    <para>Also note that DBI drivers are loaded on demand by the <link linkend="Datasource_Class">Datasource</link> and <link linkend="DatasourcePool_Class">DatasourcePool</link> classes.</para>

    <para>At the time of writing this documentation, the following modules exist for Qore:</para>

    <table id="list_of_qore_modules" frame='all'><title>Qore Modules</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Module</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      
      <tbody>
	<row>
	  <entry><para><code>asn1</code></para></entry>
	  <entry><para>Provides ASN.1 functionality to Qore</para></entry>
	</row>
	<row>
	  <entry><para><code>xmlsec</code></para></entry>
	  <entry><para>Provides <code>xmldsig</code> and <code>xmlenc</code> functionality to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>ssh2</code></para></entry>
	  <entry><para>Provides SSH2 and SFTP functionality to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>tibrv</code></para></entry>
	  <entry><para>Provides TIBCO Rendezvous(R) (TIBCO, Inc) functionality to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>tibae</code></para></entry>
	  <entry><para>Provides TIBCO ActiveEnterprise(TM) (TIBCO, Inc) functionality to Qore. </para></entry>
	</row>
	<row>
	  <entry><para><code>tuxedo</code></para></entry>
	  <entry><para>Provides Oracle (ex Bea) Tuxedo functionality to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>mysql</code></para></entry>
	  <entry><para>Provides a MySQL DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>pgsql</code></para></entry>
	  <entry><para>Provides a PostgreSQL DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>sqlite3</code></para></entry>
	  <entry><para>Provides a SQLite3 DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>sybase</code></para></entry>
	  <entry><para>Provides a Sybase DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>freetds</code></para></entry>
	  <entry><para>Provides a FreeTDS-based DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>oracle</code></para></entry>
	  <entry><para>Provides an Oracle DBI driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>db2</code></para></entry>
	  <entry><para>Provides an IBM DB2 driver to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>glut</code></para></entry>
	  <entry><para>Provides GLUT functionality to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>opengl</code></para></entry>
	  <entry><para>Provides an OpenGL API to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>qt-core, qt-gui, qt-svn, qt-opengl</code></para></entry>
	  <entry><para>DEPRECATED: old QT4 modules: please use the much more complete qt4 module.</para></entry>
	</row>
	<row>
	  <entry><para><code>qt4</code></para></entry>
	  <entry><para>Provides Nokia (formerly Trolltech) QT4 APIs for GUI development in Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>ncurses</code></para></entry>
	  <entry><para>Provides curses APIs to Qore.</para></entry>
	</row>
	<row>
	  <entry><para><code>yaml</code></para></entry>
	  <entry><para>Provides <ulink url="http://www.yaml.org">YAML</ulink> functionality to Qore.</para></entry>
	</row>
      </tbody>
    </tgroup>
    </table>
  </sect1>
  
  <sect1 id="Include_Files">
    <title>Include Files</title>
  
    <para>A Qore program can include other program code to be used and executed in the current program by using the <code>%include</code> directive. The <code>%include</code> directive must be the first text on the line, and the file name to include must follow. All text on the line after the <code>%include</code> directive will be used for the file name to include. The file name should not be quoted.</para>
    
    <para>Here is an example:</para>
    
    <programlisting>#!/usr/bin/qore
%include /usr/qore/lib/functions.lib</programlisting>
    
    <para>After this, any variable, subroutine, namespace, constant, or object declared in the above file can be used by the Qore program.</para>
    
    <para>The <code>QORE_INCLUDE_DIR</code> environment variable determines the search path for include files.</para>
    
  </sect1>
  <sect1 id="Identifiers">
    <title>Identifiers</title>

    <para>Qore identifiers must start with an alphabetic character, and then may contain any number of alphabetic, numeric, or "_" characters.  There is no length limit on Qore identifiers.</para>
    
    <para>All Qore identifiers are case-sensitive, therefore the identifier <code>hello_there</code> is not the same as <code>Hello_There</code> or <code>HELLO_THERE</code>.</para>

    <para>The following are examples of valid Qore identifiers:</para>

    <table frame='all'><title>Examples of Valid Qore Identifiers</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Identifier</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      
      <tbody>
	<row>
	  <entry><para><code>i</code></para></entry>
	  <entry><para>Simple one-character identifier</para></entry>
	</row>
	<row>
	  <entry><para><code>foo21</code></para></entry>
	  <entry><para>Identifier with number</para></entry>
	</row>
	<row>
	  <entry><para><code>this_is_a_long_identifier</code></para></entry>
	  <entry><para>Long identifier with underline characters</para></entry>
	</row>
	<row>
	  <entry><para><code>Total_318</code></para></entry>
	  <entry><para>Identifier with underline and number</para></entry>
	</row>
	<row>
	  <entry><para><code>AVeryBigNumber</code></para></entry>
	  <entry><para>Mixed case identifier name</para></entry>
	</row>
	<row>
	  <entry><para><code>CAPS</code></para></entry>
	  <entry><para>Identifier in all capital letters</para></entry>
	</row>
	
      </tbody>
    </tgroup>
    </table>  
    
    <para>The following are invalid identifiers:</para>
    
    <table frame='all'><title>Examples of Invalid Qore Identifiers</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Identifier</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      
      <tbody>
	<row>
	  <entry><para><code>1a</code></para></entry>
	  <entry><para>Does not start with an alphabetic character</para></entry>
	</row>
	<row>
	  <entry><para><code>this-and-that</code></para></entry>
	  <entry><para>Contains "-" characters</para></entry>
	</row>
	<row>
	  <entry><para><code>Start#10</code></para></entry>
	  <entry><para>Contains "#" character</para></entry>
	</row>
      </tbody>
    </tgroup>  
    </table>
    
  </sect1>
  <sect1 id="Comments">
    <title>Comments</title>

    <para>Comments are allowed in Qore scripts; line comments are preceded by a hash "#", and block comments are made C-style, ex:</para>

    <programlisting># this is a line comment
/* 
   this is a block comment 
*/</programlisting>
    
    <para>For line comments, all text following a hash until the end-of-line character "\n" is considered a part of the comment.</para>

    <para>For block comments, all text between the /* and */ is ignored by the parser.</para>

<para>Here is an example Qore script containing comments:</para>

<programlisting>#!/usr/bin/qore
#
# these are line comments
# another line comment

/*
   --- this text is in block comments
   print("hello"); &lt;- this won't get executed 
   --- because it's in the block comment
*/</programlisting>

  </sect1>
  <sect1 id="Variables">
    <title>Variables</title>

    <para>Variables are Qore identifiers prefixed by a "$" sign, similar to Perl. The data type of variables does not have to be declared in advance, and variable types are assigned and changed automatically as appropriate in the context of the operations being performed on them or the values being assigned. Any Qore variable can hold any Qore data type including container types (lists, hashes, or objects).</para>

    <para>A few variables are set by the Qore language during the execution of Qore programs. These are normal variables that can be reassigned to other values by the user if necessary.</para>

    <table id="Special_Qore_Variables">
      <title>Special Qore Variables</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Variable</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Data Type</para></entry>
	    <entry><para>Explanation</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="argv">
	    <entry><para><code>$argv</code></para></entry>
	    <entry><para>Local</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>automatically assigned local variable containing the list of subroutine or method arguments that were not assigned to parameter variables (see <link linkend='Subroutines'>Subroutines</link> and <link linkend="Implicit_Arguments">Implicit Arguments</link> for supporting related information)</para></entry>
	  </row>
	  <row id="ARGV">
	    <entry><para><code>$ARGV</code></para></entry>
	    <entry><para>Global</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>script command-line arguments (use the <link linkend='GetOpt_Class'>GetOpt Class</link> to parse command-line arguments)</para></entry>
	  </row>
	  <row id="QORE_ARGV">
	    <entry><para><code>$QORE_ARGV</code></para></entry>
	    <entry><para>Global</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>complete qore command-line arguments</para></entry>
	  </row>
	  <row id="ENV">
	    <entry><para><code>$ENV</code></para></entry>
	    <entry><para>Global</para></entry>
	    <entry><para>Hash</para></entry>
	    <entry><para>UNIX program environment</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <note><para>As of version 0.5.0, <code>$STDERR</code> and <code>$STDOUT</code> have been removed from Qore.  Use the <link linkend="Qore_IO_Constants">I/O constants</link> <command>stderr</command>, <command>stdout</command>, and <command>stdin</command> constants of the <link linkend='File_Class'>File Class</link> instead.</para></note>

<sect2 id="Variable_Declarations_And_Lexical_Scope">
<title>Variable Declarations and Lexical Scope</title>

<para>Variables not in a parameter list automatically have global scope unless the first reference is prefixed with <command>my</command>.  Variable names in a parameter list are always local to their associated subroutine, method, or catch block. Global variables can be explicitly declared with <command>our</command>.  The <command>our</command> keyword is required if the parse option <code><link linkend="require-our">PO_REQUIRE_OUR</link></code> (<code>-O</code> or <code>--require-our</code> command-line option) is set for the parent program.  See the section on <link linkend="Parse_Options">Parse Options</link> for more information.</para>

<para>Variables may be assigned any value unless restricted with a <link linkend="Data_Type_Declarations">type declaration</link>.  If no type declaration is given, then the variable is assumed to be type <link linkend="any_type">any</link>.  Note that type declarations are required for all variables (and for function and method parameters and class members) when the <code><link linkend="require-types">PO_REQUIRE_TYPES</link></code> parse option is set.</para>

<para>Note that variable types can only be declared when the <command>my</command> or <command>our</command> keywords are used; it is a syntax error to declare a variable's type without declaring its scope at the same time with one of these keywords.</para>

<para>Local variables are not shared between threads (local variables have a distinct value in each thread), however global variables are.  See <link linkend='Threading'>Threading</link> (and in particular <link linkend="Threading_And_Variables">Threading and Variables</link>) for more information.</para>

<para>For example (in the following script, the <command>our</command> keyword is optional):</para>

<programlisting>#!/usr/bin/qore
#
# variable scoping example

<command>our</command> int $a = 1;                    # this is a global variable
<command>our</command> (string $b, any $c, hash $d);  # list of global variables

<command>if</command> ($a == 1) {
    <command>my</command> int $a = 2; 
    <command>my</command> (string $b, any $c);
    # $a, $b, and $c are local variables, 
    # the use of which will not affect the 
    # global variables of the same name
    print("local a = %d\n", $a); 
}

print("global a = %d\n", $a); </programlisting>

<para>The first print() statement will output:</para>

<programlisting>local a = 2</programlisting>

<para>The second print() statement will output:</para>

<programlisting>global a = 1</programlisting>

</sect2>
</sect1>

<sect1 id="Basic_Data_Types">
<title>Basic Data Types</title>

<para>The following are the basic data types in Qore (see <link linkend="Container_Data_Types">Container Data Types</link> for container data types):</para>

<table><title>Basic data types</title>
<tgroup cols='4' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Type</para></entry>
    <entry><para>Description</para></entry>
    <entry><para>Example</para></entry>
    <entry><para>Default Value</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><link linkend="Boolean">Boolean</link></para></entry>
    <entry><para>True or False value</para></entry>
    <entry><code>True</code></entry>
    <entry><para>False</para></entry>
  </row>
  <row>
    <entry><para><link linkend="String">String</link></para></entry>
    <entry><para>A sequence of characters</para></entry>
    <entry><code>"string"</code></entry>
    <entry><para>Empty string</para></entry>
  </row>
  <row>
    <entry><para><link linkend="Integer">Integer</link></para></entry>
    <entry><para>A 64-bit signed integer</para></entry>
    <entry><code>1</code></entry>
    <entry><para>0</para></entry>
  </row>
  <row>
    <entry><para><link linkend="Float">Float</link></para></entry>
    <entry><para>A double-precision floating-point number</para></entry>
    <entry><code>1.00023</code></entry>
    <entry><para>0.0</para></entry>
  </row>
  <row>
    <entry><para><link linkend="Date">Date</link></para></entry>
    <entry><para>A date/time value with an optional time zone component, with resolution to the microsecond.</para></entry>
    <entry><code>2010-05-10T18:35:21.001456-07:00</code></entry>
    <entry><para>1970-01-01Z</para></entry>
  </row>
  <row>
    <entry><para><link linkend="Binary">Binary</link></para></entry>
    <entry><para>An opaque binary object</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>an empty object of size 0</para></entry>
  </row>
  <row>
    <entry><para><link linkend="NULL">NULL</link></para></entry>
    <entry><para>Corresponds to a NULL value in a database query (not equivalent to NOTHING)</para></entry>
    <entry><code><command>NULL</command></code></entry>
    <entry><code><command>NULL</command></code></entry>
  </row>
  <row>
    <entry><para><link linkend="NOTHING">NOTHING</link></para></entry>
    <entry><para>Represents the state of a variable having no value or function returning no value (not equivalent to NULL)</para></entry>
    <entry><code><command>NOTHING</command></code></entry>
    <entry><code><command>NOTHING</command></code></entry>
  </row>

</tbody>
</tgroup>
</table>

<sect2 id="Boolean">
  <title>Boolean</title>
  <para>The Boolean type can have two values, True and False. When converting other types to a Boolean, any value that converts to a non-zero integer will be evaluated as True. Otherwise the result of the conversion will be False.</para>
</sect2>

<sect2 id="String">
  <title>String</title>
  <para>String values are specified with text between double or single quotes. Text between double quotes is subject to interpretation of escape characters. Please see <link linkend="String_Formatting">String Formatting</link> for more information.</para>

  <para>Strings are assumed by default to have the encoding given by the <code>QORE_CHARSET</code> or the <code>LANG</code> environment variable. If neither of these variables is set, then all strings will be assumed to have UTF-8 encoding.</para>

  <para>For detailed information on Qore character encoding handling, please see <link linkend="Qore_Strings_and_Character_Encoding">Qore Strings and Character Encoding</link>.</para>

  <para>It is legal to specify a string literal with newline characters like the following:</para>

  <programlisting>$str = "this string
is a multiline string";</programlisting>

  <para>Internally, strings are stored as a pointer to the string data, an unsigned integer giving the length of the string, and a pointer to an encoding object, giving the string's character encoding.</para>

</sect2>

<sect2 id="Integer">
  <title>Integer</title>
  <para>Qore integers are 64-bit signed integers.</para>
</sect2>

<sect2 id="Float">
  <title>Float</title>
  <para>Qore floats are double precision floating-point numbers (C/C++ type <command>double</command>), normally a 64-bit value.</para>
</sect2>

<sect2 id="Date">
  <title>Date</title>
  <para>Qore dates have a time component supporting a resolution to the microsecond and can be either absolute or relative.</para>

  <sect3 id="Absolute_Dates">
    <title>Absolute Date/Time Values</title>

    <para>Absolute date/time values specify a specific point in time in a certain time zone, such as January 1, 2005 10:35:00 +01:00.  They are stored interally as a 64-bit signed offset from the Qore epoch (1970-01-01Z), a positive 4-byte integer for microseconds, and a pointer to a time zone description object that provides the UTC offset and daylight savings time information (see <link linkend="Time_Zones">Time Zones</link> for more information).  Note that all absolute date/time values in Qore are stored internally in UTC and are converted for display purposes to the representation of wall time in their tagged time zone.</para>

  <para>Absolute date/time values can be specified with a special syntax as follows:</para>

    <programlisting>&lt;4d-year&gt;-&lt;2d-month&gt;-&lt;2d-day&gt;[-&lt;2d-hour&gt;:&lt;2d-minute&gt;:&lt;2d-second&gt;[.&lt;fractional-second&gt;][Z|[+-]&lt;2d-hours-east&gt;[:&lt;2d-minutes-east&gt;[:&lt;2d-seconds-east&gt;]]]</programlisting>

    <para>Note that if no time zone information is given, the local time zone will be assumed.  If a time zone UTC offset is given, it is given in units of time east of UTC (i.e. +05:00 means five hours east of UTC).</para>

    <para>Or, an almost-ISO-8601-compliant format (including an optional microsecond component)</para>
    
    <programlisting>&lt;4d-year&gt;-&lt;2d-month&gt;-&lt;2d-day&gt;[T&lt;2d-hour&gt;:&lt;2d-minute&gt;:&lt;2d-second&gt;[.&lt;fractional-second&gt;][Z|[+-]&lt;2d-hours-east&gt;[:&lt;2d-minutes-east&gt;[:&lt;2d-seconds-east&gt;]]]]</programlisting>
    
    <para>for example, for just the date in UTC, without a time component:</para>
    
    <programlisting>&lt;4d-year&gt;-&lt;2d-month&gt;-&lt;2d-day&gt;</programlisting>
    
    <para>or, for just the time, without a date component (note that in this case the date component will be set to Jan 1, 1970, in order for time arithmetic to function properly and will also be tagged with the local time zone):</para>
    
    <programlisting>&lt;2d-hour&gt;:&lt;2d-minute&gt;:&lt;2d-second&gt;[.&lt;fractional-second&gt;]]</programlisting>
    
    <para>Some examples should make it clearer:</para>
    
    <programlisting>2005-03-29-18:12:25          # represents: March 29, 2005 6:12:25 pm in the local time zone
0512-01-01T01:49:59.002213Z  # represents: January 1, 512 1:49:59 am and 2213 microseconds UTC      
2005-03-29                   # represents: March 29, 2005 00:00:00 in the local time zone
18:35:26+08:00               # represents: January 1, 1970 6:35:26 pm +08 (1970-01-01 is the start of the Qore epoch)</programlisting>
    
    <para>The year must be a four-digit number, and all other values except microseconds must be two-digit numbers.  If microseconds are present, at least one and up to 6 digits may be given after the decimal point.  Pad the numbers with leading zeros if the numbers are smaller than the required number of digits.  The hour component must be in 24-hour time format. Except for the month and day values, all other values start with 0 (hour = 00 - 23, minute and second: 00 - 59).  Any deviation from this format will cause a parse exception.</para>

    <para>When a date/time value is converted to an integer or vice-versa, a 64-bit offset in seconds from the start of the &quot;epoch&quot; is used for the conversion.  Qore's &quot;zero date&quot; (the start of Qore's &quot;epoch&quot;) is January 1, 1970 UTC.  When calculating second offsets from this date, a 64-bit integer is used.</para>

    <note>
      <para>The default local time zone for qore is set when the qore library is initialized; see <link linkend="Time_Zones">Time Zones</link> for more information.</para>
    </note>

  </sect3>

  <sect3 id="Relative_Dates">
    <title>Relative Date/Time Values (Durations)</title>

    <para>Relative dates (durations) are normally used for date addition and subtraction.  See <link linkend='Date_Time_Arithmetic'>Date/Time Arithmetic</link> for more information.</para>

  <para>Internally, durations are stored as a set of seven discrete signed integer values, one each for years, months, days, hours, minutes, seconds, and microseconds.</para>
    
      <para>There are 3 different formats understood by the Qore parser for describing literal durations in Qore.</para>

      <sect4 id="Single_Relative_Time_Format">
      <title>Single Relative Time Format</title>
        <para>A single relative date/time value (or a duration) may be specified as follows (note that this format is specific to Qore and not based on <ulink url="http://en.wikipedia.org/wiki/Iso8601">ISO-8601</ulink>):</para>
    
    <programlisting>&lt;integer&gt;&lt;date component specifier&gt;</programlisting>

    <table><title>Date Specifiers For Single Values For Relative Dates (non-<ulink url="http://en.wikipedia.org/wiki/Iso8601">ISO-8601</ulink> syntax)</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	
	<thead>
	  <row>
	    <entry><para>Component</para></entry>
	    <entry><para>Meaning</para></entry>
	    <entry><para>Example</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Y</para></entry>
	    <entry><para>Years</para></entry>
	    <entry><code>2Y</code></entry>
	    <entry><para>2 Years</para></entry>
	  </row>
	  <row>
	    <entry><para>M</para></entry>
	    <entry><para>Months</para></entry>
	    <entry><code>3M</code></entry>
	    <entry><para>3 Months</para></entry>
	  </row>
	  <row>
	    <entry><para>D</para></entry>
	    <entry><para>Days</para></entry>
	    <entry><code>10D</code></entry>
	    <entry><para>10 Days</para></entry>
	  </row>
	  <row>
	    <entry><para>h</para></entry>
	    <entry><para>Hours</para></entry>
	    <entry><code>15h</code></entry>
	    <entry><para>15 hours</para></entry>
	  </row>
	  <row>
	    <entry><para>m</para></entry>
	    <entry><para>Minutes</para></entry>
	    <entry><code>25m</code></entry>
	    <entry><para>25 minutes</para></entry>
	  </row>
	  <row>
	    <entry><para>s</para></entry>
	    <entry><para>Seconds</para></entry>
	    <entry><code>19s</code></entry>
	    <entry><para>19 seconds</para></entry>
	  </row>
	  <row>
	    <entry><para>ms</para></entry>
	    <entry><para>Milliseconds</para></entry>
	    <entry><code>250ms</code></entry>
	    <entry><para>250 milliseconds</para></entry>
	  </row>
	  <row>
	    <entry><para>us</para></entry>
	    <entry><para>Microseconds</para></entry>
	    <entry><code>21194us</code></entry>
	    <entry><para>21194 microseconds</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
</sect4>

      <sect4 id="Short_Relative_Time_Format">
      <title>Short Relative Time Format</title>

	<para>This and the next duration format for composite relative date/time values are both based on <ulink url="http://en.wikipedia.org/wiki/Iso8601">ISO-8601</ulink>.</para>

	<para>This first format has the following syntax:</para>

	<programlisting>P<replaceable>n</replaceable>Y<replaceable>n</replaceable>M<replaceable>n</replaceable>DT<replaceable>n</replaceable>H<replaceable>n</replaceable>M<replaceable>n</replaceable>S<replaceable>n</replaceable>u</programlisting>

	<para>Each element above is optional, but at least one element must be present.  Note that &quot;M&quot; means months when before the &quot;T&quot; and minutes when found after the &quot;T&quot;.  The other elements are years, days, hours, seconds, and, as an extension to ISO-8601, &quot;u&quot; for microseconds.  Additionally, the values may be negative.</para>

    	<para>Here are some examples (using qore's -X command-line option to evaluate and expression and print out the result):</para>
    
    <programlisting><replaceable>prompt% </replaceable>qore -X 'P1Y3MT4S'
&lt;time: 1 year 3 months 4 seconds&gt;
<replaceable>prompt% </replaceable>qore -X 'PT4M551u'
&lt;time: 4 minutes 551 microseconds&gt;
<replaceable>prompt% </replaceable>qore -X 'P3DT21H'
&lt;time: 3 days 21 hours&gt;
</programlisting>
</sect4>

      <sect4 id="Long_Relative_Time_Format">
      <title>Long Relative Time Format</title>

	<para>The second <ulink url="http://en.wikipedia.org/wiki/Iso8601">ISO-8601</ulink>-based format for specifing complex durations with multiple time units has the following syntax:</para>

	<programlisting>P<replaceable>YYYY-MM-DDTHH:mm:SS</replaceable></programlisting>

	<para>This format is more limited than the first format, in that all values must be positive, and furthermore, all values must be present (although they may be zero).</para>

    	<para>Here are some examples of the second format (equivalent to the first examples):</para>
    
    <programlisting><replaceable>prompt% </replaceable>qore -X 'P0001-03-00T00:00:04'
&lt;time: 1 year 3 months 4 seconds&gt;
<replaceable>prompt% </replaceable>qore -X 'P0000-00-00T00:04:00.000551'
&lt;time: 4 minutes 551 microseconds&gt;
<replaceable>prompt% </replaceable>qore -X 'P0000-00-03T21:00:00'
&lt;time: 3 days 21 hours&gt;</programlisting>
  </sect4>
  </sect3>

</sect2>
<sect2 id="Binary">
  <title>Binary</title>

  <para>The binary data type is used to hold binary arbitrary binary data. Internally it is represented by a pointer to a memory location for the data and a size indicator.</para>

  <para>Binary data can be concatenated with the <link linkend="Plus_Operator">+</link> and <link linkend="Plus_Equals_Operator">+=</link> operators.</para>

  <para>This data can be manipulated by being written and read from File, Socket, and Datasource objects, or converted and parsed to/from base64 encoded strings using the <link linkend="makeBase64String">makeBase64String()</link> and <link linkend="parseBase64String">parseBase64String()</link> functions, or compressed and decompressed using the <link linkend="compress">compress()</link>, <link linkend="gzip">gzip()</link>, <link linkend="bzip2">bzip2()</link>, etc. functions, and processed by most <link linkend="Cryptographic_Functions">cryptographic funtions</link>, among others.</para>

  <para>Binary objects can be read from a File object using the <link linkend="File_readBinary">File::readBinary()</link> method and can be written using the <link linkend="File_write">File::write()</link> method.  Please see the <link linkend='File_Class'>File Class</link> for more information.</para>
  
  <para>Binary objects can be read from a Socket object using the <link linkend="Socket_recvBinary">Socket::recvBinary()</link> method and can be written using the <link linkend="Socket_send">Socket::send()</link> method. Please see the <link linkend="Socket_Class">Socket Class</link> for more information.</para>

  <para>The <link linkend="Datasource_Class">Datasource</link> and <link linkend="DatasourcePool_Class">DatasourcePool</link> classes can also be used to read and write Binary objects as BLOBs.</para>

  <para>Note that this is not an exhaustive list; see the function and class library documentation for more examples.</para>

</sect2>

<sect2 id="NULL">
  <title>NULL</title>
  <para>This data type represents an SQL NULL value.  Note that <command>NULL</command> is not equivalent to <command>NOTHING</command>.</para>
</sect2>

<sect2 id="NOTHING">
  <title>NOTHING</title>
  <para>This special data type represents no value.</para>
  <note><para>The <link linkend="Exists_Operator"><command>exists</command></link> operator will return False when given <command>NOTHING</command> as an argument; for example:</para><programlisting><replaceable>prompt% </replaceable>qore -X 'exists NOTHING'
False</programlisting></note>
</sect2>

<sect2 id="Conversions">
  <title>Conversions</title>
  <para>Boolean, string, integer, date, and floating point data types can be freely converted from one type to the other, although data loss is possible depending on the conversion (particularly when converting to the boolan type as only two possible values are supported).</para>

  <para>The special types <command>NULL</command> and <command>NOTHING</command> are not equivalent and cannot be converted to or from any other type.</para>

  <para>When date types are converted from strings, any of the following formats can be used: <code>"YYYYMMDDHHmmSS[.us][Z|+-HH[:MM[:SS]]]", "YYYY-MM-DD HH:mm:SS.us", "YYYY-MM-DDTHH:mm:SS", "YYYY-MM-DDTHH:mm:SS[.us][Z|+-HH[:MM[:SS]]]"</code>, and most reasonable combinations thereof.  If the time zone component is missing, then the local time zone will be assumed (see <link linkend="Time_Zones">Time Zones</link>).</para>

  <para>When dates are converted to and from integer values, the a 64-bit second offset from January 1, 1970 in the local time zone is used for the conversion.  For example <code>int(2006-01-01)</code> gives <code>1136073600</code> (regardless of the local time zone the date is in).  To get the second offset of a date from 1970-01-01Z (i.e. the true epoch offset), call <link linkend="get_epoch_seconds">get_epoch_seconds()</link> instead.</para>

  <para>When an expression requires a certain data type and the source data type cannot be converted to the desired data type, the default value for the desired data type will be used.  The default values are given <link linkend="Basic_Data_Types">here</link>.</para>
</sect2>

</sect1>

<sect1 id="Container_Data_Types">
  <title>Container Data Types</title>

  <para>Qore supports three types of container types: lists, hashes (associative arrays), and objects (see <link linkend="Objects">Objects</link> and <link linkend="Classes">Classes</link> for more information).  These container types can be combined to make arbitrarily complex data structures.</para>

  <para>The data type of any element can be any basic type or another aggregate type.  The types do not have to be uniform in one container structure.</para>

  <sect2 id="Lists">
    <title>Lists</title>

    <para>Lists (or arrays) are simply ordered containers of values.  A list element can be any Qore type (even another list, hash, or object).</para>

    <para>Lists are specified by giving expressions separated by commas as follows:</para>

    <programlisting>$list = (<replaceable>expression</replaceable>, <replaceable>expression</replaceable> [, <replaceable>expression</replaceable> ...]);</programlisting>

    <para>Here is a concrete example:</para>

    <programlisting><command>my</command> list $list = (1, 2, "three", 4.0, 5, 6, 2001-01-15Z);</programlisting>

    <note>
      <para>Note that trailing commas can be left on the end of a list (or a hash, for that matter).  This makes it easier to comment-out the last element of a multi-line list without having to worry about removing the trailing comma.</para>
    </note>

    <para>List elements are dereferenced using square brackets: <link linkend='List_Dereference_Operator'>"[" and "]"</link>. The first element in a list has index zero.</para>

    <programlisting>$element3 = $list[2];</programlisting>

    <para>The following operators perform special processing on lists: <link linkend="Elements_Operator"><command>elements</command></link>, <link linkend="Shift_Operator"><command>shift</command></link>, <link linkend="Unshift_Operator"><command>unshift</command></link>, <link linkend="Push_Operator"><command>push</command></link>, <link linkend="Pop_Operator"><command>pop</command></link>, <link linkend="Splice_Operator"><command>splice</command></link>, <link linkend='List_Dereference_Operator'>[]</link>, <link linkend='Plus_Operator'>+</link>, <link linkend='Plus_Equals_Operator'>+=</link>, <link linkend="Map_Operator"><command>map</command></link>, <link linkend="Foldl_Operator"><command>foldl</command></link>, <link linkend="Foldr_Operator"><command>foldr</command></link>, and <link linkend="Select_Operator"><command>select</command></link>.</para>

  </sect2>
  <sect2 id="Hashes">
    <title>Hashes</title>

    <para>Hashes are containers that associate values to a string key.</para>

    <note><para>Note that Qore hashes preserve the insertion order in order to be able to guarantee the order of keys when hashes are serialized to XML strings (see <link linkend="XML_Integration">XML Integration</link>), therefore the <link linkend='Keys_Operator'><command>keys</command></link> operator will always return the hash keys in insertion/creation order.</para></note>
    
    <para>Hashes are specified using the following syntax:</para>
    
    <programlisting>$hash = ( "key1" : <replaceable>expression</replaceable>,
          "key2" : <replaceable>expression</replaceable>,
	  ... );</programlisting>

    <para>Here is a concrete example:</para>

    <programlisting><command>my</command> hash $hash = ( "apple" : 1 + 1,
                  "pear"  : "good" );</programlisting>

    <para>Hashes are dereferenced in one of two ways, either using curly brackets: "{" and "}", where any valid Qore expression can be used, or using the dot "." hash member dereferencing operator, where literal strings can be used.</para>

    <programlisting>$element3 = $hash{"pe" + "ar"};</programlisting>

    <para>Is equivalent to:</para>

    <programlisting>$element3 = $hash.pear;</programlisting>

    <para>and:</para>

    <programlisting>$element3 = $hash."pear";</programlisting>

    <para>and:</para>

    <programlisting>$element3 = $hash.("pe" + "ar");</programlisting>

    <para>Hash members can have the names of keywords, but in this case to dereference them, you cannot use the dot operator with a literal string, otherwise a parse error will be raised.  Use quotes around the member name when dereferencing hash members with the same name as a qore keyword as follows:</para>

    <programlisting>$element3 = $hash."keys";</programlisting>
    <programlisting>$element3 = $hash{"keys"};</programlisting>

    <para>A literal string after the dot "." hash member dereferencing operator must be a valid Qore identifier; therefore if you want to use a hash key that's not a valid identifier, enclose the string in quotes.</para>
    
    <para>If you want to use the result of an expression to dereference the hash, then the curly bracket syntax must be used.</para>
    
    <para>Note that hash keys can also be given by constants (as long as the constant resolves to a string) when using curly brackets.</para>
    
  </sect2>
  <sect2 id="Objects">
    <title>Objects</title>

    <para>Qore objects are instantiations of a <link linkend="Classes">class</link>.  They have members (like a hash - values associated to string keys), and methods.  The class definition specifies the methods that run on objects of that class, private members, and <link linkend="Static_Methods">static methods</link> associated with the class (however note that static methods do not run in the scope of an object).  Qore classes are declared with a special syntax.</para>

  <para>The recommend way to instantiate an object is to declare its type and give constructor arguments after the variable name in parentheses as follows:</para>

    <programlisting><command>my</command> <replaceable>class_name_or_path $var_name</replaceable>([<replaceable>argument list</replaceable>])</programlisting>

    <para>For example (for a constructor taking no arguments or having only default values for the aguments, the list is empty):</para>

    <programlisting><command>my</command> Mutex $m();</programlisting>

  <para>Objects can also be instantiated using the <link linkend='New_Object_Operator'><command>new</command></link> operator as follows.</para>

    <programlisting><command>new</command> <replaceable>class_identifier</replaceable>([<replaceable>argument list</replaceable>])</programlisting>

    <para>For example:</para>

    <programlisting><command>my</command> $m = <command>new</command> Mutex();</programlisting>

    <para>Objects have named data members that are referenced like hash elements, although this behavior can be modified for objects using the memberGate() method.  Object members are accessed by appending a dot '.' and the member name to the object reference as follows:</para>

    <programlisting><replaceable>object_reference.member_name</replaceable></programlisting>

    <para>For more information, see <link linkend="Object_Members">Object Members</link>.</para>

    <para>Object methods are called by appending a dot '.' and a method name to the object reference as follows:</para>

    <programlisting><replaceable>object_reference</replaceable>.<replaceable>method_name</replaceable>([<replaceable>argument_list</replaceable>])</programlisting>

    <para>Or, from within the class code itself to call another method from inside the same class hierarchy:</para>

    <programlisting>$.<replaceable>method_name</replaceable>([<replaceable>argument_list</replaceable>])</programlisting>

    <para>For more information, see <link linkend="Object_Method_Calls">Object Method Calls</link>.</para>

    <para>The object references above are normally variable references holding an object, but could be any expression that returns an object, such as a <link linkend="New_Object_Operator"><command>new</command></link> expression or even a subroutine call.</para>

    <note>
      <para>Objects are treated differently than other Qore data types; they are only explicitly copied (see <link linkend="Object_References">Object References</link> for more informaion).  Any object instantiated with the <link linkend='New_Object_Operator'><command>new</command></link> operator will remain unique until deleted or explicitly copied.  An explicit copy is made with the <link linkend="copy_methods">copy method</link>, and does not always guarantee an exact copy of the source object (it depends on the definition of the copy method for the class in question).</para>
    </note>

    <para>Objects exist until they go out of scope, are explicitly deleted, or their last thread exits.  For detailed information, see the section <link linkend='Classes'>Classes</link> on Qore classes.</para>

  </sect2>
</sect1>

<sect1 id="Data_Type_Declarations">
  <title>Data Type Declarations</title>
  
  <para>Starting in Qore 0.8.0, it is possible to restrict variables, class members, and function and method parameters to certain data types.  This allows programmers to write safer code, as many more errors can be caught at parse time that would otherwise be caught at run time.  Furthermore, providing type information to the parser allows Qore to implement performance optimizations by performing lookups and resolutions once at parse time rather than every time a variable or class member is accessed at run time.</para>

  <para>When types are declared in a parameter list, functions and methods can be <link linkend="Overloading">overloaded</link> as well.</para>

  <para>The types in the following table can be used:</para>

    <table id="Data_Type_Declaration_Names">
      <title>Data Type Declaration Names</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Accepts Qore Type(s)</para></entry>
	    <entry><para>Returns Qore Type(s)</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row id="int_type">
            <entry><para><code>int</code></para></entry>
            <entry><para><link linkend="Integer">Integer</link></para></entry>
            <entry><para><link linkend="Integer">Integer</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Integer">Integer</link> type.</para></entry>
          </row>
          <row id="float_type">
            <entry><para><code>float</code></para></entry>
            <entry><para><link linkend="Float">Float</link></para></entry>
            <entry><para><link linkend="Float">Float</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Float">Float</link> type.</para></entry>
          </row>
          <row id="bool_type">
            <entry><para><code>bool</code></para></entry>
            <entry><para><link linkend="Boolean">Boolean</link></para></entry>
            <entry><para><link linkend="Boolean">Boolean</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Boolean">Boolean</link> type.</para></entry>
          </row>
          <row id="string_type">
            <entry><para><code>string</code></para></entry>
            <entry><para><link linkend="String">String</link></para></entry>
            <entry><para><link linkend="String">String</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="String">String</link> type.</para></entry>
          </row>
          <row id="date_type">
            <entry><para><code>date</code></para></entry>
            <entry><para><link linkend="Date">Date</link></para></entry>
            <entry><para><link linkend="Date">Date</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Date">Date</link> type; values may be either absolute or relative date/time values.</para></entry>
          </row>
          <row id="binary_type">
            <entry><para><code>binary</code></para></entry>
            <entry><para><link linkend="Binary">Binary</link></para></entry>
            <entry><para><link linkend="Binary">Binary</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Binary">Binary</link> type.</para></entry>
          </row>
          <row id="hash_type">
            <entry><para><code>hash</code></para></entry>
            <entry><para><link linkend="Hashes">Hash</link></para></entry>
            <entry><para><link linkend="Hashes">Hash</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Hashes">Hash</link> type.</para></entry>
          </row>
          <row id="list_type">
            <entry><para><code>list</code></para></entry>
            <entry><para><link linkend="Lists">List</link></para></entry>
            <entry><para><link linkend="Lists">List</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Lists">List</link> type.</para></entry>
          </row>
          <row id="object_type">
            <entry><para><code>object</code></para></entry>
            <entry><para><link linkend="Objects">Object</link></para></entry>
            <entry><para><link linkend="Objects">Object</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="Objects">Object</link> type.</para></entry>
          </row>
          <row id="class_type">
            <entry><para><replaceable>&lt;classname&gt;</replaceable></para></entry>
            <entry><para><link linkend="Objects">Object</link></para></entry>
            <entry><para><link linkend="Objects">Object</link></para></entry>
            <entry><para>Restricts values to objects of the specific class given; either the class name can be given (ex: <code>Mutex</code> or a qualified path to the class: <code>Qore::Mutex</code>).</para></entry>
          </row>
          <row id="null_type">
            <entry><para><code>null</code></para></entry>
            <entry><para><link linkend="NULL">NULL</link></para></entry>
            <entry><para><link linkend="NULL">NULL</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="NULL">NULL</link> type; this type has few (if any) practical applications and has been included for completeness' sake.</para></entry>
          </row>
          <row id="nothing_type">
            <entry><para><code>nothing</code></para></entry>
            <entry><para><link linkend="NOTHING">NOTHING</link></para></entry>
            <entry><para><link linkend="NOTHING">NOTHING</link></para></entry>
            <entry><para>Restricts values to Qore's <link linkend="NOTHING">NOTHING</link> type; this type is mostly useful for declaring that a function or method returns no value.</para></entry>
          </row>
          <row id="softint_type">
            <entry><para><code>softint</code></para></entry>
            <entry><para><link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link></para></entry>
            <entry><para><link linkend="Integer">Integer</link></para></entry>
            <entry><para>Accepts <link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link> and converts non-integer values to an integer and returns the integer.</para></entry>
          </row>
          <row id="softfloat_type">
            <entry><para><code>softfloat</code></para></entry>
            <entry><para><link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link></para></entry>
            <entry><para><link linkend="Float">Float</link></para></entry>
            <entry><para>Accepts <link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link> and converts non-float values to a float and returns the new value.</para></entry>
          </row>
          <row id="softbool_type">
            <entry><para><code>softbool</code></para></entry>
            <entry><para><link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link></para></entry>
            <entry><para><link linkend="Boolean">Boolean</link></para></entry>
            <entry><para>Accepts <link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link> and converts non-boolean values to a boolean and returns the new value.</para></entry>
          </row>
          <row id="softstring_type">
            <entry><para><code>softstring</code></para></entry>
            <entry><para><link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link></para></entry>
            <entry><para><link linkend="String">String</link></para></entry>
            <entry><para>Accepts <link linkend="Integer">Integer</link>, <link linkend="Float">Float</link>, <link linkend="Boolean">Boolean</link>, <link linkend="String">String</link> and converts non-string values to a string and returns the new value.</para></entry>
          </row>
          <row id="any_type">
            <entry><para><code>any</code></para></entry>
            <entry><para>any</para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Provides no restrictions on the type of value it receives and returns the same value.</para></entry>
          </row>
          <row id="data_type">
            <entry><para><code>data</code></para></entry>
            <entry><para><link linkend="String">String</link> or <link linkend="Binary">Binary</link></para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Restricts input to <link linkend="String">String</link> and <link linkend="Binary">Binary</link> and returns the same type.</para></entry>
          </row>
          <row id="code_type">
            <entry><para><code>code</code></para></entry>
            <entry><para><link linkend="closures">Closure</link>, <link linkend="call_references">Call Reference</link></para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Restricts values to <link linkend="closures">closures</link> and <link linkend="call_references">call references</link>.</para></entry>
          </row>
          <row id="reference_type">
            <entry><para><code>reference</code></para></entry>
            <entry><para>reference to an lvalue</para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Restricts values to references to lvalues; currently only usable in function or method parameters.</para></entry>
          </row>
          <row id="closure_type">
            <entry><para><code>closure</code></para></entry>
            <entry><para><link linkend="closures">Closure</link>, <link linkend="call_references">Call Reference</link></para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Does not restrict value to just <link linkend="closures">closures</link>, but rather also allows <link linkend="call_references">call references</link>.  Synonym for <code><link linkend="code_type">code</link></code>.</para></entry>
          </row>
          <row id="callref_type">
            <entry><para><code>callref</code></para></entry>
            <entry><para><link linkend="closures">Closure</link>, <link linkend="call_references">Call Reference</link></para></entry>
            <entry><para>same as received</para></entry>
            <entry><para>Does not restrict value to just <link linkend="call_references">call references</link>, but rather also allows <link linkend="closures">closures</link>.  Synonym for <code><link linkend="code_type">code</link></code>.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  <para>Complex types (hash of lists, reference to string, etc) are currently not possible to declare.</para>

  <sect2 id="Overloading">
    <title>Overloading</title>

    <para>Functions and methods can be overloaded if parameter types are declared as in the following example:</para>

  <programlisting><command>sub</command> example(int $i) <command>returns</command> int {
    printf("i=%d\n", $i);
    <command>return</command> $i + 1;
}

<command>sub</command> example(string $str) <command>returns</command> string {
    printf("str=%s\n", $str);
    <command>return</command> $str + "foo";
}</programlisting>

  <para>In this case, the first version (<code>example(int)</code>) will be executed if called with an integer argument, and the second (<code>example(string)</code>) if called with a string argument.</para>

  <para>Class methods may also be overloaded, but note that <code>destructor</code>, <code>copy</code>, <code>methodGate</code>, <code>memberGate</code>, and <code>memberNotification</code> methods may not be overloaded (see <link linkend='Classes'>Classes</link> for more information).</para>

  </sect2>

</sect1>

<sect1 id="Time_Zones">
  <title>Time Zone Handling in Qore</title>

  <para>Qore assumes a default time zone for all programs when it starts up.  The rules for determining the default time zone are similar to those for the C library in most UNIX or UNIX-like operating systems.</para>

  <para>If the <command>TZ</command> environment variable is defined, then the contents of that variable are used to find a <ulink url="http://en.wikipedia.org/wiki/Tz_database">zoneinfo</ulink> file that contains the time zone definition.  If this file cannot be found, then the default time zone will default to <ulink url="http://en.wikipedia.org/wiki/UTC">UTC</ulink>.</para>

  <para>If the <command>TZ</command> environment variable is not defined or is empty, then the Qore library tries to find the default zoneinfo definition file (normally /etc/localtime).  If found, this file is read in and provides the information about the local time zone.  If not found, the default time zone will default to <ulink url="http://en.wikipedia.org/wiki/UTC">UTC</ulink>.</para>

  <para>When a zoneinfo file is found, information about local time zone names and daylight savings time is available for times tagged with that time zone.</para>

  <para>Here are some examples using Qore's '-X' option for evaluating an expression and displaying the result immediately:</para>

  <programlisting><replaceable>prompt% </replaceable>TZ=America/Chicago qore -X 'now_us()'
2010-05-11 06:14:28.845857 Tue -05:00 (CDT)
<replaceable>prompt% </replaceable>TZ=Europe/Rome qore -X 'now_us()'
2010-05-11 13:14:35.070568 Tue +02:00 (CEST)
<replaceable>prompt% </replaceable>TZ=Australia/Sydney qore -X 'now_us()'
2010-05-11 21:14:45.422222 Tue +10:00 (EST)
<replaceable>prompt% </replaceable>TZ=Asia/Tokyo qore -X 'now_us()'
2010-05-11 20:14:59.609249 Tue +09:00 (CJT)</programlisting>

  <para>Note that posix-style time zone rules are not understood if assigned to the TZ environment variable, only file names to a zoneinfo file can be processed at the moment.  Furthermore if the zoneinfo file contains leap second information, it is currently ignored.</para>

</sect1>

<sect1 id="Qore_Strings_and_Character_Encoding">
  <title>Qore Strings and Character Encoding</title>

  <sect2 id="Character_Encoding_Overview">
    <title>Overview</title>

    <para>The Qore language is character-encoding aware.  All strings are assumed to have the <link linkend="Default_Character_Encoding">default character encoding</link>, unless the program explicitly specified another encoding for certain objects and operations.  Every Qore string has a character encoding ID attached to it, so, when another encoding is required, the Qore language will attempt to do an encoding translation.</para>

    <para>Qore uses the operating system's iconv library functions to perform any encoding conversions.</para>

    <para>Qore supports character encodings that are backwards compatible with 7-bit ASCII.  This includes all <code>ISO-8859-*</code> character encodings, <code>UTF-8</code>, <code>KOIR-8</code>, <code>KOIU-8</code>, and <code>KOI7</code>, among others (see the table below: <link linkend="Qore_Character_Encodings">Character Encodings Known to Qore</link>).</para>

    <para>However, mutibyte character encodings are currently only properly supported for <code>UTF-8</code>.  For <code>UTF-8</code> strings, the <link linkend="length">length()</link>, <link linkend="index">index()</link>, <link linkend="rindex">rindex()</link>, <link linkend="substr">substr()</link>, <link linkend="reverse">reverse()</link>, the <link linkend="Splice_Operator">splice operator</link>, print formatting (regarding field lengths) functions and methods taking format strings, and regular expression operators and functions, all work with character offsets, which may be different than byte offsets.  For all character encodings other than <code>UTF-8</code>, a 1 byte=1 character relationship is assumed.</para>

    <para>Qore will accept any encoding name given to it, even if it is not a known encoding name or alias.  In this case, Qore will tag the strings with this encoding, and pass this user-defined encoding name to the iconv library when encodings must be converted.  This allows programmers to use encodings known by the system's iconv library, but unknown to qore.  In this case, Qore will assume that the strings are backwards compatible with <code>ASCII</code>, meanin that that one character is represented by one byte and that the strings are null-terminated.</para>

    <para>Note that when Qore matches an encoding name to a code or alias in the following table, the comparison is not case-sensitive.</para>

    <table id="Qore_Character_Encodings">
      <title>Character Encodings Known to Qore</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Code</para></entry>
	    <entry><para>Aliases</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-1"><code>ISO-8859-1</code></ulink></para></entry>
            <entry><para><code>ISO88591</code>, <code>ISO8859-1</code>, <code>ISO-88591</code>, <code>ISO8859P1</code>, <code>ISO81</code>, <code>LATIN1</code>, <code>LATIN-1</code></para></entry>
            <entry><para>latin-1, Western European character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-2"><code>ISO-8859-2</code></ulink></para></entry>
            <entry><para><code>ISO88592</code>, <code>ISO8859-2</code>, <code>ISO-88592</code>, <code>ISO8859P2</code>, <code>ISO82</code>, <code>LATIN2</code>, <code>LATIN-2</code></para></entry>
            <entry><para>latin-2, Central European character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-3"><code>ISO-8859-3</code></ulink></para></entry>
            <entry><para><code>ISO88593</code>, <code>ISO8859-3</code>, <code>ISO-88593</code>, <code>ISO8859P3</code>, <code>ISO83</code>, <code>LATIN3</code>, <code>LATIN-3</code></para></entry>
            <entry><para>latin-3, Southern European character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-4"><code>ISO-8859-4</code></ulink></para></entry>
            <entry><para><code>ISO88594</code>, <code>ISO8859-4</code>, <code>ISO-88594</code>, <code>ISO8859P4</code>, <code>ISO84</code>, <code>LATIN4</code>, <code>LATIN-4</code></para></entry>
            <entry><para>latin-4, Northern European character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-5"><code>ISO-8859-5</code></ulink></para></entry>
            <entry><para><code>ISO88595</code>, <code>ISO8859-5</code>, <code>ISO-88595</code>, <code>ISO8859P5</code>, <code>ISO85</code></para></entry>
            <entry><para>Cyrillic character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-6"><code>ISO-8859-6</code></ulink></para></entry>
            <entry><para><code>ISO88596</code>, <code>ISO8859-6</code>, <code>ISO-88596</code>, <code>ISO8859P6</code>, <code>ISO86</code></para></entry>
            <entry><para>Arabic character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-7"><code>ISO-8859-7</code></ulink></para></entry>
            <entry><para><code>ISO88597</code>, <code>ISO8859-7</code>, <code>ISO-88597</code>, <code>ISO8859P7</code>, <code>ISO87</code></para></entry>
            <entry><para>Greek character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-8"><code>ISO-8859-8</code></ulink></para></entry>
            <entry><para><code>ISO88598</code>, <code>ISO8859-8</code>, <code>ISO-88598</code>, <code>ISO8859P8</code>, <code>ISO88</code></para></entry>
            <entry><para>Hebrew character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-9"><code>ISO-8859-9</code></ulink></para></entry>
            <entry><para><code>ISO88599</code>, <code>ISO8859-9</code>, <code>ISO-88599</code>, <code>ISO8859P9</code>, <code>ISO89</code>, <code>LATIN5</code>, <code>LATIN-5</code></para></entry>
            <entry><para>latin-5, Turkish character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-10"><code>ISO-8859-10</code></ulink></para></entry>
            <entry><para><code>ISO885910</code>, <code>ISO8859-10</code>, <code>ISO-885910</code>, <code>ISO8859P10</code>, <code>ISO810</code>, <code>LATIN6</code>, <code>LATIN-6</code></para></entry>
            <entry><para>latin-6, Nordic character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-11"><code>ISO-8859-11</code></ulink></para></entry>
            <entry><para><code>ISO885911</code>, <code>ISO8859-11</code>, <code>ISO-885911</code>, <code>ISO8859P11</code>, <code>ISO811</code></para></entry>
            <entry><para>Thai character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-13"><code>ISO-8859-13</code></ulink></para></entry>
            <entry><para><code>ISO885913</code>, <code>ISO8859-13</code>, <code>ISO-885913</code>, <code>ISO8859P13</code>, <code>ISO813</code>, <code>LATIN7</code>, <code>LATIN-7</code></para></entry>
            <entry><para>latin-7, Baltic rim character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-14"><code>ISO-8859-14</code></ulink></para></entry>
            <entry><para><code>ISO885914</code>, <code>ISO8859-14</code>, <code>ISO-885914</code>, <code>ISO8859P14</code>, <code>ISO814</code>, <code>LATIN8</code>, <code>LATIN-8</code></para></entry>
            <entry><para>latin-8, Celtic character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-15"><code>ISO-8859-15</code></ulink></para></entry>
            <entry><para><code>ISO885915</code>, <code>ISO8859-15</code>, <code>ISO-885915</code>, <code>ISO8859P15</code>, <code>ISO815</code>, <code>LATIN9</code>, <code>LATIN-9</code></para></entry>
            <entry><para>latin-9, Western European with euro symbol</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/ISO/IEC_8859-16"><code>ISO-8859-16</code></ulink></para></entry>
            <entry><para><code>ISO885916</code>, <code>ISO8859-16</code>, <code>ISO-885916</code>, <code>ISO8859P16</code>, <code>ISO816</code>, <code>LATIN10</code>, <code>LATIN-10</code></para></entry>
            <entry><para>latin-10, Southeast European character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/KOI7"><code>KOI7</code></ulink></para></entry>
            <entry><para>n/a</para></entry>
            <entry><para>Russian: Kod Obmena Informatsiey, 7 bit characters</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/KOI8R"><code>KOI8-R</code></ulink></para></entry>
            <entry><para><code>KOI8R</code></para></entry>
            <entry><para>Russian: Kod Obmena Informatsiey, 8 bit</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/KOI8-U"><code>KOI8-U</code></ulink></para></entry>
            <entry><para><code>KOI8U</code></para></entry>
            <entry><para>Ukrainian: Kod Obmena Informatsiey, 8 bit</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/US-ASCII"><code>US-ASCII</code></ulink></para></entry>
            <entry><para><code>ASCII</code>, <code>USASCII</code></para></entry>
            <entry><para>7-bit ASCII character set</para></entry>
          </row>
          <row>
            <entry><para><ulink url="http://en.wikipedia.org/wiki/UTF8"><code>UTF-8</code></ulink></para></entry>
            <entry><para><code>UTF8</code></para></entry>
            <entry><para>variable-width universal character set</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>
  </sect2>

  <sect2 id="Default_Character_Encoding">
    <title>Default Character Encoding</title>

    <para>The default character encoding for Qore is determined by environment variables.</para>
    
    <para>First, the <code>QORE_CHARSET</code> environment variable is checked. If it is set, then this character encoding will be the default character encoding for the process.  If not, then the <code>LANG</code> environment variable is checked. If a character encoding is specified in the <code>LANG</code> environment variable, then it will be used as the default character encoding.  Otherwise, if no character encoding can be derived from the environment, <code>UTF-8</code> is assumed.</para>
    
    <para>Character encodings are automatically converted by the Qore language when necessary.  Encoding conversion errors will cause a Qore exception to be thrown.  The character encoding conversions supported by Qore depend on the Operating System's iconv library function.</para>
  
  </sect2>

  <sect2 id="Character_Encoding_Usage">
    <title>Character Encoding Usage Examples</title>
  
    <para>The following is a non-exhaustive list of examples in Qore where character encoding processing is performed.</para>
  
    <para>Character encodings can be explicitly performed with the <link linkend="convert_encoding">convert_encoding()</link> function, and the encoding attached to a string can be checked with the <link linkend="get_encoding">get_encoding()</link> function.  If you have a string with incorrect encoding and want to change the encoding tag of the string (without changing the actual bytes of the string), use the <link linkend="force_encoding">force_encoding()</link> function.</para>
    
    <para>The <link linkend='Datasource_Class'>Datasource</link> and <link linkend="DatasourcePool_Class">DatasourcePool</link> classes will translate character encodings to the encoding required by the database if necessary as well (this is actually the responsibility of the DBI driver for the database in question).</para>
  
    <para>The <link linkend='File_Class'>File</link> and <link linkend='Socket_Class'>Socket</link> classes translate character encodings to the encoding specified for the object if necessary, as well as tagging strings received or read with the object's encoding.</para>
  
    <para>The <link linkend='HTTPClient_Class'>HTTPClient</link>, <link linkend='XmlRpcClient_Class'>XmlRpcClient</link>, and <link linkend='JsonRpcClient_Class'>JsonRpcClient</link> classes will translate character encodings to the encoding specified for the object if necessary, as well as tag strings received with the object's encoding.  Additionally, if an HTTP server response specifies a specific encoding to use, the encoding will be automatically set to this encoding as well.</para>
  
    <para>Additionally you can serialize a Qore hash to an XML string and specify the character encoding to use. If the target encoding is different than the source encoding conversions are automatically performed. See <link linkend="XML_Integration">XML Integration</link> for more information about XML handling.</para>  
  </sect2>

</sect1>

  <sect1 id="Expressions">
    <title>Expressions</title>

    <para>An expression can be any of the following (note that expressions are also recursively defined):</para>
    <table>
      <title>Expressions</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	    <entry>
	    <para>Examples</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>An immediate value</para></entry>
	    <entry><para>Qore values that can be expressed directly (see <link linkend="Basic_Data_Types">Basic Data Types</link> for more information)</para></entry>
	    <entry>
	      <programlisting>True
152
1.2
"a string"
2005-10-27
<command>NULL</command>
<command>NOTHING</command>
("key" : $val)
1, 2.0, "three"</programlisting>
	    </entry>
	  </row>
	  <row>
	    <entry><para>A variable reference</para></entry>
	    <entry><para>Qore variables (see <link linkend="Variables">Variables</link> for more information)</para></entry>
	    <entry><programlisting>$var</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A variable declaration</para></entry>
	    <entry><para>Qore variable declarations (see <link linkend="Variables">Variables</link> for more information)</para></entry>
	    <entry><programlisting><command>my</command> int $var</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>An in-class object member reference</para></entry>
	    <entry><para>References to members of an object from within the class (see <link linkend="Object_Members">Object Members</link> for more information)</para></entry>
	    <entry><programlisting>$.member</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>An lvalue assignment</para></entry>
	    <entry><para>Assigns a value to a lvalue (see <link linkend="Assignment_Operator">Assignment Operator</link> for more information)</para></entry>
	    <entry>
	      <para><programlisting>$var = 1
($a, $b, $c, $date) = (1, "two", 3.3, 2005-10-28)</programlisting></para>
	    </entry>
	  </row>
	  <row>
	    <entry><para>A subroutine/function call</para></entry>
	    <entry><para>Qore subroutine calls (see <link linkend="Subroutines">Subroutines</link> for more information)</para></entry>
	    <entry><programlisting>calculate($var1, $var2, "string", 4)</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A method call</para></entry>
	    <entry><para>Qore object method calls (see <link linkend="Object_Method_Calls">Object_Method_Calls</link> for more information)</para></entry>
	    <entry><programlisting>$object.method("argument")</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>An in-class method call</para></entry>
	    <entry><para>Qore in-class object method calls (see <link linkend="Object_Method_Calls">Object_Method_Calls</link> for more information)</para></entry>
	    <entry><programlisting>$.method("argument")</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A <link linkend="Static_Method_Calls">static method call</link></para></entry>
	    <entry><para>Qore static method calls (see <link linkend="Static_Methods">Static Methods</link> for more information)</para></entry>
	    <entry><programlisting>ClassName::static_method("argument")</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>Expressions with operators</para></entry>
	    <entry><para>Use of Qore operators (see <link linkend='Operators'>Operators</link> for more information)</para></entry>
	    <entry>
	      <para><programlisting>1 + 2
$a || $b
<command>background</command> my_function()</programlisting></para>
	    </entry>
	  </row>
	  <row>
	    <entry><para>An expression in parentheses</para></entry>
	    <entry><para>Use of parentheses for clarity or to specify evaluation precedence.</para></entry>
	    <entry>
	      <para><programlisting>(1 + 2)
(2 * (3 + 1))</programlisting></para>
	    </entry>
	  </row>
	  <row>
	    <entry><para>A list</para></entry>
	    <entry><para>a list of values (see <link linkend="Lists">Lists</link> for more information)</para></entry>
	    <entry><programlisting>1, 2, 3, "four", 5.0</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A hash</para></entry>
	    <entry><para>a hash (associative/keyed array) value container (see <link linkend="Hashes">Hashes</link> for more information)</para></entry>
	    <entry><programlisting>( "key1" : 1, "key2" : "two" )</programlisting>
	    </entry>
	  </row>
	  <row>
	    <entry><para>A <link linkend="find_Expressions"><command>find</command> expression</link></para></entry>
	    <entry><para>Finds a value or values in a hash of lists, such as returned by the <link linkend="SQL::Datasource::select">Datasource::select() method</link> (see <link linkend="find_Expressions">find expressions</link> for more information)</para></entry>
	    <entry>
	      <programlisting><command>find</command> %name, %id <command>in</command> $data <command>where</command> (%name =~ /Smith/);</programlisting>
	    </entry>
	  </row>
	  <row>
	    <entry><para>A context identifier (<code>%column</code>)</para></entry>
	    <entry><para>A contextual reference to the value of a key of a complex data structure within the current row being iterated by a <link linkend="context_Statements"><command>context</command></link>, <link linkend="summarize_Statements"><command>summarize</command></link>, <link linkend="subcontext_Statements"><command>subcontext</command></link> statement, or a  <link linkend="find_Expressions"><command>find</command> expression</link>.</para></entry>
	    <entry><programlisting>%name</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A context row identifier (<code>%%</code>)</para></entry>
	    <entry><para>A contextual reference to the current row of complex data structure being iterated by a <link linkend="context_Statements"><command>context</command></link>, <link linkend="summarize_Statements"><command>summarize</command></link>, <link linkend="subcontext_Statements"><command>subcontext</command></link> statement, or a <link linkend="find_Expressions"><command>find</command> expression</link>.  This expression will return a hash of the current row.</para></entry>
	    <entry><programlisting>%%</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A <link linkend="call_references">call reference</link></para></entry>
	    <entry><para>A reference to a function or object method call (similar to a function pointer in C or C++).  Function references are resolved in the second phase of parsing (commit phase), and object method references are resolved at run-time.</para></entry>
	    <entry><programlisting>\function_call()
\$object_expression.method_name()</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A <link linkend="closures">closure</link></para></entry>
	    <entry><para>An anonymous function used a value; technically in computer science a closure must have at least one bound variable, but in qore a closure is any function used as a value, whether or not it encloses local variables from the scope in which it was created or not.</para></entry>
	    <entry><programlisting><command>sub</command> ($a) { return $a + $b; }</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>A call reference call</para></entry>
	    <entry><para>Calls the code referenced by the call reference expression or closure using any arguments supplied and returns the result.</para></entry>
	    <entry><programlisting>$result = $call_reference($arg1, $arg2)</programlisting></entry>
	  </row>
	  <row>
	    <entry><para>An <link linkend="Implicit_Arguments">implicit argument reference</link></para></entry>
	    <entry><para>References an implicit argument.</para></entry>
	    <entry><programlisting>$1, $2
$$</programlisting></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Static_Method_Calls">
      <title>Static Method Calls</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls to <link linkend="Static_Methods">static class methods</link> are made by giving the class name followed by two colons and then the method name.  The method name must be implemented and accessible (i.e. not <link linkend="Private_and_Synchronized_Methods"><command>private</command></link> and accessed outside the class) somewhere within the class hierarchy and must be <command>static</command> or a parse exception will occur.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <para>
	      <programlisting><replaceable>class_name</replaceable>::<replaceable>method_name</replaceable>( <replaceable>[argument_expressions...]</replaceable> )</programlisting>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para><replaceable>class_name</replaceable></para>
	    <para>The name of the class implementing the static method.</para>

	    <para><replaceable>method_name</replaceable></para>
	    <para>The name of the static method to call.</para>
	    
	    <para><replaceable>[argument_expressions...]</replaceable></para>
	    <para>Expressions passing arguments to the static method.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>QDir::setCurrent("/tmp");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
    
    <sect2 id="find_Expressions">
      <title>Find Expressions</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>The <command>find</command> expression can be used to quickly find data in a hash of lists (such as a query result set returned by the <link linkend="SQL::Datasource::select">Datasource::select()</link> method).  The <command>find</command> expression will loop through a data structure, and for each element in the structure where the <replaceable>where expression</replaceable> is True, it will evaluate and return a result expression.  If the <replaceable>where expression</replaceable> only is true for one element in the list, it will return the result of evaluating the <replaceable>result expression</replaceable> directly, otherwise if the <replaceable>where expression</replaceable> is true more than once, then a list of the results of evaluting the <replaceable>result expression</replaceable> for each element is returned.  In each expression in the <command>find</command> expression, column names can be referred to by preceding the name with a '%" character (as with <link linkend="context_Statements">context</link> statements).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <para>
	      <programlisting><command>find</command> <replaceable>result_expression</replaceable> <command>in</command> <replaceable>data_expression</replaceable> <command>where</command> ( <replaceable>where_expression</replaceable> )</programlisting>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para><replaceable>result_expression</replaceable></para>
	    <para>This expression will be evaluated and returned when the <replaceable>where_expression</replaceable> evaluates to True.</para>

	    <para><replaceable>data_expression</replaceable></para>
	    <para>This expression must evaluate to a hash of lists, so that the internal context can be set up for the <command>find</command> loop.</para>
	    
	    <para><replaceable>where_expression</replaceable></para>
	    <para>This expression will be evaluated for each row in the <replaceable>data_expression</replaceable>.  Each time it evaluates to True, the <replaceable>result_expression</replaceable> will be evaulated and used for the return value for the <command>find</command> expression.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rlist = <command>find</command> %name, %id <command>in</command> $data <command>where</command> (%name =~ /Smith/);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="call_references">
      <title>Call References</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>References to functions or object methods are called call references.  A call reference can be used like a function pointer; a call reference is a Qore data type that can be returned by functions or methods or assigned to variables.</para>
	    <para>Note that it is currently not legal to assign a call reference to a constant.  This restriction may be lifted in a future version of Qore.</para>
	    <para>Function Call References</para>
	    <para>Call references to functions are resolved at parse time; if the function does not exist a parse exception will be thrown.</para>
	    <para>Object Method Call References</para>
	    <para>Call references to object methods are executed and resolved at run time; if the object expression does not evaluate to an object at run-time, an <code>OBJECT-METHOD-REFERENCE-ERROR</code> exception will be thrown.  If the method does not exist, a <code>METHOD-DOES-NOT-EXIST</code> run-time exception will be thrown.</para>
	    <para>When called, a call reference to an object method will be executed in the context of the object originally referenced.</para>
	    <para>Object method call references do not prolong the lifetime of an object; if the object is deleted (for example, by going out of scope), then if called the call reference will cause a <code>OBJECT-ALREADY-DELETED</code> exception to be thrown.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <para>
	      <programlisting>\<replaceable>function_name</replaceable>();
\<replaceable>object_expression.method_name</replaceable>();</programlisting>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>\<replaceable>function_name</replaceable>()</para>
	    <para>This form gives a function call references.  The function name can be any valid user or builtin function name.  Note the backslash at the beginning and the empty pair of parentheses at the end; these are required when specifying a call reference.</para>

	    <para>\<replaceable>object_expression.method_name</replaceable>()</para>
	    <para>This form gives an object method call reference.  The object expression can be any valid Qore expression that evaluates to an object.  The method_name must be an unquoted string (see examples below) and must represent a valid method name of the object's class.</para>
	    
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$call_ref = \func_name();
$call_ref = \$object.method_name();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="closures">
      <title>Closures</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>A closure is an anonymous function used as a value.  Closures can be returned from functions or methods, assigned to variables, or passed as arguments to other functions.</para>
	    <para>Note that it is not legal to assign a closure to a constant.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <para>
	      <programlisting><command>sub</command> (<replaceable></replaceable>) { <replaceable>code...</replaceable> }</programlisting>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>Closures encapsulate the state and value of local variables of the outer code block referenced from within the closure when the closure is created.  Whenever local variables are bound within a closure, these variables are subject to concurrent thread access protection (locking) just as with global variables, in order to allow closures to be used in any context without restriction and to preseve thread-safety regarding bound local variables.</para>
	    <para>Note that returning a closure from within an object method encapsulates the state of the object as well (it's legal to refer to $self and $.&lt;variable&gt; from within closures created from objects) and additionally prolongs the scope of the object for the lifetime of the closure.</para>	    
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># if $b is a local variable in the function where the closure is created
# then $b will be bound to the closure when the closure is created
<command>my</command> $closure = <command>sub</command> ($a) { <command>return</command> $a + $b; };</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Implicit_Arguments">
      <title>Implicit Argument References</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Implicit arguments are arguments not captured by parameter variables as well as automatic arguments in list-processing operator expressions.  A special syntax to reference these arguments is documented here.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <para>
	      <programlisting>$<replaceable>&lt;integer&gt;</replaceable> # for a single implicit argument
$$         # for the entire implicit argument list</programlisting>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>Implicit arguments can be directly referenced using the dollar sign ($) and either a number from 1 onwards (giving the position in the argument list, where 1 is the first element) or a double dollar sign ($$) giving the entire implicit argument list.</para>

	    <para>For unassigned arguments to functions or methods, this syntax supplements the automatic <code><link linkend="argv">$argv</link></code> variable holding all function arguments not assigned to parameter variables.</para>

	    <para>This syntax is particularly useful when writing expressions for the <link linkend="Map_Operator"><command>map</command></link>, <link linkend="Foldl_Operator"><command>map</command></link>, <link linkend="Foldr_Operator"><command>foldr</command></link>, and <link linkend="Select_Operator"><command>select</command></link> operators, where implicit argument references are the only way the operator expressions can reference the current list values that are populated as implicit arguments as the operators traverse the list.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># extract a list of even numbers from a list
<command>my</command> $l = <command>select</command> $list, !($1 % 2);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

  </sect1>

&operators;

  <sect1 id="Regular_Expressions">
    <title>Regular Expressions in Qore</title>

    <para>Regular expression functionality in Qore is provided by <ulink url="http://www.pcre.org">PCRE: Perl-Compatible Regular Expression library</ulink>.</para>

    <para>Using this library, Qore implements regular expression pattern matching using the same syntax and semantics as Perl 5.</para>

    <para>The following is a list of operators based on regular expressions (or similar to regular expressions in the case of the <link linkend='Transliteration_Operator'>transliteration operator</link>).</para>

    <table id="Regular_Expression_Operators">
      <title>Regular Expression Operators</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Operator</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend='Regular_Expression_Match_Operator'>regular expression match operator</link></para></entry>
	    <entry><para>Returns True if the regular expression matches a string.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='Regular_Expression_No_Match_Operator'>regular expression no match operator</link></para></entry>
	    <entry><para>Returns True if the regular expression does not match a string.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='Regular_Expression_Substitution_Operator'>regular expression substitution operator</link></para></entry>
	    <entry><para>Substitutes text in a string based on matching a regular expression.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='Regular_Expression_Pattern_Extraction_Operator'>regular expression pattern extraction operator</link></para></entry>
	    <entry><para>Returns a list of substrings in a string based on matching patterns defined by a regular expression.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='Transliteration_Operator'>transliteration operator</link></para></entry>
	    <entry><para>Not a regular expression operator; transliterates one or more characters to other characters in a string.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>See the table below for valid regular expression options.</para>

    <table id="Regular_Expression_Options">
      <title>Regular Expression Options</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Option</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>i</para></entry>
	    <entry><para>Ignores case when matching</para></entry>
	  </row>
	  <row>
	    <entry><para>m</para></entry>
	    <entry><para>makes start-of-line (^) or end-of-line ($) match after or before any newline in the subject string</para></entry>
	  </row>
	  <row>
	    <entry><para>s</para></entry>
	    <entry><para>makes a dot (.) match a newline character</para></entry>
	  </row>
	  <row>
	    <entry><para>x</para></entry>
	    <entry><para>ignores whitespace characters and enables comments prefixed by #</para></entry>
	  </row>
	  <row>
	    <entry><para>g</para></entry>
	    <entry><para>makes global substitutions (only applicable with the <link linkend='Regular_Expression_Substitution_Operator'>substitution operator</link>)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>The following is a list of functions providing regular expression functionality where the pattern may be given at run-time:</para>

    <table id="Regular_Expression_Functions">
      <title>Regular Expression Functions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Function</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend='regex'>regex()</link></para></entry>
	    <entry><para>Returns True if the regular expression matches a string.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='regex_subst'>regex_subst()</link></para></entry>
	    <entry><para>Substitutes a pattern in a string based on regular expressions and returns the new string.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend='regex_extract'>regex_extract()</link></para></entry>
	    <entry><para>Returns a list of substrings in a string based on matching patterns defined by a regular expression.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Date_Time_Arithmetic">
    <title>Date/Time Arithmetic</title>

    <para>Date/time arithmetic is relatively straightforward and should normally produce the expected results.  However with leap years, months with different lengths, and daylights savings time the situation can be confusing; this section will clarify how Qore does date arithmetic considering these special cases.</para>

    <sect2 id="Addding_And_Subtracting_Years_And_Monts">
      <title>Adding and Subtracting Years and Months</title>

      <para>Adding or subtracting years and months (ex: $date += 2Y + 3M) will give you the same day on the desired month in the desired year. If the target month has fewer days than the source month, then you will get the last day of the month in that year. For example:</para>

      <programlisting><replaceable>prompt% </replaceable>qore -X '2004-02-29Z - 1Y'
2003-02-28 00:00:00 Fri Z (UTC)</programlisting>
    </sect2>

    <sect2 id="Adding_And_Subtracting_Days">
      <title>Adding and Subtracting Days</title>
      <para>Adding or subtracting days means adding or subtracting 24h periods; i.e. you will get the same time in the result of subtracting days, for example:</para>

      <programlisting><replaceable>prompt% </replaceable>qore -X '2004-02-29T10:15:00Z - 10D'
2004-02-19 10:15:00 Thu Z (UTC)</programlisting>

    </sect2>
    
    <sect2 id="Date_Differences">
      <title>Finding the Difference Between Two Dates</title>
      <para>Subtracting one absolute date from another will result in a <link linkend="Relative_Dates">relative date</link>, normalized to the hour (that is, microseconds over 999,999 are converted to seconds, seconds over 59 to minutes, and minutes over 59 to hours; days, months, and years will not appear in the result as they do not indicate a fixed period of time but rather can vary in length depending on the absolute date/time starting point.  For example:</para>
	<programlisting><replaceable>prompt% </replaceable>qore -X '2007-02-29T10:15:03.255Z - 2004-02-29T10:14:02.100Z'
&lt;time: 26304 hours 1 minute 1 second 155 milliseconds&gt;</programlisting>

      <para>To find the difference in seconds between two dates, convert each date value to an integer and subtract as follows:</para>
	<programlisting><replaceable>prompt% </replaceable>qore -X 'int(2004-02-29Z) - int(2004-02-28Z)'
86400</programlisting>
  <para>Or use the <link linkend="get_duration_seconds">get_duration_seconds()</link> function as follows:</para>
	<programlisting><replaceable>prompt% </replaceable>qore -X 'get_duration_seconds(2004-02-29Z - 2004-02-28Z)'
86400</programlisting>

    </sect2>
    
    <sect2 id="Timezones_And_Daylight_Savings_Time">
      <title>Timezones and Daylight Savings Time</title>
      <para>Time zones and daylight savings time information is supplied by the system's zoneinfo database (if any exists; see <link linkend="Time_Zones">Time Zones</link> for more information).</para>

  <para>To find out if the current time zone has daylight savings time, execute the following:</para>

  <programlisting><replaceable>prompt% </replaceable>qore -X 'TimeZone::get().hasDST()'
True</programlisting>

  <para>See the <link linkend="Time_Zone_Class">TimeZone class</link> for more information on time zone information.</para>

    </sect2>

    <sect2 id="Leap_Years_and_the_Gregorian_Calendar">
      <title>Leap Years and the Gregorian Calendar</title>
      <para>Qore is capable of representing and performing calculations on dates before the adoption of the Gregorian calendar (proposed in 1582 and adopted at various times in Europe after this point).  However all calculations are made as if the Gregorian calendar were always in effect (Qore implements a <ulink url="http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar">proleptic Gregorian calendar</ulink>).</para>
    </sect2>
  </sect1>
  
  <sect1 id="Statements">
    <title>Statements</title>

    <para>Non-block statements in Qore are always terminated by a semi-colon ";" as in Perl, C, or Java. Statements can be grouped into blocks, which are delimited by curly brackets "{" and "}" containing zero or more semi-colon delimited statements, as in C or Java. Like C, C++, and Java, but unlike perl, any Qore statement taking a statement modifier will accept a single statement or a statement block.</para>

<para>A statement can be any of the following (note that statements are also recursively defined):</para>

<table><title>Qore Statements</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Type</para></entry>
    <entry><para>Examples</para></entry>
    <entry><para>Reference</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>An expression that changes an lvalue</para></entry>
    <entry><programlisting>$var = 1;
$var += 5;
$var[1].count++;
<command>shift</command> $var.key[$i];</programlisting></entry>
    <entry><para><link linkend="Expressions">Expressions</link></para></entry>
  </row>
  <row>
    <entry><para>An expression with the <command>new</command> operator</para></entry>
    <entry><programlisting><command>new</command> ObjectClass(1, 2, 3);</programlisting></entry>
    <entry><para><link linkend='New_Object_Operator'>class instantiation/new object operator</link></para></entry>
  </row>
  <row>
    <entry><para>An expression with the <command>background</command> operator</para></entry>
    <entry><programlisting><command>background</command> function();</programlisting></entry>
    <entry><para><link linkend='Background_Operator'>background/thread creation operator</link></para></entry>
  </row>
  <row>
    <entry><para>A call reference or closure call</para></entry>
    <entry><programlisting>$call_reference($arg1, $arg2);</programlisting></entry>
    <entry><para><link linkend="call_references">call references</link>, <link linkend="closures">closures</link></para></entry>
  </row>
  <row>
    <entry><para>A method call</para></entry>
    <entry><programlisting>$object.method(1, 2, 3);</programlisting></entry>
    <entry><para><link linkend="Classes">Classes</link></para></entry>
  </row>
  <row>
    <entry><para>An <command>if</command> statement </para></entry>
    <entry><programlisting><command>if</command> ($var == 3) <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='if_and_else_Statements'>if and else</link> statements</para></entry>
  </row>
  <row>
    <entry><para>An "<command>if ... else</command>" statement</para></entry>
    <entry><programlisting><command>if</command> ($var == 3)
    <replaceable>statement</replaceable>
<command>else</command>
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='if_and_else_Statements'>if and else</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>while</command> statement</para></entry>
    <entry><programlisting><command>while</command> ($var &lt; 10) 
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='while_Statements'>while</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>do while</command> statement</para></entry>
    <entry><programlisting><command>do</command> <replaceable>statement</replaceable> <command>while</command> 
    (<replaceable>expression</replaceable>);</programlisting></entry>
    <entry><para><link linkend='do_while_Statements'>do while</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>for</command> statement</para></entry>
    <entry><programlisting><command>for</command> (<replaceable>expression1</replaceable>; <replaceable>expression2</replaceable>; 
    <replaceable>expression3</replaceable>) <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='for_Statements'>for</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>foreach</command> statement</para></entry>
    <entry><programlisting><command>foreach</command> <replaceable>$variable</replaceable> <command>in</command> 
    (<replaceable>expression</replaceable>) <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='foreach_Statements'>foreach</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>switch</command> statement</para></entry>
    <entry><programlisting><command>switch</command> (<replaceable>expression</replaceable>) 
{
    <command>case</command> <replaceable>case_expression</replaceable>: 
        <replaceable>statement(s)</replaceable> 
    [ <command>default</command> : 
        <replaceable>statement(s)</replaceable> ]
}</programlisting>
    </entry>
    <entry><para><link linkend='switch_Statements'>switch</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>return</command> statement</para></entry>
    <entry><programlisting><command>return</command> <replaceable>expression</replaceable>;</programlisting></entry>
    <entry><para><link linkend='return_Statements'>return</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A local variable declaration</para></entry>
    <entry>
	<programlisting><command>my</command> $var;
<command>my</command> ($a, $b, $c);</programlisting>
    </entry>
    <entry><para><link linkend='Variables'>Variables</link></para></entry>
  </row>
  <row>
    <entry><para>A global variable declaration</para></entry>
    <entry>
      <programlisting><command>our</command> $var;
<command>our</command> ($a, $b, $c);</programlisting>
    </entry>
    <entry><para><link linkend='Variables'>Variables</link></para></entry>
  </row>
  <row>
    <entry><para>A function call</para></entry>
    <entry><programlisting>calculate($this, $that, $the_other);</programlisting></entry>
    <entry><para><link linkend="Function_Library">Function Library</link></para></entry>
  </row>
  <row>
    <entry><para>A <command>continue</command> statement</para></entry>
    <entry><programlisting><command>continue</command>;</programlisting></entry>
    <entry><para><link linkend='continue_Statements'>continue</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>break</command> statement</para></entry>
    <entry><programlisting><command>break</command>;</programlisting></entry>
    <entry><para><link linkend='break_Statements'>break</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A statement block</para></entry>
    <entry><programlisting>{ <replaceable>statement</replaceable> }</programlisting></entry>
    <entry><para>one or more statements enclosed in curly brackets.</para></entry>
  </row>
  <row>
    <entry><para>A <command>throw</command> statement</para></entry>
    <entry><programlisting><command>throw</command> <replaceable>expression</replaceable>;</programlisting></entry>
    <entry><para><link linkend='throw_Statements'>throw</link> statements</para></entry>
  </row>
  <row>
    <entry><para><command>try</command> and <command>catch</command> statements</para></entry>
    <entry><programlisting><command>try</command>
    <replaceable>statement</replaceable>
<command>catch</command> (<replaceable>$vars ...</replaceable>)
    <replaceable>statement</replaceable></programlisting>
      </entry>
    <entry><para><link linkend='try_and_catch_Statements'>try and catch</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>rethrow</command> statement</para></entry>
    <entry><programlisting><command>rethrow</command>;</programlisting></entry>
    <entry><para><link linkend='rethrow_Statements'>rethrow</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>thread_exit</command> statement</para></entry>
    <entry><programlisting><command>thread_exit</command>;</programlisting></entry>
    <entry><para><link linkend='thread_exit_Statements'>thread_exit</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>context</command> statement</para></entry>
    <entry>
      <programlisting><command>context</command> <replaceable>[name] (expression)</replaceable> 
    <replaceable>statement</replaceable></programlisting>
    </entry>
    <entry><para><link linkend='context_Statements'>context</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>summarize</command> statement</para></entry>
    <entry>
      <programlisting><command>summarize</command> <replaceable>expression</replaceable> by ( <replaceable>expression</replaceable> )
    <replaceable>statement</replaceable></programlisting>
    </entry>
    <entry><para><link linkend='summarize_Statements'>summarize</link> statements</para></entry>
  </row>
  <row>
    <entry><para>A <command>subcontext</command> statement</para></entry>
    <entry><programlisting><command>subcontext</command>
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='subcontext_Statements'>subcontext</link> statements</para></entry>
  </row>
  <row>
    <entry><para>An <command>on_exit</command> statement</para></entry>
    <entry><programlisting><command>on_exit</command>
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='on_exit_Statements'>on_exit</link> statements</para></entry>
  </row>
  <row>
    <entry><para>An <command>on_success</command> statement</para></entry>
    <entry><programlisting><command>on_success</command>
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='on_success_Statements'>on_success</link> statements</para></entry>
  </row>
  <row>
    <entry><para>An <command>on_error</command> statement</para></entry>
    <entry><programlisting><command>on_error</command>
    <replaceable>statement</replaceable></programlisting></entry>
    <entry><para><link linkend='on_error_Statements'>on_error</link> statements</para></entry>
  </row>

</tbody>
</tgroup>
</table>

<sect2 id="if_and_else_Statements">
  <title>if and else Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>The <command>if</command> statement allows for conditional logic in a Qore program's flow; the syntax is similar to that of C, C++, or Java.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>if</command> ( <replaceable>expression</replaceable> ) 
    <replaceable>statement</replaceable>
[<command>else</command>
    <replaceable>statement</replaceable>]</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>Qore if statements work like if statements in C or Java.  If the result of evaluating the expression converted to a Boolean value is True, then the first statement (which can also be a block) is executed.  If the result is False, and there is an else keyword after the first statement, the following statement is executed.</para>
     </listitem>
    </varlistentry>
  </variablelist>
  <note>
    <para>Any expression that evaluates to a non-zero integer value will be converted to a Boolean True.  Any expression that evaluates to zero value is interpreted as False.  This is more like C and Java's behavior and not like Perl's (where any non-null string except "0" is True).</para>
  </note>

</sect2>
<sect2 id="for_Statements">
  <title>for Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>The Qore <command>for</command> statement is most similar to the <command>for</command> statement in C and Java, or the non array iterator <command>for</command> statement in Perl.  This statement is ideal for loops that should execute a given number of times, then complete.  Each of the three expressions in the <command>for</command> statement is optional and may be omitted.  To iterate through a list without directly referencing list index values, see the <link linkend="foreach_Statements">foreach</link> statement.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>for</command> ( <replaceable>[initial_expression]</replaceable> ; <replaceable>[test_expression]</replaceable> ; <replaceable>[iterator_expression]</replaceable> )
      <replaceable>statement</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para><replaceable>[initial_expression]</replaceable></para>
	<para>The <replaceable>initial_expression</replaceable> is executed only once at the start of each <command>for</command> loop. It is typically used to initialize a loop variable.</para>
	<para><replaceable>[test_expression]</replaceable></para>
	<para>The <replaceable>test_expression</replaceable> is executed at the start of each <command>for</command> loop iteration. If this expression evaluates to Boolean False, the loop will terminate.</para>
	<para><replaceable>[iterator_expression]</replaceable></para>
	<para>The <replaceable>iterator_expression</replaceable> is executed at the end of each <command>for</command> loop iteration. It is typically used to increment or decrement a loop variable that will be used in the <replaceable>test_expression</replaceable>.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<para>Here is an example of a <command>for</command> loop using a local variable:</para>
	<programlisting><command>for</command> (<command>my</command> $i = 0; $i &lt; 10; $i++)
    print("%d\n", $i);</programlisting>
     </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="foreach_Statements">
  <title>foreach Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>The Qore <command>foreach</command> statement is most similar to the <command>for</command> or <command>foreach</command> array iterator statement in Perl.  To iterate an action until a condition is true, use the <link linkend="for_Statements">for</link> statement instead.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>foreach</command> [<command>my</command>] <replaceable>$variable</replaceable> <command>in</command> (<replaceable>expression</replaceable>)
    <replaceable>statement</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>If the <replaceable>expression</replaceable> does not evaluate to a list, then the variable will be assigned the value of the expression evaluation and the statement will only execute one time.  Otherwise the variable will be assigned to each value of the list and the statement will be called once for each value.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<para>Here is an example of a <command>foreach</command> loop using a local variable:</para>
	<programlisting># if $str_list is a list of strings, this will remove all whitespace from the
# strings; the reference in the list expression ensures that changes
# to the iterator variable are written back to the list
<command>foreach</command> <command>my</command> $string <command>in</command> (\$str_list)
    trim $string;</programlisting>
     </listitem>
    </varlistentry>
  </variablelist>

  <note><para>Note that if a reference (<replaceable>\$lvalue_expression</replaceable>) is used as the list expression, any changes made to the <command>foreach</command> iterator variable will be written back to the list.</para></note>

</sect2>
<sect2 id="switch_Statements">
  <title>switch Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>The Qore <command>switch</command> statement is similar to the <command>switch</command> statement in C and C++, except that the <command>case</command> values can be any expression that does not need run-time evaluation and can also be expressions with simple relational operators or regular expressions using the switch value as an implied operand.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>switch</command> (<replaceable>expression</replaceable>) { 
    <command>case</command> <replaceable>case_expression</replaceable>: 
        <replaceable>statement(s)</replaceable> 
    ...
    [ <command>default</command> : 
        <replaceable>statement(s)</replaceable> ]
}</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>switch ($val) {
    case &lt; -1: 
        printf("less than -1\n");
	break;
    case "string":
        printf("string\n");
	break;
    case &gt; 2007-01-22T15:00:00: 
        printf("greater than 2007-01-22 15:00:00\n");
	break;
    case /abc/:
        printf("string with 'abc' somewhere inside\n");
        break;
    default:
        printf("default\n");
	break;
}</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The first expression is evaluated and then compared to the value of each <command>case</command> expression in declaration order until one of the <command>case</command> expressions matches or is evaluated to True.  In this case all code up to a <command>break</command> statement is executed, at which time execution flow exits the <command>switch</command> statement.  Unless relational operators are used, the comparisons are "hard" comparisons; no type conversions are done, so in order for a match to be made, both the value and types of the expressions must match exactly.  When relational operators are used, the operators are executed exactly as they are in the rest of qore, so type conversions may be performed if nesessary.</para>
	<para>To use soft comparisons, you must explicitly specify the soft equals operator as follows:
	  <programlisting>switch (1) {
    case == "1": print("true\n"); break;
}</programlisting></para>
	<para>If no match is found and a <command>default</command> label has been given, then any statements after the <command>default</command> label will be executed.  If a match is made, then the statements following that <command>case</command> label are executed.</para>
	<para>To break out of the switch statement, use the <command>break</command> statement.</para>

	<table>
	  <title>Valid Case Expression Operators</title>
	  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	    <thead>
	      <row>
		<entry><para>Operator</para></entry>
		<entry><para>Description</para></entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><para>&gt;</para></entry>
		<entry><para><link linkend='Greater_Than_Operator'>logical greater than operator</link></para></entry>
	      </row>
	      <row>
		<entry><para>&gt;=</para></entry>
		<entry><para><link linkend='Greater_Than_Or_Equals_Operator'>logical greater than or equals operator</link></para></entry>
	      </row>
	      <row>
		<entry><para>&lt;</para></entry>
		<entry><para><link linkend='Less_Than_Operator'>logical less than operator</link></para></entry>
	      </row>
	      <row>
		<entry><para>&lt;=</para></entry>
		<entry><para><link linkend='Less_Than_Or_Equals_Operator'>logical less than or equals operator</link></para></entry>
	      </row>
	      <row>
		<entry><para>==</para></entry>
		<entry><para><link linkend='Equals_Operator'>logical equals operator (with type conversions)</link></para></entry>
	      </row>
	      <row>
		<entry><para>~=</para></entry>
		<entry><para><link linkend='Regular_Expression_Match_Operator'>regular expression match operator</link> (in this case the regular expression may be optionally given without the operator)</para></entry>
	      </row>
	      <row>
		<entry><para>!~</para></entry>
		<entry><para><link linkend='Regular_Expression_No_Match_Operator'>regular expression no match operator</link></para></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

     </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="while_Statements">
  <title>while Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para><command>while</command> statements in Qore are similar to <command>while</command> statements in Perl, C and Java. They are used to loop while a given condition is True.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>while</command> ( <replaceable>expression</replaceable> )
    <replaceable>statement</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>First the <replaceable>expression</replaceable> will be evaluated; if it evaluates to True, then <replaceable>statement</replaceable> will be executed. If it evaluates to False, the loop terminates.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting>$a = 1;
<command>while</command> ($a &lt; 10)
    $a++;</programlisting>
     </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="do_while_Statements">
  <title>do while Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para><command>do</command> <command>while</command> statements in Qore are similar to <command>do</command> <command>while</command> statements in C.  They are used to guarantee at least one iteration and loop until a given expression evaluates to False.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>do</command>
    <replaceable>statement</replaceable>
<command>while</command> ( <replaceable>expression</replaceable> );</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>First, <replaceable>statement</replaceable> will be executed, then <replaceable>expression</replaceable> will be evaluated; if it evaluates to True, then the loop iterates again. If it evaluates to False, the loop terminates. The difference between <command>do</command> <command>while</command> statements and <command>while</command> statements is that the <command>do</command> <command>while</command> statement evaluates its loop expression at the end of the loop, and therefore guarantees at least one iteration of the loop.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
<programlisting>$a = 1;
<command>do</command> 
    $a++;
<command>while</command> ($a &lt; 10);</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="continue_Statements">
<title>continue Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Skips the rest of a loop and jumps right to the evaluation of the iteration expression.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>continue</command>;</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The <command>continue</command> statement affects loop processing; that is; it has an affect on <command>for</command>, <command>foreach</command>, <command>while</command>, <command>do</command> <command>while</command>, <command>context</command>, <command>summarize</command>, and <command>subcontext</command> loop processing.  When this statement is encountered while executing a loop, execution control jumps immediately to the evaluation of the iteration expression, skipping any other statements that might otherwise be executed.</para>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="break_Statements">
  <title>break Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Exits immediately from a loop statement or <command>switch</command> block.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>break</command>;</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The <command>break</command> statement affects loop processing; that is; it has an affect on <command>for</command>, <command>while</command>, <command>do</command> <command>while</command>, <command>context</command>, <command>summarize</command>, and <command>subcontext</command> loop processing. When this statement is encountered while executing a loop, the loop is immediately exited, and execution control passes to the next statement outside the loop.</para>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="delete_Statements">
  <title>delete Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>In order to delete the contents of an lvalue, the <command>delete</command> statement can be used.  For objects, this will also run the destructor method (if defined for the class).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>delete</command> <replaceable>$lvalue;</replaceable></programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="throw_Statements">
  <title>throw Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>In order to throw an exception explicitly, the <command>throw</command> statement must be used.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>throw</command> <replaceable>expression;</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The expression will be passed to the <command>catch</command> block of a <command>try</command>/<command>catch</command> statement, if the <command>throw</command> is executed in a <command>try</command> block.  Otherwise the default system exception handler will be run and the currently running thread will terminate.</para>
	<para>Qore convention dictates that a direct list is thrown with at least two string elements, the error code and a description.  All system exceptions have this format.  See <link linkend="try_and_catch_Statements">try and catch</link> statements for information on how to handle exceptions, and see <link linkend="Exception_Handling">Exception Handling</link> for information about how <command>throw</command> arguments are mapped to the exception hash.</para>
      </listitem>
    </varlistentry>
  </variablelist>

</sect2>
<sect2 id="try_and_catch_Statements">
  <title>try and catch Statements</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Some error conditions can only be detected and handled using exception handlers. To catch exceptions, <command>try</command> and <command>catch</command> statements can to be used.  When an exception occurs while executing the <command>try</command> block, execution control will immediately be passed to the <command>catch</command> block, which can capture information about the exception.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<para>
	  <programlisting><command>try</command>
    <replaceable>statement</replaceable>
<command>catch</command> ([<replaceable>$exception_hash_variable</replaceable>])
    <replaceable>statement</replaceable></programlisting>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>A single variable can be specified in the <command>catch</command> block to be instantiated with the exception hash, giving information about the exception that has occurred.  For detailed information about the exception hash, see <link linkend="Exception_Handling">Exception Handling</link>.</para>

      <para>If no variable is given in the <command>catch</command> declaration, it will not be possible to access any information about the exception in the <command>catch</command> block.  However, the <link linkend="rethrow_Statements"><command>rethrow</command></link> statement can be used to rethrow exceptions at any time in a catch block.</para></listitem>
    </varlistentry>
  </variablelist>
</sect2>

    <sect2 id="rethrow_Statements">
      <title>rethrow Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>A <command>rethrow</command> statement can be used to rethrow an exception in a <command>catch</command> block.  In this case a entry tagged as a rethrow entry will be placed on the exception call stack.  This statement can be used to maintain coherent call stacks even when exceptions are handled by more than one catch block (for detailed information about the exception hash and the format of call stacks, see <link linkend="Exception_Handling">Exception Handling</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>rethrow</command>;</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>The rethrown exception will be either passed to the next higher-level catch block, or to the system default exception handler, as with a <command>throw</command> statement.  Note that it is an error to call <command>rethrow</command> outside of a <command>catch</command> block.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="thread_exit_Statements">
      <title>thread_exit Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para><command>thread_exit</command> statements cause the current thread to exit immediately.  Use this statement instead of the <link linkend="exit">exit()</link> function when only the current thread should exit.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>thread_exit</command>;</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>This statement will cause the current thread to stop executing immediately.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

<sect2 id="context_Statements">
  <title>context Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>To easily iterate through multiple rows in a hash of arrays (such as a query result set returned by the <link linkend="SQL::Datasource::select">Datasource::select()</link> method), the <command>context</command> statement can be used. Column names can be referred to directly in expressions in the scope of the <command>context</command> statement by preceding the name with a '%" character.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<para>
	  <programlisting><command>context</command> [name] ( <replaceable>data_expression )</replaceable> 
        [ <command>where</command> ( <replaceable>expression</replaceable> ) ] 
        [ <command>sortBy</command> ( <replaceable>expression</replaceable> ) ] 
        [ <command>sortDescendingBy</command> ( <replaceable>expression</replaceable> ) ]
   <replaceable>statement</replaceable></programlisting>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para><replaceable>data_expression</replaceable></para>
	<para>This must evaluate to a hash of arrays in order for the <command>context</command> statement to execute.</para>

	<para><code>[ <command>where</command> ( <replaceable>expression</replaceable> ) ]</code></para>
	<para>An optional <command>where</command> expression may be given, in which case for each row in the hash, 
	the expression will be executed, and if the <command>where</command> expression evaluates to True, 
	the row will be iterated in the <command>context</command> loop. If this expression evaluates 
	to False, then the row will not be iterated. This option is given so the 
	programmer can create multiple views of a single data structure (such as a query 
	result set) in memory rather than build different data structures by 
	hand.</para>

	<para><code>[ <command>sortBy</command> ( <replaceable>expression</replaceable> ) ]</code></para>
	<para>An optional <command>sort_by</command> expression may also be given. In this case, the expression will be evaluated for each row of the query given, and then the result set will be sorted in ascending order by the results of the expressions according to the resulting type of the evaluated expression (i.e. if the result of the evaluation of the expression gives a string, then string order is used to sort, if the result of the evaluation is an integer, then integer order is used, etc).</para>

	<para><code>[ <command>sortDescendingBy</command> ( <replaceable>expression</replaceable> ) ]</code></para>
	<para>Another optional modifier to the context statement that behaves the same as above except that the results are sorted in descending order.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting># note that "%service_type" and "%effective_start_date" represent values
# in the $service_history hash of arrays.

<command>context</command> ($service_history) <command>where</command> (%service_type == "voice")
<command>sortBy</command> (%effective_start_date) {
   printf("%s: start date: %s\n", %msisdn, format_date("YYYY-MM-DD HH:mm:SS", %effective_start_date));
}</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

</sect2>
<sect2 id="summarize_Statements">
  <title>summarize Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>
	  <command>summarize</command> statements are like <command>context</command> statements with one important difference: results sets are grouped by a by expression, and the statement is executed only once per discrete <command>by</command> expression result. This statement is designed to be used with the <command>subcontext</command> statement.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>summarize</command> ( <replaceable>expression </replaceable>) <command>by</command> ( <replaceable>expression</replaceable> )
          [ <command>where</command> ( <replaceable>expression</replaceable> ) ] 
          [ <command>sortBy</command> ( <replaceable>expression</replaceable> ) ] 
          [ <command>sortDescendingBy</command> ( <replaceable>expression</replaceable> ) ]
   <replaceable>statement</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para><command>summarize</command> statements modifiers have the same effect as those for the <command>context</command> statement, except for the following:</para>

	<para><code><command>by</command> ( <replaceable>expression</replaceable> )</code></para>
	<para>The <command>by</command> expression is executed for each row in the data structure indicated. 
	The set of unique results defines groups of result rows. For each group of 
	result rows, each row having an identical result of the evaluation of the 
	<command>by</command> expression, the statement is executed only once.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting># note that "%service_type" and "%effective_start_date" represent values 
# in the $services hash of arrays.

<command>summarize</command> ($services) 
    <command>by</command> (%effective_start_date) 
    <command>where</command> (%service_type == "voice") 
    <command>sortBy</command> (%effective_start_date) {
    printf("account has %d service(s) starting on %s\n", 
           context_rows(),
           format_date("YYYY-MM-DD HH:mm:SS", %effective_start_date));
}</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="subcontext_Statements">
  <title>subcontext Statements</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Statement used to loop through values within a summarize statement.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Syntax</term>
      <listitem>
	<programlisting><command>subcontext</command> [ <command>where</command> ( <replaceable>expression</replaceable> ) ] 
           [ <command>sortBy</command> ( <replaceable>expression</replaceable> ) ] 
           [ <command>sortDescendingBy</command> ( <replaceable>expression</replaceable> ) ]
    <replaceable>statement</replaceable></programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The <command>subcontext</command> statement is used in conjunction with <command>summarize</command> statements. When result rows of a query should be grouped, and then each row in the result set should be individually processed, the Qore programmer should first use a <command>summarize</command> statement, and then a <command>subcontext</command> statement. The <command>summarize</command> statement will group rows, and then the nested <command>subcontext</command> statement will iterate through each row in the current summary group.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Example</term>
      <listitem>
	<programlisting><command>summarize</command> ($services) 
    <command>by</command> (%effective_start_date) 
    <command>where</command> (%service_type == "voice") 
    <command>sortBy</command> (%effective_start_date) {
    printf("account has %d service(s) starting on %s\n", 
           context_rows(),
           format_date("YYYY-MM-DD HH:mm:SS", %effective_start_date));
    <command>subcontext</command> <command>sortDescendingBy</command> (%effective_end_date) {
        printf("\tservice %s: ends: %s\n", %msisdn, format_date("YYYY-MM-DD HH:mm:SS", %effective_end_date));
    }
}</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
</sect2>

    <sect2 id="return_Statements">
      <title>return Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para><command>return</command> statements causes the flow of execution of the subroutine, method or program to stop immediately and return to the caller.  This statement can take an optional expression to return a value to the caller as well.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>return</command> [<replaceable>expression</replaceable>];</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>This statement causes execution of the current subroutine, method, or program to cease and optionalls returns a value to the caller.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>sub</command> getName() {
   <command>return</command> "Barney";
}

$name = getName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="on_exit_Statements">
      <title>on_exit Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Queues a statement or statement block for unconditional execution when the block is exited, even in the case of exceptions or <command>return</command> statements.  For similar statement that queue code for execution depending on the exception status when the block exits, see <link linkend="on_success_Statements">on_success</link> statements and <link linkend="on_error_Statements">on_error</link> statements.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>on_exit</command>
    <replaceable>statement</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>The <command>on_exit</command> statement provides a clean way to do exception-safe cleanup within Qore code.  Any single statment (or statement block) after the <command>on_exit</command> keyword will be executed when the current block exits (as long as the statement itself is reached when executing - <command>on_exit</command> statements that are never reached when executing will have no effect).  The the position of the <command>on_exit</command> statement in the block is important, as the immediate effect of this statement is to queue its code for execution when the block is exited.  Even if an exception is raised or a <command>return</command> statement is executed, any <command>on_exit</command> code that is queued will be executed.  Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup.</para>
	    <para>Note that if this statement is reached when executing in a loop, the <command>on_exit</command> code will be executed for each iteration of the loop.</para>
	    <para>By using this statement, programmers ensure that necessary cleanup will be performed regardless of the exit status of the block (exception, return, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
      <listitem>
	<programlisting>{
    $mutex.lock();
    # here we queue the unlock of the mutex when the block exits, even if an exception is thrown below
    <command>on_exit</command> $mutex.unlock();
    if ($error)
        <command>throw</command> "ERROR", "Scary error happened";
    print("everything's OK!\n");
    return "OK";
}
# when the block exits for any reason, the mutex will be unlocked
</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  </sect2>

    <sect2 id="on_success_Statements">
      <title>on_success Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Queues a statement or statement block for execution when the block is exited in the case that no exception is active.  Used often in conjunction with the <link linkend="on_error_Statements">on_error statement</link> and related to the <link linkend="on_exit_Statements">on_exit statement</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>on_success</command>
    <replaceable>statement</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>The <command>on_success</command> statement provides a clean way to do block-level cleanup within Qore code in the case that no exception is thrown in the block.  Any single statment (or statement block) after the <command>on_success</command> keyword will be executed when the current block exits as long as no unhandled exception has been thrown (and as long as the statement itself is reached when executing - <command>on_success</command> statements that are never reached when executing will have no effect).  The the position of the <command>on_success</command> statement in the block is important, as the immediate effect of this statement is to queue its code for conditional execution when the block is exited.  Even if a <command>return</command> statement is executed later in the block, any <command>on_success</command> code that is queued will be executed as long as there is no active (unhandled) exception.  Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup, along with <link linkend="on_error_Statements">on_error</link> statements, which are executed in a manner similar to <command>on_success</command> statements, except <link linkend="on_error_Statements">on_error</link> statements are only executed when there is an active exception when the block is exited.</para>
	    <para>Note that if this statement is reached when executing in a loop, the <command>on_success</command> code will be executed for each iteration of the loop (as long as there is no active exception).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
      <listitem>
	<programlisting>{
    $db.beginTransaction();
    # here we queue the commit in the case there are no errors
    <command>on_success</command> $db.commit();
    # here we queue a rollback in the case of an exception
    <command>on_error</command> $db.rollback();
    $db.select("select * from table where id = %v for update", $id);
    # .. more code

    return "OK";
}
# when the block exits. the transaction will be either committed or rolled back, 
# depending on if an exception was raised or not
</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  </sect2>

    <sect2 id="on_error_Statements">
      <title>on_error Statements</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Queues a statement or statement block for execution when the block is exited in the case that no exception is active.  Used often in conjunction with the <link linkend="on_success_Statements">on_success statement</link> and related to the <link linkend="on_exit_Statements">on_exit statement</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Syntax</term>
	  <listitem>
	    <programlisting><command>on_error</command>
    <replaceable>statement</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Description</term>
	  <listitem>
	    <para>The <command>on_error</command> statement provides a clean way to do block-level cleanup within Qore code in the case that an exception is thrown in the block.  Any single statment (or statement block) after the <command>on_error</command> keyword will be executed when the current block exits as long as an unhandled exception has been thrown (and as long as the statement itself is reached when executing - <command>on_error</command> statements that are never reached when executing will have no effect).  The the position of the <command>on_error</command> statement in the block is important, as the immediate effect of this statement is to queue its code for conditional execution when the block is exited.  Even if a <command>return</command> statement is executed later in the block, any <command>on_error</command> code that is queued will be executed as long as there is an active (unhandled) exception.  Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup, along with <link linkend="on_success_Statements">on_success</link> statements, which are executed in a manner similar to <command>on_error</command> statements, except <link linkend="on_success_Statements">on_success</link> statements are only executed when there is no active exception when the block is exited.</para>
	    <para>Note that the code in this statement can only be executed once in any block, as a block (even a block within a loop) can only exit the loop once with an active exception (in contrast to <link linkend="on_success_Statements">on_success</link> and <link linkend="on_exit_Statements">on_exit</link> statements, which are executed for every iteration of a loop).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
      <listitem>
	<programlisting>{
    $db.beginTransaction();
    # here we queue the commit in the case there are no errors
    <command>on_success</command> $db.commit();
    # here we queue a rollback in the case of an exception
    <command>on_error</command> $db.rollback();
    $db.select("select * from table where id = %v for update", $id);
    # .. more code

    return "OK";
}
# when the block exits. the transaction will be either committed or rolled back, 
# depending on if an exception was raised or not
</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  </sect2>

</sect1>

<sect1 id="Subroutines">
<title>Subroutines</title>

<para>A subroutine is declared in Qore by using the key word <command>sub</command> as follows:</para>

<programlisting><command>sub</command> <replaceable>subroutine_name</replaceable>([<replaceable>variable1, variable2, ...</replaceable>]) {
    <replaceable>statements;</replaceable>
}
</programlisting>

<para>Variables listed in parentheses by the subroutine name automatically get local lexical scoping. In order to process a variable number of arguments to a function, the <code>$argv</code> variable (local variable) is instantiated as a list with the remaining arguments passed to the subroutine.</para>

<para>Subroutines can use the <command>return</command> statement to provide a return value. Subroutine names must be valid Qore identifiers.</para>

<note><para>Variables passed as function arguments are passed by value by default, unless the caller places a "\" character before an lvalue in the argument list. In this case the subroutine must have a parameter defined to accept the variable passed by reference. Any changes to the local variable will be reflected in the original variable for variables passed by reference. Also note that it is illegal to pass an argument by reference in a background expression.</para></note>

<para>Subroutines can return values to the calling expression by using the <command>return</command> statement, with the following syntax:</para>

<programlisting><command>return</command> <replaceable>expression</replaceable>;</programlisting>

<para>Here is an example subroutine declaration for a function returning a value:</para>

<programlisting>#!/usr/bin/qore
#
# subroutine declaration example

<command>sub</command> print_string($string) {
    print("%s\n", $string);
    <command>return</command> 1;
}
</programlisting>

<para>Subroutines may also be recursive.  Here is an example of a recursive Qore subroutine definition implementing the Fibonacci function:</para>

<programlisting>#!/usr/bin/qore
#
# recursive subroutine example

<command>sub</command> fibonacci($num) {
    <command>if</command> ($num == 1)
        <command>return</command> 1;
    <command>return</command> $num * fibonacci($num - 1);
}
</programlisting>

<note>
<para>Function names are resolved during the second parse pass; therefore functions do not need to be declared before being referenced. This allows an easy definition of 2 or more self-referencing functions.</para></note>  

</sect1>
<sect1 id="Namespaces">
<title>Namespaces</title>

<para>Namespaces allow constants, classes, and even other namespaces with the same name to co-exist in the same program by defining them in separate namespaces. Constants, classes, and sub-namespaces can be declared to belong to a particular namespace either by defining them in-line within a namespace declaration, or by including the namespace name/path prepended to the constant, class, or namespace declaration separated by two colons "::".</para>

<para>If the user does not specify the parent namespace with a namespace path in constant, class, or namespace declarations, the declaration will be by default in the unnamed default root namespace.</para>

<sect2 id="Namespace_Declarations">
<title>Namespace Declarations</title>

<para>In-line namespace declaration:</para>

<programlisting><command>namespace</command> [<replaceable>namespace_path</replaceable>::]<replaceable>namespace_identifier</replaceable> {
    [<replaceable>constant_declarations</replaceable>]
    [<replaceable>class_declarations</replaceable>]
    [<replaceable>sub-namespace-declarations</replaceable>]
}
</programlisting>

<para>Out of line namespace declaration:</para>

<programlisting><command>namespace</command> [<replaceable>namespace_path</replaceable>::]<replaceable>namespace_identifier</replaceable>;
</programlisting>

</sect2>
<sect2 id="Namespace_Resolution">
<title>Namespace Resolution</title>

<para>Namespaces can either be resolved by giving a path to the constant, class, or namespace desired, or by leaving out the namespace path and allowing the system to search for the constant, class, or namespace. In either case, a breadth-first search of the namespace tree is made for a match. If a namespace path is included, then the tree is searched for the first namespace match. and, if the rest of the declaration cannot be matched, the search continues in the entire namespace tree until a complete match is found.</para>

<para>Namespace paths look like the following:</para>

<para><replaceable>starting_namespace</replaceable>::[<replaceable>sub-namespaces</replaceable>::]<replaceable>constant|class|namespace</replaceable></para>

</sect2>
<sect2 id="System_Namespaces">
<title>System Namespaces</title>


<para>All Qore-language constants and classes are defined in the Qore namespace or in a subnamespace of the Qore namespace. The Qore namespace is a direct child of the unnamed default root namespace (::).</para>

<para>For detailed information on all constants and classes defined in system namespaces, see <link linkend="System_Namespaces_and_Class_Library">System Namespaces and Class Library</link>.</para>
</sect2>
</sect1>
<sect1 id="Constants">
<title>Constants</title>

<para>Constant definitions allow programmers to refer to values with Qore identifiers rather than using the value.  Constants are defined with the following syntax:</para>

<programlisting><command>const</command> [<replaceable>namespace_path</replaceable>::]<replaceable>constant_identifier</replaceable> = <replaceable>value</replaceable>;</programlisting>

<note><para>The value cannot require run-time evaluation (executes a function, has a variable reference, uses an operator that changes values, etc) or a parse exception will be raised.</para></note>

</sect1>
<sect1 id="Classes">
<title>Classes</title>

<para>Objects are instantiations of a Qore class.  Classes define private members and methods, which are functions that operate only on the objects of that class.</para>

<para>Classes are declared with the following syntax:</para>

<programlisting><command>class</command> [<replaceable>namespace_path::</replaceable>...]<replaceable>class_identifier</replaceable> [<command>inherits</command> [<command>private</command>] [<replaceable>namespace_path::</replaceable>...]<replaceable>class_identifier</replaceable>[, ...]] {
    [<command>private </command> <replaceable>$.var1[, ...]</replaceable>;]

    [<command>static</command>] [<command>synchronized</command>] [<command>private</command>] [<replaceable>namespace_path</replaceable>::]<replaceable>method_name_identifier</replaceable>([$var1, $var2, ...]) {
         <replaceable>statements</replaceable>;
    }
    ...
}
</programlisting>

<para>Alternatively objects can be defined out of line as follows:</para>

<programlisting><command>class</command> [<replaceable>namespace_path::</replaceable>]<replaceable>class_identifier</replaceable> [<command>inherits</command> [<command>private</command>] [<replaceable>namespace_path::</replaceable>...]<replaceable>class_identifier</replaceable>[, ...]];

[<command>static</command>] [<command>synchronized</command>] [<command>private</command>] [<replaceable>namespace_path::</replaceable>]<replaceable>class_identifier</replaceable>::<replaceable>method_identifier</replaceable>([$var1, $var2, ...]) {
    <replaceable>statements</replaceable>;
}
</programlisting>

<note><para>Private members can only be declared in an in-line class definition (the first example above).</para></note>

<note><para>In a class hierarchy, base class constructor methods can be explicitly specified using a special syntax unique to subclass constructor methods.  Please see <link linkend='Class_Inheritance'>Class Inheritance</link> for more information.</para></note>

<note><para>It's possible to write purely object-oriented scripts/programs in Qore by defining an application class and using the -x or --exec-class command-line arguments to tell Qore to instantiate the class instead of doing normal top-level execution (in fact, the --exec-class arguments disallow the use of top-level statements entirely).  For more information, please see <link linkend="Command-Line_Parsing">Command-Line Parsing</link> and <link linkend="Parse_Directives">Parse Directives</link>.</para></note>

<sect2 id="Private_and_Synchronized_Methods">
<title>Private and Synchronized Methods</title>

<para>Methods declared with the <command>private</command> keyword can only be called by other member functions of the same class.  Any attempt to call these methods from outside the class will result in a run-time exception.</para>

<para>Methods declared with the <command>synchronized</command> keyword will only run in one thread at a time.</para>
</sect2>

<sect2 id="Static_Methods">
  <title>Static Methods</title>

  <para>Methods declared with the <command>static</command> keyword are like regular <link linkend="Subroutines">subroutines</link> that are attached to the class.  These methods are not associated with a particular object's state and therefore are not allowed to refer to object members or call non-static methods.  Also, no reference to the special <code>$self</code> variable is allowed within static methods.</para>

  <para>Static method calls take a special syntax as documented <link linkend="Static_Method_Calls">here</link>.
  </para>
</sect2>

<sect2 id="Constructors_Destructors_and_Other_Special_Methods">
<title>Constructors, Destructors, and Other Special Methods</title>

<para>All class methods are optional, but some methods have a special meaning.</para>

<table><title>Special Methods</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
  <thead>
  <row>
    <entry><para>Name</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para><code>constructor()</code></para></entry>
    <entry><para>Called when objects are created with the <link linkend='New_Object_Operator'><command>new</command></link> operator. User code may not explicitly call <code>constructor()</code> methods.  In a class tree, <code>constructor()</code> methods are called for base classes first in left-to-right, depth-first declaration order.</para></entry>
  </row>
  <row id="copy_methods">
    <entry><para><code>copy()</code></para></entry>
    <entry><para>When a user explicitly calls a copy method, Qore will generate a new object with references to the same members as the source object.  Then, if there are any base classes, base class <code>copy()</code> methods are called in the same order as the <code>constructor()</code> methods.  If a <code>copy()</code> method is defined, it will be run in the new object with a reference to the old object passed as the first argument.  Any other arguments passed to the <code>copy()</code> method are ignored.</para></entry>
  </row>
  <row id="destructor_methods">
    <entry><para><code>destructor()</code></para></entry>
    <entry><para>Called when objects go out of scope or are explicitly deleted. User code may not explicitly call <code>destructor()</code> methods.  In a class tree, <code>destructor()</code> methods are called for base classes in the opposite order in which the constructors are called</para></entry>
  </row>
  <row>
    <entry><para><code>memberGate()</code></para></entry>
    <entry><para>If this method is implemented in the class, it is called when read access is attempted to private member or members that do not exist in the current object.  In a class tree, <code>memberGate()</code> methods are not inherited.</para></entry>
  </row>
  <row>
    <entry><para><code>methodGate()</code></para></entry>
    <entry><para>If this method is implemented in the class, it is called when methods are called on the object that do not exist in the current object.  In a class tree, <code>methodGate()</code> methods are not inherited.</para></entry>
  </row>
  <row>
    <entry><para><code>memberNotification()</code></para></entry>
    <entry><para>If this method is implemented in the class, it is called when an object member is updated outside the class with the member name as the argument.  In a class tree, <code>memberNotification()</code> methods are not inherited.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="Object_Members">
<title>Object Members</title>

<para>When defining a class, members of the current object can be referred to with a special syntax as follows:</para>

<programlisting>$.<replaceable>member_name_identifier</replaceable></programlisting>

<para>Furthermore, the automatic variable <code>$self</code> is instantiated which represents the current object (similar to the <code>this</code> in C++ or Java). Therefore if you need to access hash members which are not valid Qore identifiers, then enclose the member name in double quotes after the dot operator as follows: </para>

<programlisting>$self."&amp;member-name"</programlisting>

<para>The automatic <code>$argv</code> local variable is instantiated as usual in all class methods where there are more arguments than variables declared in the method declaration.</para>

<para>If the class implements a <code>memberGate()</code> method, then whenever a non-existant member of the class is accessed (read), this method will be called with the name of the member as the sole argument, so that the class can create the member (or react in some other way) on demand.  This method is also called when methods of the same class try to access (read) non-existant methods, but is not called from within the <code>memberGate()</code> method itself.</para>

<para>To monitor writes to the object, the class can implement a <code>memberNotification()</code> method, which is called whenever an object member is modified from outside class member code.  In this case, the <code>memberNotification()</code> method is called with the name of the member that was updated so that an object can automatically react to changes to its members (writes to members) from outside the class.  This method is not called when members are updated from within class member code.</para>

</sect2>

<sect2 id="Object_Method_Calls">
<title>Object Method Calls</title>

<para>Within a class method definition, calls to methods in the same class hierarchy (of the current class or a base class) can be defined as follows:</para>

<programlisting>[<replaceable>namespace_path::</replaceable>]$.<replaceable>method_name([arg, ...])</replaceable></programlisting>

<para>For example:</para>

<programlisting># to call base class Mutex::lock()
Thread::Mutex::$.lock();
# to call lock() in the current (or lower base) class
$.lock();</programlisting>

<para>This syntax can only be used to call methods in the current class or in base classes.  This is because these calls are resolved at parse time, and only these classes are known and accessible at parse time.  To call a derived class method from a base class, you must use the <code>$self</code> variable to call the method, so that the call will be resolved at run-time, for example:</para>

<programlisting># this way, "member" can be resolved to a derived class method
$self.member();</programlisting>

<para>Calls to object methods can be made outside the class by using the above syntax as well.  All such calls are resolved at run-time, therefore if the call is made to a private function outside the defining class, then a run-time <code>METHOD-IS-PRIVATE</code> (if the method is private) or <code>BASE-CLASS-IS-PRIVATE</code> (if the method resolves to a privately-inherited base class) exception will be raised.</para>

</sect2>

<sect2 id="Class_Inheritance">
<title>Class Inheritance</title>

<para>Class inheritance is a powerful concept for easily extending and resuing object-oriented code, but is also subject to some limitations.  This section will explain how class inheritance works in Qore.</para>

<para>Classes inherit the methods of a parent class by using the <command>inherits</command> as specified above.  Multiple inheritance is supported; a single Qore class can inherit one or more classes.  When a class is inherited by another class, it is called a base class.  Private inheritance is speficied by including the keyword <command>private</command> before the inherited class name.  When a class is privately inherited, it means that the inherited class' public members are treated as private members in the context of accesses outside the class.</para>

<para>It is not legal to directly inherit the same class more than once; that is; it is not legal to list the same class more than once after the <command>inherits</command> keyword.  However, it is possible that a base class could appear more than once in the inheritance tree if that class is inherited separately by two or more classes in the tree.  In this case, the base class will actually only be inherited once in the subclass, even though it appears in the inheritance tree more than once.  This must be taken into consideration when designing class hierarchies, particularly if base class constructor parameters for that class are explicitly provided in a different way by the inheriting classes.</para>

<note><para>Class members only exist once for each object; therefore if classes in an inheritance tree have different uses for members with the same name, then a class hierarchy built of such classes will probably not function properly.</para></note>

<para>Subclasses can give explicit arguments to their base class constructors using a special syntax (only available to subclass constructors) similar to the C++ syntax for the same purpose as follows:</para>

<programlisting><replaceable>class_name</replaceable>::constructor([$var1[, ...]) : <replaceable>base_class_identifier</replaceable>(<replaceable>expression(s)</replaceable>)[, ...] {
    <replaceable>statements</replaceable>;
}
</programlisting>

<para>Here is a concrete example of giving arguments to an inherited base class:</para>
<programlisting><command>class</command> XmlRpcClient <command>inherits</command> Qore::HTTPClient {
    # calls the base class HTTPClient constructor, overrides the "protocols" key to "xmlrpc"
    constructor($opts) : Qore::HTTPClient($opts + ( "protocols" : "xmlrpc" ))
    ...
}
</programlisting>

<para>Because base class constructors are executed before subclass constructors, the only local variables in the constructor that can be referenced are those declared in the subclass constructor declaration (if any).  What this means is that if you declare local variables in the expressions giving base class arguments, these local variables are not accessible from the constructor body.</para>

<note><para>Base classes that give explicit arguments to their base class constructors can be overridden by subclasses by simply listing the base class in the base class constructor list and providing new arguments.</para></note>

</sect2>

  <sect2 id="Object_References">

    <title>Object References</title>

    <para>Like Java, in Qore, objects are treated differently from all other data types in that they are by default passed as arguments to functions and methods by passing a copy of a reference to the object.  That means that passing an object to a function that modifies the object will by default modify the original object and not a copy, however reassigning a local parameter variable assigned an object passed as an argument (that is only assigned to a local variable in the calling function) will not result in deleting the object, but rather decrement its scope reference count (note that if the object were created as a part of the call and reassigning the variable would cause the object's scope reference count to reach zero, then the object would be deleted in this case).</para>

    <para>Assigning an object to a variable has the same effect; a copy of a reference to the object is assigned to the variable.  This results in prolonging the object's <link linkend="Object_Scope">scope</link> (by owning a new copy of a reference to the object).</para>

    <para>An example:</para>

    <programlisting>sub test2($x) {
   # we can modify the original object like so:
   $x.member = "tree";

   # here we re-assign $x, but since the object is also assigned
   # to $o in the calling function, the object's scope is still
   # valid, and therefore nothing happens so the object
   $x = 1;
}

sub test() {
   my $o = new TestObject();

   # here we pass a copy of a reference to the object in $o
   test2($o);

   # this will print out "ok\n", because the object is still
   # valid and the member has been set by test2()
   if ($o.member == "tree")
      print("ok\n");
}
# when test() exits, the object in $o will go out of scope
# and be deleted</programlisting>

    <para>If, however, an object is passed by reference, then the local variable of the called function that accepts the object owns the scope reference of the calling functions's variable.</para>

    <para>An example:</para>

    <programlisting>sub test2($x) {
   # we can modify the original object like so:
   $x.member = "tree";

   # here we re-assign $x, and since we own the only scope 
   # reference to the object, the object will go out of 
   # scope here and be deleted
   $x = 1;
}

sub test() {
   my $o = new TestObject();

   # here we pass a reference to the object in $o
   test2(\$o);

   # the object has already been deleted in test2() and
   # therefore nothing will be printed out
   if ($o.member == "tree")
      print("ok\n");
}</programlisting>

  </sect2>

  <sect2 id="Object_Scope">

    <title>Object Scope</title>

    <para>Objects are automatically deleted when their scope-relevant reference count reaches zero (note that objects can be deleted manually at any time by using the <link linkend="delete_Statements"><command>delete</command></link> statement).  Whenever an object is deleted, the object's class' <link linkend="destructor_methods">destructor</link> method is run on the object.</para>

    <para>The following affect objects' scope:</para>

    <itemizedlist mark='bullet'>
      <listitem>
	<para>Variable Assignments</para>
	<para>An object's automatic scope is prolonged as long as the object is assigned to a local variable.</para>
      </listitem>

      <listitem>
	<para>Existence of a <link linkend="closures">Closure</link> Created Within the Object</para>
	<para>Any <link linkend="closures">closures</link> created from within the object encapsulate the object's state (along with any local variables referenced within the closure) and also prolong the object's automatic scope as long as the closure exists.</para>
      </listitem>

      <listitem>
	<para>Object Method Thread Launched Within the Object</para>
	<para>If a member function thread was launched from within the object using the <link linkend="Background_Operator"><command>background</command></link> operator, the object's automatic scope is prolonged to the life of the new thread.  Object threads started externally to the object (i.e. not directly from an expression with the <link linkend="Background_Operator"><command>background</command></link> operator within a method) will not prolong the scope of the object.</para>
	
	<para>If an object with running threads is explicitly deleted, and this case is not handled in the object's <code>destructor()</code> method (by ensuring that all other running threads terminate gracefully), exceptions will be thrown in other threads at any attempt to access the already-deleted object.</para>
	
	<para>For more information about threading, please see the following section <link linkend="Threading">Threading</link></para>

      </listitem>
    </itemizedlist>

    <note>
      <para>The fact that object threads and closures can prolong object scope means, for example, that objects assigned to local variables can exist for longer than the scope of their host variable if they have one or more methods running in other threads or if closures created from within the object still exist at the time the local variable goes out of scope.</para>
    </note>

  </sect2>

  <sect2 id="Copying_Objects">
    <title>Copying Objects</title>

    <para>To explicitly generate a copy of an object, the <code>copy()</code> constructor must be called.  This is a special method that exists implicitly for every class even if it is not explicitly defined (like <code>constructor()</code> and <code>destructor()</code> methods).  The implicit behavior of the <code>copy()</code> constructor is to create a new object with new members that are copies of the original members (except objects are once again referenced).  Then, if any <code>copy()</code> method exists, it will be executed in the new object, passing a reference to the old object as the first paramter.</para>

    <note>
      <para>In a class hierarchy <code>copy()</code> methods are called in the same order as <code>constructor()</code> methods.</para>
    </note>

    <note>
      <para>Not all built-in classes can be copied.  Classes not supporting copying will throw an exception when the <code>copy()</code> methods are called.  See the documentation for each class for more information.</para>
    </note>
    
  </sect2>
</sect1>

<sect1 id="Threading">
  <title>Threading</title>

  <para>A thread is an independent sequence of execution of Qore code within a Qore program or script.  Each thread has a thread ID or TID.</para>

  <para>The first thread of execution in a Qore program has TID 1.  TID 0 is always reserved for the special <link linkend="signal_handling">signal handler thread</link>.</para>

  <para>The Qore language is designed to be thread-safe and Qore programs should not crash the Qore executable due to threading errors.  Threading errors should only cause exceptions to be thrown or application errors to occur.</para>

  <para>Threading functionality in Qore is provided by the operating system's POSIX threads library.</para>

  <sect2 id="Creating_and_Terminating_Threads">
    <title>Creating and Terminating Threads</title>

    <para>New threads are created with the <link linkend="Background_Operator"><command>background</command></link> operator.  This operator executes the expression given as an argument in a new thread and returns the TID of the new thread to the calling thread.  This is most useful for calling user subroutines or object methods designed to run in a separate thread.</para>

    <para>To terminate a thread, the <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link> should be called, as calling the <link linkend="exit">exit() function</link> will terminate the entire UNIX process (and therefore all threads) immediately.</para>

  </sect2>
  <sect2 id="Threading_And_Variables">
    <title>Threading and Variables</title>
    <para>All global variables are shared in Qore programs, while local variables (declared with <command>my</command>) are generally local to each thread (and thus accessed without any mutual-exclusion locking), regardless of location.  This means that if a variable is declared with <command>my</command> at the top level, it will actually have global scope, but also each thread will have its own copy of the variable.  In effect, declaring a top-level local variable with <command>my</command> actually creates a global thread-local variable.</para>

    <para>The following code gives an example of declaring a global thread-local variable by using <command>my</command> at the top-level:</para>

    <programlisting>%require-our
sub t() {
    printf("x=%n\n", $x);
}
my $x = 2;
t();
background t();</programlisting>

    <para>This will print out:</para>

    <programlisting>x=2
x=&lt;NOTHING&gt;</programlisting>

    <para>Note that the second time the local variable is accessed in the background thread, it has no value.</para>

    <para>Due to the way Qore's local variables work, it is illegal to declare a top-level local variable after first block is parsed in the program; that is; if any call to <link linkend="parse">parse()</link> or <link linkend="Qore_Program_parse">Program::parse()</link> is made in an existing program (where a top-level block already exists), and an attempt to declare a new top-level local variable is made, then a <code>ILLEGAL-TOP-LEVEL-LOCAL-VARIABLE</code> parse exception will be raised.</para>

    <para>Access to global variables in qore is wrapped in mutual-exclusion locks to guarantee safe access to global variable data in a multithreaded context.  Local variables are thread-local and therefore not locked, except when referenced in a <link linkend="closures">closure expression</link>, in which case the local variable's scope is extended to that of the closure's, and all accesses to the bound local variable are made within mutual-exclusion locks as these variables may be used in multithreaded contexts.</para>

    <para>An alternative to global thread-local variables is offered by the <link linkend="save_thread_data">save_thread_data()</link> and <link linkend="get_thread_data">get_thread_data()</link> functions (documented in <link linkend="Threading_Functions">Threading Functions</link>).</para>
  </sect2>

  <sect2 id="Thread_Synchronization_and_Inter-Thread_Communication">
    <title>Thread Synchronization and Inter-Thread Communication</title>

    <para>The <command>synchronized</command> keyword can be used before subroutine or class method definitions in order to guarantee that the function or method call will only be executed in one thread at a time.  As in Java, this keyword can also be used safely with recursive functions and methods (internally a <link linkend="Gate_Class">Gate</link>-like object is used to guarantee thread-exclusivity and allow recursion).</para>

    <para>The following classes are useful when developing multi-threaded Qore programs:</para>

    <table>
      <title>Classes Useful With Threading</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Class</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Mutex_Class">Mutex</link></para></entry>
	    <entry><para>A mutual-exclusion thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate_Class">Gate</link></para></entry>
	    <entry><para>A recursive thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock_Class">RWLock</link></para></entry>
	    <entry><para>A read-write thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition_Class">Condition</link></para></entry>
	    <entry><para>Allows Qore programs to block until a certain condition becomes true.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter_Class">Counter</link></para></entry>
	    <entry><para>A blocking counter class.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
	    <entry><para>A thread-safe, blocking queue class (useful for message passing).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RMutex_Class">RMutex</link></para></entry>
	    <entry><para>DEPRECATED in favor of the <link linkend="Gate_Class">Gate</link> class: A recursive mutual-exclusion thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence_Class">Sequence</link></para></entry>
	    <entry><para>A simple, thread-atomic sequence object (increment-only).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoLock_Class">AutoLock</link></para></entry>
	    <entry><para>A helper class to automatically release Mutex locks when the AutoLock object is deleted.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoGate_Class">AutoGate</link></para></entry>
	    <entry><para>A helper class to automatically exit Gate locks when the AutoGate object is deleted.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoReadLock_Class">AutoReadLock</link></para></entry>
	    <entry><para>A helper class to automatically release read locks when the AutoReadLock object is deleted.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoWriteLock_Class">AutoWriteLock</link></para></entry>
	    <entry><para>A helper class to automatically release read locks when the AutoWriteLock object is deleted.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>The following functions assist writing safe and efficient multi-threaded Qore programs:</para>

    <table>
      <title>Thread Functions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Function</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="save_thread_data">save_thread_data()</link></para></entry>
	    <entry><para>Saves a thread-local value against a key.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="get_all_thread_data">get_all_thread_data()</link></para></entry>
	    <entry><para>Retrieves the entire thread-local hash.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="get_thread_data">get_thread_data()</link></para></entry>
	    <entry><para>Retrieves a thread-local value based on a key.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="delete_all_thread_data">delete_all_thread_data()</link></para></entry>
	    <entry><para>Deletes the entire thread-local data hash.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="delete_thread_data">delete_thread_data()</link></para></entry>
	    <entry><para>Delete the value of a key in the thread-local data hash.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="gettid">gettid()</link></para></entry>
	    <entry><para>Gets the thread's TID (thread identifier)</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="thread_list">thread_list()</link></para></entry>
	    <entry><para>Returns a list of TIDs of running threads</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="num_threads">num_threads()</link></para></entry>
	    <entry><para>Returns the number of running threads</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    
    </sect2>

    <sect2 id="Deadlocks">
      <title>Deadlocks</title>
  
      <para>Qore supports deadlock detection in complex locking scenarios and will throw a <code>THREAD-DEADLOCK</code> exception rather than allow an operation to be performed that would cause a deadlock.  Deadlock detection is implemented for internal locking (global variable and object access), synchronized methods and subroutinges, etc, as well as for all Qore threading classes.</para>

      <para>Qore can only detect deadlocks when a lock resource acquired by one thread is required by another who holds a lock that the first thread also needs.  Other errors such as forgetting to unlock a global lock and trying to acquire that lock in another thread cannot be differentiated from valid use of threading primitives and will result in a process that never terminates.  However, common threading errors such as trying to lock the same Mutex twice in the same thread without unlocking it between the two Mutex::lock() calls are caught in Qore and exceptions are thrown.  Additionally, locks are tracked as thread resources, so if a thread terminates while holding a lock, an exception will be thrown and the lock will be automatically released.</para>

    </sect2>
  </sect1>

<sect1 id="Exception_Handling">
  <title>Exception Handling</title>

  <para>Exceptions are errors that can only be handled using a <link linkend='try_and_catch_Statements'><command>try catch</command> block</link>.  Any exception that is thrown in a <command>try</command> block will immediately cause execution of that thread to begin with the first statement of the <command>catch</command> block, regardless of the position of the program pointer of the running thread, even if nested subroutines or object method calls have been made.</para>

  <para>Exceptions can be thrown by the Qore system for a number of reasons, see the documentation for each function and object method for details.</para>

  <para>Programmers can also throw exceptions explicitly by using the <link linkend="throw_Statements"><command>throw</command></link> and <link linkend="rethrow_Statements"><command>rethrow</command></link> statements.</para>

  <para>Information about the exception, including the context in which the exception occurred, is saved in the exception hash, which can be retrieved by using a parameter variable in the catch block (for more information about <command>try catch</command> blocks, see <link linkend='try_and_catch_Statements'>try and catch</link> statements).</para>

  <para>The exception hash contains the following members:</para>

  <table id="Exception_Hash">
    <title>Exception Hash Keys</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Name</para></entry>
	  <entry><para>Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>type</code></para></entry>
	  <entry><para>string</para></entry>
	  <entry><para>"System" or "User" depending on exception type</para></entry>
	</row>
	<row>
	  <entry><para><code>file</code></para></entry>
	  <entry><para>string</para></entry>
	  <entry><para>File name of file where exception occurred</para></entry>
	</row>
	<row>
	  <entry><para><code>line</code></para></entry>
	  <entry><para>integer</para></entry>
	  <entry><para>Line number where exception occurred</para></entry>
	</row>
	<row>
	  <entry><para><code>callStack</code></para></entry>
	  <entry><para>list of hashes</para></entry>
	  <entry><para>Backtrace information</para></entry>
	</row>
	<row>
	  <entry><para><code>err</code></para></entry>
	  <entry><para>any</para></entry>
	  <entry><para>This key is populated with the value of the first expression of the <command>throw</command> statement.  For system exceptions, this is a string giving the exception code.</para></entry>
	</row>
	<row>
	  <entry><para><code>desc</code></para></entry>
	  <entry><para>any</para></entry>
	  <entry><para>This key is populated with the value of the second expression of the <command>throw</command> statement (if a list was thrown).  For system exceptions, this is a string giving a text description of the error.</para></entry>
	</row>
	<row>
	  <entry><para><code>arg</code></para></entry>
	  <entry><para>any</para></entry>
	  <entry><para>This key is populated with the value of the third expression of the <command>throw</command> statement (if a list was thrown).  For system exceptions, this is populated for some exceptions where additional information is provided.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table id="Call_Stack_Description">
    <title>Call Stack Description</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Name</para></entry>
	  <entry><para>Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para><code>function</code></para></entry>
	  <entry><para>string</para></entry>
	  <entry><para>function name </para></entry>
	</row>
	<row>
	  <entry><para><code>line</code></para></entry>
	  <entry><para>integer</para></entry>
	  <entry><para>line number</para></entry>
	</row>
	<row>
	  <entry><para><code>file</code></para></entry>
	  <entry><para>string</para></entry>
	  <entry><para>file name</para></entry>
	</row>
	<row>
	  <entry><para><code>type</code></para></entry>
	  <entry><para>string</para></entry>
	  <entry><para>Exception Type (ET_*) constants; see <link linkend="Qore_Exception_Constants">Exception Constants</link> for values.</para></entry>
	</row>
	<row>
	  <entry><para><code>typecode</code></para></entry>
	  <entry><para>integer</para></entry>
	  <entry><para>Call Type (CT_*) constants; see <link linkend="Qore_Exception_Constants">Exception Constants</link> for values.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>System exceptions always throw 2 values, populating the &quot;err&quot; and &quot;desc&quot; keys of the exception hash, giving the exception string code and the exception description string, respectively, and occassionally, depending on the function, the &quot;arg&quot; key may be populated with supporting information.  User exceptions have no restrictions, any values given in the throw statement will be mapped to exception keys as per the table above.</para>

  <para>See the <link linkend="on_exit_Statements">on_exit statement</link>, <link linkend="on_success_Statements">on_success statement</link>, and <link linkend="on_error_Statements">on_error statement</link> for statements that allow for exception-safe and exception-dependent cleanup in Qore code.</para>

  <para>Classes that assist in exception-safe lock handling are the <link linkend="AutoLock_Class">AutoLock class</link>, the <link linkend="AutoGate_Class">AutoGate class</link>, the <link linkend="AutoReadLock_Class">AutoReadLock class</link>, and the <link linkend="AutoWriteLock_Class">AutoWriteLock class</link>.</para>

</sect1>

  <sect1 id="XML_Integration">
    <title>XML Integration</title>

    <para>XML functionality in Qore is provided by the <ulink url="http://www.xmlsoft.org">libxml2</ulink> library, which provides a powerful, stable, clean, and thread-safe basis for XML integration in Qore.</para>

    <para>XML provides an excellent way to describe hierarchical data, and thanks to libxml2, Qore can allow for easy serialization and deserialization between XML strings and Qore data structures.</para>

    <para>XML serialization (conversion from Qore data structures to XML strings) in Qore relies on the fact that Qore <link linkend="Hashes">hashes</link> retain insertion order, which means that conversion to and from Qore data structures and XML strings can be done without data loss and without reordering the XML elements.  In general, XML serialization is relatively straighforward, but there are a few issues to be aware of, particularly regarding element attributes and lists.  These issues are described in the following paragraphs.</para>

    <para>First, a straightforward example:</para>

    <programlisting>$h = ( "record" : ( "name" : ( "first" : "Fred", "last" : "Smith" ) ) );
printf("%s\n", makeFormattedXMLString($h));</programlisting>

    <para>This produces the following result</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;record&gt;
  &lt;name&gt;
    &lt;first&gt;Fred&lt;/first&gt;
    &lt;last&gt;Smith&lt;/last&gt;
  &lt;/name&gt;
&lt;/record&gt;</programlisting>

    <para>To set XML attributes, the Qore value must be a hash and the attributes are stored in another hash in the key <code>^attributes^</code>.  That is; the value of the <code>^attributes^</code> key must be a hash, and each member of this hash will represent an attribute-value pair.</para>

    <para>For example:</para>

    <programlisting>$h = ( "record" : ( "^attributes^" : ( "type" : "customer" ) , 
	            "name" : ( "first" : "Fred", "last" : "Smith" ) ) );
printf("%s\n", makeFormattedXMLString($h));</programlisting>

    <para>This produces the following results:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;record type="customer"&gt;
  &lt;name&gt;
    &lt;first&gt;Fred&lt;/first&gt;
    &lt;last&gt;Smith&lt;/last&gt;
  &lt;/name&gt;
&lt;/record&gt;</programlisting>

    <para>If instead we wanted to have text instead of child data under the "record" node, we must set the <code>^value^</code> key of the hash along with the <code>^attributes^</code> key as follows: </para>

    <programlisting>$h = ( "record" : ( "^attributes^" : ( "type" : "customer" ) , 
	            "^value^" : "NO-RECORD" ) );
printf("%s\n", makeFormattedXMLString($h));</programlisting>

    <para>Giving the following results:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;record type="customer"&gt;NO-RECORD&lt;/record&gt;</programlisting>

    <para>Arrays are serialized with repeating node names as follows:</para>

    <programlisting>$h = ( "record" : ( "part" : ( "part-02-05", "part-99-23", "part-34-28" ) ) );
printf("%s\n", makeFormattedXMLString($h));</programlisting>

    <para>Producing the following results:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;record type="customer"&gt;
  &lt;part&gt;part-02-05&lt;/part&gt;
  &lt;part&gt;part-99-23&lt;/part&gt;
  &lt;part&gt;part-34-28&lt;/part&gt;
&lt;/record&gt;
</programlisting>

   <para>It gets a little trickier when a key should repeated at the same level in an XML string, but other keys come between, for example, take the following XML string:</para>

   <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;para&gt;Keywords: &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;that&lt;/code&gt;, and &lt;code&gt;the_other&lt;/code&gt;.&lt;/para&gt;</programlisting>

   <para>It's not possible to use a list, because text is required in between.  As described earlier, the <code>^value^</code> hash key can be used to serialize text in an XML string.  In this case, we need to have several text nodes and several <code>code</code> nodes in a mixed-up order to give us the XML string we want.  Because qore hases have unique keys (we can't use the same key twice in the same hash), we resort to a key naming trick that allows us to virtually duplicate our key names and therefore arrive at the XML string we want.  We do this by appending a '^' character to the end of the key name and then some unique text.  When serializing hash keys, any text after (and including) the '^' character is ignored.  For the special key name <code>^value^</code>, we do not need to duplicate the final '^' character.  Instead we just add unique text to ensure that our hash can contain all the data we want and that it will be serialized in the right order to the XML string as follows:</para>

    <programlisting>
$h = ( "para" : ( "^value^" : "Keywords: ", 
                  "code" : "this", 
                  "^value^1" : ", ", 
                  "code^1" : "that", 
                  "^value^2" : ", and ", 
                  "code^2" : "the_other", 
                  "^value^3" : "." ) );
printf("%s\n", makeFormattedXMLString($h));</programlisting>

    <para>By ignoring the text after the '^' character, the above code will serialize to the XML string we want.  In general, by using this convention, we can properly serialize multiple out-of-order keys without losing data and still have unique names for our hash keys.</para>

   <para>Note than when deserializing XML strings to Qore data structures, the above rules are applied in reverse.  If any out-of-order duplicate keys are detected, Qore will automatically generate unique hash key names based on the above rules.</para>

   <para>Also note that CDATA text will be generated if a hash key starts with '^cdata'; such text will not be processed for escape code substitution.  When deserializing XML strings to qore data structures, CDATA text will be placed unmodified under such a hash key as well.</para>

    <table>
      <title>Functions For XML Serialization and Deserialization</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Function Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLFragment">makeFormattedXMLFragment()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string with formatting without an XML header.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLString">makeFormattedXMLString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string with formatting and an XML header.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLFragment">makeXMLFragment()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string without an XML header or formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLString">makeXMLString()</link></para></entry>
	    <entry><para>Serializes a hash into a complete XML string with an XML header and without formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLAsData">parseXMLAsData()</link></para></entry>
	    <entry><para>parses an XML string as data (duplicate, out-of-order XML elements are collapsed into lists) and returns a Qore hash structure.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLAsDataWithSchema">parseXMLAsDataWithSchema()</link></para></entry>
	    <entry><para>parses an XML string as data (duplicate, out-of-order XML elements are collapsed into lists) and validates against an XSD schema string and returns a Qore hash structure.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXML">parseXML()</link></para></entry>
	    <entry><para>parses an XML string (XML element order is preserved by appending numeric suffixes to Qore hash key names when necessary) and returns a Qore hash structure.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLWithSchema">parseXMLWithSchema()</link></para></entry>
	    <entry><para>parses an XML string (XML element order is preserved by appending numeric suffixes to Qore hash key names when necessary) and validates against an XSD schema string and returns a Qore hash structure.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>XML-RPC is a lightweight but powerful XML over HTTP web service protocol.  Qore includes builtin support for this protocol.  You can find more information about XML-RPC, including specifications and examples at <ulink url="http://xmlrpc.org">http://xmlrpc.org</ulink>.</para>
    
    <table>
      <title>Functions Providing XML-RPC Functionality</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Function Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLRPCCallString">makeFormattedXMLRPCCallString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC call with formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLRPCCallStringArgs">makeFormattedXMLRPCCallStringArgs()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC call with formatting, taking a single list argument for the argument list.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLRPCFaultResponseString">makeFormattedXMLRPCFaultResponseString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC fault response with formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLRPCResponseString">makeFormattedXMLRPCResponseString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC response with formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeFormattedXMLRPCValueString">makeFormattedXMLRPCValueString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string in XML-RPC Value format with formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC call without formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLRPCCallStringArgs">makeXMLRPCCallStringArgs()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC call without formatting, taking a single list argument for the argument list.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLRPCFaultResponseString">makeXMLRPCFaultResponseString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC fault response without formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLRPCResponseString">makeXMLRPCResponseString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string formatted for an XML-RPC response without formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="makeXMLRPCValueString">makeXMLRPCValueString()</link></para></entry>
	    <entry><para>Serializes a hash into an XML string in XML-RPC Value format without formatting.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLRPCCall">parseXMLRPCCall()</link></para></entry>
	    <entry><para>deserializies an XML-RPC call string, returning a Qore hash respresenting the call information.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link></para></entry>
	    <entry><para>deserializies an XML-RPC response string, returning a Qore hash respresenting the response information.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="parseXMLRPCValue">parseXMLRPCValue()</link></para></entry>
	    <entry><para>deserializies an XML-RPC value tree, returning a Qore hash respresenting the information.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="signal_handling">
    <title>Signal Handling</title>

    <para>Qore implements safe signal handling.  Signals do not interrupt Qore threads, rather Qore uses a special signal handling thread with TID 0, dedicated to handling signals.  The signal handling thread uses very few resources; it stays blocked (using no processor time and very little memory) until a signal with a Qore signal handler is raised; it then executes the handler and resumes waiting for signals.</para>

    <para>Because the signal Qore's signal handling thread is not a normal thread, it does not affect <link linkend="num_threads">num_threads()</link> and does not appear in the list returned by <link linkend="thread_list">thread_list()</link>.</para>

    <para>Internally, Qore masks (blocks) all signals in every thread except the signal handling thread.  In the signal handling thread, all signals are unmasked, except those with Qore-language handlers, then an internal call to <code>sigwait()</code> is made to receive and process signals raised one at a time.</para>

    <para>Qore-language signal handlers are installed by passing a <link linkend="Signal_Constants">signal constant</link> and a <link linkend="closures">closure</link> or <link linkend="call_references">call reference</link> to the code to execute when the signal is raised to the <link linkend="set_signal_handler">set_signal_handler()</link> function.  Signal handlers are removed by passing a <link linkend="Signal_Constants">signal constant</link> to the <link linkend="remove_signal_handler">remove_signal_handler()</link> function.</para>

    <para>When a signal has been raised and the signal handler is called, the signal number is passed as the sole argument to the signal handler code.</para>

    <table>
      <title>Signal Handling Functions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Function Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="set_signal_handler">set_signal_handler()</link></para></entry>
	    <entry><para>Sets up a Qore signal handler using a signal number and a call reference.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="remove_signal_handler">remove_signal_handler()</link></para></entry>
	    <entry><para>Removes a Qore signal handler using a signal number.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>See <link linkend="Signal_Constants">Signal Constants</link> for a list of signal constants and <link linkend="Special_Signal_Constants">Signal Mapping Hash Constants</link> for two hash constants that can be used to map signal names to numbers and vice-versa.  Note that signal constants are system-dependent; not all signals will be available in all systems; in case of doubt, see your system documentation for information on which signals are available.</para>

    <para>The above functions are atomic, meaning that when they return to the caller, the signal handling thread has already acknowledged the changes.</para>

    <para>It is not possible to set signal masks per thread; all signals are delivered to the signal handling thread.  Signals not handled with a Qore signal handler are handled with their default action.  It is not possible to catch <code>SIGPIPE</code>.  <code>SIGPIPE</code> is always ignored in Qore.</para>

    <para>Some issues to be aware of in signal handlers:</para>
    <itemizedlist mark='bullet'>
      <listitem>
	<para>Thread-local storage is not persistent in signal handlers; it is deleted after every signal handler is run.</para>
      </listitem>
      <listitem>
	<para>A signal handler that does not terminate will block the execution of further signal handlers and will block signal handling changes (such as updating the signal mask), resulting in a Qore process that must be killed manually.  Because all Qore signal handling code is executed serially in a single thread, Qore signal handlers should execute and return quickly to give time to execute other handlers.</para>
      </listitem>
      <listitem>
	<para>Signal handlers may install or remove signal handlers using <link linkend="set_signal_handler">set_signal_handler()</link> or  <link linkend="remove_signal_handler">remove_signal_handler()</link>, however in this case, changes to signal handling are made after the signal handler returns.</para>
      </listitem>
      <listitem>
	<para>Signal handlers cannot call <link linkend="fork">fork()</link>; any attempt to call <link linkend="fork">fork()</link> in a signal handler will result in an an exception.</para>
      </listitem>
      <listitem>
	<para><link linkend="fork">fork()</link> (called externally to a signal handler) is handled as follows: the signal handling thread is terminated, <code>fork()</code> is executed, all signals are masked in the primary thread in the new process, then the signal handling thread is resumed in both processes.  No signals can be received or handled while the signal handling thread is terminated. After the <code>fork()</code>, the new process will have exactly the same signal handlers and signal masks as the parent process.</para>
      </listitem>
      <listitem>
	<para>Unhandled exceptions in signal handlers will simply be displayed on stderr as an unhandled exception and will have no other effect on Qore or Qore code (in particular, unhandled exceptions will not cause the signal handling thread to terminate).</para>
      </listitem>
      <listitem>
	<para>If a signal handler executes the <link linkend="thread_exit_Statements">thread_exit</link> statement, execution of the signal handler will terminate immediately, but the signal handling thread will not be stopped.  Execution of further signal handlers (including that for the same signal being handled when  <link linkend="thread_exit_Statements">thread_exit</link> is executed) will not be affected.</para>
      </listitem>
    </itemizedlist>
   </sect1>

  <sect1 id="event_handling">
    <title>Event Handling</title>

    <para>Qore supports a simple event-handling mechanism to provide
notification and details of socket and network events in higher-level classes.
Classes currently supporting events are the <link linkend="Socket_Class">Socket</link>,
<link linkend="HTTPClient_Class">HTTPClient</link>, and <link linkend="FtpClient_Class">FtpClient</link> classes.</para>

    <para>See <link linkend="event_constants">Event Constants</link> for a list
of all event constants; details about each event are documented in the
following sections.</para>

    <para>Event information is placed on the event queue (which must be a <link linkend="Queue_Class">Queue</link> object) in the form of a <link linkend="Hashes">hash</link>.  Each event has at least the following keys:</para>

    <table>
      <title>Event Hash Common Keys</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>event</code></para></entry>
	    <entry><para>This key holds the <link linkend="event_constants">event code</link>; see information for individual events in the following sections</para></entry>
	  </row>
	  <row>
	    <entry><para><code>source</code></para></entry>
	    <entry><para>This key holds the <link linkend="event_source_constants">event source code</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>id</code></para></entry>
	    <entry><para>The value of this key is a unique integer that can be used to uniquely identify the object generating the event.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="event_packet_read">
      <title>EVENT_PACKET_READ</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_PACKET_READ</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a network packet is received.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_PACKET_READ</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_PACKET_READ</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>read</code></para></entry>
		    <entry><para>The number of bytes read in the packet.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_read</code></para></entry>
		    <entry><para>The total number of bytes read in the read loop.</para></entry>
		  </row>
		  <row>
		    <entry><para>[<code>total_to_read</code>]</para></entry>
		    <entry><para>The total number of bytes to read in the read loop (this key is only present if the total number of bytes to read is known).</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_packet_sent">
      <title>EVENT_PACKET_SENT</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_PACKET_SENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a network packet is sent.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_PACKET_SENT</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_PACKET_SENT</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>socket</code></para></entry>
		    <entry><para>The file descriptor number of the socket.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>sent</code></para></entry>
		    <entry><para>The number of bytes sent in the packet.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_sent</code></para></entry>
		    <entry><para>The total number of bytes sent in the send loop.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_to_send</code></para></entry>
		    <entry><para>The total number of bytes to send in the send loop.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_content_length">
      <title>EVENT_HTTP_CONTENT_LENGTH</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_CONTENT_LENGTH</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after an HTTP header is received containing a content length header line, but before the message body is received.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_CONTENT_LENGTH</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_CONTENT_LENGTH</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>len</code></para></entry>
		    <entry><para>The number of bytes given for the content length.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_chunked_start">
      <title>EVENT_HTTP_CHUNKED_START</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_CHUNKED_START</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised after receiving an HTTP header with <code>Transfer-Encoding</code> set to <code>chunked</code> and before the chunked data is read.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_CHUNKED_START</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_CHUNKED_START</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_chunked_end">
      <title>EVENT_HTTP_CHUNKED_END</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_CHUNKED_END</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised after all chunked data is read from the socket.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_CHUNKED_END</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_CHUNKED_END</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_redirect">
      <title>EVENT_HTTP_REDIRECT</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_REDIRECT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised after a redirect response is received from an HTTP server.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_REDIRECT</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_REDIRECT</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>location</code></para></entry>
		    <entry><para>The redirect location given by the HTTP server</para></entry>
		  </row>
		  <row>
		    <entry><para>[<code>status_message</code>]</para></entry>
		    <entry><para>Any status message sent by the HTTP server; if no message was sent, then this key will not be present in the event hash.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_channel_closed">
      <title>EVENT_CHANNEL_CLOSED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_CHANNEL_CLOSED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after the socket is closed.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_CHANNEL_CLOSED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_CHANNEL_CLOSED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_deleted">
      <title>EVENT_DELETED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_DELETED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised when the socket object is deleted.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_DELETED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_DELETED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_ftp_send_message">
      <title>EVENT_FTP_SEND_MESSAGE</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_FTP_SEND_MESSAGE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before a message is sent on the FTP control channel.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_FTP_SEND_MESSAGE</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_FTP_SEND_MESSAGE</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FTPCLIENT</code>, indicating the <link linkend="FtpClient_Class">FtpClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>command</code></para></entry>
		    <entry><para>A string giving the FTP command sent (ex: <code>RETR</code>).</para></entry>
		  </row>
		  <row>
		    <entry><para>[<code>arg</code>]</para></entry>
		    <entry><para>The argument to the command; if no argument is sent, then this key will not be present.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_ftp_message_received">
      <title>EVENT_FTP_MESSAGE_RECEIVED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_FTP_MESSAGE_RECEIVED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a message is received on the FTP control channel.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_FTP_MESSAGE_RECEIVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_FTP_MESSAGE_RECEIVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FTPCLIENT</code>, indicating the <link linkend="FtpClient_Class">FtpClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>command</code></para></entry>
		    <entry><para>A string giving the FTP command sent (ex: <code>RETR</code>).</para></entry>
		  </row>
		  <row>
		    <entry><para>[<code>arg</code>]</para></entry>
		    <entry><para>The argument to the command; if no argument is sent, then this key will not be present.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_hostname_lookup">
      <title>EVENT_HOSTNAME_LOOKUP</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HOSTNAME_LOOKUP</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before a hostname lookup is made.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_HOSTNAME_LOOKUP</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HOSTNAME_LOOKUP</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>name</code></para></entry>
		    <entry><para>A string giving the name to be looked up.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_hostname_resolved">
      <title>EVENT_HOSTNAME_RESOLVED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HOSTNAME_RESOLVED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a successful hostname resolution.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_HOSTNAME_RESOLVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HOSTNAME_RESOLVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>address</code></para></entry>
		    <entry><para>A string giving the network address the name was resolved to.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_send_message">
      <title>EVENT_HTTP_SEND_MESSAGE</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_SEND_MESSAGE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code> or <code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before an HTTP message is sent.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_SEND_MESSAGE</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_SEND_MESSAGE</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class, or <code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>message</code></para></entry>
		    <entry><para>The first string in the HTTP message (ex: <code>GET / HTTP/1.1</code>).</para></entry>
		  </row>
		  <row>
		    <entry><para><code>headers</code></para></entry>
		    <entry><para>A hash of all headers to send in the message.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_message_received">
      <title>EVENT_HTTP_MESSAGE_RECEIVED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_MESSAGE_RECEIVED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code> or <code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after an HTTP message is received.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_MESSAGE_RECEIVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_MESSAGE_RECEIVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class, or <code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>headers</code></para></entry>
		    <entry><para>A hash of all headers received in the message, plus the following headers giving additional information about the message: <code>http_version</code> giving the HTTP protocol version in the message, <code>status_code</code> giving the HTTP status code if the message is a response, <code>status_message</code> giving any HTTP status message if the message is a response, <code>method</code> giving the HTTP method if the message is a request, <code>path</code> providing the path in request messages.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_footers_received">
      <title>EVENT_HTTP_FOOTERS_RECEIVED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_FOOTERS_RECEIVED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after HTTP footers are received after receiving chunked data.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_FOOTERS_RECEIVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_FOOTERS_RECEIVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>headers</code></para></entry>
		    <entry><para>A hash of all footers received in the message.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_chunked_data_received">
      <title>EVENT_HTTP_CHUNKED_DATA_RECEIVED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_CHUNKED_DATA_RECEIVED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after chunked data is received.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_CHUNKED_DATA_RECEIVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_CHUNKED_DATA_RECEIVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>read</code></para></entry>
		    <entry><para>An integer giving the number of bytes read in the chunk.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_read</code></para></entry>
		    <entry><para>An integer giving the total number of bytes of chunked data read in the current message.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_http_chunk_size">
      <title>EVENT_HTTP_CHUNK_SIZE</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_HTTP_CHUNK_SIZE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_HTTPCLIENT</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after chunk information is received providing the size of the next chunk.  The event hash contains the following keys:</para>

            <table>
	      <title><code>EVENT_HTTP_CHUNK_SIZE_RECEIVED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_HTTP_CHUNK_SIZE_RECEIVED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_HTTPCLIENT</code>, indicating the <link linkend="HTTPClient_Class">HTTPClient</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>size</code></para></entry>
		    <entry><para>An integer giving the number of bytes in the next chunk.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_read</code></para></entry>
		    <entry><para>An integer giving the total number of bytes of chunked data read in the current message.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_connecting">
      <title>EVENT_CONNECTING</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_CONNECTING</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before a socket connection is attempted.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_CONNECTING</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_CONNECTING</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>type</code></para></entry>
		    <entry><para>The type of address for the socket; one of the <link linkend="network_address_constants">Network Address Constants</link>.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>target</code></para></entry>
		    <entry><para>The target address for the connection.</para></entry>
		  </row>
		  <row>
		    <entry><para>[<code>port</code>]</para></entry>
		    <entry><para>The target port for the connection; if not applicable for the address family then this hash key is not included.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_connected">
      <title>EVENT_CONNECTED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_CONNECTED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a socket connection is established.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_CONNECTED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_CONNECTED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_start_ssl">
      <title>EVENT_START_SSL</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_START_SSL</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before SSL negotiation is attempted.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_START_SSL</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_START_SSL</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_ssl_established">
      <title>EVENT_SSL_ESTABLISHED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_SSL_ESTABLISHED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_SOCKET</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after SSL negotiation has been successfully established.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_SSL_ESTABLISHED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_SSL_ESTABLISHED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_SOCKET</code>, indicating the <link linkend="Socket_Class">Socket</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the socket object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>cipher</code></para></entry>
		    <entry><para>A string giving the name of the cipher algorithm used for the connection.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>cipher_version</code></para></entry>
		    <entry><para>A string giving the version of the cipher algorithm used for the connection.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_open_file">
      <title>EVENT_OPEN_FILE</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_OPEN_FILE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FILE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately before a file is opened.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_OPEN_FILE</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_OPEN_FILE</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FILE</code>, indicating the <link linkend="File_Class">File</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the file object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>filename</code></para></entry>
		    <entry><para>The file's name.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>flags</code></para></entry>
		    <entry><para>The flags used to open the file.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>mode</code></para></entry>
		    <entry><para>The mode to open the file with.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>encoding</code></para></entry>
		    <entry><para>The character encoding given used for reading from or writing to the file.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_file_opened">
      <title>EVENT_FILE_OPENED</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_FILE_OPENED</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FILE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after a file has been successfully opened.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_FILE_OPENED</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_FILE_OPENED</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FILE</code>, indicating the <link linkend="File_Class">File</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the file object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>filename</code></para></entry>
		    <entry><para>The file's name.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>flags</code></para></entry>
		    <entry><para>The flags used to open the file.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>mode</code></para></entry>
		    <entry><para>The mode to open the file with.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>encoding</code></para></entry>
		    <entry><para>The character encoding given used for reading from or writing to the file.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_data_read">
      <title>EVENT_DATA_READ</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_DATA_READ</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FILE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after data is read from a file.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_DATA_READ</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_DATA_READ</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FILE</code>, indicating the <link linkend="File_Class">File</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the file object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>read</code></para></entry>
		    <entry><para>The number of bytes read from the file.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_read</code></para></entry>
		    <entry><para>The total number of bytes read in the read loop.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_to_read</code></para></entry>
		    <entry><para>The total number of bytes to read in the read loop.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="event_data_written">
      <title>EVENT_DATA_WRITTEN</title>
      <variablelist>
        <varlistentry>
          <term>Event</term>
          <listitem><para><code>EVENT_DATA_WRITTEN</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Source</term>
          <listitem><para><code>SOURCE_FILE</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>This event is raised immediately after data is written from a file.  The event hash contains the following keys:</para>
            <table>
	      <title><code>EVENT_DATA_WRITTEN</code> Event Hash</title>
	      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
		<thead>
		  <row>
		    <entry><para>Key</para></entry>
		    <entry><para>Value</para></entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><para><code>event</code></para></entry>
		    <entry><para><code>EVENT_DATA_WRITTEN</code></para></entry>
		  </row>
		  <row>
		    <entry><para><code>source</code></para></entry>
		    <entry><para><code>SOURCE_FILE</code>, indicating the <link linkend="File_Class">File</link> class</para></entry>
		  </row>
		  <row>
		    <entry><para><code>id</code></para></entry>
		    <entry><para>A unique integer ID for the file object.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>written</code></para></entry>
		    <entry><para>The number of bytes written to the file.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_written</code></para></entry>
		    <entry><para>The total number of bytes written in the write loop.</para></entry>
		  </row>
		  <row>
		    <entry><para><code>total_to_write</code></para></entry>
		    <entry><para>The total number of bytes to write in the write loop.</para></entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

  </sect1>
</chapter>
