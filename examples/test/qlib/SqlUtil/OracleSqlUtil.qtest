#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/SqlUtil.qm
%requires ../../../../qlib/BulkSqlUtil.qm
%requires ../../../../qlib/OracleSqlUtil.qm
%requires ../../../../qlib/Schema.qm

%requires ./SqlUtilTestBase.qm

%try-module oracle
%define NoOracle
%endtry

%exec-class OracleTest

class OracleTestSchema inherits AbstractSchema {
    public {
        const SchemaName = "OracleTestSchema";
        const SchemaVersion = "1.0";
    }

    private {
        const GenericOptions = (
            "replace": True,
            );

        const IndexOptions = {};

        const ColumnOptions = {};

        const T_OracleTest = (
            "columns": (
                "id": c_number(14, True),
            ),
            "primary_key": ("name": "pk_oracle_test", "columns": ("id")),
            );

        const Tables = (
            "oracle_test": T_OracleTest,
            );
    }

    constructor(AbstractDatasource ds, *string dts, *string its) :  AbstractSchema(ds, dts, its) {
    }

    private string getNameImpl() {
        return SchemaName;
    }

    private string getVersionImpl() {
        return SchemaVersion;
    }

    private *hash getTablesImpl() {
        hash tables = Tables;
        # add custom columns to oracle_test
        foreach hash h in (OracleTest::CustomColumns.pairIterator()) {
            hash ch = (
                "native_type": h.key,
                "notnull": True,
                );
            if (h.value.typeCode() == NT_HASH)
                ch += (h.value - ("value", "bind"));
            tables.oracle_test.columns{OracleTest::getColumnName(h.key)} = ch;
        }
        return tables;
    }

    private *hash getIndexOptionsImpl() {
        return IndexOptions;
    }

    private *hash getGenericOptionsImpl() {
        return GenericOptions;
    }

    private *hash getColumnOptionsImpl() {
        return ColumnOptions;
    }

    log(string fmt) {
        delete argv;
    }

    logpf(string fmt) {
        delete argv;
    }

    logProgress(string fmt) {
        delete argv;
    }
}

class OracleTest inherits SqlTestBase {
    public {
        const CustomColumns = (
            "varchar": (
                "value": "hello",
                "size": "20",
            ),
            "char": (
                "value": "hello",
                "size": "20",
            ),
            "numeric": (
                "size": 15,
                "scale": 2,
                "value": 400.95n,
                ),
            "date": 2016-01-11,
            "abstime": 2016-01-11T09:26:14,
            "reltime": 5M + 71D + 19h + 245m + 51s,
            "interval": 6M + 3D + 2h + 45m + 15s,
            "time": 09:26:52,
            "time with time zone": 09:27:03-06,
            "timestamp": 2016-01-11T09:27:59,
            "timestamp with time zone": 2016-01-11T09:28:12.384629+03,
            "bytea": <bead>,
            #"bit": ,
            #"varbit": ,
            );
    }

    constructor() : SqlTestBase("OracleTest", "1.0", \ARGV, MyOpts) {
        Datasource ds;
        try {
            ds = getDatasource();
        }
        catch (hash ex) {
            # skip tests if we can't create the datasource
        }

        if (ds) {
            foreach hash h in (CustomColumns.pairIterator()) {
                any val = h.value.typeCode() == NT_HASH ? h.value.value : h.value;
                row{OracleTest::getColumnName(h.key)} = val;
            }
            insert_data = (("id": 1,) + row, ("id": 2,) + row,);
            upsert_data = (("id": 2,) + row, ("id": 3,) + row,);

            # create the test schema
            schema = new OracleTestSchema(ds);

            schema.align(False, m_options.verbose);

            # get table object
            table = (new Table(schema.getDatasource(), "oracle_test")).getTable();
        }

        set_return_value(main());
    }

    private usageIntern() {
        TestReporter::usageIntern(OptionColumn);
        printOption("-c,--conn=ARG", "set DB connection argument (ex: \"oracle:user/pass@db\")", OptionColumn);
    }

    Datasource getDatasource() {
        if (!m_options.connstr)
            m_options.connstr = ENV.QORE_DB_CONNSTR_ORACLE ?? "oracle:omquser/omquser@omquser";
        Datasource ds(m_options.connstr);
        if (ds.getDriverName() != "pgsql")
            throw "ORACLE-ERROR", sprintf("cannot execute the oracle tests on a connection using driver %y", ds.getDriverName());
        ds.open();
        return ds;
    }
}
