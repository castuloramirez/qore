# -*- mode: qore; indent-tabs-mode: nil -*-
# @file RestClient.qm Qore user module for calling REST services

/*  RestClient.qm Copyright (C) 2013 - 2014 Qore Technologies, sro

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.10 or better
%requires qore >= 0.8.10

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%requires Mime >= 1.3

%try-module yaml
%define NoYaml
%endtry

%try-module xml
%define NoXml
%endtry

%try-module json
%define NoJson
%endtry

module RestClient {
    version = "1.2";
    desc = "user module for calling REST services";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";

    init = sub () { 
        # if no modules for data de/serialization can be loaded, then throw an exception
        if (!RestClient::Accept)
            throw "RESTCLIENT-ERROR", sprintf("none of the 'yaml', 'xml', or 'json' modules can be loaded; at least one of which is required to support data de/serialization for REST requests and responses");
    };
}

/*  Version History - see below in docs
*/

/** @mainpage RestClient Module

    @tableofcontents

    @section restclientintro RestClient Introduction

    The %RestClient module provides an API for calling REST services.

    To use this module, use \c "%requires RestClient" in your code.
    
    All the public symbols in the module are defined in the RestClient namespace.

    The main classes are:
    - @ref RestClient::RestClient "RestClient": this class provides the REST client API

    The @ref RestClient::RestClient "RestClient" class can support three methods of data serialization:
    - \c "json": using the \c "json" module; messages bodies are encoded using JSON
    - \c "yaml": using the \c "yaml" module; message bodies are encoded using YAML
    - \c "xml": using the \c "xml" module; message bodies are encoded using XML-RPC value encoding

    If none of the above modules can be loaded by the RestClient module, then the RestClient module will fail to initialize.

    For maximum compatibility with other REST solutions, the \c "json" encoding method is the default when no other encoding method
    is chosen and the \c "json" module is available.

    @par Example:
    @code
#!/usr/bin/env qore

%requires RestClient

my RestClient $rest(("url": "http://localhost:8001/rest"));
my hash $ans = $rest.get("orders/1?option=full");
printf("%N\n", ans.body);
    @endcode

    See example file \c "rest" in the examples directory for a more detailed example using this module

    @section restclientrelnotes Release Notes

    @subsection restclientv1_2 RestClient v1.2
    - allow the Content-Type header to be overriden in REST requests
    - added \a hdr args to REST methods
    - fixed a bug using the module when the yaml module is not available

    @subsection restclientv1_1 RestClient v1.1
    - updated to use encode_url() before sending HTTP messages
    - add charset=xxx to \c "Content-Type" header in requests
    - fixed \c "Accept" header in requests

    @subsection restclientv1_0 RestClient v1.0
    - the initial version of the %RestClient module
*/

#! the RestClient namespace contains all the objects in the RestClient module
public namespace RestClient {
    #! this class provides the REST client API
    public class RestClient inherits Qore::HTTPClient {
        public {
            #! Data serialization support mapping codes to MIME types and de/serialization functions
            const DataSerializationSupport = (
%ifndef NoJson
                "json": (
                    "ct": MimeTypeJson,
                    "out": \makeJSONString(),
                ),
%endif
%ifndef NoYaml
                "yaml": (
                    "ct": MimeTypeYaml,
                    "out": \makeYAML(),
                ),
%endif
%ifndef NoXml
                "xml": (
                    "ct": MimeTypeXml,
                    "out": \makeXMLRPCValueString(),
                ),
%endif
                );


%ifndef NoYaml
            const DeserializeYaml = (
                    "code": "yaml",
                    "in": \parseYAML(),
                );
%endif
%ifndef NoXml
            const DeserializeXmlRpc = (
                    "code": "xml",
                    "in": \parseXMLRPCValue(),
                );
%endif

            #! Data deserialization support MIME types to codes and de/serialization functions
            const DataDeserializationSupport = (
%ifndef NoJson
                MimeTypeJson: (
                    "code": "json",
                    "in": \parseJSON(),
                ),
%endif
%ifndef NoYaml
                MimeTypeYamlRpc: DeserializeYaml,
                MimeTypeYaml: DeserializeYaml,
%endif
%ifndef NoXml
                MimeTypeXml: DeserializeXmlRpc,
                MimeTypeXmlApp: DeserializeXmlRpc,
%endif
                );

            #! Accept header list
            const AcceptList = (
%ifndef NoYaml
                MimeTypeYaml, MimeTypeYamlRpc,
%endif
%ifndef NoXml
                MimeTypeXml, MimeTypeXmlApp,
%endif
%ifndef NoJson
                MimeTypeJsonRpc,
%endif
                );

            #! Accept header value
            const Accept = AcceptList.join(",");

            #! RestClient Version
            const Version = "1.2";

            #! RestClient Version String
            const VersionString = sprintf("Qore-RestClient/%s", RestClient::Version);

            #! default HTTP headers (Content-Type is added before sending)
            const DefaultHeaders = (
                "Accept": Accept,
                "User-Agent": RestClient::VersionString,
                );

            #! Data serialization options; this is a hash to simulate a set of strings
            /** Data serialization options are as follows:
                - \c "auto": prefers in this order: json, yaml, xml-rpc
                - \c "xml": use only XML-RPC serialization
                - \c "json": use only JSON serialization
                - \c "yaml": use only YAML serialization
             */
            const DataSerializationOptions = (
                "auto": True,
                "xml": True,
                "json": True,
                "yaml": True,
                );

            #! Send content encoding options
            /** Send content encoding options are as follows:
                - \c "bzip": use bzip2 compression
                - \c "gzip": use gzip compression
                - \c "deflate": use deflate compression
             */
            const EncodingSupport = (
                "deflate": (
                    "ce": "deflate",
                    "func": \compress(),
                    ),
                "bzip2": (
                    "ce": "bzip2",
                    "func": \bzip2(),
                    ),
                "gzip": (
                    "ce": "gzip",
                    "func": \gzip(),
                    ),
                );            
        }
        
        private {
            # headers to send with every request
            hash $.headers;
            # data serialization code
            string $.ds;
            # serialization info hash
            hash $.sih;
            # send content encoding hash
            *hash $.seh;
        }

        #! calls the base class HTTPClient constructor and optionally connects to the REST server
        /** @par Example:
            @code
my RestClient $rest(("url": "http://localhost:8001/rest"));
            @endcode

            @param opts valid options are:
            - \c url: A string giving the URL to connect to
            - \c data: a @ref DataSerializationOptions "data serialization option"; if not present defaults to \c "auto"
            - \c send_encoding: a @ref EncodingSupport "send data encoding option"; if not present defaults to no content-encoding on sent message bodies
            - \c default_port: The default port number to connect to if none is given in the URL
            - \c http_version: Either '1.0' or '1.1' for the claimed HTTP protocol version compliancy in outgoing message headers
            - \c default_path: The default path to use for new connections if a path is not otherwise specified in the connection URL
            - \c max_redirects: The maximum number of redirects before throwing an exception (the default is 5)
            - \c proxy: The proxy URL for connecting through a proxy
            - \c timeout: The timeout value in milliseconds (also can be a relative date-time value for clarity, ex: \c 30s)
            - \c connect_timeout: The timeout value in milliseconds for establishing a new socket connection (also can be a relative date-time value for clarity, ex: \c 20s)
            @param do_not_connect if \c False (the default), then a connection will be immediately established to the remote server

            @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc

            @since %RestClient 1.2 the \a send_encoding option was added
        */
        constructor(*hash $opts, *softbool $do_not_connect) : HTTPClient($opts) {
            $.setSerialization($opts.data);
            if ($opts.send_encoding)
                $.setSendEncoding($opts.send_encoding);
            
            # unconditionally set the encoding to utf-8
            $.setEncoding("utf-8");
            
            if (!$do_not_connect)
                $.connect();
            
            $.headers = DefaultHeaders + $opts.headers;
        }

        #! change the serialization option for the object; see @ref DataSerializationOptions for valid options
        /** @par Example:
            @code
$rest.setSerialization("yaml");
            @endcode

            @param data the serialization option for the object; see @ref DataSerializationOptions for valid options

            @throw RESTCLIENT-ERROR invalid or unsupported serialization option

            @see @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
        */
        setSerialization(string $data = "auto") {
            if (!DataSerializationOptions.$data)
                throw "RESTCLIENT-ERROR", sprintf("data serialization option %y is unknown; valid options: %y", $data, DataSerializationOptions.keys());

            if ($data == "auto")
                $data = DataSerializationSupport.firstKey();
            else if (!DataSerializationSupport.$data)
                throw "RESTCLIENT-ERROR", sprintf("data serialization option %y is not supported because the required module could not be loaded; currently supported options: %y", $data, DataSerializationSupport.keys());
        
            $.ds = $data;
            $.sih = DataSerializationSupport.$data;
        }

        #! change the serialization option for the object; see @ref DataSerializationOptions for valid options
        /** @par Example:
            @code
$rest.setSerialization("yaml");
            @endcode

            @param data the serialization option for the object; see @ref DataSerializationOptions for valid options

            @throw RESTCLIENT-ERROR invalid or unsupported serialization option

            @see @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
        */
        setSendEncoding(string $enc = "auto") {
            if ($enc == "auto")
                $.seh = EncodingSupport.firstValue();
            else {
                if (!EncodingSupport.$enc)
                    throw "RESTCLIENT-ERROR", sprintf("send content encoding option %y is unknown; valid options: %y", $enc, EncodingSupport.keys());
                $.seh = EncodingSupport.$enc;
            }
        }

        #! returns the current data serialization format currently in effect for the object (see @ref DataSerializationOptions for possible values)
        /** @par Example:
            @code
my string $ser = $rest.getSerialization();
            @endcode

            @return the current data serialization format currently in effect for the object (see @ref DataSerializationOptions for possible values)

            @see @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        string getSerialization() {
            return $.ds;
        }

        #! sends an HTTP GET request to the REST server and returns the response
        /** @par Example:
            @code
my hash $ans = $rest.get("/orders/1?info=verbose");
            @endcode

            @param path the URI path to add (will be appended to any root path given in the constructor)
            @param body an optional message body to be included in the request; if a value for this parameter is passed to the method, then the body will be serialized according to the serialization rules set in @ref RestClient::RestClient::constructor() "RestClient::constructor()"
            @param info an optional reference to a hash that will be used as an output variable giving a hash of request headers and other information about the HTTP request
            @param hdr any headers to be sent with the request; headers here will override default headers for the object as well

            @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any message body is included in the response, it will be assigned to the value of the \c "body" key

            @throw DESERIALIZATION-ERROR the response body could not be deserialized (unknown \c Content-Type or invalid serialization)

            @see
            - @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
            - @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        hash get(string $path, any $body, *reference $info, *hash $hdr) {
            return $.doRequest("GET", $path, $body, \$info, NOTHING, $hdr);
        }

        #! sends an HTTP PUT request to the REST server and returns the response
        /** @par Example:
            @code
my hash $ans = $rest.put("/orders/1", ("action": "cancel"));
            @endcode

            @param path the URI path to add (will be appended to any root path given in the constructor)
            @param body an optional message body to be included in the request; if a value for this parameter is passed to the method, then the body will be serialized according to the serialization rules set in @ref RestClient::RestClient::constructor() "RestClient::constructor()"
            @param info an optional reference to a hash that will be used as an output variable giving a hash of request headers and other information about the HTTP request
            @param hdr any headers to be sent with the request; headers here will override default headers for the object as well

            @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any message body is included in the response, it will be assigned to the value of the \c "body" key

            @throw DESERIALIZATION-ERROR the response body could not be deserialized (unknown \c Content-Type or invalid serialization)

            @see
            - @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
            - @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        hash put(string $path, any $body, *reference $info, *hash $hdr) {
            return $.doRequest("PUT", $path, $body, \$info, NOTHING, $hdr);
        }

        #! sends an HTTP POST request to the REST server and returns the response
        /** @par Example:
            @code
my hash $ans = $rest.post("/orders", ("product": "xyz123", "options": 500));
            @endcode

            @param path the URI path to add (will be appended to any root path given in the constructor)
            @param body an optional message body to be included in the request; if a value for this parameter is passed to the method, then the body will be serialized according to the serialization rules set in @ref RestClient::RestClient::constructor() "RestClient::constructor()"
            @param info an optional reference to a hash that will be used as an output variable giving a hash of request headers and other information about the HTTP request
            @param hdr any headers to be sent with the request; headers here will override default headers for the object as well

            @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any message body is included in the response, it will be assigned to the value of the \c "body" key

            @throw DESERIALIZATION-ERROR the response body could not be deserialized (unknown \c Content-Type or invalid serialization)

            @see
            - @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
            - @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        hash post(string $path, any $body, *reference $info, *hash $hdr) {
            return $.doRequest("POST", $path, $body, \$info, NOTHING, $hdr);
        }

        #! sends an HTTP DELETE request to the REST server and returns the response
        /** @par Example:
            @code
my hash $ans = $rest.post("/orders/1");
            @endcode

            @param path the URI path to add (will be appended to any root path given in the constructor)
            @param body an optional message body to be included in the request; if a value for this parameter is passed to the method, then the body will be serialized according to the serialization rules set in @ref RestClient::RestClient::constructor() "RestClient::constructor()"
            @param info an optional reference to a hash that will be used as an output variable giving a hash of request headers and other information about the HTTP request
            @param hdr any headers to be sent with the request; headers here will override default headers for the object as well

            @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any message body is included in the response, it will be assigned to the value of the \c "body" key

            @throw DESERIALIZATION-ERROR the response body could not be deserialized (unknown \c Content-Type or invalid serialization)

            @see
            - @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
            - @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        hash del(string $path, any $body, *reference $info, *hash $hdr) {
            return $.doRequest("DELETE", $path, $body, \$info, NOTHING, $hdr);
        }

        #! sets up the Content-Type header and encodes any body for sending
        private nothing prepareMsg(reference $body, reference $hdr, string $ct = "Content-Type") {
            $hdr = $.headers + $hdr;

            # serialize body if necessary
            if (exists $body) {
                $body = $.sih.out($body);
                if (!$hdr.$ct)
                    $hdr.$ct = $.sih.ct;
                if ($body.typeCode() == NT_STRING && $hdr.$ct !~ /;charset=/)
                    $hdr.$ct += ";charset=" + $body.encoding();

                if ($.seh) {
                    $hdr."Content-Encoding" = $.seh.ce;
                    $body = $.seh.func($body);
                }
            }
        }

        #! sets up the path for the HTTP request URI
        private nothing preparePath(reference $path) {
            # prepare path
            my *string $p = $.getConnectionPath();
            if ($p && $path)
                $path = $p + "/" + $path;

            $path = encode_url($path);
        }        

        #! sends an HTTP request to the REST server and returns the response
        /** @par Example:
            @code
my hash $ans = $rest.doRequest("DELETE", "/orders/1");
            @endcode

            @param m the HTTP method to be used; case is ignored (if not a valid method an \c HTTP-CLIENT-METHOD-ERROR exception is raised)
            @param path the URI path to add (will be appended to any root path given in the constructor)
            @param body an optional message body to be included in the request; if a value for this parameter is passed to the method, then the body will be serialized according to the serialization rules set in @ref RestClient::RestClient::constructor() "RestClient::constructor()"
            @param info an optional reference to a hash that will be used as an output variable giving a hash of request headers and other information about the HTTP request
            @param decode_errors decode the message body with HTTP error responses and throw an exception based on the message body
            @param hdr any headers to be sent with the request; headers here will override default headers for the object as well

            @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any message body is included in the response, it will be assigned to the value of the \c "body" key

            @throw DESERIALIZATION-ERROR the response body could not be deserialized (unknown \c Content-Type or invalid serialization)
            @throw HTTP-CLIENT-METHOD-ERROR invalid HTTP method argument passed

            @see
            - @ref RestClient::RestClient::getSerialization() "RestClient::getSerialization()"
            - @ref RestClient::RestClient::setSerialization() "RestClient::setSerialization()"
         */
        hash doRequest(string $m, string $path, any $body, *reference $info, *softbool $decode_errors, *hash $hdr) {
            $.prepareMsg(\$body, \$hdr);

            on_exit if (exists $body) {
                $info += (
                    "request-body": $body,
                    "request-serialization": $.ds,
                    );
            }

            # prepare path
            $.preparePath(\$path);

            my hash $h;
            try {
                $h = $.send($body, $m, $path, $hdr, False, \$info);
                $info."response-code" = $h.status_code;
            }
            catch (hash $ex) {
                $info."response-code" = $ex.arg.status_code;
                if ($decode_errors && $ex.arg.body) {
                    try {
                        $h = $ex.arg;
                        $.decodeResponse(\$h, \$info);
                    }
                    catch () {
                        # ignore decoding exceptions
                    }
                    if ($h.body.err) {
                        if ($h.body.desc.typeCode() == NT_STRING)
                            trim $h.body.desc;
                        throw $h.body.err, $h.body.desc, $h.body.arg;
                    }
                    if ($h.body && $h.body.typeCode() == NT_STRING) {
                        trim $h.body;
                        throw "REST-RESPONSE-ERROR", $h.body;
                    }
                }

                rethrow;
            }

            # decode any response body
            if (exists $h.body)
                $.decodeResponse(\$h, \$info);

            return $h;
        }

        #! decodes the response
        decodeResponse(reference $h, *reference $info) {
            $info."response-body" = $h.body;

            my *hash $dh = DataDeserializationSupport.($h."content-type");
            if (!$dh)
                throw "DESERIALIZATION-ERROR", sprintf("cannot deserialize request body; content-type is: %y; types supported: %y; response body: %y", $h."content-type", DataDeserializationSupport.keys(), $h.body);

            if ($h.body.typeCode() != NT_STRING)
                throw "DESERIALIZATION-ERROR", sprintf("cannot deserialize request body; content-type is: %y but body type is %y", $h."content-type", $h.body.type());

            $h.body = $dh.in($h.body);

            $info."response-serialization" = $dh.code;
        }
    }
}
