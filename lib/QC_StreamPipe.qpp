/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_StreamPipe.qpp StreamPipe class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, sro

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/StreamPipe.h"

DLLEXPORT extern QoreClass* QC_PIPEINPUTSTREAM;
DLLEXPORT extern QoreClass* QC_PIPEOUTPUTSTREAM;

//! This class provides a pair of streams connected through a buffer.
/** The input stream provides the bytes that are written to the output stream. Data should be written to and read from
    the streams by different threads. The pipe contains a buffer (the size can be specified in the constructor) - the
    reading operations on the input stream are blocked if the buffer is empty and the writing operations on the
    output stream are blocked if the buffer is full. The input stream reports the end of the stream once the output
    stream is closed using @ref OutputStream::close() and all remaining data are read from the buffer.

    @since %Qore 0.8.12
 */
qclass StreamPipe [arg=StreamPipe* pipe; ns=Qore; flags=final; private_members=OutputStream os,InputStream is];

//! Creates the StreamPipe
/**
    @param timeout_ms a timeout period with a resolution of milliseconds (a @ref relative_dates
           "relative date/time value"; integer arguments will be assumed to be milliseconds);
           if not given or negative the operations will never time out
    @param bufferSize the size of the internal buffer
 */
StreamPipe::constructor(timeout timeout_ms = -1, int bufferSize = 4096) {
   SimpleRefHolder<StreamPipe> pipe(new StreamPipe(timeout_ms, bufferSize));
   pipe->ref();
   self->setValue("is", new QoreObject(QC_PIPEINPUTSTREAM, getProgram(), new PipeInputStream(*pipe)), xsink);
   pipe->ref();
   self->setValue("os", new QoreObject(QC_PIPEOUTPUTSTREAM, getProgram(), new PipeOutputStream(*pipe)), xsink);
   self->setPrivate(CID_STREAMPIPE, pipe.release());
}

//! Returns the input stream connected to the pipe.
/**
    @return the input stream connected to the pipe
 */
InputStream StreamPipe::getInputStream() {
   return self->getReferencedMemberNoMethod("is", xsink);
}

//! Returns the output stream connected to the pipe.
/**
    @return the output stream connected to the pipe
 */
OutputStream StreamPipe::getOutputStream() {
   return self->getReferencedMemberNoMethod("os", xsink);
}
