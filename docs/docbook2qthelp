#!/usr/bin/env qore
#
# Docbook to QtHelp project file generator
#
# it requires "make chunked" to be processed
#
# This script operates with this algorithm:
# 1) take docbook sources and create one big XML docbook in-memory file
#    replacing include entities $foo; with its file content.
#    NOTE: entities to files mapping is expected to use the same names.
# 2) Resulting XML is parsed into Qore hash
# 3) Script expects unchanged docbook structure - chapters/sect1/sect2 only.
#    Hash is walked through for:
#    3.1) chapters - it's used for TOC and keywords
#    3.2) sect1 - TOC and KW
#    3.3) sect2 - keywords only
# 4) QtHelpProject result XML is written to stdout
#

%require-types

# main file in the docbook dir
const INDEX_FILE = "qore"; # the qore.docbook filename
# location of the docbook sources
const DOCBOOK_PATH = "./docbook/";
# storage dir with chunked xhtml files
const HTML_PATH = "./qore-html/";


my Dir $d();
$d.chdir(DOCBOOK_PATH);

my list $dbfiles = $d.listFiles(".*docbook");
# printf("%N\n", $dbfiles);

my hash $dbCont = hash();

foreach my string $fname in ($dbfiles) {
    my File $f();
    $f.open2(DOCBOOK_PATH + $fname);
    my string $key = replace($fname, ".docbook", "");
    $dbCont.$key = $f.read(-1);
    if ($key != INDEX_FILE)
        $dbCont.$key = replace($dbCont.$key, '<?xml version="1.0" encoding="UTF-8" ?>', "");
    $f.close();
}

foreach my string $key in (keys $dbCont) {
    if ($key == INDEX_FILE)
        continue;
    $dbCont{INDEX_FILE} = replace($dbCont{INDEX_FILE}, sprintf("&%s;", $key), $dbCont.$key);
}


my hash $xml =  parseXML($dbCont{INDEX_FILE});

my list $sections = ();
my list $keywords = ();
my string $version = replace($xml.book.bookinfo.releaseinfo, "v. ", "");

foreach my hash $chapter in ($xml.book.chapter) {
    my string $id = $chapter."^attributes^".id + ".html";
    my string $name = html_encode($chapter.title);
#     printf("Chapter: %s -> %s\n", $name, $id);
    push $sections, sprintf("<section title=\"%s\" ref=\"%s\">", $name, $id);
    push $keywords, sprintf("\t<keyword name=\"%s\" ref=\"%s\" />", $name, $id);

    foreach my hash $sect1 in ($chapter.sect1) {
        my string $sid = $sect1."^attributes^".id + ".html";
        # 1st section is in the chapter's page. With #foo identifier/anchor
        if (!exists hlstat( HTML_PATH + $sid ))
            $sid = $id + "#" + $sect1."^attributes^".id;
        my string $sname = html_encode($sect1.title);
#         printf("\tSection: %s -> %s\n", $sname, $sid);
        push $sections, sprintf("\t<section title=\"%s\" ref=\"%s\" />", $sname, $sid);
        push $keywords, sprintf("\t<keyword name=\"%s\" ref=\"%s\" />", $sname, $sid);

        foreach my hash $sect2 in ($sect1.sect2) {
            my string $s2id = $sid + "#" + $sect2."^attributes^".id;
            my string $s2name = html_encode($sect2.title);
#             printf("\t\tSection2: %s -> %s\n", $s2name, $s2id);
            push $keywords, sprintf("\t<keyword name=\"%s\" ref=\"%s\" />", $s2name, $s2id);
        } # sect2

    } # sect1
    push $sections, "</section>";
} # chapters


printf("<?xml version=\"1.0\" encoding=\"UTF-8\"?>
 <QtHelpProject version=\"1.0\">
     <namespace>qore.org.qore.%s</namespace>
     <virtualFolder>doc</virtualFolder>
     <customFilter name=\"Qore Language %s\">
         <filterAttribute>qore</filterAttribute>
         <filterAttribute>0.8</filterAttribute>
     </customFilter>
     <filterSection>
         <filterAttribute>qore</filterAttribute>
         <filterAttribute>%s</filterAttribute>
         <toc>
<section title=\"Qore Programming Language\" ref=\"index.html\">
             %s
</section>
         </toc>
         <keywords>
             %s
         </keywords>
         <files>
             <file>*.css</file>
             <file>*.html</file>
         </files>
     </filterSection>
 </QtHelpProject>
", $version, $version, $version, join("\n", $sections), join("\n", $keywords));

# qhelpgenerator qore.qhp -o qore.qch