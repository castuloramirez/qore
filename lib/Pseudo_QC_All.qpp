/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_All.qpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

//! Methods in this pseudo-class are available to be executed on any value type (even @ref nothing); this is the root class for all pseudo-classes
/** 
 */
qclass <value> [arg=AbstractQoreNode* node];

//! Returns the type code for the value
/** This method is recommended over <value>::type() or the type(any) or typename(any) functions for comparing data types as it is much faster and more efficient than the other alternatives (which work with string values instead of integer codes).

    @return the type code for the value; see @ref type_code_constants for possible return values for each type

    @par Example:
    @code
my int $t = $n.typeCode();
    @endcode    
 */
int <value>::typeCode() [flags=CONSTANT] {
   return get_node_type(node);
}

//! Returns the string type for the value
/** 
    @return the string type for the value; see @ref string_type_constants for possible return values for each type

    @par Example:
    @code
my string $t = $n.type();
    @endcode

    @note It is faster and more efficient to use <value>::typeCode() for comparing data types
*/
string <value>::type() [flags=CONSTANT] {
   return new QoreStringNode(node ? node->getTypeName() : "nothing");
}
