# minimum required Qore version
%requires qore >= 0.8.11
%new-style

%try-module xmls
%define NO_XML
%endtry


module UnitTest {
    version = "0.1";
    desc = "user module for unit testing";
    author = "Petr Vanek <petr@yarpen.cz>";
    url = "http://qore.org";
    license = "MIT";
}

/* see release notes below for version history
*/

/** @mainpage UnitTest Module

    @tableofcontents

TODO/FIXME
*/


#! TODO/FIXME
public namespace UnitTest {

    public const PLAINTEXT = 0;
    public const JUNIT     = 1;

    const OUT_TYPES = (
          "plain" : PLAINTEXT,
          "junit" : JUNIT,
        );

    const opts = (
          "help"    : "help,h",
          "verbose" : "verbose,v",
          "bq"      : "backquote,b",
          "threads" : "threads,t=i",
          "format"  : "format=s",
        );
}

#! TODO/FIXME
public class UnitTest::UnitTest {
    private {
        int m_testCount = 0;
        int m_errors = 0;

        hash m_result = hash();
        int m_output = PLAINTEXT;

        hash m_options;
    }

    constructor() {
        m_options = new GetOpt(opts).parse2(\ARGV);
        if (m_options.help)
            usage();

        m_options.iters = shift ARGV;
        if (elements ARGV) {
            printf("error, excess arguments on command-line\n");
            usage();
        }

        if (!m_options.iters)
            m_options.iters = 1;
        if (!m_options.threads)
            m_options.threads = 1;

        if (m_options.format) {
            if (!exists OUT_TYPES{m_options.format})
                throw "UNIT-TEST-ERROR", sprintf("Unknown output format: %s", m_options.format);

            m_output = OUT_TYPES{m_options.format};
        }
        else {
            m_output = PLAINTEXT;
        }

        if (m_output == PLAINTEXT) {

            printf("QORE v%s Test Script (%d thread%s, %d iteration%s per thread)\n",
                   Qore::VersionString,
                   m_options.threads,
                   m_options.threads == 1 ? "" : "s",
                   m_options.iters,
                   m_options.iters == 1 ? "" : "s"
                  );
        }
    }

    destructor() {
        report(m_output);
    }

    hash options() {
        return m_options;
    }

    any option(string key) {
        return m_options{key};
    }

    bool verbose() {
        return exists m_options.verbose ? boolean(m_options.verbose) : False;
    }

    int errors() {
        return m_errors;
    }

    int testCount() {
        return m_testCount;
    }

    errorInc() {
        m_errors++;
    }

    private usage() {
        printf("usage: %s [options]
 -h,--help        this help text
 -v.--verbose     more verbose output
 -b,--backquote    include backquote tests (slow)
 -t,--threads=ARG  runs tests in ARG threads
    --format=type output format (default: plain)

available output formats (stdout):
", get_script_name());

        map printf("    %s\n", $1), keys OUT_TYPES;
        exit(1);
    }


    report(int format = PLAINTEXT) {
        switch (format) {
            case PLAINTEXT:
                reportPlaintext();
                break;
            case JUNIT:
                reportJunit();
                break;
            default:
                throw "UNIT-TEST-ERROR", "Unknown format type";
        }
    }

    private reportPlaintext() {
        HashIterator it(m_result);
        int test_id = 0;
        while (it.next()) {
            if (!m_options.verbose && it.getValue().result == "OK")
                continue;
            printf("%s: %s\n", it.getValue().result, it.getKey());
            if (m_options.verbose && it.getValue().result != "OK") {
                printf("%s\n", it.getValue().msg);
            }
        }

        printf("%d tests started, %d error%s\n", testCount(), errors(), errors() == 1 ? "" : "s");
    }

    private reportJunit() {
%ifdef NO_XML
        stderr.printf("No XML module found. Use --format=plain instead\n");
        exit(1);
%else
        hash junit;
        junit.testsuites."^attributes^" = ( "errors" : errors(),
                                            "tests"  : testCount(),
                                          );
        junit.testsuites.testcase = list();

        HashIterator it(m_result);
        while (it.next()) {
             hash testcase;
             if (it.getValue().result == "OK") {
                 testcase."^attributes^" = ( "name" : it.getKey(), "status" : it.getValue().result );
             }
             else {
                 testcase."^attributes^" = ( "name" : it.getKey(), "status" : "ERROR" );
                 testcase.error."^attributes^" = ( "message" : it.getKey(), "type" : "ERROR" );
             }
             push junit."testsuites"."testcase", testcase;
        }

        printf("%s\n", makeFormattedXMLString(junit));
%endif
    }

    string tmpLocation() {
        # TODO: add support for other platforms
        my dir = ENV."TMP";
        if (!dir) {   # TODO: use some qore idiom?
            dir = '/tmp';
	}

        return dir;
    }

    cmp(any v1, any v2, string msg) {
        m_testCount++;
        if (v1 === v2) {
            m_result{msg}{'result'} = "OK";
        }
        else {
            m_result{msg}{'result'} = sprintf("ERROR: %N != %N", v1, v2);
            m_errors++;
        }
    }

    ok(softbool v, string msg) {
	cmp(v, True, msg);
    }

    like(string str, string regex, string msg) {
        bool match = str.regex(regex);
        ok(match, msg);
        if (!match) {
            string msgstr = "#     string: " + str + "\n not match: " + regex;
            m_result{msg}{'msg'} = regex_subst(msgstr, "\n(?=.)", "\n# ");
        }
    }

    exception(callref f, list params, string regex, string msg) {
        try {
            call_function_args(f, params);
        }
        catch (ex) {
            like(ex.desc, regex, msg);
            return;
        }
        ok(0, msg);
        m_result{msg}{'msg'} = '# found normal exit instead of exception';
    }

    cmploop(callref f, list testcases) {
        foreach hash testcase in (testcases) {
            list args = testcase.args;
            any bak = call_function_args(f, args);
            cmp(bak, testcase.cmp, testcase.msg);
        }
    }
}
