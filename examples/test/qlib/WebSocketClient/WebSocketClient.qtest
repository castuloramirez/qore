#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/HttpServer.qm
%requires ../../../../qlib/WebSocketUtil.qm
%requires ../../../../qlib/WebSocketHandler.qm
%requires ../../../../qlib/WebSocketClient.qm

%exec-class WebSocketClientTest

class MyWsConnection inherits WebSocketConnection {
    constructor(WebSocketHandler handler) : WebSocketConnection(handler) {
        map send($1), WebSocketClientTest::Data;
    }
}

class MyWsHandler inherits WebSocketHandler {
    WebSocketConnection getConnectionImpl(hash cx, hash hdr, string cid) {
        return new MyWsConnection(self);
    }
}

class WebSocketClientTest inherits QUnit::Test {
    public {
        HttpServer mServer;
        MyWsHandler wsHandler();
        int port;

        const Data = (
            "test1",
            <beeffeed>,
            "test3",
            );
    }

    constructor() : Test("WebSocketClientTest", "1.0") {
        addTestCase("WebSocketClient tests", \webSocketClientTests());

        mServer = new HttpServer(\log(), \log());
        mServer.setHandler("ws-handler", "", NOTHING, wsHandler);
        mServer.setDefaultHandler("ws-handler", wsHandler);
        port = mServer.addListener(0).port;

        set_return_value(main());

        mServer.stop();
    }

    webSocketClientTests() {
        list l = ();
        Counter c(1);
        code cb = sub (*data msg) {
            if (exists msg) {
                l += msg;
                if (l.size() == Data.size())
                    c.dec();
            }
        };
        WebSocketClient wsc(cb, ("url": "ws://localhost:" + port));
        wsc.connect();
        c.waitForZero();
        wsc.disconnect();
        delete wsc;

        assertEq(Data, l);
    }

    private log(string str) {
        if (m_options.verbose > 2)
            vprintf(str + "\n", argv);
    }
}
