#!/usr/bin/env qr

%require-types
%enable-all-warnings
%new-style

%requires UnitTest

%exec-class App

class App {
    constructor() {
        my UnitTest unit();

        my string str = "Hello There This is a Test - 1234567890";

        my string key = "1234567812345abcabcdefgh";
        my binary x = des_ede_encrypt_cbc(str, key);
        my string xstr = des_ede_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "triple DES 2 key encrypt-decrypt");

        x = des_ede3_encrypt_cbc(str, key);
        xstr = des_ede3_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "triple DES 3 key encrypt-decrypt");

        x = desx_encrypt_cbc(str, key);
        xstr = desx_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "DESX encrypt-decrypt");

        x = blowfish_encrypt_cbc(str, key);
        xstr = blowfish_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "blowfish encrypt-decrypt");

        x = rc4_encrypt(str, key);
        xstr = rc4_decrypt_to_string(x, key);
        unit.cmp(str, xstr, "rc4 encrypt-decrypt");

        x = rc2_encrypt_cbc(str, key);
        xstr = rc2_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "rc2 encrypt-decrypt");

        x = cast5_encrypt_cbc(str, key);
        xstr = cast5_decrypt_cbc_to_string(x, key);
        unit.cmp(str, xstr, "CAST5 encrypt-decrypt");

        my binary bkey = des_random_key();
        x = des_encrypt_cbc(str, bkey);
        xstr = des_decrypt_cbc_to_string(x, bkey);
        unit.cmp(str, xstr, "DES random single key encrypt-decrypt");
    }
}
