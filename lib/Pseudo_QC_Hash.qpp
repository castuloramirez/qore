/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Hash.cpp

  Qore Programming Language

  Copyright 2003 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>

#include <qore/intern/QoreHashNodeIntern.h>
#include <qore/intern/QoreHashIterator.h>

//! Methods in this pseudo-class can be executed on @ref hash "hash values"
/** 
 */
qclass <hash> [arg=const QoreHashNode* h;vparent=<value>];

//! Returns Qore::NT_HASH
/** 
    @return Qore::NT_HASH

    @par Example:
    @code
switch ($h.typeCode()) {
    case NT_HASH:
        printf("%y: is a hash\n", $h);
        break;
}
    @endcode
 */
int <hash>::typeCode() [flags=CONSTANT] {
   return NT_HASH;
}

//! Returns a list of key names of the hash
/** 
    @return a list of key names of the hash

    @par Example:
    @code
my list $l = $h.keys();
    @endcode

    @see <hash>::values()
 */
list <hash>::keys() [flags=CONSTANT] {
   return h->getKeys();
}

//! Returns a list of values of the hash
/** 
    @return a list of values of the hash

    @par Example:
    @code
my list $l = $h.values();
    @endcode

    @note equivalent to hash_values()
    
    @see <hash>::keys()
 */
list <hash>::values() [flags=CONSTANT] {
   QoreListNode *l = new QoreListNode;

   ConstHashIterator hi(h);
   while (hi.next())
      l->push(hi.getReferencedValue());

   return l;
}

//! Returns the first key name in the hash or @ref nothing if the hash has no keys
/** 
    @return the first key name in the hash or @ref nothing if the hash has no keys

    @par Example:
    @code
my *string $n = $h.firstKey();
    @endcode

    @see <hash>::lastKey()
 */
*string <hash>::firstKey() [flags=CONSTANT] {
   const char *key = h->getFirstKey();
   return key ? new QoreStringNode(key) : 0;
}

//! Returns the value assigned to the first key in the hash if any or @ref nothing if the hash has no keys
/** 
    @return the value assigned to the first key in the hash if any or @ref nothing if the hash has no keys

    @par Example:
    @code
my any $v = $h.firstValue();
    @endcode

    @see <hash>::lastValue()
 */
any <hash>::firstValue() [flags=CONSTANT] {
   AbstractQoreNode* rv = qore_hash_private::getFirstKeyValue(h);
   return rv ? rv->refSelf() : 0;
}

//! Returns the last key name in the hash or @ref nothing if the hash has no keys
/** 
    @return the last key name in the hash or @ref nothing if the hash has no keys

    @par Example:
    @code
my *string $n = $h.lastKey();
    @endcode

    @see <hash>::firstKey()
 */
*string <hash>::lastKey() [flags=CONSTANT] {
   const char *key = h->getLastKey();
   return key ? new QoreStringNode(key) : 0;
}

//! Returns the value assigned to the last key in the hash if any or @ref nothing if the hash has no keys
/** 
    @return the value assigned to the last key in the hash if any or @ref nothing if the hash has no keys

    @par Example:
    @code
my any $v = $h.lastValue();
    @endcode

    @see <hash>::firstValue()
 */
any <hash>::lastValue() [flags=CONSTANT] {
   AbstractQoreNode* rv = qore_hash_private::getLastKeyValue(h);
   return rv ? rv->refSelf() : 0;
}

//! Returns @ref True if the key exists in the hash (may or may not be assigned a value), @ref False if not
/** 
    @param key the key name to check

    @return @ref True if the key exists in the hash (may or may not be assigned a value), @ref False if not

    @par Example:
    @code
my bool $b = $h.hasKey($key);
    @endcode

    @see <hash>::hasKeyValue(softstring)
 */
bool <hash>::hasKey(softstring key) [flags=RET_VALUE_ONLY] {
   TempEncodingHelper str(key, QCS_DEFAULT, xsink);
   if (!str)
      return false;

   return h->existsKey(str->getBuffer());
}

//! Returns @ref True if the key exists and is assigned to a value, @ref False if not
/** 
    @param key the key name to check

    @return @ref True if the key exists and is assigned to a value, @ref False if not

    @par Example:
    @code
my bool $b = $h.hasKeyValue($key);
    @endcode

    @see <hash>::hasKey(softstring)
 */
bool <hash>::hasKeyValue(softstring key) [flags=RET_VALUE_ONLY] {
   TempEncodingHelper str(key, QCS_DEFAULT, xsink);
   if (!str)
      return false;

   return h->existsKeyValue(str->getBuffer());
}

//! Returns @ref True if the hash has no keys, @ref False if it does
/** 
    @return @ref True if the hash has no keys, @ref False if it does

    @par Example:
    @code
my bool $b = $h.empty();
    @endcode
 */
bool <hash>::empty() [flags=CONSTANT] {
   return h->empty();
}

//! Returns the number of keys in the hash
/** The opposite of <hash>::val()

    @return the number of keys in the hash

    @par Example:
    @code
my int $num = $h.size();
    @endcode
 */
int <hash>::size() [flags=CONSTANT] {
   return h->size();
}

//! Returns @ref False if the hash has no keys, @ref True if it does
/** The opposite of <hash>::empty()

    @return @ref False if the hash has no keys, @ref True if it does

    @par Example:
    @code
my bool $b = $h.val();
    @endcode

    @see
    - @ref perl-bool-eval "%perl-bool-eval"
    - @ref strict-bool-eval "%strict-bool-eval"
 */
bool <hash>::val() [flags=CONSTANT] {
   return !h->empty();
}

//! Returns a @ref Qore::HashIterator "HashIterator" object for the hash
/** @param value_hash if @ref True "True", @ref Qore::HashIterator::getValue() returns a hash with 2 keys: \c "key" and \c "value" (making it easier to iterate hashes with constructions where only @ref Qore::HashIterator::getValue() is available, such as the @ref foreach "foreach statement"); the default is @ref Qore::True "True"

    @return a @ref Qore::HashIterator "HashIterator" object for the hash

    @par Example:
    @code
map printf("+ %s: %y\n", $1.key, $1.value), $h.iterator();
    @endcode

    @since %Qore 0.8.6
 */
AbstractIterator <hash>::iterator() [flags=CONSTANT] {
   return new QoreObject(QC_HASHITERATOR, 0, new QoreHashIterator(h));
}

//! Returns a @ref Qore::HashKeyIterator "HashKeyIterator" object for the hash
/** @return a @ref Qore::HashKeyIterator "HashKeyIterator" object for the hash

    @par Example:
    @code
map printf("+ %s\n", $1), $h.keyIterator();
    @endcode

    @since %Qore 0.8.6.2
 */
HashKeyIterator <hash>::keyIterator() [flags=CONSTANT] {
   return new QoreObject(QC_HASHKEYITERATOR, 0, new QoreHashIterator(h));
}

//! Returns a @ref Qore::HashPairIterator "HashPairIterator" object for the hash
/** @return a @ref Qore::HashPairIterator "HashPairIterator" object for the hash

    @par Example:
    @code
map printf("+ %s\n", $1), $h.pairIterator();
    @endcode

    @since %Qore 0.8.6.2
 */
HashPairIterator <hash>::pairIterator() [flags=CONSTANT] {
   return new QoreObject(QC_HASHPAIRITERATOR, 0, new QoreHashIterator(h));
}
