# -*- mode: qore; indent-tabs-mode: nil -*-

/*  TextDocument.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%require-types
%enable-all-warnings
%new-style
%strict-args

%disable-warning unreferenced-variable

module TextDocument {
    version = "0.1";
    desc    = "TextDocument class";
    author  = "Ondrej Musil <ondrej.musil@qoretechnologies.com>";
    url     = "https://github.com/qorelanguage/qls";
}

%requires astparser

#! Represents one open document (source file).
public class TextDocument {
    private {
        #! The text document's URI.
        string uri;

        #! The text document name (without path).
        string docName;

        #! The text document's language identifier.
        string languageId;

        #! The version number of this document (it will strictly increase after each change, including undo/redo).
        int version;

        #! The content of the opened text document.
        string text;

        #! AST parser. Used for getting all the important info.
        astparser::AstParser parser;

        #! Whether the document has been parsed successfully by the program.
        bool parseOk;

        *string parseError;
    }

    constructor(string n_uri, string n_text, string n_languageId, int n_version) {
        uri = n_uri;
        docName = basename(uri);
        text = n_text;
        languageId = n_languageId;
        version = n_version;

        parse();
    }

    #! Parse the text of the document.
    private parse() {
        parseOk = False;
        parser = new astparser::AstParser();
        int rc = parser.parseString(text);
        if (rc) {
            parseError = sprintf("Error parsing the text document '%s' - return code: %d\n\n", uri, rc);
            if (parser.getErrorCount()) {
                parseError += "Errors:\n\n";
                *list diagnostics = parser.getDiagnostics();
                int i = 1;
                foreach hash diag in (diagnostics) {
                    parseError += sprintf("%d) %s:%d:%d: %s\n\n", i++, docName,
                        diag.range.start.line,
                        diag.range.start.character,
                        diag.message);
                }
            }
            stderr.printf(parseError);
        }
        else {
            parseOk = True;
            delete parseError;
        }
        stderr.printf("parse finished\n");
    }

    string getUri() { return uri; }
    string getLanguageId() { return languageId; }
    int getVersion() { return version; }
    string getText() { return text; }

    #! Get count of parse errors.
    int getParseErrorCount() {
        return parser.getErrorCount();
    }

    #! Get parse diagnostics (errors).
    *list getDiagnostics() {
        return parser.getDiagnostics();
    }

    #! The document has changed.
    didChange(hash changes) {
        # Modify document text.
        # Using whole document sync here.
        text = changes.text;

        # Re-parse the document.
        parse();
    }
    
    changeVersion(int n_version) {
        version = n_version;
    }

    #! Return info about symbol(s) at the passed document position.
    hash hover(hash Position) {
        int line = Position.line;
        int char = Position.character;
        if (!parseOk) {
            return {
                "contents": parseError,
                "range": {
                    "start": {
                        "line": line,
                        "character": char
                    },
                    "end": {
                        "line": line,
                        "character": char+1
                    }
                }
            };
        }

        *hash results = parser.hover(Position.line, Position.character);
        if (!results)
            return {
                "contents": "no results",
                "range": {
                    "start": {
                        "line": line,
                        "character": char
                    },
                    "end": {
                        "line": line,
                        "character": char+1
                    }
                }
            };
        return results;

        /*int line = Position.line;
        int char = Position.character;

        return {
            "contents": "random text hover " + string(rand()),
            "range": {
                "start": {
                    "line": line,
                    "character": (char-3) >= 0 ? (char-3) : 0
                },
                "end": {
                    "line": line,
                    "character": (char+3)
                }
            }
        };*/
    }
}
