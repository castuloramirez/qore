#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args
%no-child-restrictions

%requires ../../../../qlib/QUnit.qm

%exec-class OverloadTest

string sub f1_test(string x) {
    return type(x);
}

string sub f1_test(float x) {
    return type(x);
}

string sub f_test(int x) {
    return type(x);
}

string sub f_test(float x) {
    return type(x);
}

public class OverloadTest inherits QUnit::Test {
    public {
        const Api = "hash sub p() { return {}; }*hash sub p(string a) {return {};}any sub p(string a, string b) { return 1; }";
    }

    constructor() : Test("Overload test", "1.0") {
        addTestCase("Values test", \testValues());
        addTestCase("Variables test", \testVariables());
        addTestCase("issue 1928", \issue1928());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    issue1928() {
        Program p(PO_NEW_STYLE);
        p.parsePending(Api, "");
        p.parse("sub t() {}", "");
        p.parse("int sub t1(){string vstr = ''; string p1 = vstr + ''; any x = ''; int rv = p(x, p1); return rv;}", "");
        p.parse("hash sub t2(){any a1 = ''; any a2; hash rv = p(a1, a2); return rv;}", "");
        assertEq(1, p.callFunction("t1"));
        assertEq({}, p.callFunction("t2"));
    }

    testValues() {
        assertEq("integer", f_test(1));
        assertEq("float", f_test(1.1));
        assertEq("float", f1_test(1));
        assertEq("float", f1_test(1.1));
        assertEq("string", f1_test("str"));
        assertEq("string", f1_test("1.11"));

        testAssertion("test not-existing overload", \f1_test(), (123.456n,), new TestResultExceptionType("RUNTIME-OVERLOAD-ERROR"));
    }

    testVariables() {
        int i = 1;
        float fi = 1.1;
        assertEq("integer", f_test(i));
        assertEq("float", f1_test(i));
        assertEq("float", f_test(fi));
        assertEq("float", f1_test(fi));
    }
}
