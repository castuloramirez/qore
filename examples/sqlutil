#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# @file sqlutil example program for the SqlUtil module

/*  Copyright 2013 David Nichols

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%new-style
%strict-args
%enable-all-warnings

%requires SqlUtil

const opts = (
    "align_all": "A,align-all=s",
    "align_data": "D,align-data=s",
    "align_data_strict": "s,align-data-strict",
    "align_table": "a,align-table=s",
    "dump_table": "t,dump-table=s@",
    "dump_sequence": "S,dump-sequence=s@",
    "omit": "O,omit=s@",

    "data_tablespace": "d,data-tablespace=s",
    "index_tablespace": "i,index-tablespace=s",
    "target_ds": "T,target-ds=s",
    "verbose": "v,verbose:i+",
    "help": "h,help",
    );

# list of options that require a target datasource
const RequiresTarget = (
    "align_table": True,
    );

main();

sub usage() {
    printf("usage: %s [options] <datasource>
<datasource> format: driver:user/pass@db[%host[:port]]
  -A,--align-all=ARG          ARG=table to align structure and data in a
                              target database; requires -T
  -D,--align-data=ARG         ARG=table to align data in a target database;
                              requires -T
  -s,--align-data-strict      deletes extra rows in the target table;
                              requires -D
  -a,--align-table=ARG        ARG=table to align structure in a target
                              database; requires -T
  -O,--omit=ARG               omit options: \"triggers\", \"foreign_constraints\",
                              \"indexes\"
  -d,--data-tablespace=ARG    use the given data tablespace name for output
  -i,--index-tablespace=ARG   use the given index tablespace name for output
  -t,--dump-table=ARG         dump the DDL for the given table
  -t,--dump-sequence=ARG      dump the DDL for the given sequence
  -T,--target-ds=ARG          target datasource
  -v,--verbose=ARG            increase verbosity level (more v's = more info)
", get_script_name());
    exit(1);
}

sub error(string fmt) {
    vprintf(fmt, argv);
    exit(1);
}

class GlobTables inherits Tables {
    constructor(Database db, AbstractDatasource source, string tspec) {
        # add matching tables to table cache
        foreach string t in (db.tableIterator()) {
            if (t.regex(tspec, RE_Caseless))
                get(source, t);
        }
        
        if (empty())
            printf("%y: no matching tables\n", tspec);
    }
}

string sub get_regex(string str) {
    str =~ s/\./\\./g;
    str =~ s/\?/./g;
    str =~ s/\*/.*/g; #//;
    str = sprintf("^%s\$", str);
    #printf("str: %s\n", str);
    return str;
}

sub main() {
    GetOpt g(opts);
    hash opt = g.parse3(\ARGV);

    if (opt.help || !ARGV[0])
        usage();

    if (opt.align_all) {
        opt.align_data = opt.align_all;
        opt.align_table = opt.align_all;
    }

    Datasource target;
    if (opt.target_ds)
        target = new Datasource(opt.target_ds);

    # if we don't have a target datasource, check for an option that requires one
    if (!target) {
        foreach string os in (RequiresTarget.keyIterator()) {
            if (opt{os})
                error("option --%s requires a target datasource (-T)\n", os);
        }
    }

    # source datasource
    Datasource source(ARGV[0]);

    # info callback closure and embedded variables
    int change_count = 0;
    int dot_count = 0;
    code info_callback = sub (string str, int ac, string type, string name, *string table, *string new_name, *string info) {
        # verbosity threshold
        int t = 0;
        if (ac != AbstractDatabase::AC_Unchanged)
            ++change_count;
        else
            t = 1;
        if (opt.verbose > t) {
            if (dot_count) {
                print("\n");
                dot_count = 0;
            }
            printf("%s %s\n", t ? "+++" : "***", str);
        }
        else {
            ++dot_count;
            print(AbstractDatabase::ActionLetterMap{ac});
            flush();
        }
    };

    code upsert_callback = sub (string table_name, hash row, int result) {
        # verbosity threshold
        int t = 0;
        if (result != AbstractTable::UR_Unchanged)
            ++change_count;
        else
            t = 1;

        if (opt.verbose > t) {
            if (dot_count) {
                print("\n");
                dot_count = 0;
            }
            printf("%s reference data %s: %y: %s\n", t ? "+++" : "***", table_name, row, AbstractTable::UpsertResultMap{result}); 
        }
        else {
            ++dot_count;
            print(AbstractTable::UpsertResultLetterMap{result});
            flush();
        }
    };

    # sql callback closure
    code sql_callback = sub (string str) {
        if (opt.verbose > 1)
            printf("%s\n", str);
        target.execRaw(str);
    };

    # callback reset closure
    code reset = sub () {
        if (dot_count) {
            print("\n");
            dot_count = 0;
        }
        if (change_count) {
            printf("%d change%s made\n", change_count, change_count == 1 ? "" : "s");
            change_count = 0;
        }
        else
            print("no changes made\n");
    };

    # creation options
    hash copt = opt.("index_tablespace", "data_tablespace");
    if (opt.omit)
        copt.omit = opt.omit;

    # callback options
    hash cbopt = ("sql_callback": sql_callback, "info_callback": info_callback, "sql_callback_executed": True);

    # alignment options
    hash aopt = copt + cbopt;

    Database db(source);

    bool done = False;
    foreach string name in (opt.dump_table) {
        done = True;
        Table table(source, name);
        printf("%s\n", table.getCreateSqlString(copt));
    }

    foreach string name in (opt.dump_sequence) {
        done = True;
        *AbstractSequence seq = db.getSequence(name);
        if (!seq)
            throw "SEQUENCE-ERROR", sprintf("sequence %s does not exist or is not accessible to this user", name);
        printf("%s;\n", seq.getCreateSql(copt));
    }

    code align_table = sub (AbstractTable source_table) {
        done = True;
        Table target_table(target, source_table.getName());        
        target_table.getAlignSql(source_table, aopt);
    };

    code align_data = sub (AbstractTable source_table) {
        done = True;
        Table target_table(target, source_table.getName());
        int us = opt.verbose ? AbstractTable::UpsertSelectFirst : AbstractTable::UpsertAuto;
        target_table.upsertFromSelect(source_table, NOTHING, us, ("delete_others": opt.align_data_strict, "info_callback": upsert_callback));
    };

    if (opt.align_table) {
        on_success target.commit();
        on_error target.rollback();

        if (opt.align_table =~ /[\*\?]/) {
            # transform into regex
            string tspec = get_regex(opt.align_table);
            GlobTables tables(db, source, tspec);

            foreach AbstractTable t in (tables.iterator()) {
                if (dot_count)
                    print("\n");
                printf("%s table structure: ", t.getName());
                align_table(t);
            }
        }
        else {
            Table table(source, opt.align_table);
            align_table(table.getTable());
        }
        reset();
    }

    if (opt.align_data) {
        if (opt.align_table =~ /[\*\?]/) {
            # transform into regex
            string tspec = get_regex(opt.align_table);
            GlobTables tables(db, source, tspec);

            foreach AbstractTable t in (tables.iterator()) {
                if (dot_count)
                    print("\n");
                printf("%s table data: ", t.getName());
                align_data(t);
            }
        }
        else {
            Table table(source, opt.align_table);
            align_data(table.getTable());
        }
        reset();
    }
    
    if (!done)
        usage();
}
