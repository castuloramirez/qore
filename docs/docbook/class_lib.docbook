<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="System_Namespaces_and_Class_Library">
  <title>System Namespaces and Class Library</title>

    <table id="Qore_Class_List">
      <title>Qore Class List</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="File_Class">File</link></para></entry>
	    <entry><para>For reading and writing files.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_Class">Dir</link></para></entry>
	    <entry><para>For handling of directories, listing files, and creating/removing subdirectories.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_Class">FtpClient</link></para></entry>
	    <entry><para>For communicating with FTP servers.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="GetOpt_Class">GetOpt</link></para></entry>
	    <entry><para>For processing command-line options.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_Class">Program</link></para></entry>
	    <entry><para>For parsing and executing application-embedded or user-supplied logic.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_Class">Socket</link></para></entry>
	    <entry><para>For communication with IPv4 sockets with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS_Class">TermIOS</link></para></entry>
	    <entry><para>Used when getting or setting terminal settings.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="HTTPClient_Class">HTTPClient</link></para></entry>
	    <entry><para>For communication with HTTP servers with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="XmlRpcClient_Class">XmlRpclient</link></para></entry>
	    <entry><para>For communication using the XML-RPC protocol with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="JsonRpcClient_Class">JsonRpclient</link></para></entry>
	    <entry><para>For communication using the JSON-RPC protocol with and without TSL/SSL encryption.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SSLCertificate_Class">SSLCertificate</link></para></entry>
	    <entry><para>For working with X.509 certificates.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SSLPrivateKey_Class">SSLPrivateKey</link></para></entry>
	    <entry><para>For working with private key data.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Datasource_Class">SQL::Datasource</link></para></entry>
	    <entry><para>For working with databases; provides the user interface to qore DBI drivers.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool_Class">SQL::DatasourcePool</link></para></entry>
	    <entry><para>Provides transparent per-thread, per-transaction Datasource connection pooling.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoGate_Class">AutoGate</link></para></entry>
	    <entry><para>A helper class for the <link linkend="Gate_Class">Gate</link> class for exception-safe Gate handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoLock_Class">AutoLock</link></para></entry>
	    <entry><para>A helper class for the <link linkend="Mutex_Class">Mutex</link> class for exception-safe Mutex handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoReadLock_Class">AutoReadLock</link></para></entry>
	    <entry><para>A helper class for the <link linkend="RWLock_Class">RWLock</link> class for exception-safe read lock handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoWriteLock_Class">AutoWriteLock</link></para></entry>
	    <entry><para>A helper class for the <link linkend="RWLock_Class">RWLock</link> class for exception-safe write lock handling.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition_Class">Condition</link></para></entry>
	    <entry><para>For blocking a thread until a condition becomes true.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter_Class">Counter</link></para></entry>
	    <entry><para>For blocking a thread until a counter becomes zero.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate_Class">Gate</link></para></entry>
	    <entry><para>A reentrant thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex_Class">Mutex</link></para></entry>
	    <entry><para>A simple thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
	    <entry><para>A blocking, thread-safe queue class, useful for message passing (can also be used as a stack).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RMutex_Class">RMutex</link></para></entry>
	    <entry><para>DEPRECATED: A reentrant thread lock; use Gate instead.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock_Class">RWLock</link></para></entry>
	    <entry><para>A read-write thread lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence_Class">Sequence</link></para></entry>
	    <entry><para>A thread-safe integral counter.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

  <sect1 id="Qore_Constants">
    <title>Qore Constants</title>

    <para>The following constants are defined in the Qore namespace.</para>

    <table id="Build_and_Version_Constants">
      <title>Build and Version Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><code>PlatformOS</code></para></entry>
	    <entry><para>The operating system used to build the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PlatformCPU</code></para></entry>
	    <entry><para>The CPU used as a target for the Qore library build.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionString</code></para></entry>
	    <entry><para>The full version string for this version of the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionMajor</code></para></entry>
	    <entry><para>An integer giving the Qore library's major version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionMinor</code></para></entry>
	    <entry><para>An integer giving the Qore library's minor version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VersionSub</code></para></entry>
	    <entry><para>An integer giving the Qore library's release version number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>Build</code></para></entry>
	    <entry><para>An integer giving the Qore library's subversion revision number.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>BuildHost</code></para></entry>
	    <entry><para>A string giving information about the host used to compile the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>Compiler</code></para></entry>
	    <entry><para>The compiler used to build the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CFLAGS</code></para></entry>
	    <entry><para>The compiler flags used to compile the Qore library.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>LDFLAGS</code></para></entry>
	    <entry><para>The linker flags used to link the Qore library.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <table id="Library_Options">
      <title>Library Options</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>HAVE_ATOMIC_OPERATIONS</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the Qore library supports fast atomic reference counting</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_STACK_GUARD</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if protection against stack overruns is provided</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_RUNTIME_THREAD_STACK_TRACE</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if active thread stack tracing has been enabled as a debugging option and if the <link linkend="getAllThreadCallStacks">getAllThreadCallStacks()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_ROUND</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the <link linkend="round">round()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_TIMEGM</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the <link linkend="timegm">timegm()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SETEUID</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the <link linkend="seteuid">seteuid()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SETEGID</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the <link linkend="setegid">setegid()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_PARSEXMLWITHSCHEMA</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the <link linkend="parseXMLWithSchema">parseXMLWithSchema()</link> function is available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SHA224</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA224 algorithm and therefore if the <link linkend="SHA224">SHA224()</link> and <link linkend="SHA224_bin">SHA224_bin()</link> functions are available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SHA256</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA256 algorithm and therefore if the <link linkend="SHA256">SHA256()</link> and <link linkend="SHA256_bin">SHA256_bin()</link> functions are available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SHA384</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA384 algorithm and therefore if the <link linkend="SHA384">SHA384()</link> and <link linkend="SHA384_bin">SHA384_bin()</link> functions are available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_SHA512</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the SHA512 algorithm and therefore if the <link linkend="SHA512">SHA512()</link> and <link linkend="SHA512_bin">SHA512_bin()</link> functions are available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_MDC2</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the MDC2 algorithm and therefore if the <link linkend="MDC2">MDC2()</link> and <link linkend="MDC2_bin">MDC2_bin()</link> functions are available.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HAVE_RC5</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>Indicates if the openssl library used to build the qore library supported the RC5 encryption algorithm and therefore if the <link linkend="rc5_encrypt_cbc">rc5_encrypt_cbc()</link>, <link linkend="rc5_decrypt_cbc">rc5_decrypt_cbc()</link> and <link linkend="rc5_decrypt_cbc_to_string">rc5_encrypt_cbc_to_string()</link> functions are available.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Boolean_Constants">
      <title>Boolean Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>True</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>True</para></entry>
	  </row>
	  <row>
	    <entry><para><code>False</code></para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>False</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_IO_Constants">
      <title>I/O Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row id="stdin_constant">
	    <entry><para><code>stdin</code></para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard input File object.</para></entry>
	  </row>
	  <row id="stdout_constant">
	    <entry><para><code>stdout</code></para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard output File object.</para></entry>
	  </row>
	  <row id="stderr_constant">
	    <entry><para><code>stderr</code></para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard error File object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="event_constants">
      <title>Event Constants</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></entry>
	    <entry><para><code>1</code></para></entry>
	    <entry><para>Raised when a network packet is received.</para></entry>
	  </row>
          <row>
            <entry><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></entry>
	    <entry><para><code>2</code></para></entry>
            <entry><para>Raised when a network packet is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link></code></para></entry>
	    <entry><para><code>3</code></para></entry>
            <entry><para>Raised when the HTTP &quot;Content-Length&quot; header is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link></code></para></entry>
	    <entry><para><code>4</code></para></entry>
            <entry><para>Raised when HTTP chunked data is about to be received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link></code></para></entry>
	    <entry><para><code>5</code></para></entry>
            <entry><para>Raised when all HTTP chunked data has been received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></entry>
	    <entry><para><code>6</code></para></entry>
            <entry><para>Raised when an HTTP redirect message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
	    <entry><para><code>7</code></para></entry>
            <entry><para>Raised when a socket is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
	    <entry><para><code>8</code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link></code></para></entry>
	    <entry><para><code>9</code></para></entry>
            <entry><para>Raised immediately before an FTP control message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link></code></para></entry>
	    <entry><para><code>10</code></para></entry>
            <entry><para>Raised when an FTP reply is received on the control channel.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link></code></para></entry>
	    <entry><para><code>11</code></para></entry>
            <entry><para>Raised when a hostname lookup is attempted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></entry>
	    <entry><para><code>12</code></para></entry>
            <entry><para>Raised when a hostname lookup is resolved.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
	    <entry><para><code>13</code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
	    <entry><para><code>14</code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link></code></para></entry>
	    <entry><para><code>15</code></para></entry>
            <entry><para>Raised when HTTP footers are received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link></code></para></entry>
	    <entry><para><code>16</code></para></entry>
            <entry><para>Raised when a block of HTTP chunked data is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link></code></para></entry>
	    <entry><para><code>17</code></para></entry>
            <entry><para>Raised when the next chunk size for HTTP chunked data is known.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connecting">EVENT_CONNECTING</link></code></para></entry>
	    <entry><para><code>18</code></para></entry>
            <entry><para>Raised right before a socket connection attempt is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connected">EVENT_CONNECTED</link></code></para></entry>
	    <entry><para><code>19</code></para></entry>
            <entry><para>Raised when the socket connection has been established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_start_ssl">EVENT_START_SSL</link></code></para></entry>
	    <entry><para><code>20</code></para></entry>
            <entry><para>Raised when socket SSL negotiation starts.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></entry>
	    <entry><para><code>21</code></para></entry>
            <entry><para>Raised when SSL communication has been negotiated and established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link></code></para></entry>
	    <entry><para><code>22</code></para></entry>
            <entry><para>Raised right before a file is opened.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></entry>
	    <entry><para><code>23</code></para></entry>
            <entry><para>Raised when a file has been successfully opened.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></entry>
	    <entry><para><code>24</code></para></entry>
            <entry><para>Raised when data has been read from a file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_written">EVENT_DATA_WRITTEN</link></code></para></entry>
	    <entry><para><code>25</code></para></entry>
            <entry><para>Raised when data has been written to a file.</para></entry>
          </row>

          <row>
            <entry><para><code><link linkend="event_map_constant">EVENT_MAP</link></code></para></entry>
	    <entry><para><link linkend="event_map_constant">Event Map Hash</link></para></entry>
            <entry><para>This constant is a hash that maps event numbers to string descriptions as described in <link linkend="event_map_constant">this table</link>.</para></entry>
          </row>

	</tbody>
      </tgroup>
    </table>

    <table id="event_map_constant">
      <title>Event Map Hash Constant</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>String Value</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>EVENT_PACKET_READ</code> (&quot;1&quot;)</para></entry>
            <entry><para><code>&quot;PACKET_READ&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_PACKET_SENT</code> (&quot;2&quot;)</para></entry>
            <entry><para><code>&quot;PACKET_SENT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CONTENT_LENGTH</code> (&quot;3&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CONTENT_LENGTH&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_START</code> (&quot;4&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_START&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_END</code> (&quot;5&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_END&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_REDIRECT</code> (&quot;6&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_REDIRECT&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CHANNEL_CLOSED</code> (&quot;7&quot;)</para></entry>
            <entry><para><code>&quot;CHANNEL_CLOSED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DELETED</code> (&quot;8&quot;)</para></entry>
            <entry><para><code>&quot;DELETED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FTP_SEND_MESSAGE</code> (&quot;9&quot;)</para></entry>
            <entry><para><code>&quot;FTP_SEND_MESSAGE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FTP_MESSAGE_RECEIVED</code> (&quot;10&quot;)</para></entry>
            <entry><para><code>&quot;FTP_MESSAGE_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HOSTNAME_LOOKUP</code> (&quot;11&quot;)</para></entry>
            <entry><para><code>&quot;HOSTNAME_LOOKUP&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HOSTNAME_RESOLVED</code> (&quot;12&quot;)</para></entry>
            <entry><para><code>&quot;HOSTNAME_RESOLVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_SEND_MESSAGE</code> (&quot;13&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_SEND_MESSAGE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_MESSAGE_RECEIVED</code> (&quot;14&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_MESSAGE_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_FOOTERS_RECEIVED</code> (&quot;15&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_FOOTERS_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNKED_DATA_RECEIVED</code> (&quot;16&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNKED_DATA_RECEIVED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_HTTP_CHUNK_SIZE</code> (&quot;17&quot;)</para></entry>
            <entry><para><code>&quot;HTTP_CHUNK_SIZE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CONNECTING</code> (&quot;18&quot;)</para></entry>
            <entry><para><code>&quot;CONNECTING&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_CONNECTED</code> (&quot;19&quot;)</para></entry>
            <entry><para><code>&quot;CONNECTED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_START_SSL</code> (&quot;20&quot;)</para></entry>
            <entry><para><code>&quot;START_SSL&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_SSL_ESTABLISHED</code> (&quot;21&quot;)</para></entry>
            <entry><para><code>&quot;SSL_ESTABLISHED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_OPEN_FILE</code> (&quot;22&quot;)</para></entry>
            <entry><para><code>&quot;OPEN_FILE&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_FILE_OPENED</code> (&quot;23&quot;)</para></entry>
            <entry><para><code>&quot;FILE_OPENED&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DATA_READ</code> (&quot;24&quot;)</para></entry>
            <entry><para><code>&quot;DATA_READ&quot;</code></para></entry>
          </row>
          <row>
            <entry><para><code>EVENT_DATA_WRITTEN</code> (&quot;25&quot;)</para></entry>
            <entry><para><code>&quot;DATA_WRITTEN&quot;</code></para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table id="event_source_constants">
      <title>Event Source Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
            <entry><para><code>SOURCE_SOCKET</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link>
raised from the <link linkend="Socket_Class">Socket</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_HTTPCLIENT</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link>
raised from the <link linkend="HTTPClient_Class">HTTPClient</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_FTPCLIENT</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link>
raised from the <link linkend="FtpClient_Class">FtpClient</link> class.</para></entry>
          </row>
	  <row>
            <entry><para><code>SOURCE_FILE</code></para></entry>
            <entry><para>For <link linkend="event_constants">events</link> raised from the <link linkend="File_Class">File</link> class.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table id="network_address_constants">
      <title>Network Address Type Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>AF_INET</code></para></entry>
	    <entry><para>Designates an IPv4 network addresses.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>AF_INET6</code></para></entry>
	    <entry><para>Designates an IPv6 network addresses.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>AF_UNIX</code></para></entry>
	    <entry><para>Designates a local socket file name (interchangeable with <code>AF_LOCAL</code>.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>AF_LOCAL</code></para></entry>
	    <entry><para>POSIX synonym for <code>AF_UNIX</code>; designates a local socket file name.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Local_Mode_Constants">
      <title>Terminal Attributes Local Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ECHOKE</code></para></entry>
	    <entry><para>visual erase for line kill</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHOE</code></para></entry>
	    <entry><para>visually erase chars</para></entry>
	 </row>
	  <row>
	    <entry><para><code>ECHO</code></para></entry>
	    <entry><para>enable echoing</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHONL</code></para></entry>
	    <entry><para>echo NL even if ECHO is off</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ECHOPRT</code></para></entry>
	    <entry><para>visual erase mode for hardcopy</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ISIG</code></para></entry>
	    <entry><para>enable signals INTR, QUIT, [D]SUSP</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ICANON</code></para></entry>
	    <entry><para>canonicalize input lines</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IEXTEN</code></para></entry>
	    <entry><para>enable DISCARD and LNEXT</para></entry>
	  </row>
	  <row>
	    <entry><para><code>TOSTOP</code></para></entry>
	    <entry><para>stop background jobs from output</para></entry>
	  </row>
	  <row>
	    <entry><para><code>FLUSHO</code></para></entry>
	    <entry><para>output being flushed (state)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PENDIN</code></para></entry>
	    <entry><para>retype pending input (state)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>NOFLSH</code></para></entry>
	    <entry><para>don't flush after interrupt</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ALTWERASE</code></para></entry>
	    <entry><para>use alternate WERASE algorithm (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>EXTPROC</code></para></entry>
	    <entry><para>external processing (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>NOKERNINFO</code></para></entry>
	    <entry><para>no kernel output from VSTATUS (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Control_Mode_Constants">
      <title>Terminal Attributes Control Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>CSIZE</code></para></entry>
	    <entry><para>character size mask</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS5</code></para></entry>
	    <entry><para>5 bits (pseudo)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS6</code></para></entry>
	    <entry><para>6 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS7</code></para></entry>
	    <entry><para>7 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CS8</code></para></entry>
	    <entry><para>8 bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CSTOPB</code></para></entry>
	    <entry><para>send 2 stop bits</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CREAD</code></para></entry>
	    <entry><para>enable receiver</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARENB</code></para></entry>
	    <entry><para>parity enable</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARODD</code></para></entry>
	    <entry><para>odd parity, else even</para></entry>
	  </row>
	  <row>
	    <entry><para><code>HUPCL</code></para></entry>
	    <entry><para>hang up on last close</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CLOCAL</code></para></entry>
	    <entry><para>ignore modem status lines</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CCTS_OFLOW</code></para></entry>
	    <entry><para>CTS flow control of output (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CRTSCTS</code></para></entry>
	    <entry><para>same as CCTS_OFLOW (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CRTS_IFLOW</code></para></entry>
	    <entry><para>RTS flow control of input (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>MDMBUF</code></para></entry>
	    <entry><para>flow control output via Carrier (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Output_Mode_Constants">
      <title>Terminal Attributes Output Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>OPOST</code></para></entry>
	    <entry><para>enable following output processing</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONLCR</code></para></entry>
	    <entry><para>map NL to CR-NL (ala CRMOD)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OCRNL</code></para></entry>
	    <entry><para>map CR to NL</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONOCR</code></para></entry>
	    <entry><para>No CR output at column 0</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONLRET</code></para></entry>
	    <entry><para>NL performs CR function</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OXTABS</code></para></entry>
	    <entry><para>expand tabs to spaces (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ONOEOT</code></para></entry>
	    <entry><para>discard EOT's ctrl-D on output (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>OLCUC</code></para></entry>
	    <entry><para>translate lower case to upper case (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Input_Mode_Constants">
      <title>Terminal Attributes Input Mode Constants</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>IGNBRK</code></para></entry>
	    <entry><para>ignore BREAK condition</para></entry>
	  </row>
	  <row>
	    <entry><para><code>BRKINT</code></para></entry>
	    <entry><para>map BREAK to SIGINTR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IGNPAR</code></para></entry>
	    <entry><para>ignore (discard) parity errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>PARMRK</code></para></entry>
	    <entry><para>mark parity and framing errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>INPCK</code></para></entry>
	    <entry><para>enable checking of parity errors</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ISTRIP</code></para></entry>
	    <entry><para>strip 8th bit off chars</para></entry>
	  </row>
	  <row>
	    <entry><para><code>INLCR</code></para></entry>
	    <entry><para>map NL into CR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IGNCR</code></para></entry>
	    <entry><para>ignore CR</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ICRNL</code></para></entry>
	    <entry><para>map CR to NL (ala CRMOD)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXON</code></para></entry>
	    <entry><para>enable output flow control</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXOFF</code></para></entry>
	    <entry><para>enable input flow control</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IXANY</code></para></entry>
	    <entry><para>any char will restart after stop</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IMAXBEL</code></para></entry>
	    <entry><para>ring bell on input queue full</para></entry>
	  </row>
	  <row>
	    <entry><para><code>IUCLC</code></para></entry>
	    <entry><para>translate upper case to lower case (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Control_Character_Constants">
      <title>Terminal Attributes Control Character Constants</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Special Character</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>VEOF</code></para></entry>
	    <entry><para><code>EOF</code></para></entry>
	    <entry><para>^D</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VEOL</code></para></entry>
	    <entry><para><code>EOL</code></para></entry>
	    <entry><para>_POSIX_VDISABLE</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VEOL2</code></para></entry>
	    <entry><para><code>EOL2</code></para></entry>
	    <entry><para>_POSIX_VDISABLE</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VERASE</code></para></entry>
	    <entry><para><code>ERASE</code></para></entry>
	    <entry><para>^? `177'</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VWERASE</code></para></entry>
	    <entry><para><code>WERASE</code></para></entry>
	    <entry><para>^W</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VKILL</code></para></entry>
	    <entry><para><code>KILL</code></para></entry>
	    <entry><para>^U</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VINTR</code></para></entry>
	    <entry><para><code>INTR</code></para></entry>
	    <entry><para>^C</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VQUIT</code></para></entry>
	    <entry><para><code>QUIT</code></para></entry>
	    <entry><para>^\ `34'</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSUSP</code></para></entry>
	    <entry><para><code>SUSP</code></para></entry>
	    <entry><para>^Z</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTART</code></para></entry>
	    <entry><para><code>START</code></para></entry>
	    <entry><para>^Q</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTOP</code></para></entry>
	    <entry><para><code>STOP</code></para></entry>
	    <entry><para>^S</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VLNEXT</code></para></entry>
	    <entry><para><code>LNEXT</code></para></entry>
	    <entry><para>^V</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VMIN</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>1</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VTIME</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>0</para></entry>
	  </row>

	  <row>
	    <entry><para><code>VREPRINT</code></para></entry>
	    <entry><para><code>REPRINT</code></para></entry>
	    <entry><para>^R (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VDSUSP</code></para></entry>
	    <entry><para><code>DSUSP</code></para></entry>
	    <entry><para>^Y (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VDISCARD</code></para></entry>
	    <entry><para><code>DISCARD</code></para></entry>
	    <entry><para>^O (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>
	  <row>
	    <entry><para><code>VSTATUS</code></para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>^T (this constant is only available on some systems; do not use in portable programs)</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <para id="X509_VerificationReasons_Hash">The <code>X509_VerificationReasons_Hash</code> is a constant in the Qore namespace that maps verfication code strings (as returned from <link linkend="FtpClient_verifyPeerCertificate">FtpClient::verifyPeerCertificate()</link> and <link linkend="Socket_verifyPeerCertificate">Socket::verifyPeerCertificate()</link>) to textual descriptions.</para>

    <table id="X509_VerificationReasons_Hash_Table">
      <title>X506_VerificationReasons Hash</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Key</para></entry>
	    <entry><para>Value</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>X509_V_OK</code></para></entry>
            <entry><para><code>OK</code></para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT</code></para></entry>
            <entry><para>Unable to get issuer certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_CRL</code></para></entry>
            <entry><para>Unable to get certificate CRL</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE</code></para></entry>
            <entry><para>Unable to decrypt certificate's signature. This means that the actual signature value could not be determined rather than it not matching the expected value; this is only meaningful for RSA</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE</code></para></entry>
            <entry><para>Unable to decrypt CRL's signature</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</code></para></entry>
            <entry><para>Unable to decode issuer public key (SubjectPublicKeyInfo)</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_SIGNATURE_FAILURE</code></para></entry>
            <entry><para>Certificate signature failure; the signature of the certificate is invalid</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_SIGNATURE_FAILURE</code></para></entry>
            <entry><para>CRL signature failure; the signature of the certificate is invalid</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_NOT_YET_VALID</code></para></entry>
            <entry><para>Certificate is not yet valid</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_HAS_EXPIRED</code></para></entry>
            <entry><para>Certificate has expired</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_NOT_YET_VALID</code></para></entry>
            <entry><para>CRL is not yet valid</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CRL_HAS_EXPIRED</code></para></entry>
            <entry><para>CRL has expired</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD</code></para></entry>
            <entry><para>Format error in certificate's notBefore field (invalid time)</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD</code></para></entry>
            <entry><para>Format error in certificate's notAfter field (invalid time)</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD</code></para></entry>
            <entry><para>Format error in CRL's lastUpdate field (invalid time)</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD</code></para></entry>
            <entry><para>Format error in CRL's nextUpdate field (invalid time)</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_OUT_OF_MEM</code></para></entry>
            <entry><para>Out of memory error</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</code></para></entry>
            <entry><para>Certificate is self-signed and cannot be found in the trusted list</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN</code></para></entry>
            <entry><para>Self signed certificate in certificate chain</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY</code></para></entry>
            <entry><para>Unable to get local issuer certificate. This normally means the list of trusted certificates is not complete</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE</code></para></entry>
            <entry><para>Unable to verify the first certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_CHAIN_TOO_LONG</code></para></entry>
            <entry><para>Certificate chain too long</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_REVOKED</code></para></entry>
            <entry><para>Certificate has been revoked</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_INVALID_CA</code></para></entry>
            <entry><para>Invalid CA certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_PATH_LENGTH_EXCEEDED</code></para></entry>
            <entry><para>The basicConstraints pathlength parameter has been exceeded</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_INVALID_PURPOSE</code></para></entry>
            <entry><para>The certificate cannot be used for the specified purpose</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_UNTRUSTED</code></para></entry>
            <entry><para>Root CA is not marked as trusted for the specified purpose</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_CERT_REJECTED</code></para></entry>
            <entry><para>Root CA is marked to reject the specified purpose</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_SUBJECT_ISSUER_MISMATCH</code></para></entry>
            <entry><para>The current candidate issuer certificate was rejected because its subject name did not match the issuer name of the current certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_AKID_SKID_MISMATCH</code></para></entry>
            <entry><para>The current candidate issuer certificate was rejected because its subject key identifier was present and did not match the authority key identifier of the current certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH</code></para></entry>
            <entry><para>Issuer name and serial number of candidate certificate do not match the authority key identifier of the current certificate</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_KEYUSAGE_NO_CERTSIGN</code></para></entry>
            <entry><para>The keyUsage extension does not permit certificate signing</para></entry>
          </row>
          <row>
            <entry><para><code>X509_V_ERR_APPLICATION_VERIFICATION</code></para></entry>
            <entry><para>Verification failure</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>The following gives a list of signal constants that may be present in Qore.  Signal constants and their values are system-dependent; only signals that the host system defines will be present in Qore, therefore not all of the signals in the following list will be present in any given version of Qore.</para>

    <table id="Signal_Constants">
      <title>Signal Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>SIGHUP</code></para></entry>
            <entry><para>Hangup signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGINT</code></para></entry>
            <entry><para>Interrupt signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGQUIT</code></para></entry>
            <entry><para>Quit signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGILL</code></para></entry>
            <entry><para>Illegal instruction signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTRAP</code></para></entry>
            <entry><para>Trace trap signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGABRT</code></para></entry>
            <entry><para>Abort signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPOLL</code></para></entry>
            <entry><para>Pollable event signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGIOT</code></para></entry>
            <entry><para>Synonym for SIBABRT</para></entry>
          </row>
          <row>
            <entry><para><code>SIGEMT</code></para></entry>
            <entry><para>EMT instruction signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGFPE</code></para></entry>
            <entry><para>Floating-point exception signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGKILL</code></para></entry>
            <entry><para>Kill signal (cannot be caught)</para></entry>
          </row>
          <row>
            <entry><para><code>SIGBUS</code></para></entry>
            <entry><para>Bus error signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSEGV</code></para></entry>
            <entry><para>Segmentation violation signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSYS</code></para></entry>
            <entry><para>Bad arugment to a system call.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPIPE</code></para></entry>
            <entry><para>Write on pipe with no reader (this signal is always ignored in Qore).</para></entry>
          </row>
          <row>
            <entry><para><code>SIGALRM</code></para></entry>
            <entry><para>Alarm clock signal.</para></entry>
          </row>
         <row>
            <entry><para><code>SIGTERM</code></para></entry>
            <entry><para>Software termination signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGURG</code></para></entry>
            <entry><para>Urgent condition on I/O channel.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSTOP</code></para></entry>
            <entry><para>Sendable stop signal (not from tty).</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTSTP</code></para></entry>
            <entry><para>Stop signal from tty.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCONT</code></para></entry>
            <entry><para>Continue a stopped process.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCHLD</code></para></entry>
            <entry><para>To parent on child stop or exit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTTIN</code></para></entry>
            <entry><para>To reader's process group on background tty read.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTTOU</code></para></entry>
            <entry><para>To writer's process group on background tty write.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGIO</code></para></entry>
            <entry><para>Input/Output possible signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXCPU</code></para></entry>
            <entry><para>Exceeded CPU time limit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXFSZ</code></para></entry>
            <entry><para>Exceeded file size limit.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGVTALRM</code></para></entry>
            <entry><para>Virtual time alarm signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPROF</code></para></entry>
            <entry><para>Profiling time alarm signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGWINCH</code></para></entry>
            <entry><para>Window size changes signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGINFO</code></para></entry>
            <entry><para>Information request signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGUSR1</code></para></entry>
            <entry><para>User-defined signal 1.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGUSR2</code></para></entry>
            <entry><para>User-defined signal 2.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGSTKFLT</code></para></entry>
            <entry><para>Stack fault on coprocessor.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCLD</code></para></entry>
            <entry><para>Synonym for SIGCHLD on some systems.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGPWR</code></para></entry>
            <entry><para>Power failure signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGLOST</code></para></entry>
            <entry><para>Resource (ex: file lock) lost signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGWAITING</code></para></entry>
            <entry><para>(Solaris) Waiting signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGLWP</code></para></entry>
            <entry><para>(Solaris) Light-weight process (thread) signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGFREEZE</code></para></entry>
            <entry><para>(Solaris) Checkpoint freeze signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGTHAW</code></para></entry>
            <entry><para>(Solaris) Checkpoint freeze thaw signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGCANCEL</code></para></entry>
            <entry><para>(Solaris) Cancel signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGXRES</code></para></entry>
            <entry><para>(Solaris) Resource control exceeded.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGJVM1</code></para></entry>
            <entry><para>(Solaris) Java virtual machine 1 signal.</para></entry>
          </row>
          <row>
            <entry><para><code>SIGJVM2</code></para></entry>
            <entry><para>(Solaris) Java virtual machine 2 signal.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>There are two special system-specific constants mapping signal names to signal number and vice-versa as given in the following table.</para>

    <table id="Special_Signal_Constants">
      <title>Signal Mapping Hash Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><para><code>SignalToName</code></para></entry>
            <entry><para>A hash mapping signal numbers to signal names (ex: <code>SignalToName."1"</code> gives the signal name corresponding to signal number <code>1</code>).</para></entry>
          </row>
          <row>
            <entry><para><code>NameToSignal</code></para></entry>
            <entry><para>A hash mapping signal names to signal numbers (ex: <code>NameToSignal."SIGINT"</code> gives the signal number corresponding to <code>"SIGINT"</code>).</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <para>The Err namespace contains error constants, returned by the <link linkend="errno">errno()</link> function.</para>

    <table id="Qore_Error_Constants">
      <title>Error Constants in the Err Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Err::*</code></para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>System-dependent integer ERRNO constants (ex: ENOMEM, etc)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Exception_Constants">
      <title>Exception Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>ET_System</code></para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Exception Type System: used for system exceptions.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>ET_User</code></para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Exception Type User: used for user exceptions (thrown using the <command>throw</command> statement.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_User</code></para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type User: used for user function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_Builtin</code></para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type Builtin: used for builtin function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_NewThread</code></para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type New Thread: used in a call stack when a new thread is started with the <command>background</command> expression.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>CT_Rethrow</code></para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type Rethrow: a marker for a rethrown exception in a call stack.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Regex_Constants">
      <title>Regular Expression Option Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type and Value</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>RE_Caseless</code></para></entry>
	    <entry><para>Integer: 1</para></entry>
	    <entry><para>Ignores case when matching regular expressions, equivalent to /i</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_MultiLine</code></para></entry>
	    <entry><para>Integer: 2</para></entry>
	    <entry><para>makes start-of-line (^) or end-of-line ($) match after or before any newline in the subject string, equivalent to /m</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_DotAll</code></para></entry>
	    <entry><para>Integer: 4</para></entry>
	    <entry><para>makes a dot (.) match a newline character, equivalent to /s</para></entry>
	  </row>
	  <row>
	    <entry><para><code>RE_Extended</code></para></entry>
	    <entry><para>Integer: 8</para></entry>
	    <entry><para>ignores whitespace characters and enables comments prefixed by #, equivalent to /x</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Qore_Type_Namespace">
    <title>Type Namespace</title>

    <para>The Type namespace only has constant definitions for basic Qore datatypes in it. There are no class definitions in the Type namespace.  The <link linkend="type">type() function</link> returns values in the set of the following constants.</para>

    <table id="Qore_Type_Constants">
      <title>Type Constant Definitions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Type::Boolean</code></para></entry>
	    <entry><para><link linkend="Boolean">Boolean</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Int</code></para></entry>
	    <entry><para><link linkend="Integer">Integer</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::String</code></para></entry>
	    <entry><para><link linkend="String">String</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Float</code></para></entry>
	    <entry><para><link linkend="Float">Float</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Date</code></para></entry>
	    <entry><para><link linkend="Date">Date</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Binary</code></para></entry>
	    <entry><para><link linkend="Binary">Binary</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Hash</code></para></entry>
	    <entry><para><link linkend="Hashes">Hash</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::List</code></para></entry>
	    <entry><para><link linkend="Lists">List</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Object</code></para></entry>
	    <entry><para><link linkend="Objects">Object</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::NullType</code></para></entry>
	    <entry><para><link linkend="NULL">SQL NULL</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::NothingType</code></para></entry>
	    <entry><para><link linkend="NOTHING">NOTHING</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::CallReference</code></para></entry>
	    <entry><para><link linkend="call_references">call references</link></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Type::Closure</code></para></entry>
	    <entry><para><link linkend="closures">closures</link></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="File_Class">
    <title>File Class</title>

    <para>Note: This class is not available with the <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link> parse option.</para>

    <para>The File class allows Qore programs to read, write, and create files.</para>

    <para>File objects can be created and/or opened with a specific 
    <link linkend="Qore_Strings_and_Character_Encoding">character encoding</link>, 
    meaning that any string read from the file will be tagged with the file's character 
    encoding, and any string data written to the file will be transparently converted 
    to that character encoding before being written (if necessary). If no character
    encoding is specified, then the <link linkend="Default_Character_Encoding">default Qore character encoding</link> is assumed for the file.</para>

    <para>This class supports posting events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="file_events">
      <title>File Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></para></entry>
            <entry><para>Raised when data is read from the file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_data_written">EVENT_DATA_WRITTEN</link></code></para></entry>
            <entry><para>Raised when data is written to the file.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
            <entry><para>Raised when the file is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_open_file">EVENT_OPEN_FILE</link></code></para></entry>
            <entry><para>Raised right before an attempt to open a file is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></para></entry>
            <entry><para>Raised when the file has been successfully opened.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table>
      <title>File Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="File_constructor">File::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the object and optionally sets the file's character encoding.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_destructor">File::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file if it is open and destroys the file object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_copy">File::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new file object with the same character encoding specification as the original, otherwise no other information is copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_chown">File::chown()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Changes the user and group owners of the file on the filesystem (if the current user has sufficient permission to do so).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_close">File::close()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_f_printf">File::f_printf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_f_vprintf">File::f_vprintf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_getchar">File::getchar()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Reads one character from the file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_getCharset">File::getCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character encoding for the file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_getLockInfo">File::getLockInfo()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns a hash of lock information.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_getPos">File::getPos()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current file position (in bytes)</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_getTerminalAttributes">File::getTerminalAttributes()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Saves the current terminal attributes for the file in the <link linkend="TermIOS_Class">TermIOS</link> object passed; changes the object passed to reflect the terminal attributes as set for the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_isDataAvailable">File::isDataAvailable()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns true if there is data available for reading from the file within the timeout period.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_lock">File::lock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Attempts to lock the file according to the arguments passed, does not block.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_lockBlocking">File::lockBlocking()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Attempts to lock the file according to the arguments passed, blocking.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_open">File::open()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a file in a particular mode, returns an error code on failure.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_open2">File::open2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a file in a particular mode; throws an exception on failure.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_printf">File::printf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_read">File::read()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file within an optional timeout period and returns a string of the data read.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readBinary">File::readBinary()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file within an optional timeout period and returns binary data.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi1">File::readi1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 1-byte signed integer from the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi2">File::readi2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte signed integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi4">File::readi4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte signed integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi8">File::readi8()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads an 8-byte signed integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi2LSB">File::readi2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte signed integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi4LSB">File::readi4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte signed integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readi8LSB">File::readi8LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads an 8-byte signed integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readu1">File::readu1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 1-byte unsigned integer from the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readu2">File::readu2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte unsigned integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readu4">File::readu4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte unsigned integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readu2LSB">File::readu2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2-byte unsigned integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readu4LSB">File::readu4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4-byte unsigned integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readBinary">File::readBinary()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Read a certain amount of data and return a binary object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_readLine">File::readLine()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads until an EOL marker is found</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_setCharset">File::setCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character encoding for the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_setPos">File::setPos()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the current file position (in bytes).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_setTerminalAttributes">File::setTerminalAttributes()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the current terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed; does not change the object passed.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_sync">File::sync()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Flushes the file's buffer to disk.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_vprintf">File::vprintf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_write">File::write()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes string or binary data to a file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei1">File::writei1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 1-byte integer to the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei2">File::writei2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei4">File::writei4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei4">File::writei8()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes an 8-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei2LSB">File::writei2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei4LSB">File::writei4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="File_writei8LSB">File::writei8LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes an 8-byte integer in little-endian format.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Constants">
      <title>File Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>      
	<tbody>
	  <row>
	    <entry><para><code>O_RDONLY</code></para></entry>
	    <entry><para>Open the file read-only.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>O_WRONLY</code></para></entry>
	    <entry><para>Open the file write-only.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>O_CREAT</code></para></entry>
	    <entry><para>Create the file if it doesn't exist.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>O_APPEND</code></para></entry>
	    <entry><para>Open the file in append mode.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>O_RDWR</code></para></entry>
	    <entry><para>Open for reading and writing.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>O_TRUNC</code></para></entry>
	    <entry><para>Truncate the size to zero.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Locking_Constants">
      <title>File Locking Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>      
	<tbody>
	  <row>
	    <entry><para><code>F_RDLCK</code></para></entry>
	    <entry><para>Use for read-only locking.</para></entry>
	  </row>
	  <row>
	    <entry><para><code>F_WRLCK</code></para></entry>
	    <entry><para>Use for exclusive write locking.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="File_constructor">
      <title>File::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the File object. It accepts one optional argument that will set the default character encoding for the file (only affects reading and writing string data).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> File(<replaceable>[string:encoding]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f = <command>new</command> File("ISO-8859-1"); # specify ISO-8859-1 encoding for the file</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
	<title>Arguments for File::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the file.  Any strings written to the file will be converted to this character encoding if necessary.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The File object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_destructor">
      <title>File::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file if it's open and destroys the File object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $f;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="File_copy">
      <title>File::copy()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new File object with the same character encoding specification as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f1 = $f.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>	    
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>The new File object created with the same character encoding specification as the original object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_chown">
      <title>File::chown()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Changes the file's user and group owner (if the user has sufficient permissions to do so).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::chown(<replaceable>user_id, group_id</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.chown(0, 0);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::chown()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>user_id</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The user id of the user to change to.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>group_id</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The group id of the user to change to.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return a value; if an error occurs, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-CHOWN-ERROR</code></para></entry>
	      <entry><para>File is not open or the chown operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_close">
      <title>File::close()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file object if it's open.  Note that this is automatically called by <link linkend="File_destructor">File::destructor()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::close()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.close();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for an error (see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error information)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_f_printf">
      <title>File::f_printf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, enforces hard field limits (similar to the <link linkend="f_printf">f_printf()</link> function). See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::f_printf(<replaceable>string:format, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.f_printf("%5s\n", "long string"); # will print "long \n", respecting the 5-character field width</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_printf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>args</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Exceptions Thrown by File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_f_vprintf">
      <title>File::f_vprintf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.   See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::f_vprintf(<replaceable>format_string, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.f_vprintf("%5s %3d\n", ("a long string", 5000)); # outputs "a lon 500", truncating output</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_vprintf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>arg_list</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>This list will be used as the argument list or the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getchar">
      <title>File::getchar()</title><para></para>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads one character from the file and returns it as a one-character string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getchar()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$char = $f.getchar();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getchar()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a<replaceable></replaceable></para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getchar()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The single character read from the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    
    <sect2 id="File_getCharset">
      <title>File::getCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$encoding = $f.getCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getLockInfo">
      <title>File::getLockInfo()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a hash of lock information for the file.  The hash contains the following keys: start, len, pid, type, whence.  If no lock is set on the file, the key type has the value F_UNLCK.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getLockInfo()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $hash = $f.getLockInfo();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getLockInfo()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::getLockInfo()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>The hash contains the following keys: start, len, pid, type, whence.  If no lock is set on the file, the key type has the value F_UNLCK.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::getLockInfo()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_getPos">
      <title>File::getPos()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the current file position as an integer giving the offset in bytes from the beginning of the file (starting from zero).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getPos()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pos = $f.getPos();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getPos()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The byte position in the file starting at 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_getTerminalAttributes">
      <title>File::getTerminalAttributes()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Saves the current terminal attributes for the file in the <link linkend="TermIOS_Class">TermIOS</link> object passed; changes the object passed to reflect the terminal attributes as set for the file.  Do not pass a reference to the  <link linkend="TermIOS_Class">TermIOS</link> object; pass the object itself.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getTerminalAttributes(<replaceable>termios</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $termios = <command>new</command> TermIOS();
$f.getTerminalAttributes($termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getTerminalAttributes()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>termios</replaceable></para></entry>
	      <entry><para><link linkend="TermIOS_Class">TermIOS</link></para></entry>
	      <entry><para>The method writes the current terminal attributes for the file to the object passed.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0; if an error is encountered, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::getTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPERATION-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TERMIOS-GET-ERROR</code></para></entry>
	      <entry><para>Error reading terminal attributes from the file descriptor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_isDataAvailable">
      <title>File::isDataAvailable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns True is data becomes available for reading on the file within a timeout period.  With a timeout of zero (the default if no timeout value is passed), this method can be used for non-blocking polling the file for data.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>25ms</code>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::isDataAvailable(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $file.isDataAvailable(0); # returns True if data is available now</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::isDataAvailable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method assumes a timeout of zero and returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if data becomes available for reading from the file within the timeout period, False if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_lock">
      <title>File::lock()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks or unlocks a portion of the file or the entire file, for reading or writing, non-blocking.  The file must be opened in the appropriate mode before this call or the call will fail with an exception.  For a blocking version of this method, see <link linkend="File_lockBlocking">File::lockBlocking()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::lock(<replaceable>type, [start, [len]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># lock the entire file exclusively
$f.lock(F_WRLCK);

# lock a section of the file for reading, start byte 512, 2K range
$f.lock(F_RDLCK, 512, 2048);

# release all locks
$f.lock(F_UNLCK);
</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::lock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>type</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Type of lock (or unlock), see <link linkend="File_Locking_Constants">File locking constants</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>start</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Start byte for lock, 0 is the default (start of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>len</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Length in bytes for range to lock, 0 is the default (rest of file).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Int</para></entry>
	      <entry><para>Returns 0 for success, EACCES if the lock would block (only in the case that the lock would block is no exception thrown and EACCES returned).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open, lock length is negative, or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_lockBlocking">
      <title>File::lockBlocking()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks or unlocks a portion of the file or the entire file, for reading or writing, blocking.  The file must be opened in the appropriate mode before this call or the call will fail with an exception.  For a non-blocking version of this method, see <link linkend="File_lock">File::lock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::lockBlocking(<replaceable>type, [start, [len]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># lock the entire file exclusively
$f.lockBlocking(F_WRLCK);

# lock a section of the file for reading, start byte 512, 2K range
$f.lockBlocking(F_RDLCK, 512, 2048);

# release all locks
$f.lockBlocking(F_UNLCK);
</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::lockBlocking()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>type</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Type of lock (or unlock), see <link linkend="File_Locking_Constants">File locking constants</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>start</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Start byte for lock, 0 is the default (start of file).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>len</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Length in bytes for range to lock, 0 is the default (rest of file).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::lockBlocking()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return a value; exceptions are thrown if errors occur.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::lockBlocking()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-LOCK-ERROR</code></para></entry>
	      <entry><para>File is not open, lock length is negative, or the fcntl operation failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_printf">
      <title>File::printf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string with soft field widths to the file.  See <link linkend="File_f_printf">File::f_printf()</link> for a similar method that enforces field widths.  See <link linkend="String_Formatting">String Formatting</link> for more information about the format string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::printf(<replaceable>string:format, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.printf("%5s\n", "hello there"); # outputs "hello there\n", exceeding field width</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::printf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>args</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_open">
      <title>File::open()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens the file in the mode given. 
	    Aditionally, the file permissions can be given if the file is to be created, and 
	    optionally the file's default character encoding can be specified.</para>
	    <para>For a version of this method that throws an exception when errors occur opening the file, see <link linkend="File_open2">File::open2()</link>.</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::open(<replaceable>string:filename, [integer:flags, [integer:mode, [string:charset]]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a file for writing, truncate data if already exists, create the file if doesn't exist
# set 0644 permissions, and convert all string data to ISO-8859-1 encoding
$f.open("new_file.txt", O_CREAT | O_TRUNC | O_WRONLY, 0644, "ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_open_file">EVENT_OPEN_FILE</link>, <link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></listitem>
        </varlistentry>

      </variablelist>

      <table>
	<title>Arguments for File::open()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The Filename of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>flags</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, O_RDONLY will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>mode</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0777)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>charset</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the default character encoding for this file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 = no error, -1 = see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error message</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPEN-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing filename argument.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_open2">
      <title>File::open2()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens the file in the mode given.  Aditionally, the file permissions can be given if the file is to be created, and optionally the file's default character encoding can be specified.</para>
	    <para>If an error occurs, a <code>FILE-OPEN2-ERROR</code> exception is thrown.  For a version of this method that returns an error code, see <link linkend="File_open">File::open()</link>.</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::open2(<replaceable>string:filename, [integer:flags, [integer:mode, [string:charset]]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a file for writing, truncate data if already exists, create the file if doesn't exist
# set 0644 permissions, and convert all string data to ISO-8859-1 encoding
$f.open2("new_file.txt", O_CREAT | O_TRUNC | O_WRONLY, 0644, "ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_open_file">EVENT_OPEN_FILE</link>, <link linkend="event_file_opened">EVENT_FILE_OPENED</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::open2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The Filename of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>flags</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, O_RDONLY will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>mode</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0777)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>charset</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the default character encoding for this file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::open2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value; if an error occurs, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::open2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPEN2-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing filename argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-OPEN2-ERROR</code></para></entry>
	      <entry><para>Error opening the file; attempted to reopen a system file (<link linkend="Qore_IO_Constants">I/O constants</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="File_read">
      <title>File::read()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a certain amount of string data from the file; the size argument is required.  To read binary data, use the <link linkend="File_readBinary">File::readBinary()</link> method.</para>
	    <para>Note that the amount of data read from the file may be less than the size given, for example if the file does not contain enough data to fulfill the request.  In this case, only the data available in the file is returned.</para>
	    <para>An optional timeout period in milliseconds can be passed as well (or a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear; ex: <code>25ms</code>).  If a timeout value is passed and the data cannot be read within the timeout period, then a <code>FILE-READ-TIMEOUT</code> exception is thrown.  If no timeout value is passed or a negative value is given, then the call will never timeout until either the requested amount of data has been read from the file or an end-of-file condition has been reached.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::read(<replaceable>integer:size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $f.read(-1); # read an entire text file into a variable</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::read()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of bytes to read of the file, -1 will read the entire file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>A timeout period in milliseconds; if not given or negative the call will never time out and will only return when the data has been read.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The data read from the file, returned as a string.  NOTHING is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and NOTHING (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open; timeout limit exceeded.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_readi1">
      <title>File::readi1()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 1-byte signed integer from the file and returns the integer value read.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi1()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi1();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 1-byte signed integer as read from the file in binary format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi2">
      <title>File::readi2()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in big-endian (MSB, network byte order) format.  See <link linkend="File_readi2LSB">File::readi2LSB()</link> for an equivalent method reading a 2-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi2()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi2();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 2-byte signed integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi4">
      <title>File::readi4()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readi4LSB">File::readi4LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi4()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi4();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi8">
      <title>File::readi8()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readi8LSB">File::readi8LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi8()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi8();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi8()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi2LSB">
      <title>File::readi2LSB()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in little-endian (LSB) format.  See <link linkend="File_readi2">File::readi2()</link> for an equivalent method reading a 2-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi2LSB()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi2LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 2-byte signed integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi4LSB">
      <title>File::readi4LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in little-endian format.  See <link linkend="File_readi4">File::readi4()</link> for an equivalent method reading a 4-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi4LSB()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi4LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 4-byte signed integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readi8LSB">
      <title>File::readi8LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads an 8-byte signed integer from the file in little-endian format.  See <link linkend="File_readi8">File::readi8()</link> for an equivalent method reading a 8-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi8LSB()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readi8LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi8LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 4-byte signed integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="File_readu1">
      <title>File::readu1()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 1-byte unsigned integer from the file and returns the integer value read.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readu1()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readu1();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readu1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 1-byte unsigned integer as read from the file in binary format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu2">
      <title>File::readu2()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in big-endian (MSB, network byte order) format.  See <link linkend="File_readu2LSB">File::readu2LSB()</link> for an equivalent method reading a 2-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readu2()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readu2();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readu2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 2-byte signed integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu4">
      <title>File::readu4()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte signed integer from the file in big-endian format.  See <link linkend="File_readu4LSB">File::readu4LSB()</link> for an equivalent method reading a 4-byte signed integer in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readu4()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readu4();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readu4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 4-byte signed integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu2LSB">
      <title>File::readu2LSB()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte signed integer from the file in little-endian (LSB) format.  See <link linkend="File_readu2">File::readu2()</link> for an equivalent method reading a 2-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readu2LSB()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readu2LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readu2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 2-byte signed integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readu4LSB">
      <title>File::readu4LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte unsigned integer from the file in little-endian format.  See <link linkend="File_readu4">File::readu4()</link> for an equivalent method reading a 4-byte signed integer in big-endian (MSB, network byte order) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readu4LSB()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $f.readu4LSB();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readu4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 4-byte unsigned integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readBinary">
      <title>File::readBinary()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Read a certain amount of data and return a binary object; the size parameter is mandatory.</para>
	    <para>Note that the amount of data read from the file may be less than the size given, for example if the file does not contain enough data to fulfill the request.  In this case, only the data available in the file is returned.</para>
	    <para>An optional timeout period in milliseconds can be passed as well (or a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear; ex: <code>25ms</code>).  If a timeout value is passed and the data cannot be read within the timeout period, then a <code>FILE-READ-TIMEOUT</code> exception is thrown.  If no timeout value is passed or a negative value is given, then the call will never timeout until either the requested amount of data has been read from the file or an end-of-file condition has been reached.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readBinary(<replaceable>integer:size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $f.readBinary(-1); # reads an entire binary file into a variable</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readBinary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of bytes to read of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>A timeout period in milliseconds; if not given or negative the call will never time out and will only return when the data has been read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Binary</para></entry>
	      <entry><para>A binary object containing the data read from the file.  NOTHING is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and NOTHING (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READ-BINARY-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-READ-ERROR</code></para></entry>
	      <entry><para>File is not open; timeout limit exceeded.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_readLine">
      <title>File::readLine()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads until an EOL marker is found and returns a string containing the EOL marker.  Returns NOTHING on end of file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readLine()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>while (exists (my $line = $f.readLine()))
{
    # remove EOL marker
    chomp $line;
    # print out the line just read
    printf("%s\n", $line);
}</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_READ</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readLine()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The line read from the file.  NOTHING is returned if end-of-file is encountered, however, if data has been read before EOF, the data read will be returned and NOTHING (signifying EOF) will be returned on the next call to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-READLINE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_setCharset">
      <title>File::setCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the characte encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::setCharset(<replaceable>string:encoding</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.setCharset("ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_setPos">
      <title>File::setPos()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the current file position in bytes starting with zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::setPos(<replaceable>integer:position</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.setPos(0); # go to the beginning of the file</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setPos()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>position</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The position in the file as offset from position 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::setPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns the new offset in the file, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_setTerminalAttributes">
      <title>File::setTerminalAttributes()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed; does not change the object passed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::setTerminalAttributes(<replaceable>termios</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $termios = <command>new</command> TermIOS();
<command>my</command> $orig = $termios.copy();
<command>on_exit</command>
    stdin.setTerminalAttributes(TCSADRAIN, $orig);

<command>my</command> $lflag = $termios.getLFlag();
$lflag &amp;= ~ICANON;
$lflag &amp;= ~ECHO;
$lflag &amp;= ~ISIG;
$termios.setLFlag($lflag);
$termios.setCC(VMIN, 1);
$termios.setCC(VTIME, 0);
stdin.setTerminalAttributes(TCSADRAIN, $termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setTerminalAttributes()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>termios</replaceable></para></entry>
	      <entry><para><link linkend="TermIOS_Class">TermIOS</link></para></entry>
	      <entry><para>Sets the current terminal attributes for the file from the <link linkend="TermIOS_Class">TermIOS</link> object passed.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::setTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0; if an error is encountered, an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::setTerminalAttributes()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-OPERATION-ERROR</code></para></entry>
	      <entry><para>The file is not open.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TERMIOS-GET-ERROR</code></para></entry>
	      <entry><para>Error setting terminal attributes on the file descriptor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="File_sync">
      <title>File::sync()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Flushes the file's buffer to disk.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::sync()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.sync();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::sync()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::sync()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_vprintf">
      <title>File::vprintf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the first argument is a <link linkend="String_Formatting">format string</link>,and the second argument is the formatting argument list.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::vprintf(<replaceable>string:format, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.vprintf("%5s\n", "hello");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::vprintf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>arg_list</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>This list will be used as the argument list or the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_write">
      <title>File::write()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes string or binary data to a file.  String data will be converted to the file's character encoding if necessary before writing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::write(<replaceable>arg</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.write($data);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::write()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>arg</replaceable></para></entry>
	      <entry><para>String or Binary</para></entry>
	      <entry><para>Writes the data to the file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing string or binary argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei1">
      <title>File::writei1()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 1-byte integer to the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei1(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei1($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; only the least-significant 8 bits will be written to the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei2">
      <title>File::writei2()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei2(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei2($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in big-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei4">
      <title>File::writei4()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei4(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei4($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in big-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei8">
      <title>File::writei8()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes an 8-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei8(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei8($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei8()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes an 8-byte integer in big-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei2LSB">
      <title>File::writei2LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei2LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei2LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in little-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei4LSB">
      <title>File::writei4LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei4LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei4LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in little-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="File_writei8LSB">
      <title>File::writei8LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes an 8-byte integer to the file in little-endian (LSB) format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei8LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$f.writei8LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_data_read">EVENT_DATA_WRITTEN</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei8LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes an 8-byte integer in little-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FILE-WRITE-ERROR</code></para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>


  <sect1 id="Dir_Class">
    <title>Dir Class</title>

    <para>Note: This class is not available with the <link linkend="no-filesystem"><code>PO_NO_FILESYSTEM</code></link> parse option.</para>

    <para>The Dir class allows Qore programs to list and manipulate directories.</para>

    <para>Directory objects can be created/opened with a specific character encoding. This means that any entry read from the directory
    will be tagged with the directory's character encoding. If no character encoding is given the <link linkend="Default_Character_Encoding">default Qore character encoding</link> is assumed.</para>

    <table>
      <title>Dir Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Dir_constructor">Dir::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Create a Directory object with the optional character encoding. It points to the directory the script is started.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_destructor">Dir::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the directory object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_copy">Dir::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new directory object with the same character encoding specification and the same path as the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_chdir">Dir::chdir()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Change the path of the directory. The path specification can be relative or absolute (with leading '/'). This path not necessarily needs to exist.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_path">Dir::path()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Return the current path of the object. The path is stripped of all '.' and '..' entries.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_exists">Dir::exists()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Checks if the path in the object is an openable directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_create">Dir::create()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Try to create all directories of the object if they do not exist yet.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_chown">Dir::chown()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the ownership of the directory to the given user.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_chgrp">Dir::chgrp()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the group membership of the directory to the given group.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_chmod">Dir::chmod()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Change the permissions of the directory to the given mode.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_mkdir">Dir::mkdir()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Create a subdirectory with the name in the directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_rmdir">Dir::rmdir()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Delete an empty subdirectory with the name in the directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_list">Dir::list()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in this directory, except '.' and '..' directories (takes an optional regular expression filter).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_listFiles">Dir::listFiles()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in the directory which are not subdirectories (takes an optional regular expression filter).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_listDirs">Dir::listDirs()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get all entries in the directory which are subdirectories, except '.' and '..' directories (takes an optional regular expression filter).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_openDir">Dir::openDir()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get a Dir object as an subdir entry of the current directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Dir_openFile">Dir::openFile()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Get a File object which represents a file in the directory.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Dir_removeFile">Dir::removeFile()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Remove (unlink) a file in this directory.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>


    <sect2 id="Dir_constructor">
      <title>Dir::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a Dir object. It accepts one optional argument that will set the default character encoding encoding for the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Dir(<replaceable>[string:encoding]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d = <command>new</command> Dir("UTF-8");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
	<title>Arguments for Dir::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the directory.  Any entry of the directory will be converted to this character encoding if necessary.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Dir::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The Dir object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_destructor">
      <title>Dir::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the Dir object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $d;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>


    <sect2 id="Dir_copy">
      <title>Dir::copy()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Dir object with the same character encoding specification and path as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$d2 = $d.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>	    
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>The new Dir object created with the same character encoding specification and path as the original object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chdir">
      <title>Dir::chdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the directory of the Dir object to the path. you can use either an absolute path (leading with '/') or a directory realtive to the actual path.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::chdir(newdir)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
if($d.chdir("../doc")) {
  printf("the directory does not exist or is not readable\n");
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chdir()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>newdir</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The new directory name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::chdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if the new path is openable as directory (see <link linkend="Dir_exists">exists()</link>).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_path">
      <title>Dir::path()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Return the path of the Dir object. This path needs not necessarily to exist. The path is stripped from all '.' and '..' directories.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::path()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mypath = $d.path();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::path()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::path()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The path of the Dir object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_exists">
      <title>Dir::exists()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Return if the path in the Dir object points to a directory which is openable by the Program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::exists()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
if(!$d.exists()) {
  printf("the directory %s does not exist\n", $d.path());
  exit(-1);
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::exists()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::exists()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if the directory is openable.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_create">
      <title>Dir::create()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Create the whole directory tree the Dir object points to, if it does not exist till now.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::create([mode])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
if (!$d.exists()) {
  printf("directory '%s' does not exist, so i create it\n", $d.path());
  $cnt = $d.create();
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::create()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>[mode]</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The mode of the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::create()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Number directories created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::create()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CREATE-ERROR</code></para></entry>
	      <entry><para>One of the directories in the path could not be created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chown">
      <title>Dir::chown()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the ownership of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::chown(uid|username)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.chown("nobody");
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chown()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>uid</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The userid to be used.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para>username</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>A username which is known by the system.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHOWN-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHOWN-ERROR</code></para></entry>
	      <entry><para>The error occoured in the chown() call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chgrp">
      <title>Dir::chgrp()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the group membership of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::chgrp(gid|groupname)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.chgrp("nogroup");
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chgrp()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>gid</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The groupid to be set for the directory.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para>groupname</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the group to be set. Must be known in the system.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::chgrp()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chgrp()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHGRP-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHGRP-ERROR</code></para></entry>
	      <entry><para>Error occoured during the change group chown() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_chmod">
      <title>Dir::chmod()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Change the mode of the directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::chmod([mode])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.chmod(0711); # set mode to u(rwx) and go(x)
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::chmod()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>mode</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The mode of the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::chmod()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::chmod()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHMOD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-CHMOD-ERROR</code></para></entry>
	      <entry><para>The error returned from the chmod() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_mkdir">
      <title>Dir::mkdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Make a subdirectory in the Dir object's path. There are no path info allowed (the '/'). If no mode is given the mode 0777 is used.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::mkdir(subdir, [mode])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.mkdir("newSubDir", 0755);
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::mkdir()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>subdir</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the subdirectory.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para>mode</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The mode of the new directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::mkdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir:mkdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-MKDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-MKDIR-ERROR</code></para></entry>
	      <entry><para>The error returned from the mkdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_rmdir">
      <title>Dir::rmdir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Remove a subdirectory from the Dir object's path. There is no pathinfo allowed in the name (the '/' delimiter).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::rmdir(dirname)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.rmdir("emptySubdir");
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::rmdir()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>dirname</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the directory to be removed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::rmdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::rmdir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-RMDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-RMDIR-ERROR</code></para></entry>
	      <entry><para>The error returned from the rmdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_list">
      <title>Dir::list()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object. It supresses the '.' and '..' directory.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::list([regex, [regex_option]])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
foreach my $e in ( $d.list() ) {
  printf("entry: %s\n");
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::list()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>[regex]</para></entry>
	      <entry><para>string</para></entry>
	      <entry><para>A regular expression string used to filter the arguments.</para></entry>
	    </row>
	    <row>
	      <entry><para>[regex_option]</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link></para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>A list of Strings with the directories content.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_listFiles">
      <title>Dir::listFiles()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object, which are not subdirectories.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::listFiles()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
foreach my $e in ( $d.listFiles() ) {
  printf("file: %s\n");
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::listFiles()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>[regex]</para></entry>
	      <entry><para>string</para></entry>
	      <entry><para>A regular expression string used to filter the arguments.</para></entry>
	    </row>
	    <row>
	      <entry><para>[regex_option]</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link></para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::listFiles()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>A list of Strings with the directories content.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::listFiles()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_listDirs">
      <title>Dir::listDirs()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>List all entries in the directory of the Dir object, which are subdirectories. It supresses the '.' and '..' directories.  An optional regular expression string can be passed to filter the values returned; if this argument is given then only entries that match the regular expression will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::listDirs()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
foreach my $e in ( $d.listDirs() ) {
  printf("entry: %s\n");
}
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::listDirs()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>[regex]</para></entry>
	      <entry><para>string</para></entry>
	      <entry><para>A regular expression string used to filter the arguments.</para></entry>
	    </row>
	    <row>
	      <entry><para>[regex_option]</para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>For valid options, see <link linkend="Qore_Regex_Constants">Regex Constants</link></para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::listDirs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>A list of Strings with the directories content.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::listDirs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-READ-ERROR</code></para></entry>
	      <entry><para>The error returned from the readdir() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_openDir">
      <title>Dir::openDir()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Return a Dir object in the directory of the Dir object.
	          The dirname does not allow path information (the '/').
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::openDir(<replaceable>string:dirname, [string:charset]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
# open a subdir for working with.
$sd = $d.openDir("mysubdir", "ISO-8859-1");
$sd_list = $sd.list();
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::openDir()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>dirname</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the subdirectory. The directory must not exist and can be created with create() afterwards.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>charset</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the default character encoding for this directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::openDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The Dir object created for the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::openDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-OPENDIR-PARAMETER-ERROR</code></para></entry>
	      <entry><para>The directory name to be opened contains path information ('/').</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_openFile">
      <title>Dir::openFile()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Create or open a File object in the directory of the Dir object.
	          The filename does not allow path information (the '/').
		  Uses the <link linkend="File_open2">File::open2()</link> method.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::openFile(<replaceable>string:filename, [integer:flags, [integer:mode, [string:charset]]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
# open a file for writing in the directory and set the mode to
# 0644 and the encoding to UTF-8
<command>my</command> $f = $d.openFile("myfile.txt", O_CREAT|O_WRONLY, 0644, "UTF-8");
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::openFile()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The Filename of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>flags</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information. If this argument is not given, O_RDONLY will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>mode</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0666)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>charset</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the default character encoding for this file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::openFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The File object created or opened in the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::openFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-OPENFILE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>The file name to be opened contains path information ('/').</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para>File Exceptions</para></entry>
	      <entry><para>Exceptions thrown by the <link linkend="File_open2">File::open2()</link> call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="Dir_removeFile">
      <title>Dir::removeFile()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Remove the file with the given name in the Dir object's directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Dir::removeFile(filename)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>
$d.removeFile("myTestFile.dat");
            </programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Dir::removeFile()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>filename</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the file in the directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for Dir::removeFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if the file was present and could be removed. False if the file did not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Dir::removeFile()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-REMOVEFILE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Parameter error.</para></entry>
	    </row>
	  </tbody>
	  <tbody>
	    <row>
	      <entry><para><code>DIR-REMOVEFILE-ERROR</code></para></entry>
	      <entry><para>The error returned by the unlink() system call.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="TermIOS_Class">
    <title>TermIOS Class</title>

    <para>This class contains the data structure used to read and set terminal attributes on <link linkend="Qore_IO_Constants">terminal I/O constants</link>.</para>

    <para>This class is used with <link linkend="File_getTerminalAttributes">File::getTerminalAttributes()</link>, <link linkend="File_setTerminalAttributes">File::setTerminalAttributes()</link>, and the <link linkend="Qore_IO_Constants">terminal I/O constants</link> to manipulate terminal attributes.</para>

    <para>For example, here is some code to set terminal attributes, read in a character from stanrdard input with a timeout, and reset the terminal attributes:</para>

    <programlisting><command>my</command> $t = <command>new</command> TermIOS();
stdin.getTerminalAttributes($t);
<command>my</command> $orig = $t.copy();
<command>on_exit</command>
    stdin.setTerminalAttributes(TCSADRAIN, $orig);

<command>my</command> $lflag = $t.getLFlag();
$lflag &amp;= ~ICANON;
$lflag &amp;= ~ECHO;
$lflag &amp;= ~ISIG;
$t.setLFlag($lflag);
$t.setCC(VMIN, 1);
$t.setCC(VTIME, 0);
stdin.setTerminalAttributes(TCSADRAIN, $t);

stdout.printf("Press any key: ");
<command>while</command> (!stdin.isDataAvailable(20ms)) {
    stdout.printf(".");
    stdout.sync();
    usleep(1ms);
}
<command>my</command> $c = stdin.read(1);
stdout.printf(" GOT ASCII 0x%02x (%d) '%s'\n", ord($c), ord($c), $c);</programlisting>

    <para>For more information on terminal attributes, see your system's manual pages for &quot;termios&quot;.</para>

    <table>
      <title>TermIOS Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="TermIOS::constructor">TermIOS::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the TermIOS object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::destructor">TermIOS::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the TermIOS object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::copy">TermIOS::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a copy of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::getLFlag">TermIOS::getLFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Local_Mode_Constants">local mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::getCFlag">TermIOS::getCFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Control_Mode_Constants">control mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::getOFlag">TermIOS::getOFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Output_Mode_Constants">output mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::getIFlag">TermIOS::getIFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the <link linkend="Input_Mode_Constants">input mode</link> value of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::setLFlag">TermIOS::setLFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Local_Mode_Constants">local mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::setCFlag">TermIOS::setCFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Control_Mode_Constants">control mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::setOFlag">TermIOS::setOFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Output_Mode_Constants">output mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::setIFlag">TermIOS::setIFlag()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="Input_Mode_Constants">input mode</link> of the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::getCC">TermIOS::getCC()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the value of a <link linkend="Control_Character_Constants">control character</link> for the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::setCC">TermIOS::setCC()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the value of a <link linkend="Control_Character_Constants">control character</link> for the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="TermIOS::isEqual">TermIOS::isEqual()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns true if the object passed is equal to the current object, false if not.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="TermIOS::constructor">
      <title>TermIOS::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the TermIOS object with random contents.  Use <link linkend="File_getTerminalAttributes">File::getTerminalAttributes()</link> with a <link linkend="Qore_IO_Constants">terminal I/O constant</link> to initialize the object with terminal settings.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> TermIOS()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $termios = <command>new</command> TermIOS();
stdin.getTerminalAttributes($termios);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for TermIOS::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>The constructor takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for TermIOS::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>TermIOS Object</para></entry>
	      <entry><para>The new TermIOS object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="TermIOS::destructor">
      <title>TermIOS::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the TermIOS object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $termios;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="TermIOS::copy">
      <title>TermIOS::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a copy of the object.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="TermIOS::getLFlag">
      <title>TermIOS::getLFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::getLFlag()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getLFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getLFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getCFlag">
      <title>TermIOS::getCFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::getCFlag()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getCFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getCFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getIFlag">
      <title>TermIOS::getIFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::getIFlag()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getIFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getIFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getOFlag">
      <title>TermIOS::getOFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::getOFlag()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getOFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getOFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setLFlag">
      <title>TermIOS::setLFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Local_Mode_Constants">local mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::setLFlag(<replaceable>lflag</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setLFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>lflag</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Local_Mode_Constants">local mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::setLFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setCFlag">
      <title>TermIOS::setCFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Control_Mode_Constants">control mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::setCFlag(<replaceable>cflag</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setCFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>cflag</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Control_Mode_Constants">control mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::setCFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setIFlag">
      <title>TermIOS::setIFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Input_Mode_Constants">input mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::setIFlag(<replaceable>iflag</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setIFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>iflag</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Input_Mode_Constants">input mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::setIFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setOFlag">
      <title>TermIOS::setOFlag()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Output_Mode_Constants">output mode</link> flag for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::setOFlag(<replaceable>oflag</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setOFlag()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>oflag</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Output_Mode_Constants">output mode</link> to set for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::setOFlag()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::getCC">
      <title>TermIOS::getCC()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the value of the <link linkend="Control_Character_Constants">control character</link> corresponding to the argument passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::getCC(<replaceable>cc</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::getCC()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>cc</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>The <link linkend="Control_Character_Constants">control character</link> to get from th object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::getCC()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The value of the given <link linkend="Control_Character_Constants">control character</link>.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::setCC">
      <title>TermIOS::setCC()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the <link linkend="Control_Character_Constants">control character</link> corresponding to the first argument to the value of the second argument.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::setCC(<replaceable>cc, val</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::setCC()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>cc</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The <link linkend="Control_Character_Constants">control character</link> to set.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>val</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The value to set</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::setCC()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="TermIOS::isEqual">
      <title>TermIOS::isEqual()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the TermIOS object passed as an argument is equal to the current object; false if not.  If the argument passed to this method is not a TermIOS object, an exception is raised</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>TermIOS::isEqual(<replaceable>termios</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for TermIOS::isEqual()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>termios</replaceable>
                </para>
              </entry>
              <entry>
                <para>TermIOS</para>
              </entry>
              <entry>
                <para>The object to compare to the current object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for TermIOS::isEqual()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>The result of comparing the current object to the argument</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by TermIOS::isEqual()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>TERMIOS-ISEQUAL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>argument passed is not a TermIOS object</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="GetOpt_Class">
    <title>GetOpt Class</title>
    
    <para>The GetOpt class provides an easy way to process POSIX-style command-line options in Qore scripts/programs.</para>

    <table>
      <title>GetOpt Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><link linkend="GetOpt_constructor">GetOpt::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the GetOpt object with the option hash passed.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="GetOpt_destructor">GetOpt::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="GetOpt_copy">GetOpt::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="GetOpt::parse">GetOpt::parse()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Parses the argument list passed and retuns a hash of the results.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="GetOpt_constructor">
      <title>GetOpt::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the GetOpt object and sets the option hash with the single required argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> GetOpt(<replaceable>option_hash</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>const program_options = 
    ( "url"  : "url,u=s",
      "xml"  : "xml,x",
      "lxml" : "literal-xml,X",
      "verb" : "verbose,v",
      "help" : "help,h" );

$getopt = <command>new</command> GetOpt(program_options);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>option_hash</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>Each key defines the key value for the return hash if any arguments are given corresponding to the string value of the key.</para></entry>
	    </row>	  
	  </tbody>
	</tgroup>
      </table>
      
      <para>The string value of each hash follows the following pattern:</para>
      <programlisting><replaceable>opts</replaceable>[=|:<replaceable>type</replaceable>[<replaceable>modifier</replaceable>]]</programlisting>
      
      <table>
	<title>Option Hash Value String</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Component</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>opts</replaceable></para></entry>
	      <entry><para>At least one short option and/or a long option name; if both are present, then they must be separated by a comma.  The short option must be a single character.</para></entry>
	    </row>
	    <row>
	      <entry><para>[=:<replaceable>type</replaceable>]</para></entry>
	      <entry><para>if &quot;=&quot; is used, then the option takes a mandatory argument, if &quot;:&quot; is used, then the argument is optional.  Types are specified as follows: s=string, i=integer, f=float, d=date, b=boolean</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>modifier</replaceable></para></entry>
	      <entry><para>@ specifies a list, + an additive value (sum; must be integer or float type)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The GetOpt object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>GETOPT-OPTION-ERROR</code></para></entry>
	      <entry><para>There was a syntax or format error in the option specification.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="GetOpt_destructor">
      <title>GetOpt::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the GetOpt object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $getopt;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="GetOpt_copy">
      <title>GetOpt::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for GetOpt::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by GetOpt::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>GETOPT-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="GetOpt::parse">
      <title>GetOpt::parse()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the list of parameters according to the option hash passed to the constructor.  If a reference to a list is passed to this function, then all arguments parsed will be removed from the list, leaving only unparsed arguments (for example, file names).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>GetOpt::parse(<replaceable>list_reference</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$o = $getopt.parse(\$ARGV);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::parse()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>list_reference</replaceable></para></entry>
	      <entry><para>List Reference</para></entry>
	      <entry><para>The entire command line to process (ex: <link linkend="Special_Qore_Variables">$ARGV</link>).</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for GetOpt::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash keyed by option names (as given in the hash to the GetOpt constructor), where each key's value is the value of the arguments passed in the list argument.  The hash key "_ERRORS_" will contain any errors.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>      
    </sect2>
  </sect1>

  <sect1 id="FtpClient_Class">
    <title>FtpClient Class</title>

    <para>Note: This class is not available with the <link linkend="no-network"><code>PO_NO_NETWORK</code></link> parse option.</para>
    
    <para>The FtpClient class allows Qore programs to communicate with FTP servers.  The constructor takes an optional URL with the following format:</para>
    
    <programlisting>[(ftp|ftps)://][username[:password]@]hostname[:port]</programlisting>
    
    <para>If the URL is not set with the constructor, then the connection parameters must be set with the FtpClient::set*() methods. At the very minimum the hostname must be set.  If any path name is given in the URL, it is ignored.  See the following table for default URL parameters.</para>
    
    <table>
      <title>FtpClient::constructor() Default URL Parameters</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Field</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><replaceable>protocol</replaceable></para></entry>
	    <entry><code>FTP (unencrypted)</code></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>username</replaceable></para></entry>
	    <entry><code>anonymous</code></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>password</replaceable></para></entry>
	    <entry><code>qore@nohost.com</code></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>port</replaceable></para></entry>
	    <entry><code>21</code></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>Once the URL (at least the hostname) has been set, the <link linkend="FtpClient_connect">FtpClient::connect() method</link> must be called to connect and login to the FTP server.</para>

    <para>Objects of this class are capable of making encrypted FTPS connections according to <ulink url="http://www.ietf.org/rfc/rfc4217.txt">RFC-4217</ulink>.  TLS/SSL encrypted control and data connection will be attempted if the protocol is set to 'ftps' or the <link linkend="FtpClient_setSecure">FtpClient::setSecure() method</link> is called before connecting.</para>

    <para>Note that 'sftp', or FTP over ssh, is not supported with this class; FTPS is an extension of the FTP protocol to allow for secure connections; while 'sftp' is FTP over an encrypted ssh connection.</para>

    <para>When a data connection is required, by default the following modes are tried in series: EPSV (Extended Passive Mode), PASV (Passive Mode), and PORT (Port mode). If the FTP server does not support one of these methods, or network conditions do not allow a data connection of any of these types to be established, then an exception is thrown.</para>

    <para>To manually control which modes are tried, see the <link linkend="FtpClient_setModeEPSV">FtpClient::setModeEPSV()</link>, <link linkend="FtpClient_setModePASV">FtpClient::setModePASV()</link>, and <link linkend="FtpClient_setModePORT">FtpClient::setModePORT()</link> methods.</para>

    <para>This class supports posting network events to a <link linkend="Queue_Class">Queue</link>, either events on the control or data channels or both can be monitored.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="ftpclient_events">
      <title>FtpClient Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Value</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
	<tbody>
	  <row>
            <entry><para><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para><code>9</code></para></entry>
            <entry><para>Raised immediately before an FTP control message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para><code>10</code></para></entry>
            <entry><para>Raised when an FTP reply is received on the control channel.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>FtpClient Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="FtpClient_constructor">FtpClient::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates object and optionally initializes URL</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_destructor">FtpClient::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_copy">FtpClient::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent copying of objects this class.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_connect">FtpClient::connect()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects and logs in to FTP server</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_disconnect">FtpClient::disconnect()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Disconnects from the FTP server.</para></entry>
	  </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setSecure">FtpClient::setSecure()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make an FTPS connection to the server on the next connect.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setInsecure">FtpClient::setInsecure()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make a non-encrypted connection to the server on the next connect.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setInsecureData">FtpClient::setInsecureData()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Make a non-encrypted data connection to the server on the next connect even if the control connection is secure.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_isSecure">FtpClient::isSecure()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns True if the control connection is a secure TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_isDataSecure">FtpClient::isDataSecure()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns True if the data connections are secure TLS/SSL connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_getSSLCipherName">FtpClient::getSSLCipherName()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher for an encrypted connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_getSSLCipherVersion">FtpClient::getSSLCipherVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version string of the cipher for encrypted connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_verifyPeerCertificate">FtpClient::verifyPeerCertificate()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string code giving the result of verifying the remote certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setModeAuto">FtpClient::setModeAuto()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to automatically try to negotiate the data connections in EPSV, PASV, and PORT modes, in this order.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setModeEPSV">FtpClient::setModeEPSV()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using EPSV (<ulink url="http://www.ietf.org/rfc/rfc2428.txt">RFC-2428</ulink> extended passive) mode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setModePASV">FtpClient::setModePASV()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using PASV (<ulink url="http://www.ietf.org/rfc/rfc0959.txt">RFC-959</ulink> passive) mode.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="FtpClient_setModePORT">FtpClient::setModePORT()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to only try to make data connections using PORT mode.</para>
            </entry>
          </row>
	  <row>
	    <entry><para><link linkend="FtpClient_list">FtpClient::list()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of files from the FTP server in the server's long format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_nlst">FtpClient::nlst()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of file names from the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_pwd">FtpClient::pwd()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the server-side current working directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_cwd">FtpClient::cwd()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Changes the current working directory on the server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_get">FtpClient::get()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a file from the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_put">FtpClient::put()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Transfers a file to the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_del">FtpClient::del()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Deletes a file from the FTP server</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_setUserName">FtpClient::setUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the user name to use</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_setPassword">FtpClient::setPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the password to use</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_setHostName">FtpClient::setHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the hostname to connect to</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_setPort">FtpClient::setPort()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the port to connect to</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_setURL">FtpClient::setURL()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the URL</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_getUserName">FtpClient::getUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current user name</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_getPassword">FtpClient::getPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current password</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_getHostName">FtpClient::getHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current hostname</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_getPort">FtpClient::getPort()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current port</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="FtpClient_getURL">FtpClient::getURL()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current FTP URL</para></entry>
	  </row>
          <row>
            <entry><para><link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the data and control connections.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the data connection.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the control connection.</para></entry>
          </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="FtpClient_constructor">
      <title>FtpClient::constructor()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the FtpClient object. It accepts one optional argument that will set the URL for the FTP connection; the path is ignored in the URL, however the username,  password, hostname and port are respected; additionally if the protocol is &quot;ftps&quot;, the client will attempt to establish a secure connection to the server according to <ulink url="http://www.ietf.org/rfc/rfc4217.txt">RFC-4217</ulink> when the first connection is established.</para>
	    
	    <para>A call to <link linkend="FtpClient_connect">FtpClient::connect()</link> must be made explicitly before any actions requiring a connection to the server are made; connections are not made implicitly by this class.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> FtpClient([<replaceable>string_value</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp = <command>new</command> FtpClient("ftp://user:pass@hostname");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string_value</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The entire command line to process.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The FtpClient object created</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>UNSUPPORTED-PROTOCOL</code></para></entry>
	      <entry><para>Only &quot;ftp&quot; or &quot;ftps&quot; are allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-URL-ERROR</code></para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="FtpClient_destructor">
      <title>FtpClient::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $ftp;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="FtpClient_copy">
      <title>FtpClient::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for FtpClient::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for FtpClient::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_connect">
      <title>FtpClient::connect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects to the FTP server and attempts a login.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::connect(optional:<replaceable>string_value</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.connect(); # connects to the URL set in the constructor</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>,<link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::connect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string_value</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The URL of the FTP connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RESPONSE-ERROR</code></para></entry>
	      <entry><para>Invalid response received from FTP server.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-CONNECT-ERROR</code></para></entry>
	      <entry><para>Cannot establish connection on data port, no hostname set, FTP server reported an error, etc.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LOGIN-ERROR</code></para></entry>
	      <entry><para>Login denied by FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_disconnect">
      <title>FtpClient::disconnect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Disconnects from an FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::disconnect()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.disconnect();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::disconnect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>No arguments are accepted by this method</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::disconnect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0 for success, on errors an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setSecure">
      <title>FtpClient::setSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make an FTPS connection to the server on the next connect.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setSecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by FtpClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-SECURE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setInsecure">
      <title>FtpClient::setInsecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make a non-encrypted connection to the server on the next connect.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setInsecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setInsecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setInsecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setInsecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by FtpClient::setInsecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-INSECURE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setInsecureData">
      <title>FtpClient::setInsecureData()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Make a non-encrypted data connection to the server on the next connect even if the control connection is secure.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setInsecureData()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setInsecureData();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setInsecureData()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setInsecureData()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by FtpClient::setInsecureData()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SET-INSECUREDATA-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>cannot be called while a control connection has already been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_isSecure">
      <title>FtpClient::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the control connection is a secure TLS/SSL connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::isSecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $ftp.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::isSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>True if the control connection is encrypted.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_isDataSecure">
      <title>FtpClient::isDataSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the data connections are secure TLS/SSL connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::isDataSecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $ftp.isDataSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::isDataSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::isDataSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>True if data connections are encrypted.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_getSSLCipherName">
      <title>FtpClient::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::getSSLCipherName()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $ftp.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::getSSLCipherName()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The name of the cipher for an encrypted connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_getSSLCipherVersion">
      <title>FtpClient::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version string of the cipher for encrypted connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::getSSLCipherVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $ftp.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::getSSLCipherVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The version string of the cipher for encrypted connections.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_verifyPeerCertificate">
      <title>FtpClient::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate for secure (FTPS) connections.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::verifyPeerCertificate()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $ftp.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::verifyPeerCertificate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setModeAuto">
      <title>FtpClient::setModeAuto()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to automatically try to negotiate the data connections in EPSV, PASV, and PORT modes, in this order.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setModeAuto()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModeAuto();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setModeAuto()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setModeAuto()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setModeEPSV">
      <title>FtpClient::setModeEPSV()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using EPSV (<ulink url="http://www.ietf.org/rfc/rfc2428.txt">RFC-2428</ulink> extended passive) mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setModeEPSV()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModeEPSV();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setModeEPSV()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setModeEPSV()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setModePASV">
      <title>FtpClient::setModePASV()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using PASV (<ulink url="http://www.ietf.org/rfc/rfc0959.txt">RFC-959</ulink> passive) mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setModePASV()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModePASV();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setModePASV()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setModePASV()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="FtpClient_setModePORT">
      <title>FtpClient::setModePORT()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to only try to make data connections using PORT mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setModePORT()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setModePORT();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setModePORT()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setModePORT()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_list">
      <title>FtpClient::list()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a list of files from the FTP server in the server's long format in the current working directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::list()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $ftp.list();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::list()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The string returned by the server without any translations or processing.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LIST-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error in response to the LIST command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
    </sect2>
    <sect2 id="FtpClient_nlst">
      <title>FtpClient::nlst()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a list of file names in the current working directory from the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::nlst()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $ftp.nlst();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::nlst()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The string returned by the server without any translations or processing.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-LIST-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error in response to the NSLT command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="FtpClient_pwd">
      <title>FtpClient::pwd()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the server-side current working directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::pwd()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $ftp.pwd();</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::pwd()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The server-side current working directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-PWD-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the PWD command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="FtpClient_cwd">
      <title>FtpClient::cwd()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Changes the current working directory on the server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::cwd(<replaceable>path</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.cwd("/pub/gnu");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::cwd()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The directory to change to.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0, on errors exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-CWD-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the CWD command.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-CWD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_get">
      <title>FtpClient::get()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a file from the FTP server and stores it on the local system.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::get(<replaceable>server_path</replaceable>, [<replaceable>local_path</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.get("file.txt", "/tmp/file-1.txt");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::get()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>server_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the server to the file to get.</para></entry>
	    </row>
	    <row>
	      <entry><para>[<replaceable>local_path</replaceable>]</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If given, where to save the local file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0, on errors exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not create the local file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-GET-ERROR</code></para></entry>
	      <entry><para>There was an error retrieving the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-GET-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_put">
      <title>FtpClient::put()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Transfers a file to the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::put(<replaceable>local_path</replaceable>, [<replaceable>server_path</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.put("/tmp/file-1.txt", "file.txt");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::put()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>local_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the local system of the file to send.</para></entry>
	    </row>
	    <row>
	      <entry><para>[<replaceable>server_path</replaceable>]</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If given, where to save the file on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0, on errors exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-OPEN-ERROR</code></para></entry>
	      <entry><para>Could not open local file for reading.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-FILE-PUT-ERROR</code></para></entry>
	      <entry><para>Could not determine file size of local file (stat() failed).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-PUT-ERROR</code></para></entry>
	      <entry><para>An error occurred while sending the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-PUT-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_del">
      <title>FtpClient::del()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Deletes a file on the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::del(<replaceable>server_path</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.del("file-2.txt");</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_ftp_send_message">EVENT_FTP_SEND_MESSAGE</link>, <link linkend="event_ftp_message_received">EVENT_FTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::del()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>server_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the server to the file to delete.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0, on errors exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTP-RECEIVE-ERROR</code></para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-NOT-CONNECTED</code></para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-DELETE-ERROR</code></para></entry>
	      <entry><para>FTP server returned an error to the DELE command.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-DEL-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setUserName">
      <title>FtpClient::setUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username for logging in to the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setUserName(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setUserName("ftp");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The username to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETUSERNAME-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setPassword">
      <title>FtpClient::setPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the login password for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setPassword(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setPassword("ftp");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETPASSWORD-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setHostName">
      <title>FtpClient::setHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname value for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setHostName(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setHostName("hostname");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The hostname to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETHOSTNAME-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setPort">
      <title>FtpClient::setPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the control port value (default is 21).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setPort(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setPort(21);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The port to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>FTPCLIENT-SETPORT-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setURL">
      <title>FtpClient::setURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the connection and login parameters based on the URL passed as an argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setURL(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$ftp.setURL("ftps://user:pass@host");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setURL()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The URL to use to set connection and login parameters for the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>UNSUPPORTED-PROTOCOL</code></para></entry>
	      <entry><para>Only &quot;ftp&quot; is allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTP-URL-ERROR</code></para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>FTPCLIENT-SETURL-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getUserName">
      <title>FtpClient::getUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current username.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getUserName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$user = $ftp.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current username value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getPassword">
      <title>FtpClient::getPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current login password value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getPassword()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pass = $ftp.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current password value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getHostName">
      <title>FtpClient::getHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current hostname value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getHostName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$host = $ftp.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current hostname value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getPort">
      <title>FtpClient::getPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection port value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getPort()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$port = $ftp.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The current connection port value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_getURL">
      <title>FtpClient::getURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection URL string for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getURL()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$url = $ftp.getURL();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getURL()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current URL value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setEventQueue">
      <title>FtpClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the data and control connections.</para>
	    <para>To remove the event queue and stop monitoring socket events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the data connection or just the control connection, use <link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link> or <link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link> respectively</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setEventQueue(<replaceable>[queue]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setEventQueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>[queue]</replaceable></para></entry>
              <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setDataEventQueue">
      <title>FtpClient::setDataEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on the data connection when retrieving data from an FTP server.</para>
	    <para>To remove the event queue and stop monitoring network events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the control connection or on both connections with the same queue, use <link linkend="FtpClient_setControlEventQueue">FtpClient::setControlEventQueue</link> or <link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link> respectively.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setDataEventQueue(<replaceable>[queue]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setDataEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setDataEventQueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>[queue]</replaceable></para></entry>
              <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setDataEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="FtpClient_setControlEventQueue">
      <title>FtpClient::setControlEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket</link> and <link linkend="ftpclient_events">FtpClient</link> events on both the control connection.</para>
	    <para>To remove the event queue and stop monitoring network events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

	    <para>To control monitoring of network events on just the data connection or for both data and control connections simultaneously, use <link linkend="FtpClient_setDataEventQueue">FtpClient::setDataEventQueue</link> or <link linkend="FtpClient_setEventQueue">FtpClient::setEventQueue</link> respectively</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>FtpClient::setControlEventQueue(<replaceable>[queue]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$ftp.setControlEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for FtpClient::setControlEventQueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>[queue]</replaceable></para></entry>
              <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for FtpClient::setControlEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>
  
  <sect1 id="Qore_Program_Class">
    <title>Program Class</title>
    
    <para>Program objects allow Qore programs to support subprograms with restricted capabilities, for example, to support user-defined logic for application actions.</para>

    <para>Parsing in Qore happens in two steps; first all code is parsed to pending data structures, and then in the second stage, all references are resolved, and, if there are no errors, then all changes are committed to the Program object.  Note that all parse actions (<link linkend="Qore_Program_parse">Program::parse()</link>, <link linkend="Qore_Program_parsePending">Program::parsePending()</link>, <link linkend="Qore_Program_parseCommit">Program::parseCommit()</link>, and <link linkend="Qore_Program_parseRollback">Program::parseRollback()</link>) are atomic; there is a thread lock on each Program object to ensure atomicity, and if any parse errors occur in any stage of parsing, any pending changes to the Program object are automatically rolled back.  However parse actions that affect only one stage of the two stages of parsing (<link linkend="Qore_Program_parsePending">Program::parsePending()</link>, <link linkend="Qore_Program_parseCommit">Program::parseCommit()</link> and  <link linkend="Qore_Program_parseRollback">Program::parseRollback()</link>) are atomic within themselves, but not between calls, so one thread may inadvertently commit changes to a Program object if two or more threads are trying to perform transaction-safe two-stage parsing on a Program object without explicit user locking.</para>
    
    <para>The constants in the following table can be used to limit the capabilities of a Program object.  These options should be binary-OR'ed together and passed to the Program object's constructor.  Also see <link linkend="Command-Line_Parsing">Command-Line Parsing</link> for equivalent command-line options, and <link linkend="Parse_Directives">Parse Directives</link> for equivalent parse directives.</para>
    
    <para>Note that a program can provide controlled access to functionality otherwise restricted by parse options by exporting a custom API into the child program object using either the <link linkend="Qore_Program_importFunction">Program::importFunction()</link> or <link linkend="Qore_Program_importGlobalVariable">Program::importGlobalVariable()</link> method.  This is possible because code (functions or object methods) imported into and called from a subprogram will run in the parent's space and therefore with the parent's capabilities.</para>

    <para>The following constants are all in the <code>Qore</code> namespace.</para>

    <table id="Parse_Options">
      <title>Parse Options</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Details</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row id="PO_NO_GLOBAL_VARS">
	    <entry><para>PO_NO_GLOBAL_VARS</para></entry>
	    <entry><para><link linkend="no-global-vars"><code>%no-global-vars</code></link></para></entry>
	    <entry><para>Disallows the use of global variables.</para></entry>
	  </row>
	  <row id="PO_NO_SUBROUTINE_DEFS">
	    <entry><para>PO_NO_SUBROUTINE_DEFS</para></entry>
	    <entry><para><link linkend="no-subroutine-defs"><code>%no-subroutine-defs</code></link></para></entry>
	    <entry><para>Disallows subroutine (function) definitions.</para></entry>
	  </row>
	  <row id="PO_NO_THREADS">
	    <entry><para>PO_NO_THREADS</para></entry>
	    <entry><para><link linkend="no-threads"><code>%no-threads</code></link></para></entry>
	    <entry><para>Disallows any thread operations (the <link linkend="Background_Operator"><command>background</command> operator</link> and the <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link>, for example) and the use of thread-relevant classes and functions (equivalent to PO_NO_THREAD_CLASSES | PO_NO_THREAD_CONTROL).</para></entry>
	  </row>
	  <row id="PO_NO_THREAD_CLASSES">
	    <entry><para>PO_NO_THREAD_CLASSES</para></entry>
	    <entry><para><link linkend="no-thread-classes"><code>%no-thread-classes</code></link></para></entry>
	    <entry><para>Disallows access to any thread classes.</para></entry>
	  </row>
	  <row id="PO_NO_THREAD_CONTROL">
	    <entry><para>PO_NO_THREAD_CONTROL</para></entry>
	    <entry><para><link linkend="no-thread-control"><code>%no-thread-control</code></link></para></entry>
	    <entry><para>Disallows access to any thread-control functions and thread-relevant statements and operators (for example the <link linkend="Background_Operator"><command>background</command> operator</link> and the <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link>).</para></entry>
	  </row>
	  <row id="PO_NO_TOP_LEVEL_STATEMENTS">
	    <entry><para>PO_NO_TOP_LEVEL_STATEMENTS</para></entry>
	    <entry><para><link linkend="no-top-level"><code>no-top-level</code></link></para></entry>
	    <entry><para>Disallows top level code.</para></entry>
	  </row>
	  <row id="PO_NO_CLASS_DEFS">
	    <entry><para>PO_NO_CLASS_DEFS</para></entry>
	    <entry><para><link linkend="no-class-defs"><code>no-class-defs</code></link></para></entry>
	    <entry><para>Disallows class definitions.</para></entry>
	  </row>
	  <row id="PO_NO_NAMESPACE_DEFS">
	    <entry><para>PO_NO_NAMESPACE_DEFS</para></entry>
	    <entry><para><link linkend="no-namespace-defs"><code>no-namespace-defs</code></link></para></entry>
	    <entry><para>Disallows new namespace definitions.</para></entry>
	  </row>
	  <row id="PO_NO_CONSTANT_DEFS">
	    <entry><para>PO_NO_CONSTANT_DEFS</para></entry>
	    <entry><para><link linkend="no-constant-defs"><code>no-constant-defs</code></link></para></entry>
	    <entry><para>Disallows constant definitions.</para></entry>
	  </row>
	  <row id="PO_NO_NEW">
	    <entry><para>PO_NO_NEW</para></entry>
	    <entry><para><link linkend="no-new"><code>no-new</code></link></para></entry>
	    <entry><para>Disallows use of the <link linkend="New_Object_Operator"><command>new</command></link> operator.</para></entry>
	  </row>
	  <row id="PO_NO_SYSTEM_CLASSES">
	    <entry><para>PO_NO_SYSTEM_CLASSES</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Prohibits system classes from being imported into the new Program object.</para></entry>
	  </row>
	  <row id="PO_NO_USER_CLASSES">
	    <entry><para>PO_NO_USER_CLASSES</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Prohibits user classes from being imported into the new Program object.</para></entry>
	  </row>
	  <row id="PO_NO_CHILD_PO_RESTRICTIONS">
	    <entry><para>PO_NO_CHILD_PO_RESTRICTIONS</para></entry>
	    <entry><para><link linkend="no-child-restrictions"><code>no-child-restrictions</code></link></para></entry>
	    <entry><para>Allows child program objects to have fewer parse restrictions than the parent object.</para></entry>
	  </row>
	  <row id="PO_NO_EXTERNAL_PROCESS">
	    <entry><para>PO_NO_EXTERNAL_PROCESS</para></entry>
	    <entry><para><link linkend="no-external-process"><code>no-external-process</code></link></para></entry>
	    <entry><para>Disallows any access to external processes (with <link linkend="system">system()</link>, <link linkend="backquote">backquote()</link>, <link linkend="exec">exec()</link>, etc).</para></entry>
	  </row>
	  <row id="PO_REQUIRE_OUR">
	    <entry><para>PO_REQUIRE_OUR</para></entry>
	    <entry><para><link linkend="require-our"><code>require-our</code></link></para></entry>
	    <entry><para>Requires global variables to be declared with <command>our</command> before use.</para></entry>
	  </row>
	  <row id="PO_NO_PROCESS_CONTROL">
	    <entry><para>PO_NO_PROCESS_CONTROL</para></entry>
	    <entry><para><link linkend="no-process-control"><code>no-process-control</code></link></para></entry>
	    <entry><para>Disallows access to functions that would affect the current process (<link linkend="exit">exit()</link>, <link linkend="exit">exec()</link>, <link linkend="fork">fork()</link>, etc).</para></entry>
	  </row>
	  <row id="PO_NO_NETWORK">
	    <entry><para>PO_NO_NETWORK</para></entry>
	    <entry><para><link linkend="no-network"><code>no-network</code></link></para></entry>
	    <entry><para>Disallows access to network functions.</para></entry>
	  </row>
	  <row id="PO_NO_FILESYSTEM">
	    <entry><para>PO_NO_FILESYSTEM</para></entry>
	    <entry><para><link linkend="no-filesystem"><code>no-filesystem</code></link></para></entry>
	    <entry><para>Disallows access to the filesystem.</para></entry>
	  </row>
	  <row id="PO_NO_WARNINGS">
	    <entry><para>PO_LOCK_WARNINGS</para></entry>
	    <entry><para><link linkend="lock-warnings"><code>lock-warnings</code></link></para></entry>
	    <entry><para>Disallows changes to the warning mask.</para></entry>
	  </row>
	  <row id="PO_NO_DATABASE">
	    <entry><para>PO_NO_DATABASE</para></entry>
	    <entry><para><link linkend="no-database"><code>no-database</code></link></para></entry>
	    <entry><para>Disallows access to database functionality.</para></entry>
	  </row>
	  <row id="PO_NO_GUI">
	    <entry><para>PO_NO_GUI</para></entry>
	    <entry><para><link linkend="no-gui"><code>no-gui</code></link></para></entry>
	    <entry><para>Disallows access to functionality that draws graphics to the display.</para></entry>
	  </row>
	  <row id="PO_NO_TERMINAL_IO">
	    <entry><para>PO_NO_TERMINAL_IO</para></entry>
	    <entry><para><link linkend="no-terminal-io"><code>no-terminal-io</code></link></para></entry>
	    <entry><para>Disallows access to reading from and/or writing to the terminal.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>
    <table>
      <title>Program Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore_Program_constructor">Program::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the program object and optionally sets program capabilities (parse options)</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_destructor">Program::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.  Blocks until all threads have terminated.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_copy">Program::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent objects of this class from being copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_callFunction">Program::callFunction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object and returns the return value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_callFunctionArgs">Program::callFunctionArgs()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object with the arguments given as a list</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_disableParseOptions">Program::disableParseOptions()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Removes the given parse options to the current parse option mask.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_existsFunction">Program::existsFunction()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Checks if a user function exists in the program object</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getGlobalVariable">Program::getGlobalVariable()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a the value of the global variable identified by the first string argument.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getParseOptions">Program::getParseOptions()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a code of parse options set in the object.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getScriptDir">Program::getScriptDir()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script directory (if any).</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getScriptName">Program::getScriptName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script name (if any).</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getScriptPath">Program::getScriptPath()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current script directory and filename (if any).</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_getUserFunctionList">Program::getUserFunctionList()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns a list of all user functions defined in the program object.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_importFunction">Program::importFunction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a user function into the program object's space; any calls to the function will run in the parent's space.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_importGlobalVariable">Program::importGlobalVariable()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a global variable into the Program object's space.  If the variable is an object, then any methods 
	    called will run in the parent's space.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_lockOptions">Program::lockOptions()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Locks parse options so that they cannot be changed.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_parse">Program::parse()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a complete parse and commit of the string passed</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parseCommit">Program::parseCommit()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits all pending changes to the program object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parsePending">Program::parsePending()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a 1st stage parse of the string passed</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parseRollback">Program::parseRollback()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back all pending changes to the program object</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_run">Program::run()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Runs the top-level code of the program object</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_setParseOptions">Program::setParseOptions()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Adds the given parse options to the current parse option mask.</para></entry>
	  </row>

	  <row>
	    <entry><para><link linkend="Qore_Program_setScriptPath">Program::setScriptPath()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the script path (directory and filename) for the object.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>
    
    <sect2 id="Qore_Program_constructor">
      <title>Program::constructor()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Program object. It accepts one optional argument that will set the program capabilities for the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Program([integer:<replaceable>parse_options</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm = <command>new</command> Program();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Program::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	
	  <tbody>
	    <row>
	      <entry><para><replaceable>parse_options</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>A binary OR'ed product of <link linkend="Parse_Options">parse options</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Return Values for Program::constructor()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>	
	<tbody>
	  <row>
	    <entry><para>Object</para></entry>
	    <entry><para>The Program object created.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_destructor">
      <title>Program::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  If any threads are running in the program, the destructor will block until the threads terminate.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $pgm;</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_Program_copy">
      <title>Program::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Program::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Program::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_callFunction">
      <title>Program::callFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value.  The function runs with the permissions of the Program object containing the function.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::callFunction(<replaceable>string:function_name, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$result = $pgm.callFunction("func_name", $arg1, $arg2);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[args ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remaining arguments passed to the method are passed to the function to be called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>Depends on the function being called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_callFunctionArgs">
      <title>Program::callFunctionArgs()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value, using the second argument as the argument list for the function call.  The function runs with the permissions of the Program object containing the function.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::callFunctionArgs(<replaceable>string:function_name, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$result = $pgm.callFunctionArgs("func_name", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunctionArgs()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg_list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>Argument list to be passed to the function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>Depends on the function being called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>INVALID-FUNCTION-ACCESS</code></para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_disableParseOptions">
      <title>Program::disableParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Disables <link linkend="Parse_Options">parse options</link> in the parse option mask for the Program object.  An exception is thrown if parse options have been locked (for example with <link linkend="Qore_Program_lockOptions">Program::lockOptions()</link>).   For a reciprocal method that sets parse options, see <link linkend="Qore_Program_setParseOptions">Program::setParseOptions()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::disableParseOptions(<replaceable>options</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># allow threading and GUI operations
$pgm.disableParseOptions(PO_NO_THREADS | PO_NO_GUI);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::disableParseOptions()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>options</replaceable></para></entry>
	      <entry><para>Int</para></entry>
	      <entry><para> A single <link linkend="Parse_Options">parse option</link> or binary-or combination of <link linkend="Parse_Options">parse options</link> to disable in the parse option mask for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::disableParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value; if an error occurs an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::disableParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>OPTIONS-LOCKED</code></para></entry>
	      <entry><para>Parse options have been locked and cannot be changed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_Program_existsFunction">
      <title>Program::existsFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Checks if a user function exists in the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::existsFunction(<replaceable>function_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $pgm.existsFunction("func_name");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::existsFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to check.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::existsFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>Returns True if the function exists, False if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_getGlobalVariable">
      <title>Program::getGlobalVariable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the value of the global variable identified by the first string argument giving the name of the variable (without any leading &quot;$&quot; symbol.  An lvalue reference can be passed as the second argument in order to determine if the global variable exists (because this method could return <command>NOTHING</command> when the variable exists as well as when it does not).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getGlobalVariable(<replaceable>var_name, [exists_ref]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$val = $pgm.getGlobalVariable("error_count", \$exists);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getGlobalVariable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>var_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The string name of the variable to find, not including the leading &quot;$&quot; character.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[exists]</replaceable></para></entry>
	      <entry><para>Reference</para></entry>
	      <entry><para>If a reference is passed in this position, it will contain a boolean value after the method exits: if this value is True, that means that the variable exists in the Program object, False means that the variable does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>The value of the global variable (or NOTHING if it does not exist; note that also the variable could exist and return NOTHING as well; use a reference as the second argument to the method to determine if the variable exists or not).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Qore_Program_getParseOptions">
      <title>Program::getParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current binary-or <link linkend="Parse_Options">parse option mask</link> for the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getParseOptions()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mask = $pgm.getParseOptions();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getParseOptions()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>A mask of all <link linkend="Parse_Options">parse options</link> set (combined with binary or) for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_getScriptDir">
      <title>Program::getScriptDir()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script directory set with <link linkend="Qore_Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_dir">get_script_dir()</link> function if called from within the Program.  The value returned should normally include the trailing '/' character.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getScriptDir()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $dir = $pgm.getScriptDir();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getScriptDir()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getScriptDir()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current script directory.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Qore_Program_getScriptName">
      <title>Program::getScriptName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script filename set with <link linkend="Qore_Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_path">get_script_path()</link> function if called from within the Program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getScriptName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $name = $pgm.getScriptName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getScriptName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getScriptName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current script name if known, otherwise returns NOTHING.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Qore_Program_getScriptPath">
      <title>Program::getScriptPath()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the script directory and filename set with <link linkend="Qore_Program_setScriptPath">Program::setScriptPath()</link>.  This is the same value that will be returned in the Qore program code with the <link linkend="get_script_path">get_script_path()</link> function if called from within the Program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getScriptPath()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>my</command> $path = $pgm.getScriptPath();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getScriptPath()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getScriptPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The current script directory and filename if known, otherwise returns NOTHING.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Qore_Program_getUserFunctionList">
      <title>Program::getUserFunctionList()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a list of all user functions defined in the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::getUserFunctionList()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pgm.getUserFunctionList();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getUserFunctionList()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getUserFunctionList()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>A list of strings giving the names of all functions implemented in the program object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_importFunction">
      <title>Program::importFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a user function into the program object's space; any calls to the imported function will run in the parent's space.  This allows a user-defined API with greater capabilities than the embedded Program object to be imported into the embedded code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::importFunction(<replaceable>function_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.importFunction("function");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to import.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No function name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</code></para></entry>
	      <entry><para>Cannot import a function into the same Program object.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTFUNCTION-NO-FUNCTION</code></para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_importGlobalVariable">
      <title>Program::importGlobalVariable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a global variable into the program object's space.  If the variable is an object, then any methods called from the subprogram will run in the parent's space.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::importGlobalVariable(<replaceable>string:name, [boolean:read_only]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.importGlobalVariable("var");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importGlobalVariable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the global variable without the $</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[read_only]</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>If this argument is present and is True, then the variable will be imported read-only, and cannot be changed by the subprogram.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTGLOBALVARIABLE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No variable name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>PROGRAM-IMPORTGLOBALVARIABLE-EXCEPTION</code></para></entry>
	      <entry><para>The global variable does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_Program_lockOptions">
      <title>Program::lockOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks <link linkend="Parse_Options">parse options</link> so they cannot be changed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::lockParseOptions()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.lockParseOptions();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::lockParseOptions()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::lockOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value; it always succeeds.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

    <sect2 id="Qore_Program_parse">
      <title>Program::parse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the string argument and adds the code to the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::parse(<replaceable>string</replaceable>, <replaceable>label</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parse($code, "label");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parse()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>label</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parseCommit">
      <title>Program::parseCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits and pending code processed with <link linkend="Qore_Program_parsePending">Program::parsePending()</link> to the Program object and resolves all outstanding references in the pending code.  An exception in this method causes all pending code to be rolled back immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::parseCommit()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parseCommit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parseCommit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parsePending">
      <title>Program::parsePending()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the text passed to pending lists in the Program object; does not resolve all references or commit the code to the Program object.  References are resolved in the <link linkend="Qore_Program_parseCommit">Program::parseCommit()</link> method.  If an exception occurs in this method, all pending code is backed out, not just code parsed by this method.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::parsePending(<replaceable>string</replaceable>, <replaceable>label</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parsePending($code, "label");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parsePending()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>label</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>PARSE-ERROR</code></para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parseRollback">
      <title>Program::parseRollback()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back any pending code processed with <link linkend="Qore_Program_parsePending">Program::parsePending()</link> that has not yet been committed to the Program object with <link linkend="Qore_Program_parseCommit">Program::parseCommit()</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::parseRollback()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.parseRollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parseRollback()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parseRollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_run">
      <title>Program::run()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Runs the program and optionally returns a value if the top-level code exits with a <command>return</command> statement.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::run()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.run();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::run()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::run()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>Depends on the program - any final <command>return</command> statement will return a value to this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_setParseOptions">
      <title>Program::setParseOptions()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets <link linkend="Parse_Options">parse options</link> in the parse option mask for the Program object.  An exception is thrown if parse options have been locked (for example with <link linkend="Qore_Program_lockOptions">Program::lockOptions()</link>).  For a reciprocal method that disables parse options, see <link linkend="Qore_Program_disableParseOptions">Program::disableParseOptions()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::setParseOptions(<replaceable>options</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># disallow threading and GUI operations
$pgm.setParseOptions(PO_NO_THREADS | PO_NO_GUI);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setParseOptions()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>options</replaceable></para></entry>
	      <entry><para>Int</para></entry>
	      <entry><para> A single <link linkend="Parse_Options">parse option</link> or binary-or combination of <link linkend="Parse_Options">parse options</link> to set in the parse option mask for the current object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::setParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value; if an error occurs an exception is raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::setParseOptions()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>OPTIONS-LOCKED</code></para></entry>
	      <entry><para>Parse options have been locked and cannot be changed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_Program_setScriptPath">
      <title>Program::setScriptPath()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the script path (directory and filename) for later retrieval with <link linkend="Qore_Program_getScriptPath">Program::getScriptPath()</link>, <link linkend="Qore_Program_getScriptDir">Program::getScriptDir()</link>, or <link linkend="Qore_Program_getScriptName">Program::getScriptName()</link> calls, or from code within the Program object with the <link linkend="get_script_path">get_script_path()</link>, <link linkend="get_script_dir">get_script_dir()</link>, or <link linkend="get_script_name">get_script_name()</link> functions.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Program::setScriptPath(<replaceable>path_string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pgm.setScriptPath("/users/test/test.q");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::setScriptPath()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>path_string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path (directory and filename) for the current script.  If the directory component is missing, then &quot;./&quot; is assumed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::setScriptPath()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>This method does not throw any exceptions.</para>

    </sect2>

  </sect1>
  
  <sect1 id="Socket_Class">
    <title>Socket Class</title>
    
    <para>Note: This class is not available with the <link linkend="no-network"><code>PO_NO_NETWORK</code></link> parse option.</para>

    <para>Socket objects allow Qore programs safe access to network sockets.  Non-blocking socket I/O can be performed by appending a timeout value in milliseconds to all Socket::recv*() methods, or by using the <link linkend="Socket_isDataAvailable">Socket::isDataAvailable()</link> method with a timeout value in milliseconds (1000 ms = 1 second).  Note that as with all Qore functions and methods accepting a timeout value, <link linkend="Relative_Dates">relative date/time values</link> can be given instead of integers to make the source more readable, for example:</para>

    <programlisting><command>my</command> $rc = $socket.isDataAvailable(1250ms); # times out in 1.25 seconds</programlisting>

    <para>Socket objects can automatically convert character encodings if desired when sending string data with <link linkend="Socket_send">Socket::send()</link>.  Use the <link linkend="Socket_setCharset">Socket::setCharset()</link> method to set the character encoding for the socket.  If a character encoding is set, and string data is read with the <link linkend="Socket_recv">Socket::recv()</link> method, then it will be tagged with the encoding of the socket as well.</para>
    
    <para>Client applications should call <link linkend="Socket_connect">Socket::connect()</link> to connect to a remote port or a UNIX domain socket (socket file on the local server).  However, if the remote end is expecting a TLS/SSL connection, use <link linkend="Socket_connectSSL">Socket::connectSSL()</link> instead.</para>

    <para>Server applications should call <link linkend="Socket_bind">Socket::bind()</link>, <link linkend="Socket_listen">Socket::listen()</link>, and  <link linkend="Socket_accept">Socket::accept()</link> in this order to accept incoming connections.  Normally a new thread should be started after the Socket::accept() call to handle the new connection in a separate thread (Socket::accept() returns a new Socket object for the accepted connection).</para>

    <para>To support TLS/SSL server connections, first set the certificate and private key with the <link linkend="Socket_setCertificate">Socket::setCertificate()</link> and <link linkend="Socket_setPrivateKey">Socket::setPrivateKey()</link> methods (see the <link linkend="SSLCertificate_Class">SSLCertificate Class</link> and the <link linkend="SSLPrivateKey_Class">SSLPrivateKey Class</link> for more information on the parameters required for these methods).  Then <link linkend="Socket_acceptSSL">Socket::acceptSSL()</link> should be called after the socket is in a listening state to accept client connections and negotiate a TLS/SSL connection.</para>

    <para>This class supports posting events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="socket_events">
      <title>Socket Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></para></entry>
            <entry><para>Raised when a network packet is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></para></entry>
            <entry><para>Raised when a network packet is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></para></entry>
            <entry><para>Raised when a socket is closed.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_deleted">EVENT_DELETED</link></code></para></entry>
            <entry><para>Raised when the object being monitored is deleted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link></code></para></entry>
            <entry><para>Raised when a hostname lookup is attempted.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></para></entry>
            <entry><para>Raised when a hostname lookup is resolved.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connecting">EVENT_CONNECTING</link></code></para></entry>
            <entry><para>Raised right before a socket connection attempt is made.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_connected">EVENT_CONNECTED</link></code></para></entry>
            <entry><para>Raised when the socket connection has been established.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_start_ssl">EVENT_START_SSL</link></code></para></entry>
            <entry><para>Raised when socket SSL negotiation starts.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></para></entry>
            <entry><para>Raised when SSL communication has been negotiated and established.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table>
      <title>Socket Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para><link linkend="Socket_constructor">Socket::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the socket object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_destructor">Socket::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the socket if it's open and destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_copy">Socket::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Socket object, not based on the parent.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_connect">Socket::connect()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects to a remote port or UNIX domain socket file.</para></entry>
	  </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_connectSSL">Socket::connectSSL()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Connects to a remote socket and attempts to establish a TLS/SSL connection.</para>
            </entry>
          </row>
	  <row>
	    <entry><para><link linkend="Socket_bind">Socket::bind()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Binds the socket to a port or UNIX domain socket file.  If the second parameter is True, then the socket will set the SO_REUSEADDR option, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_accept">Socket::accept()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Accepts connections on a listening socket.</para></entry>
	  </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_acceptSSL">Socket::acceptSSL()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Accepts a remote connection and attempts to negotiate a TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_shutdownSSL">Socket::shutdownSSL()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Shuts down the SSL connection on a secure connection.</para>
            </entry>
          </row>
	  <row>
	    <entry><para><link linkend="Socket_listen">Socket::listen()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Listens for connections on the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_isDataAvailable">Socket::isDataAvailable()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns True or False depending on whether there is data to be read on the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_isWriteFinished">Socket::isWriteFinished()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns True or False depending on whether all data has been written to the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_send">Socket::send()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends string or binary data over the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi1">Socket::sendi1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 1-byte integer over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi2">Socket::sendi2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 2-byte (16-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi4">Socket::sendi4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 4-byte (32-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi8">Socket::sendi8()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an 8-byte (64-bit) integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi2LSB">Socket::sendi2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 2-byte (16-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi4LSB">Socket::sendi4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends a 4-byte (32-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendi8LSB">Socket::sendi8LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an 8-byte (64-bit) integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendHTTPMessage">Socket::sendHTTPMessage()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an HTTP message with a method and user-defined headers given as a hash</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_sendHTTPResponse">Socket::sendHTTPResponse()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sends an HTTP response with user-defined headers given as a hash</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recv">Socket::recv()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives data from the socket and returns a string</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi1">Socket::recvi1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 1-byte signed integer from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi2">Socket::recvi2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi4">Socket::recvi4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi8">Socket::recvi8()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives an 8-byte (64-bit) signed integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi2LSB">Socket::recvi2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi4LSB">Socket::recvi4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvi8LSB">Socket::recvi8LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives an 8-byte (64-bit) signed integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvu1">Socket::recvu1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 1-byte unsigned integer from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvu2">Socket::recvu2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) unsigned integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvu4">Socket::recvu4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) unsigned integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvu2LSB">Socket::recvu2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 2-byte (16-bit) unsigned integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvu4LSB">Socket::recvu4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives a 4-byte (32-bit) unsigned integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_recvBinary">Socket::recvBinary()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Receives data on a socket and returns a binary object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_readHTTPHeader">Socket::readHTTPHeader()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Retuns a hash representing the data in the HTTP header read</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_getPort">Socket::getPort()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the port number of the socket for INET sockets.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_shutdown">Socket::shutdown()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Ensures that a socket will be closed even if shared with other processes.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_close">Socket::close()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_getCharset">Socket::getCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_setCharset">Socket::setCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_getNoDelay">Socket::getNoDelay()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_setNoDelay">Socket::setNoDelay()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Socket_getSocket">Socket::getSocket()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the socket file descriptor number.</para></entry>
	  </row>	
          <row>
            <entry>
              <para>
                <link linkend="Socket_getSSLCipherName">Socket::getSSLCipherName()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher for an encrypted connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_getSSLCipherVersion">Socket::getSSLCipherVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version string of the cipher for encrypted connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_isSecure">Socket::isSecure()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns True if the connection is a secure TLS/SSL connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_isOpen">Socket::isOpen()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns True if the socket is open.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_setCertificate">Socket::setCertificate()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the X.509 certificate to use for negotiating encrypted connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="Socket_setPrivateKey">Socket::setPrivateKey()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the private key to use for negotiating encrypted connections along with the X.509 certificate.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="Socket_verifyPeerCertificate">Socket::verifyPeerCertificate()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns a string code giving the result of verifying the remote certificate.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="Socket_setEventQueue">Socket::setEventQueue()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket events</link>.</para></entry>
          </row>
	</tbody>
      </tgroup>
    </table>
    
    <sect2 id="Socket_constructor">
      <title>Socket::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the socket object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Socket()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock = <command>new</command> Socket();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The new Socket object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_destructor">
      <title>Socket::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the socket if it's open and destroys the object.  If the socket was a UNIX domain socket, and was created with <link linkend="Socket_bind">Socket::bind()</link>, then the socket file will be deleted as well.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting><command>delete</command> $sock;</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Socket_copy">
      <title>Socket::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Socket object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_sock = $sock.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Socket::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Socket::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Socket Object</para></entry>
	      <entry><para>A new Socket object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_bind">
      <title>Socket::bind()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Binds the socket to a port or UNIX domain socket file.  If the second parameter is True, then the socket will set the SO_REUSEADDR option, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::bind(<replaceable>port, [reuse_addr]</replaceable>)</programlisting>
	    <programlisting>Socket::bind(<replaceable>host_and_port, [reuse_addr]</replaceable>)</programlisting>
	    <programlisting>Socket::bind(<replaceable>filename, [reuse_addr]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting># bind to port 80 on all interfaces on the local system and reuse the address
$sock.bind(80, True);</programlisting>
	    <programlisting># bind to interface 192.168.2.23 and do not reuse the address
$sock.bind("192.168.2.23");</programlisting>
	    <programlisting># bind to UNIX domain socket file "/tmp/socket"
$sock.bind("/tmp/socket");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::bind()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>port</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>A single integer will be taken as a port number on the local machine; all network interfaces will be bound with this port number.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>host_and_port</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification, and the port on the named ip address will be bound.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If the string contains no colon, the socket will be bound to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[reuse_addr]</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>If this optional argument evaluates to True, the SO_REUSEADDR option will be set on the socket, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::bind()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::bind()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-BIND-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_accept">
      <title>Socket::accept()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Accepts connections on a listening socket (see <link linkend="Socket_listen">Socket::listen()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::accept()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_socket = $sock.accept();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::accept()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Socket Object</para></entry>
	      <entry><para>When a new connection has been accepted, a new Socket object is returned for the new connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_acceptSSL">
      <title>Socket::acceptSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Accepts a remote connection and attempts to negotiate a TLS/SSL connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::acceptSSL()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$new_sock = $sock.acceptSSL();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::acceptSSL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::acceptSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>A new socket object is returned for the new connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by Socket::acceptSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SOCKET-SSL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>An error occurred establishing the TLS/SSL connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connect">
      <title>Socket::connect()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a remote port or UNIX domain socket file, for network (INET) connections, accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::connect(<replaceable>string:host_and_port, [timeout_ms]</replaceable>)</programlisting>
	    <programlisting>Socket::connect(<replaceable>string:filename</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting>$sock.connect("192.168.1.45:8080", 30s); # connect to 192.168.1.45 port 8080 with a 30 second timeout</programlisting>
	    <programlisting>$sock.connect("/tmp/socket");       # connect to UNIX domain socket file "/tmp/socket"</programlisting>
	  </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>host_and_port, [timeout_ms]</replaceable></para></entry>
	      <entry><para>String, Integer or Relative Date/Time</para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification to connect to.  If a timeout value is passed and the connection takes longer to establish than the timeout, an exception is thrown.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If the string contains no colon, the socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value; if an error occurs, an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_connectSSL">
      <title>Socket::connectSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Connects to a remote socket and attempts to establish a TLS/SSL connection, for network (INET) connections, accepts an optional timeout value in milliseconds (<link linkend="Relative_Dates">relative date/time values</link> can be given instead of an integer in milliseconds to make the source more readable; ex: <code>20s</code>).  If any errors occur, an exception is thrown.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::connectSSL(<replaceable>remote, [timeout_ms]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
	<varlistentry>
	  <term>Examples</term>
	  <listitem>
	    <programlisting>$sock.connectSSL("192.168.1.45:8080", 30s); # connect to 192.168.1.45 port 8080 with a 30-second timeout</programlisting>
	    <programlisting>$sock.connectSSL("/tmp/socket");       # connect to UNIX domain socket file "/tmp/socket"</programlisting>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></listitem>
	</varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::connectSSL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>remote</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>The remote socket, i.e. 'hostname:port', 'filename' (for UNIX domain sockets), etc.</para></entry>
            </row>
            <row>
              <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
              <entry><para>Integer or Date/Time</para></entry>
              <entry><para>An optional timeout value for the connection; if the connection cannot be established in the timeout period, an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::connectSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value; if an error occurs, an exception is thrown.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by Socket::connectSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SOCKET-CONNECTSSL-PARAMETER-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing remote socket</para>
              </entry>
            </row>
	    <row>
	      <entry><para><code>SOCKET-CONNECT-ERROR</code></para></entry>
	      <entry><para>An error occured connecting to the remote socket (cannot resolve hostname, no listener, timeout exceeded, etc).</para></entry>
	    </row>
            <row>
              <entry>
                <para>
                  <code>SOCKET-SSL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>An error occurred establishing the TLS/SSL connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_listen">
      <title>Socket::listen()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Listens for new connections on a bound socket (see <link linkend="Socket_bind">Socket::bind())</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::listen()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.listen();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::listen()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_shutdownSSL">
      <title>Socket::shutdownSSL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Shuts down the SSL connection on a secure connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::shutdownSSL()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.shutdownSSL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::shutdownSSL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::shutdownSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns 0 if successful.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by Socket::shutdownSSL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SOCKET-SSL-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>An error occurred shutting down the TLS/SSL connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_getSSLCipherName">
      <title>Socket::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::getSSLCipherName()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $sock.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::getSSLCipherName()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The name of the cipher for an encrypted connection.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_getSSLCipherVersion">
      <title>Socket::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version string of the cipher for encrypted connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::getSSLCipherVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $sock.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::getSSLCipherVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The version string of the cipher for encrypted connections.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_isSecure">
      <title>Socket::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the connection is a secure TLS/SSL connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::isSecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $sock.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::isSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>True if the connection is encrypted.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_isOpen">
      <title>Socket::isOpen()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the socket is open.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::isOpen()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $sock.isOpen();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::isOpen()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::isOpen()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>True if the socket is open.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_setCertificate">
      <title>Socket::setCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the X.509 certificate to use for negotiating encrypted connections.  Requires an <link linkend="SSLCertificate_Class">SSLCertificate</link> object as the only argument to the method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::setCertificate(<replaceable>certificate</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.setCertificate($cert);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setCertificate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>certificate</replaceable>
                </para>
              </entry>
              <entry>
                <para><link linkend="SSLCertificate_Class">SSLCertificate</link> Object</para>
              </entry>
              <entry>
                <para>This must be an SSL Certificate object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::setCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_setPrivateKey">
      <title>Socket::setPrivateKey()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the private key to use for negotiating encrypted connections along with the X.509 certificate.  Requires an <link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> object as the only argument to the method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::setPrivateKey(<replaceable>private_key_object</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
	  <term>Example</term>
          <listitem>
            <programlisting>$sock.setPrivateKey($pkey);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setPrivateKey()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>privat_key_object</replaceable>
                </para>
              </entry>
              <entry>
                <para><link linkend="SSLPrivateKey_Class">SSLPrivateKey</link> Object</para>
              </entry>
              <entry>
                <para>The private key for the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::setPrivateKey()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="Socket_verifyPeerCertificate">
      <title>Socket::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::verifyPeerCertificate()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $sock.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::verifyPeerCertificate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setEventQueue">
      <title>Socket::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="socket_events">socket events</link>.  To remove the event queue and stop monitoring socket events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>Socket::setEventQueue(<replaceable>[queue]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$sock.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for Socket::setEventQueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><replaceable>[queue]</replaceable></para>
              </entry>
              <entry>
                <para><link linkend="Queue_Class">Queue</link></para>
              </entry>
              <entry>
                <para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for Socket::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_isDataAvailable">
      <title>Socket::isDataAvailable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns True is data is available on the socket, takes an optional timeout.  With a timeout of zero this method can be used for non-blocking polling the socket for data (can also be used to poll for new connections before <link linkend="Socket_accept">Socket::accept()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::isDataAvailable(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $sock.isDataAvailable(0); # returns True if data is available now</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::isDataAvailable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if data is available on the socket, False if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_isWriteFinished">
      <title>Socket::isWriteFinished()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns True if all data has been written to the socket, takes an optional timeout.  With a timeout of zero this method returns immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::isWriteFinished(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $sock.isWriteFinished(0);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::isWriteFinished()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::isWriteFinished()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True if data is available on the socket, False if not.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_send">
      <title>Socket::send()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends string or binary data over a connected socket.  If the argument is not present, or is neither a String or Binary type, an exception will be thrown.  String data will be converted to the encoding set for the socket if necessary.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::send(<replaceable>data</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.send($data);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::send()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>data</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>Sends the string data over the socket without the trailing null ('\0') character.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>data</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Sends the binary data over the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SEND-PARAMETER-ERROR</code></para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi1">
      <title>Socket::sendi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 1-byte integer over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi1(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi1($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant byte will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi2">
      <title>Socket::sendi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in big-endian format (network byte order) over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi2(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi2($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi4">
      <title>Socket::sendi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in big-endian format (network byte order) over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi4(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi4($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi8">
      <title>Socket::sendi8()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends an 8-byte (64-bit) integer in big-endian format (network byte order) over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi8(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi8($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi8()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi2LSB">
      <title>Socket::sendi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in little-endian format over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi2LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi2LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi4LSB">
      <title>Socket::sendi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in little-endian format over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi4LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi4LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendi8LSB">
      <title>Socket::sendi8LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends an 8-byte (64-bit) integer in little-endian format over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi8LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendi8LSB($val);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi8LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendHTTPMessage">
      <title>Socket::sendHTTPMessage()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendHTTPMessage(<replaceable>string:method, string:path, string:http_version, hash:headers, [body]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendHTTPMessage("POST", "/RPC2", "1.1", ("Content-Type" : "text/xml"), $xml);</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPMessage()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>method</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP method name to send (i.e. POST, HEAD, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path component of the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>http_version</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>headers</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value.  If any errors occur, exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SENDHTTPMESSAGE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SEND-ERROR</code></para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_sendHTTPResponse">
      <title>Socket::sendHTTPResponse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP response message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendHTTPResponse(<replaceable>status_code, string:description, string:http_version, hash:headers, [body]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.sendHTTPResponse(200, "OK", "1.1", ("Connection":"Keep-Alive"));</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPMessage()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>status_code</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The HTTP status code to send (i.e. 200, 404, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>description</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The descriptive text for the status code.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>http_version</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>headers</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value.  If any errors occur, exceptions are raised.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-SENDHTTPRESPONSE-PARAMETER-ERROR</code></para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-SEND-ERROR</code></para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recv">
      <title>Socket::recv()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recv(<replaceable>size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $sock.recv(-1); # read all data available</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recv()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The data read, returned as a string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvBinary">
      <title>Socket::recvBinary()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a binary object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvBinary(<replaceable>size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bin = $sock.recvBinary(-1); # read all data available</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvBinary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Binary</para></entry>
	      <entry><para>The data read, returned as a binary object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi1">
      <title>Socket::recvi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 1-byte signed integer from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi1(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi1();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 1-byte signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi2">
      <title>Socket::recvi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte signed integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi2(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi2();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 2-byte signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi4">
      <title>Socket::recvi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte signed integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi4(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi4();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 4-byte signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi8">
      <title>Socket::recvi8()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives an 8-byte (64-bit) signed integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi8(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi8();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi8()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.  A <link linkend="Relative_Dates">relative date/time value</link> can be used as well (i.e. <code>1250ms</code>) for clarity.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 8-byte (64-bit) signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi8()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi2LSB">
      <title>Socket::recvi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte signed integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi2LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi2LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 2-byte signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi4LSB">
      <title>Socket::recvi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte signed integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi4LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi4LSB(1250ms); # timeout in 1.25 seconds</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 4-byte signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvi8LSB">
      <title>Socket::recvi8LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives an 8-byte (64-bit) signed integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi8LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvi8LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi8LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.  A <link linkend="Relative_Dates">relative date/time value</link> can be used as well (i.e. <code>1250ms</code>) for clarity.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 8-byte (64-bit) signed integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi8LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu1">
      <title>Socket::recvu1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 1-byte unsigned integer from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvu1(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvu1();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 1-byte unsigned integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu2">
      <title>Socket::recvu2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte unsigned integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvu2(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvu2();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 2-byte unsigned integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu4">
      <title>Socket::recvu4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte unsigned integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvu4(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvu4();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 4-byte unsigned integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu2LSB">
      <title>Socket::recvu2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte unsigned integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvu2LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvu2LSB();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 2-byte unsigned integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_recvu4LSB">
      <title>Socket::recvu4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte unsigned integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvu4LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $sock.recvu4LSB();</programlisting>
	  </listitem>
	</varlistentry> 
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvu4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The 4-byte unsigned integer read.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvu4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_readHTTPHeader">
      <title>Socket::readHTTPHeader()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads an HTTP header and returns a hash representing the data read.  Accepts an optional timeout value in milliseconds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::readHTTPHeader(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$hash = $sock.readHTTPHeader();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::readHTTPHeader()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>The return hash will contain keys for each header, plus an http_version key, giving the HTTP protocol version.  For HTTP responses, the following keys will be returned: status_code, status_message.  For outgoing HTTP messages, the following keys will be populated: method, path.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>SOCKET-NOT-OPEN</code></para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-CLOSED</code></para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>SOCKET-RECV-ERROR</code></para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getPort">
      <title>Socket::getPort()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the port number of the socket for INET sockets.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getPort()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$port = $sock.getPort();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns the port number for an INET connection, -1 if no INET connection has been established.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_shutdown">
      <title>Socket::shutdown()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Ensures that a socket will be closed even if the file descriptor is shared with other processes (for example, after a call to <link linkend="fork">fork()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::shutdown()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.shutdown();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::shutdown()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::shutdown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_close">
      <title>Socket::close()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes an open socket.  Also deletes the UNIX domain socket file if it was created by a call to <link linkend="Socket_bind">Socket::bind()</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::close()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.close();</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Events</term>
	  <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getCharset">
      <title>Socket::getCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character encoding for the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$enc = $sock.getCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setCharset">
      <title>Socket::setCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the character encoding for the socket.  If any string data is sent over the socket with <link linkend="Socket_send">Socket::send()</link>, then the character encoding will be automatically converted if needed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::setCharset(<replaceable>string:encoding</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.setCharset("ISO-8859-1");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::setCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character encoding for the socket.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getNoDelay">
      <title>Socket::getNoDelay()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the <code>TCP_NODELAY</code> setting for the socket.  See also <link linkend="Socket_setNoDelay">Socket::setNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getNoDelay()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$nodelay = $sock.getNoDelay();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getNoDelay()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::getNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_setNoDelay">
      <title>Socket::setNoDelay()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <code>TCP_NODELAY</code> setting for the socket; when this setting is True, then data will be immediately sent out over the socket, when it is False, then data transmission may be delayed to be packaged with other data for the same target.</para>
	    <para>Delayed data transmissions may cause problems when the sender immediately closes the socket after sending data; in this case the receiver may not get the data even though the send succeeded.</para>
	    <para>Note that if no value is given to the method, the argument will be assumed to be False, and output buffering will be turned on for the socket, which may be the opposite of what the programmer intends, therefore it's recommended to always pass an argument to this method.</para>
	    <para>See also <link linkend="Socket_getNoDelay">Socket::getNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::setNoDelay(<replaceable>boolean</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock.setNoDelay(True);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::setNoDelay()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>boolean</replaceable></para></entry>
	      <entry><para>boolean</para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the socket.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, non-zero for errors.  To get error information, see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Socket_getSocket">
      <title>Socket::getSocket()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the file descriptor number associated with the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getSocket()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$sock = $sock.getSocket();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getSocket()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::getSocket()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The file descriptor associated to the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>


  <sect1 id="HTTPClient_Class">
    <title>HTTPClient Class</title>

    <para>Note: This class is not available with the <link linkend="no-network"><code>PO_NO_NETWORK</code></link> parse option.</para>

    <para>The HTTPClient class can be used to communicate with HTTP servers using the HTTP or HTTPS (HTTP using an SSL/TLS encrypted connection) protocol.</para>

    <para>By default 'Connection: Keep-Alive' is always sent regardless of the HTTP protocol level set for the object, however if a server response contains 'Connection: close', the connection will be closed as soon as the full response (including any message body if present) has been read.</para>

    <para>HTTP redirect responses are supported and can be limited with the <code>max_redirects</code> constructor hash key or by using the <link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects()</link> method.  The default number of redirects is 5.</para>

    <para>HTTP basic authentication is supported; set the username and password in the URL (ex: http://username:password@host:port/path).  To change the URL from the one set by the constructor, call <link linkend="HTTPClient_setURL">HTTPClient::setURL()</link>.</para>

    <para>HTTP proxies and basic proxy authentication are supported by setting the <code>proxy</code> constructor hash key to the proxy URL (with a proxy username and password if required) or by calling the <link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL()</link> method.</para>

    <para>Objects of this class are thread-safe and support serializing multiple simultaneous requests from many threads.  If a request is in progress and another thread attempts to make a request at the same time, the second thread will block until the first is complete.  Therefore the total amount of time a thread could wait for a response in a multi-threaded context could be greater than the read timeout value.</para>

    <para>This class understands and automatically decodes &quot;deflate&quot;, &quot;gzip&quot;, and &quot;bzip2&quot; content encodings as well.</para>

    <para>The default read timeout value is 300,000 milliseconds (5 minutes).  Note that the read timeout value applies to individual packets; for this reason for large transfers the overall read time could exceed the read timeout value.</para>

    <para>When an exception is thrown (for example, a response code of &lt; 200 or &gt;= 400 is received from the server), any message body returned will be in the &quot;arg&quot; key of the <link linkend="Exception_Hash">exception hash</link>.</para>

    <para>This class understands the protocols in the following table.</para>

    <table id="HTTPClient_Protocols">
      <title>HTTPClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Protocol</para></entry>
	    <entry><para>Default Port</para></entry>
	    <entry><para>SSL?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>http</code></para></entry>
	    <entry><para>80</para></entry>
	    <entry><para>No</para></entry>
	    <entry><para>Unencrypted HTTP protocol</para></entry>
	  </row>
	  <row>
	    <entry><para><code>https</code></para></entry>
	    <entry><para>443</para></entry>
	    <entry><para>Yes</para></entry>
	    <entry><para>HTTP protocol with SSL/TLS encryption</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>Whenever using an HTTPClient method where a hash of headers can be passed to the method, some headers are generated by default by the class and can be overridden, and some are cannot be overridden and are ignored if passed by the client.  See the following tables for details.</para>

    <table>
      <title>HTTPClient Mandatory Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Content-Length</code></para></entry>
	    <entry><para>This header is only sent if a message body is send, and, if so, the length is calculated automatically.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>HTTPClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>text/html</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>text/html</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore HTTP Client v0.7.4</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Accept-Encoding</code></para></entry>
	    <entry><para><code>deflate,gzip,bzip2</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>This class supports posting network events to a <link linkend="Queue_Class">Queue</link>.  See <link linkend="event_handling">Event Handling</link> for more information.</para>

    <para>The events raised by this object are listed in the following table:</para>

    <table id="httpclient_events">
      <title>HTTPClient Events</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Name</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code><link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link></code></para></entry>
            <entry><para>Raised when the HTTP &quot;Content-Length&quot; header is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link></code></para></entry>
            <entry><para>Raised when HTTP chunked data is about to be received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link></code></para></entry>
            <entry><para>Raised when all HTTP chunked data has been received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></para></entry>
            <entry><para>Raised when an HTTP redirect message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link></code></para></entry>
            <entry><para>Raised when an HTTP message is sent.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link></code></para></entry>
            <entry><para>Raised when an HTTP message is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link></code></para></entry>
            <entry><para>Raised when HTTP footers are received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link></code></para></entry>
            <entry><para>Raised when a block of HTTP chunked data is received.</para></entry>
          </row>
          <row>
            <entry><para><code><link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link></code></para></entry>
            <entry><para>Raised when the next chunk size for HTTP chunked data is known.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The following table gives an overview of the methods available in the HTTPClient class.</para>

    <table>
      <title>HTTPClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_constructor">HTTPClient::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the HTTPClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_destructor">HTTPClient::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the HTTPClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_copy">HTTPClient::copy()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Copying objects of this class is not supported, an exception will be thrown.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getURL">HTTPClient::getURL()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current URL.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setURL">HTTPClient::setURL()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Sets a new URL value for the next connection.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getProxyURL">HTTPClient::getProxyURL()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current proxy URL.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Sets a new proxy URL value for the next connection.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_clearProxyURL">HTTPClient::clearProxyURL()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Clears the proxy URL value.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setProxySecure">HTTPClient::setProxySecure()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the SSL/TLS flag for the next connection to the proxy.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_isProxySecure">HTTPClient::isProxySecure()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the SSL/TLS flag.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getMaxRedirects">HTTPClient::getMaxRedirects()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the current <code>max_redirects</code> value.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setMaxRedirects">HTTPClient::gstMaxRedirects()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Updates the <code>max_redirects</code> value.</para></entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_connect">HTTPClient::connect()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Connects to the remote socket.  If the protocol indicates that a secure connection should be established (or <link linkend="HTTPClient_setSecure">HTTPClient::setSecure()</link> was called previsouly), SSL/TLS negotiation will be attempted.  Note: For possible exceptions, see the <link linkend="Socket_connect">Socket::connect()</link> method (or <link linkend="Socket_connectSSL">Socket::connectSSL()</link> for secure connections).</para>
	      <para>If the <code>TCP_NODELAY</code> flag has been set (see <link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay()</link>), then after a successful connection to the remote socket, this option will be set on the socket.  If an error occurs setting the <code>TCP_NODELAY</code> option, the internal flag is set to false (use <link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay()</link> to check the flag's state) and the error code can be retrieved with <link linkend="errno">errno()</link>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_disconnect">HTTPClient::disconnect()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Disconnects from the remote socket</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_get">HTTPClient::get()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP GET request and returns the message body received.  In order to get the headers and the body, use the <link linkend="HTTPClient_send">HTTPClient::send()</link> method instead.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_head">HTTPClient::head()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP HEAD request and returns the headers received.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_post">HTTPClient::post()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP POST request with a message body and returns the message body received as a response.  In order to get the headers and the body in the response, use the <link linkend="HTTPClient_send">HTTPClient::send()</link> method instead.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_send">HTTPClient::send()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sends an HTTP request with the specified method and optional message body and returns headers and optionally the body received as a response in a hash format.  If no connection is established, an internal call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> will be made before sending the message.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setConnectTimeout">HTTPClient::setConnectTimeout()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the connect timeout in milliseconds.  Negative numbers mean use the default system connect timeout.  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>30s</code> = 30 seconds, etc.).</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setTimeout">HTTPClient::setTimeout()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets the default read timeout in milliseconds.  Zero means immediate timeout (will return data only if it is already available), and negative numbers mean never timeout (wait forever for data).  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getConnectTimeout">HTTPClient::getConnectTimeout()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the connect timeout as an integer in milliseconds.  Negative numbers mean the system default timeout is used.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getTimeout">HTTPClient::getTimeout()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the default read timeout as an integer in milliseconds.  Zero means immediate timeout (only returns data if it is already available), and negative numbers mean never timeout (wait forever for data).</para></entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_setHTTPVersion">HTTPClient::setHTTPVersion()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sets the HTTP protocol version string for headers in outgoing messages, allowed values are '1.0' and '1.1'.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_getHTTPVersion">HTTPClient::getHTTPVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the HTTP protocol version string used in outgoing messages.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_setSecure">HTTPClient::setSecure()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Sets the object to make a secure SSL/TLS connection on the next connect if the passed argument is True, or an unencrypted cleartext connection if it is not True or if no argument is passed.  This method overrides the default behaviour for the protocol set for the object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_isSecure">HTTPClient::isSecure()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns True if the current connection is encrypted, False if not.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_verifyPeerCertificate">HTTPClient::verifyPeerCertificate()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string code giving the result of verifying the remote certificate.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_getSSLCipherName">HTTPClient::getSSLCipherName()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the name of the cipher for an encrypted connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_getSSLCipherVersion">HTTPClient::getSSLCipherVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version of the cipher for an encrypted connection.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="HTTPClient_setEncoding">HTTPClient::setEncoding()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Sets the string encoding for the object; any strings deserialized with this object will be tagged with this character encoding.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_getEncoding">HTTPClient::getEncoding()</link></para>
            </entry>
            <entry><para>N</para></entry>
            <entry><para>Returns the character encoding used for the object</para></entry>
          </row>
          <row>
            <entry><para><link linkend="HTTPClient_setEventQueue">HTTPClient::setEventQueue()</link></para></entry>
            <entry><para>N</para></entry>
            <entry><para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events.</para></entry>
          </row>
	  <row>
	    <entry><para><link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the <code>TCP_NODELAY</code> setting for the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <code>TCP_NODELAY</code> setting for the object.</para></entry>
	  </row>
        </tbody>
      </tgroup>
    </table>

    <sect2 id="HTTPClient_constructor">
      <title>HTTPClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the HTTPClient object based on the parameters passed.  To connect, call any method that requires a connection and an implicit connection is established, or call <link linkend="HTTPClient_connect">HTTPClient::connect()</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting><command>new</command> HTTPClient(<replaceable>[opts]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient = <command>new</command> HTTPClient(("url":"http://hostname:8080/path"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>[opts]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>sets options and changes default behaviour for the object, etc.  See the table below for information on valid keys and their mening.  Note that the key names are case-sensitive and therefore must all be in lower-case.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table id="HTTPClient_constructor_option_hash_keys">
        <title>HTTPClient::constructor() Option Hash Keys</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Key</para></entry>
	      <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>url</code></para></entry>
              <entry><para>A string giving the URL to connect to.</para></entry>
            </row>
            <row>
              <entry><para><code>default_port</code></para></entry>
              <entry><para>The default port number to connect to if none is given in the URL.</para></entry>
            </row>
            <row>
              <entry><para><code>protocols</code></para></entry>
              <entry><para>A hash describing new protocols, the key is the protocol name and the value is either an integer giving the default port number or a hash with 'port' and 'ssl' keys giving the default port number and a boolean value to indicate that an SSL connection should be established.</para></entry>
            </row>
            <row>
              <entry><para><code>http_version</code></para></entry>
              <entry><para>Either '1.0' or '1.1' for the claimed HTTP protocol version compliancy in outgoing message headers.</para></entry>
            </row>
            <row>
              <entry><para><code>default_path</code></para></entry>
              <entry><para>The default path to use for new connections if a path is not otherwise specified in the connection URL.</para></entry>
            </row>
            <row>
              <entry><para><code>max_redirects</code></para></entry>
              <entry><para>The maximum number of redirects before throwing an exception (the default is 5).</para></entry>
            </row>
            <row>
              <entry><para><code>proxy</code></para></entry>
              <entry><para>The proxy URL for connecting through a proxy.</para></entry>
            </row>
            <row>
              <entry><para><code>timeout</code></para></entry>
              <entry><para>The timeout value in milliseconds (also can be a <link linkend="Relative_Dates">relative date-time value</link> for clarity, ex: <code>5m</code>)</para></entry>
            </row>
            <row>
              <entry><para><code>connect_timeout</code></para></entry>
              <entry><para>The timeout value in milliseconds for establishing a new socket connection (also can be a <link linkend="Relative_Dates">relative date-time value</link> for clarity, ex: <code>30s</code>)</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Return Values for HTTPClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The HTTPClient object is returned</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-CONSTRUCTOR-ERROR</code></para></entry>
              <entry><para>invalid or unknown option passed in option hash</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-UNKNOWN-PROTOCOL</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_destructor">
      <title>HTTPClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the HTTPClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $httpclient;</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link>, <link linkend="event_deleted">EVENT_DELETED</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_copy">
      <title>HTTPClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::copy()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getURL">
      <title>HTTPClient::getURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the current URL value for the object.  To set the URL, use the <link linkend="HTTPClient_setURL">HTTPClient::setURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getURL()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$url = $httpclient.getURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getURL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>This method takes no arguments.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String</para></entry>
              <entry><para>The current URL value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setURL">
      <title>HTTPClient::setURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the URL value for the object.  To retrieve the current URL value, use the <link linkend="HTTPClient_getURL">HTTPClient::getURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setURL(<replaceable>url</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setURL("https://user:password@hostname:8080/path");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setURL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>url</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>The new URL for the object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::set()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-UNKNOWN-PROTOCOL</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getProxyURL">
      <title>HTTPClient::getProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the current proxy URL value for the object (NOTHING if no proxy URL is set).  To set the proxy URL, use the <link linkend="HTTPClient_setProxyURL">HTTPClient::setProxyURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getProxyURL()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$proxy_url = $httpclient.getProxyURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getProxyURL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>This method takes no arguments.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String</para></entry>
              <entry><para>The current proxy URL value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setProxyURL">
      <title>HTTPClient::setProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the proxy URL value for the object.  To retrieve the current URL value, use the <link linkend="HTTPClient_getProxyURL">HTTPClient::getProxyURL()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setProxyURL(<replaceable>url</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setProxyURL("http://user:password@proxy_host:8080/path");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setProxyURL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>url</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>The new proxy URL for the object.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-URL-ERROR</code></para></entry>
              <entry><para>invalid URL string</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-SET-PROXY-ERROR</code></para></entry>
              <entry><para>invalid authorization credentials in proxy URL (username without password or vice-versa)</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-PROXY-PROTOCOL-ERROR</code></para></entry>
	      <entry><para>unknown protocol passed in URL</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_clearProxyURL">
      <title>HTTPClient::clearProxyURL()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Clears the current proxy URL</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::clearProxyURL()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.clearProxyURL();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::clearProxyURL()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>This method takes no arguments.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::clearProxyURL()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setProxySecure">
      <title>HTTPClient::setProxySecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the SSL/TLS flag for the next proxy connection.  To check the flag, use the <link linkend="HTTPClient_isProxySecure">HTTPClient::isProxySecure()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setProxySecure(<replaceable>boolean</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setProxySecure(True);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setProxySecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>boolean</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>sets the SSL/TLS flag for the next proxy connection</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setProxySecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_isProxySecure">
      <title>HTTPClient::isProxySecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the SSL/TLS flag for proxy connection.  To set the flag, use the <link linkend="HTTPClient_setProxySecure">HTTPClient::setProxySecure()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::isProxySecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $httpclient.isProxySecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::isProxySecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>This method takes no arguments.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::isProxySecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>Boolean</para></entry>
              <entry><para>The value of the SSL/TLS flag for the proxy connection.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getMaxRedirects">
      <title>HTTPClient::getMaxRedirects()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the maximum number of redirects allowed for the object.  To set this value, use the <link linkend="HTTPClient_setMaxRedirects">HTTPClient::setMaxRedirects()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getMaxRedirects()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$num = $httpclient.getMaxRedirects();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getMaxRedirects()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>This method takes no arguments.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getMaxRedirects()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>Integer</para></entry>
              <entry><para>The current value of the <code>max_redirects</code> setting.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setMaxRedirects">
      <title>HTTPClient::setMaxRedirects()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the maximum number of redirects allowed for the object.  To retrieve this value, use the <link linkend="HTTPClient_getMaxRedirects">HTTPClient::getMaxRedirects()</link> method.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setMaxRedirects(<replaceable>max_redirects</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setMaxRedirects(0); # disable redirections</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setMaxRedirects()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>max_redirects</replaceable></para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>The maximum number of HTTP redirects allowed for hte object before an exception is thrown.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setMaxRedirects()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_connect">
      <title>HTTPClient::connect()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Connects to the remote socket.  If the protocol indicates that a secure connection should be established (or <link linkend="HTTPClient_setSecure">HTTPClient::setSecure()</link> was called previsouly), SSL/TLS negotiation will be attempted.  Note: For possible exceptions, see the <link linkend="Socket_connect">Socket::connect()</link> method (or <link linkend="Socket_connectSSL">Socket::connectSSL()</link> for secure connections).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::connect()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.connect();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>,<link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::connect()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::connect()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::connect()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
	      <entry><para>err</para></entry>
              <entry><para>desc</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><code>HTTP-CLIENT-MAXIMUM-.REDIRECTS-EXCEEDED</code></para></entry>
              <entry><para>The attempt to connect exceeeded the maximum number of redirects allowed for the object.</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-RECEIVE-ERROR</code></para></entry>
              <entry><para>There was an error receiving data on the socket</para></entry>
            </row>
            <row>
              <entry><para><code>HTTP-CLIENT-TIMEOUT</code></para></entry>
	      <entry><para>The receive attempt timed out.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_disconnect">
      <title>HTTPClient::disconnect()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Disconnects from the remote socket if a connection is established (otherwise does nothing).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::disconnect()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.disconnect();</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_channel_closed">EVENT_CHANNEL_CLOSED</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::disconnect()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::disconnect()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_get">
      <title>HTTPClient::get()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP GET request and returns the message body received.  In order to get the headers and the body, use the <link linkend="HTTPClient_send">HTTPClient::send() method</link> instead.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::get(<replaceable>path, [headers], [info_reference]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$html = $httpclient.get("/path/file.html");</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::get()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>path</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para>
              </entry>
            </row>
            <row>
	      <entry><para><replaceable>[headers]</replaceable></para></entry>
              <entry><para>Hash</para></entry>
	      <entry><para>An optional hash of headers to include in the message.</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>[info_reference]</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The message body returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::get()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_head">
      <title>HTTPClient::head()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP HEAD request and returns the headers received.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::head(<replaceable>path, [headers]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$response = $httpclient.head("/path");</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::head()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>path</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[headers]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>An optional hash of headers to include in the message.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::head()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>The headers received from the HTTP server with all key names converted to lower-case.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::head()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_post">
      <title>HTTPClient::post()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP POST request with a message body and returns the message body received as a response.  In order to get the headers and the body, use the <link linkend="HTTPClient_send">HTTPClient::send() method</link> instead.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::post(<replaceable>path, message, [headers], [info_reference]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::post()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>path</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>message</replaceable>
                </para>
              </entry>
              <entry>
                <para>String or Binary</para>
              </entry>
              <entry>
                <para>The message body to send.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[headers]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>An optional hash of headers to include in the message.</para>
              </entry>
            </row>
            <row>
	      <entry><para><replaceable>[info_reference]</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::post()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The message body returned.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::post()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_send">
      <title>HTTPClient::send()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sends an HTTP request with the specified method and optional message body and returns headers and optionally the body received as a response in a hash format.  If necessary, a connection will be established via an implicit call to <link linkend="HTTPClient_connect">HTTPClient::connect()</link> before sending the message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::send(<replaceable>message, method, path, [headers], [get_body], [info_reference]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$msg = $httpclient.send($body, "POST", "/path", ("Connection":"Keep-Alive"));</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Events</term>
          <listitem><code><link linkend="event_connecting">EVENT_CONNECTING</link>, <link linkend="event_connected">EVENT_CONNECTED</link>, <link linkend="event_hostname_lookup">EVENT_HOSTNAME_LOOKUP</link>, <link linkend="event_hostname_resolved">EVENT_HOSTNAME_RESOLVED</link>, <link linkend="event_start_ssl">EVENT_START_SSL</link>, <link linkend="event_ssl_established">EVENT_SSL_ESTABLISHED</link>, <link linkend="event_http_send_message">EVENT_HTTP_SEND_MESSAGE</link>, <link linkend="event_packet_sent">EVENT_PACKET_SENT</link>, <link linkend="event_http_message_received">EVENT_HTTP_MESSAGE_RECEIVED</link>, <link linkend="event_packet_read">EVENT_PACKET_READ</link>, <link linkend="event_http_content_length">EVENT_HTTP_CONTENT_LENGTH</link>, <link linkend="event_http_chunked_start">EVENT_HTTP_CHUNKED_START</link>, <link linkend="event_http_chunked_end">EVENT_HTTP_CHUNKED_END</link>, <link linkend="event_http_chunked_data_received">EVENT_HTTP_CHUNKED_DATA_RECEIVED</link>, <link linkend="event_http_chunk_size">EVENT_HTTP_CHUNK_SIZE</link>, <link linkend="event_http_footers_received">EVENT_HTTP_FOOTERS_RECEIVED</link>, <link linkend="event_http_redirect">EVENT_HTTP_REDIRECT</link></code></listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::send()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>message</replaceable>
                </para>
              </entry>
              <entry>
                <para>String or Binary</para>
              </entry>
              <entry>
                <para>The message body to send.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>method</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The name of the HTTP method (<code>'GET', 'POST', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE', or 'CONNECT'</code>).</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>path</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The path for the message (i.e. '/path/resource?method&amp;param=value')</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[headers]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>An optional hash of headers to include in the message.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[get_body]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>if set to True (default is False), then even if the server did not return a 'Content-Length' header in the response, the object will try to read a message body from the socket anyway.  Use this only with broken servers that send messages bodies without a 'Content-Length' header.</para>
              </entry>
            </row>
            <row>
	      <entry><para><replaceable>[info_reference]</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
	      <entry><para>An optional reference to an lvalue that will be used as an output variable giving a hash of request headers and other information about the HTTP request.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::send()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>The headers received from the HTTP server with all key names converted to lower-case.  The message body, if any, will be assigned to the value of the 'body' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::send()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-TIMEOUT</code>
                </para>
              </entry>
              <entry>
                <para>timeout on response from HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-RECEIVE-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>error communicating with HTTP server</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-METHOD-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid HTTP method passed</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setConnectTimeout">
      <title>HTTPClient::setConnectTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default connect timeout in milliseconds.  Negative numbers mean use the default system timeout.  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setConnectTimeout(<replaceable>timeout</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setConnectTimeout(2m); # sets timeout to 2 minutes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setConnectTimeout()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>timeout</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para>
              </entry>
              <entry>
                <para>Connect timeout in milliseconds, 0 = immediate timeout (do not use), negative numbers = use system default connect timeout.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setConnectTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setTimeout">
      <title>HTTPClient::setTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the default read timeout in milliseconds.  Zero means immediate timeout (will return data only if it is already available), and negative numbers mean never timeout (wait forever for data).  Note that like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> can be used to make the units clear (i.e. <code>2m</code> = two minutes, etc.).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setTimeout(<replaceable>timeout</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setTimeout(2m); # sets timeout to 2 minutes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setTimeout()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>timeout</replaceable>
                </para>
              </entry>
              <entry>
                <para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para>
              </entry>
              <entry>
                <para>Read timeout in milliseconds, 0 = immediate timeout, negative numbers = never timeout.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getConnectTimeout">
      <title>HTTPClient::getConnectTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the connect timeout as an integer in milliseconds.  Negative numbers mean the default system timeout is used instead.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getConnectTimeout()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$timeout = $httpclient.getConnectTimeout();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getConnectTimeout()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getConnectTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The connect timeout value in milliseconds</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getTimeout">
      <title>HTTPClient::getTimeout()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the default read timeout as an integer in milliseconds.  Zero means immediate timeout (only returns data if it is already available), and negative numbers mean never timeout (wait forever for data).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getTimeout()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$timeout = $httpclient.getTimeout();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getTimeout()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getTimeout()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The read timeout value in milliseconds</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setHTTPVersion">
      <title>HTTPClient::setHTTPVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the HTTP protocol version string for headers in outgoing messages, allowed values are '1.0' and '1.1'.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setHTTPVersion(<replaceable>version</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setHTTPVersion("1.1");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setHTTPVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>version</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>either '1.0' or '1.1' for the HTTP protocol compliance version.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-VERSION-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>invalid HTTP version passed (allowed values: '1.0', '1.1').</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getHTTPVersion">
      <title>HTTPClient::getHTTPVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the HTTP protocol version string used in outgoing messages.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getHTTPVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$version = $httpclient.getHTTPVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getHTTPVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getHTTPVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The HTTP protocol version string used in outgoing messages (either '1.0' or '1.1').</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setSecure">
      <title>HTTPClient::setSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the object to make a secure SSL/TLS connection on the next connect if the passed argument is True, or an unencrypted cleartext connection if it is not True or if no argument is passed.  This method overrides the default behaviour for the protocol set for the object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setSecure(<replaceable>[secure]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setSecure(True);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>[secure]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>If True, a SSL/TLS connection will be attempted on the next connection.  If not True or missing, an unencrypted cleartext connection will be established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_isSecure">
      <title>HTTPClient::isSecure()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns True if the current connection is encrypted, False if not.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::isSecure()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bool = $httpclient.isSecure();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::isSecure()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::isSecure()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>Returns True if the current connection is encrypted, False if not.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_verifyPeerCertificate">
      <title>HTTPClient::verifyPeerCertificate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string code giving the result of verifying the remote certificate.  Return value are the keys described in the <link linkend="X509_VerificationReasons_Hash">X509_VerificationReasons hash constant</link>.  This hash can also be used to generate a textual description of the verification result.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::verifyPeerCertificate()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $httpclient.verifyPeerCertificate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::verifyPeerCertificate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::verifyPeerCertificate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>A string code giving the result of verifying the peer's certificate.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getSSLCipherName">
      <title>HTTPClient::getSSLCipherName()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the name of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getSSLCipherName()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $httpclient.getSSLCipherName();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getSSLCipherName()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getSSLCipherName()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The name of the cipher for a secure connection.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getSSLCipherVersion">
      <title>HTTPClient::getSSLCipherVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version of the cipher for an encrypted connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getSSLCipherVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $httpclient.getSSLCipherVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getSSLCipherVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getSSLCipherVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The version of the cipher for a secure connection.  No value is returned if no secure connection has been established.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_setEncoding">
      <title>HTTPClient::setEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets the string encoding for the object; any strings deserialized with this object will be tagged with this character encoding.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setEncoding(<replaceable>encoding</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setEncoding("ISO-8859-1");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setEncoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>encoding</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The string encoding to use for this object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by HTTPClient::setEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>HTTP-CLIENT-SETSTRINGENCODING-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing encoding parameter from method call</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="HTTPClient_getEncoding">
      <title>HTTPClient::getEncoding()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the character encoding used for the object</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::getEncoding()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $httpclient.getEncoding();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::getEncoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::getEncoding()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The character encoding used for the object.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setEventQueue">
      <title>HTTPClient::setEventQueue()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Sets a <link linkend="Queue_Class">Queue</link> object to receive <link linkend="httpclient_events">HTTPClient</link> and <link linkend="socket_events">Socket</link> events.  To remove the event queue and stop monitoring events, pass <code>NOTHING</code> to the method.  See <link linkend="event_handling">Event Handling</link> for more information.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>HTTPClient::setEventQueue(<replaceable>[queue]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$httpclient.setEventQueue($queue);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for HTTPClient::setEventQueue()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>[queue]</replaceable></para></entry>
              <entry><para><link linkend="Queue_Class">Queue</link></para></entry>
              <entry><para>To set the event queue, pass a <link linkend="Queue_Class">Queue</link> object; to clear the event queue, pass no argument to the function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for HTTPClient::setEventQueue()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>n/a</para></entry>
              <entry><para>This method does not return any value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_getNoDelay">
      <title>HTTPClient::getNoDelay()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the <code>TCP_NODELAY</code> setting for the HTTPClient object.  See also <link linkend="HTTPClient_setNoDelay">HTTPClient::setNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>HTTPClient::getNoDelay()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$nodelay = $httpclient.getNoDelay();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for HTTPClient::getNoDelay()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for HTTPClient::getNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Boolean</para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the HTTPClient object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="HTTPClient_setNoDelay">
      <title>HTTPClient::setNoDelay()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <code>TCP_NODELAY</code> setting for the HTTPClient object; when this setting is True, then data will be immediately sent out over the HTTPClient object's socket, when it is False, then data transmission may be delayed to be packaged with other data for the same target.</para>
	    <para>Delayed data transmissions may cause problems when the sender immediately closes the spcket after sending data; in this case the receiver may not get the data even though the send succeeded.</para>
	    <para>Note that if no value is given to the method, the argument will be assumed to be False, and output buffering will be turned on for the HTTPClient object, which may be the opposite of what the programmer intends, therefore it's recommended to always pass an argument to this method.</para>
	    <para>If the socket is not connected when this call is made, then an internal flag is set and the <code>TCP_NODELAY</code> option is enabled when the next connection is established.  If the socket is connected, then if an error occurs setting the <code>TCP_NODELAY</code> option on the socket, this method will return a non-zero error code; the actual error can be checked with the <link linkend="errno">errno()</link> function.</para>
	    <para>See also <link linkend="HTTPClient_getNoDelay">HTTPClient::getNoDelay()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>HTTPClient::setNoDelay(<replaceable>boolean</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$httpclient.setNoDelay(True);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for HTTPClient::setNoDelay()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>boolean</replaceable></para></entry>
	      <entry><para>boolean</para></entry>
	      <entry><para>The <code>TCP_NODELAY</code> setting for the HTTPClient.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for HTTPClient::setNoDelay()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, non-zero for errors.  To get error information, see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="XmlRpcClient_Class">
    <title>XmlRpcClient Class</title>

    <para>Note: This class is not available with the <link linkend="no-network"><code>PO_NO_NETWORK</code></link> parse option.</para>

    <para>The XmlRpcClient class provides easy access to XML-RPC web services.  This class inherits all public methods of the <link linkend="HTTPClient_Class">HTTPClient class</link>.  The inherited <link linkend="HTTPClient_Class">HTTPClient</link> methods are not listed in this section, see the section on the <link linkend="HTTPClient_Class">HTTPClient class</link> for more information on methods provided by the parent class.  For low-level XML-RPC functions, see the XML-RPC functions in <link linkend="XML_Functions">XML Functions</link>.</para>

    <para>The XmlRpcClient class understands the following protocols in addition to the <link linkend="HTTPClient_Protocols">protocols supported by the HTTPClient class</link>:</para>

    <table>
      <title>XmlRpcClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Protocol</para></entry>
            <entry><para>Default Port</para></entry>
            <entry><para>SSL?</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>xmlrpc</code></para></entry>
            <entry><para>80</para></entry>
            <entry><para>No</para></entry>
            <entry><para>Unencrypted XML-RPC protocol over HTTP</para></entry>
          </row>
          <row>
            <entry><para><code>xmlrpcs</code></para></entry>
            <entry><para>443</para></entry>
            <entry><para>Yes</para></entry>
            <entry><para>XML-RPC protocol over HTTP with SSL/TLS encryption</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The XmlRpcClient supplies default values for HTTP headers as follows:</para>

    <table>
      <title>XmlRpcClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>text/xml</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>text/xml</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore XML-RPC Client v0.7.4</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>XmlRpcClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <link linkend="XmlRpcClient_constructor">XmlRpcClient::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the XmlRpcClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="XmlRpcClient_destructor">XmlRpcClient::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the XmlRpcClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="XmlRpcClient_copy">XmlRpcClient::copy()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="XmlRpcClient_call">XmlRpcClient::call()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="XmlRpcClient_callWithInfo">XmlRpcClient::callWithInfo()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="XmlRpcClient_call">XmlRpcClient::call()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="XmlRpcClient_callArgsWithInfo">XmlRpcClient::callArgsWithInfo()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="XmlRpcClient_constructor">
      <title>XmlRpcClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the XmlRpcClient object based on the parameters passed and by default immediately attempts to establish a connection to the server (pass a boolean True value as the second argument to establish a connection on demand).  See <link linkend="HTTPClient_constructor">HTTPClient::constructor()</link> and <link linkend="HTTPClient_connect">HTTPClient::connect()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting><command>new</command> XmlRpcClient(<replaceable>[opts, noconnect]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$xrc = <command>new</command> XmlRpcClient(("url":"http://hostname/RPC2"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>[opts]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>an option hash, see <link linkend="HTTPClient_constructor_option_hash_keys">HTTPClient::constructor() Option Hash Keys</link> for valid keys in this hash.</para>
              </entry>
            </row>
            <row>
              <entry><para><replaceable>[noconnect]</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>If this optional argument is passed with a value of True, then the object will not attempt to make a connection immediately to the remote socket, but instead will wait until a connection is required or manually established with the parent class' <link linkend="HTTPClient_connect">HTTPClient::connect()</link> method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The XmlRpcClient object is returned</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_destructor">
      <title>XmlRpcClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the XmlRpcClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $xrc;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_copy">
      <title>XmlRpcClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::copy()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by XmlRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>XMLRPCCLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_call">
      <title>XmlRpcClient::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link>, and <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>XmlRpcClient::call(<replaceable>method_name, [args...]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.call("method.name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::call()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The XML-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[args...]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>Optional arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_callArgs">
      <title>XmlRpcClient::callArgs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link>, and <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>XmlRpcClient::callArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callArgs("method.name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callArgs()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The XML-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="XmlRpcClient_callWithInfo">
      <title>XmlRpcClient::callWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="XmlRpcClient_call">XmlRpcClient::call()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>XmlRpcClient::callWithInfo(<replaceable>lvalue_ref, method_name, [args...]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callWithInfo(\$info, "method.name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callWithInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>lvalue_ref</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The XML-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[args...]</replaceable>
                </para>
              </entry>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>Optional arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="XmlRpcClient_callArgsWithInfo">
      <title>XmlRpcClient::callArgsWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="XmlRpcClient_callArgs">XmlRpcClient::callArgs()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the XML-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>XmlRpcClient::callArgsWithInfo(<replaceable>lvalue_ref, method_name, [arg_list]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $xrc.callArgsWithInfo(\$info, "method.name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for XmlRpcClient::callArgsWithInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>lvalue_ref</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The XML-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for XmlRpcClient::callArgswithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>If the call was successful, the response information will be found in the key 'params'.  If an error occurred then the error information can be found under the 'fault' key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="JsonRpcClient_Class">
    <title>JsonRpcClient Class</title>

    <para>Note: This class is not available with the <link linkend="no-network"><code>PO_NO_NETWORK</code></link> parse option.</para>

    <para>The JsonRpcClient class provides easy access to JSON-RPC web services.  This class inherits all public methods of the <link linkend="HTTPClient_Class">HTTPClient class</link>.  The inherited HTTPClient methods are not listed in this section, see the section on the HTTPClient class for more information on methods provided by the parent class.  For low-level JSON-RPC functions, see the JSON-RPC functions in <link linkend="JSON_Functions">JSON Functions</link>.</para>

    <para>The JsonRpcClient class understands the following protocols in addition to the <link linkend="HTTPClient_Protocols">protocols supported by the HTTPClient class</link>:</para>

    <table>
      <title>JsonRpcClient Class Protocols</title>
      <tgroup cols='4' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry><para>Protocol</para></entry>
            <entry><para>Default Port</para></entry>
            <entry><para>SSL?</para></entry>
            <entry><para>Description</para></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><para><code>jsonrpc</code></para></entry>
            <entry><para>80</para></entry>
            <entry><para>No</para></entry>
            <entry><para>Unencrypted JSON-RPC protocol over HTTP</para></entry>
          </row>
          <row>
            <entry><para><code>jsonrpcs</code></para></entry>
            <entry><para>443</para></entry>
            <entry><para>Yes</para></entry>
            <entry><para>JSON-RPC protocol over HTTP with SSL/TLS encryption</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The JsonRpcClient supplies default values for HTTP headers as follows:</para>

    <table>
      <title>JsonRpcClient Default, but Overridable Headers</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Header</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><code>Accept</code></para></entry>
	    <entry><para><code>application/json</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Content-Type</code></para></entry>
	    <entry><para><code>application/json</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>User-Agent</code></para></entry>
	    <entry><para><code>Qore JSON-RPC Client v0.7.4</code></para></entry>
	  </row>
	  <row>
	    <entry><para><code>Connection</code></para></entry>
	    <entry><para><code>Keep-Alive</code></para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>JsonRpcClient Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <link linkend="JsonRpcClient_constructor">JsonRpcClient::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Creates the JsonRpcClient object based on the parameters passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="JsonRpcClient_destructor">JsonRpcClient::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the JsonRpcClient object and closes any open connections.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="JsonRpcClient_copy">JsonRpcClient::copy()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="JsonRpcClient_call">JsonRpcClient::call()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.</para>
            </entry>
          </row>
          <row>
            <entry><para><link linkend="JsonRpcClient_callWithInfo">JsonRpcClient::callWithInfo()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="JsonRpcClient_call">JsonRpcClient::call()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
          <row>
            <entry><para><link linkend="JsonRpcClient_callArgsWithInfo">JsonRpcClient::callArgsWithInfo()</link></para></entry>
            <entry><para>Y</para></entry>
            <entry><para>Same as the <link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs()</link> except the first argument must be an lvalue reference, which is used as an output variable, where information about the HTTP request and response is written.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <sect2 id="JsonRpcClient_constructor">
      <title>JsonRpcClient::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the JsonRpcClient object based on the parameters passed and by default immediately attempts to establish a connection to the server (pass a boolean True value as the second argument to establish a connection on demand).  See <link linkend="HTTPClient_constructor">HTTPClient::constructor()</link> and <link linkend="HTTPClient_connect">HTTPClient::connect()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting><command>new</command> JsonRpcClient(<replaceable>[opts, noconnect]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$jrc = <command>new</command> JsonRpcClient(("url":"http://hostname/json"));</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument</para></entry>
              <entry><para>Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para><replaceable>[opts]</replaceable></para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>an option hash, see <link linkend="HTTPClient_constructor_option_hash_keys">HTTPClient::constructor() Option Hash Keys</link> for valid keys in this hash.</para></entry>
            </row>
            <row>
              <entry><para><replaceable>[noconnect]</replaceable></para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>If this optional argument is passed with a value of True, then the object will not attempt to make a connection immediately to the remote socket, but instead will wait until a connection is required or manually established with the parent class' <link linkend="HTTPClient_connect">HTTPClient::connect()</link> method.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The JsonRpcClient object is returned</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_destructor">
      <title>JsonRpcClient::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the JsonRpcClient object and closes any open connections.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $jrc;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_copy">
      <title>JsonRpcClient::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::copy()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by JsonRpcClient::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>JSONRPCCLIENT-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_call">
      <title>JsonRpcClient::call()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a variable number of arguments for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeJSONRPCRequestString">makeJSONRPCRequestString()</link>, and <link linkend="parseJSON">parseJSON()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>JsonRpcClient::call(<replaceable>method_name, [arg1, arg2...</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.call("method_name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::call()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The JSON-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::call()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callArgs">
      <title>JsonRpcClient::callArgs()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Calls a remote method using a single value after the method name for the method arguments and returns the response as qore data structure.  See <link linkend="HTTPClient_send">HTTPClient::send()</link>, <link linkend="makeJSONRPCRequestString">makeJSONRPCRequestString()</link>, and <link linkend="parseJSON">parseJSON()</link> for information on possible exceptions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>JsonRpcClient::callArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callArgs("method_name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callArgs()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The JSON-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::callArgs()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callWithInfo">
      <title>JsonRpcClient::callWithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="JsonRpcClient_call">JsonRpcClient::call()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>JsonRpcClient::callWithInfo(<replaceable>lvalue_reference, method_name, [arg1, arg2...</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callWithInfo(\$info, "method_name", $arg1, $arg2);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callWithInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>lvalue_reference</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
	      <entry><para><replaceable>method_name</replaceable></para></entry>
              <entry><para>String</para></entry>
              <entry><para>The JSON-RPC method name to call</para></entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::callWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="JsonRpcClient_callArgsWithInfo">
      <title>JsonRpcClient::callArgswithInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Like the <link linkend="JsonRpcClient_callArgs">JsonRpcClient::callArgs()</link> method, except requires an lvalue reference as the first argument that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>JsonRpcClient::callArgsWithInfo(<replaceable>lvalue_reference, method_name, [arg_list]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$result = $jrc.callArgsWithInfo(\$info, "method_name", $arg_list);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for JsonRpcClient::callArgsWithInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para><replaceable>lvalue_reference</replaceable></para></entry>
              <entry><para>LValue Reference</para></entry>
              <entry><para>A reference to an lvalue that will be used as an output variable providing information about the HTTP request and response made to effect the JSON-RPC call.</para></entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>method_name</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The JSON-RPC method name to call</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[arg_list]</replaceable>
                </para>
              </entry>
              <entry>
                <para>List or Any</para>
              </entry>
              <entry>
                <para>An optional list (or single value) of arguments for the method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for JsonRpcClient::callArgsWithInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>The information returned by the JSON-RPC method.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="SSLPrivateKey_Class">
    <title>SSLPrivateKey Class</title>
    <para>SSLPrivateKey objects are containers for private key data.</para>
    <table>
      <title>SSLPrivateKey Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_constructor">SSLPrivateKey::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the SSLPrivateKey object from the filename argument passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_destructor">SSLPrivateKey::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the SSLPrivateKey object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_copy">SSLPrivateKey::copy()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_getType">SSLPrivateKey::getType()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the algorithm used for the private key.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_getVersion">SSLPrivateKey::getVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version of the private key.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_getBitLength">SSLPrivateKey::getBitLength()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the bit length of the private key.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLPrivateKey_getInfo">SSLPrivateKey::getInfo()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of all information for the private key.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="SSLPrivateKey_constructor">
      <title>SSLPrivateKey::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the SSLPrivateKey object from the filename argument passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting><command>new</command> SSLPrivateKey(<replaceable>filename, [passphrase]</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$pkey = <command>new</command> SSLPrivateKey("/etc/keys/key.pem");</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>filename</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The filename of the PEM-encoded private key file</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <replaceable>[passphrase]</replaceable>
                </para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The passphrase required to decrypt the private key</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The SSLPrivateKey object is returned</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by SSLPrivateKey::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLPRIVATEKEY-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing filename argument, can't open file, unable to parse file, etc</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_destructor">
      <title>SSLPrivateKey::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the SSLPrivateKey object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $pkey;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_copy">
      <title>SSLPrivateKey::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by SSLPrivateKey::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLPRIVATEKEY-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getType">
      <title>SSLPrivateKey::getType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string giving the algorithm used for the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLPrivateKey::getType()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $pkey.getType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::getType()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::getType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Returns values include: RSA, RSA2, DSA, DSA1, DSA2, DSA3, DSA4, DH, and unknown</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getVersion">
      <title>SSLPrivateKey::getVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version of the private key as an integer.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLPrivateKey::getVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $pkey.getVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::getVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::getVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The version of the private key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getBitLength">
      <title>SSLPrivateKey::getBitLength()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the bit length of the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLPrivateKey::getBitLength()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $pkey.getBitLength();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::getBitLength()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::getBitLength()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The bit length of the private key.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLPrivateKey_getInfo">
      <title>SSLPrivateKey::getInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of all information for the private key.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLPrivateKey::getInfo()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $pkey.getInfo();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLPrivateKey::getInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLPrivateKey::getInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Keys are 'type', 'version', and 'bitLength' corresponding to the algorithm type, the version, and the bit length of the key respectively.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="SSLCertificate_Class">
    <title>SSLCertificate Class</title>
    <para>SSLCertificate objects are designed to work with X.509 certificate data.</para>
    <table>
      <title>SSLCertificate Class Method Overview</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>
              <para>Method</para>
            </entry>
            <entry>
              <para>Except?</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_constructor">SSLCertificate::constructor()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Creates the SSLCertificate object from the filename argument passed.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_destructor">SSLCertificate::destructor()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Destroys the SSLCertificate object.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_copy">SSLCertificate::copy()</link>
              </para>
            </entry>
            <entry>
              <para>Y</para>
            </entry>
            <entry>
              <para>Copying objects of this class is not supported, an exception will be thrown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getPEM">SSLCertificate::getPEM()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a string in PEM format representing the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getVersion">SSLCertificate::getVersion()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the version of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getSignatureType">SSLCertificate::getSignatureType()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the signature type of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getSignature">SSLCertificate::getSignature()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a binary object representing the signature of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getPublicKeyAlgorithm">SSLCertificate::getPublicKeyAlgorithm()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns name of the public key algorithm of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getPublicKey">SSLCertificate::getPublicKey()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a binary object representing the public key of the certificate in DER (Distinguished Encoding Rules) format.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getSubjectHash">SSLCertificate::getSubjectHash()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of strings representing the subject information of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getIssuerHash">SSLCertificate::getIssuerHash()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of strings representing the issuer information of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getSerialNumber">SSLCertificate::getSerialNumber()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns the integer serial number of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getPurposeHash">SSLCertificate::getPurposeHash()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of booleans representing the allowed purposes of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getNotBeforeDate">SSLCertificate::getNotBeforeDate()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a date/time value representing the start date of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getNotAfterDate">SSLCertificate::getNotAfterDate()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a date/time value representing the end date of the certificate.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <link linkend="SSLCertificate_getInfo">SSLCertificate::getInfo()</link>
              </para>
            </entry>
            <entry>
              <para>N</para>
            </entry>
            <entry>
              <para>Returns a hash of all information for the certificate.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <sect2 id="SSLCertificate_constructor">
      <title>SSLCertificate::constructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Creates the SSLCertificate object from the argument passed.  If a string is passed, the value is assumed to be the PEM representation of the certificate; if a binary is passed, the value is assumed to be the DER-encoded form of the certificate.</para>
	    <para>DEPRECATED: If a string is passed that is less than 200 bytes long, the string is assumed to be a file name; in which case the PO_NO_FILESYSTEM parse option is checked at run-time; if this restriction is not set, then the certificate is loaded from the filename (in this case, the certificate must be in PEM format).  Do not use this feature; load the file first and pass the data to the constructor instead.  This functionality will be removed in a future release of Qore.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting><command>new</command> SSLCertificate(<replaceable>string|binary</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$cert = <command>new</command> SSLCertificate($pem_cert_string);</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::constructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <replaceable>certificate_data</replaceable>
                </para>
              </entry>
              <entry>
                <para>String|Binary</para>
              </entry>
              <entry>
                <para>The certificate data in either PEM (string argument) or DER (binary argument) format.  See above for the deprecated option of passing a filename argument.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>The SSLCertificate object is returned</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Exceptions thrown by SSLCertificate::constructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLCERTIFICATE-CONSTRUCTOR-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>missing or invalid argument, unable to parse file, etc</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_destructor">
      <title>SSLCertificate::destructor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Destroys the SSLCertificate object.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $cert;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::destructor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::destructor()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method returns no value</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_copy">
      <title>SSLCertificate::copy()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Copying objects of this class is not supported, an exception will be thrown.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Exceptions thrown by SSLCertificate::copy()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>err</para>
              </entry>
              <entry>
                <para>desc</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>SSLCERTIFICATE-COPY-ERROR</code>
                </para>
              </entry>
              <entry>
                <para>objects of this class may not be copied</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPEM">
      <title>SSLCertificate::getPEM()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a string in PEM format representing the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getPEM()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$pem_str = $cert.getPEM();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getPEM()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getPEM()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>A string in PEM format representing the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getVersion">
      <title>SSLCertificate::getVersion()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the version of the certificate as an integer.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getVersion()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$int = $cert.getVersion();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getVersion()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getVersion()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The version of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSignatureType">
      <title>SSLCertificate::getSignatureType()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the signature type of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getSignatureType()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $cert.getSignatureType();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getSignatureType()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getSignatureType()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The signature type of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSignature">
      <title>SSLCertificate::getSignature()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a binary object representing the signature of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getSignature()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bin = $cert.getSignature();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getSignature()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getSignature()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Binary</para>
              </entry>
              <entry>
                <para>The signature data for the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPublicKeyAlgorithm">
      <title>SSLCertificate::getPublicKeyAlgorithm()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns name of the public key algorithm of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getPublicKeyAlgorithm()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$str = $cert.getPublicKeyAlgorithm();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getPublicKeyAlgorithm()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getPublicKeyAlgorithm()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>The name of the public key algorithm of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPublicKey">
      <title>SSLCertificate::getPublicKey()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a binary object representing the public key of the certificate in DER (Distinguished Encoding Rules) format.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getPublicKey()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$bin = $cert.getPublicKey();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getPublicKey()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getPublicKey()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Binary</para>
              </entry>
              <entry>
                <para>The public key of the certificate in DER format.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSubjectHash">
      <title>SSLCertificate::getSubjectHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of strings representing the subject information of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getSubjectHash()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getSubjectHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getSubjectHash()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getSubjectHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Key-value pairs representing the subject information of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getIssuerHash">
      <title>SSLCertificate::getIssuerHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of strings representing the issuer information of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getIssuerHash()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getIssuerHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getIssuerHash()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getIssuerHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Key-value pairs representing the issuer information of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getSerialNumber">
      <title>SSLCertificate::getSerialNumber()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns the integer serial number of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getIssuerHash()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getIssuerHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getSerialNumber()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getSerialNumber()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The serial number of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getPurposeHash">
      <title>SSLCertificate::getPurposeHash()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of booleans representing the allowed purposes of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getPurposeHash()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getPurposeHash();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getPurposeHash()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getPurposeHash()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Key-value pairs representing the allowed purposes of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getNotBeforeDate">
      <title>SSLCertificate::getNotBeforeDate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date/time value representing the start date of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getNotBeforeDate()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$date = $cert.getNotBeforeDate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getNotBeforeDate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getNotBeforeDate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The start date of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getNotAfterDate">
      <title>SSLCertificate::getNotAfterDate()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a date/time value representing the end date of the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getNotAfterDate()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$date = $cert.getNotAfterDate();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getNotAfterDate()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getNotAfterDate()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The end date of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 id="SSLCertificate_getInfo">
      <title>SSLCertificate::getInfo()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of all information for the certificate.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>SSLCertificate::getInfo()</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
            <programlisting>$hash = $cert.getInfo();</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <table>
        <title>Arguments for SSLCertificate::getInfo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument</para>
              </entry>
              <entry>
                <para>Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>This method takes no arguments.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
        <title>Return Values for SSLCertificate::getInfo()</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Keys are 'version', 'serialNumber', 'subject', 'issuer', 'purposes', 'notBefore', 'notAfter', 'signatureType', 'signature', and 'publicKey' corresponding to the respective attributes of the certificate.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>
    
  <sect1 id="Qore_SQL_Constants">
    <title>SQL Constants</title>

    <table>
      <title>Database Driver Constants in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para><code>SQL::DSOracle</code></para></entry>
	    <entry><para>Indicates an Oracle database to the Datasource::constructor() method</para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSMySQL</code></para></entry>
	    <entry><para>Indicates a MySQL database to the Datasource::constructor() method</para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSPGSQL</code></para></entry>
	    <entry><para>Indicates a PostgreSQL database to the Datasource::constructor() method</para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSSybase</code></para></entry>
	    <entry><para>Indicates a Sybase database to the Datasource::constructor() method</para></entry>
	  </row>
	  <row>
	    <entry><para><code>SQL::DSMSSQL</code></para></entry>
	    <entry><para>Indicates a Microsoft SQL Server database to the Datasource::constructor() method</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <table>
      <title>Placeholder Bind Constants in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>SQL::VARCHAR</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a string buffer</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::CLOB</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a CLOB string buffer.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::BLOB</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a binary buffer.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DATE</para></entry>
	    <entry><para>Indicates that the placeholder buffer should be a date-time buffer.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <table id="DBI_Capability_Constants">
      <title>DBI Capability Constant Codes in the SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>SQL::DBI_CAP_CHARSET_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports proper character encoding conversions.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_TRANSACTION_MANAGEMENT</para></entry>
	    <entry><para>Indicates that the DBI driver supports transaction management.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_STORED_PROCEDURES</para></entry>
	    <entry><para>Indicates that the DBI driver supports stored procedure execution.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_LOB_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports *LOB columns.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_BIND_BY_VALUE</para></entry>
	    <entry><para>Indicates that the DBI driver supports directly binding qore values into queries using the %v placeholder in the query string.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_BIND_BY_PLACEHOLDER</para></entry>
	    <entry><para>Indicates that the DBI driver supports binding placeholder buffers when executing SQL to retrieve data from queries and procedures, etc.</para></entry>
	  </row>	  
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Datasource_Class">
    <title>SQL::Datasource Class</title>
    
    <para>Note: This class is not available with the <link linkend="no-database"><code>PO_NO_DATABASE</code></link> parse option.</para>

    <para>The Datasource class is the high-level Qore interface to Qore's DBI layer, and as such, Datasource objects allow Qore programs to access databases that have a Qore DBI driver.  The Datasource class will attempt to load any DBI driver that is not currently loaded in the <link linkend="SQL::Datasource::constructor">constructor</link>.  For connection pooling support, see the <link linkend="DatasourcePool_Class">DatasourcePool</link> class.</para>
    
    <para>Datasource objects will implicitly call <link linkend="SQL::Datasource::open">Datasource::open()</link> if no connection has yet been established and a method is called requiring a connection to the database server.  Therefore any method that requires communication with the database server can also throw any exception that the open method can throw.</para>
	
    <para>Some Qore DBI drivers allow &quot;select&quot; queries to be executed through the <link linkend="SQL::Datasource::exec">Datasource::exec()</link> method, and allow SQL commands (procedure calls, etc) to be executed through the <link linkend="SQL::Datasource::select">Datasource::select()</link> method, and some DBI drivers do not (depends on the underlying DB API).  At any rate, the transaction lock is set when auto-commit is disabled and when the <link linkend="SQL::Datasource::exec">Datasource::exec()</link> or  <link linkend="SQL::Datasource::beginTransaction">Datasource::beginTransaction()</link> methods are executed as documented above.  Therefore executing a transaction relevant command through the  <link linkend="SQL::Datasource::select">Datasource::select()</link> method while auto-commit mode is disabled and a transaction has not yet started will not result in the transaction lock being allocated to the current thread and therefore could cause transaction errors when sharing the Datasource object between multiple threads.</para>

    <para>Only databases with an existing Qore DBI driver can be accessed through the Qore Datasource class.</para>

   <para>All Qore DBI drivers set new connections to use transaction isolation level &quot;read committed&quot;.</para>

   <para>The Datasource class provides consistent, high-level, per-connection locking on requests at a level above the DBI drivers to ensure that the communication between clients and servers is properly serialized.</para>

   <sect2 id="datasource_binding">
     <title>Datasource Binding By Value and By Placeholder</title>

     <para>All Datasource methods accepting SQL strings to execute understand a special syntax used in the query string to bind Qore data by value and to specify placeholders for output variables (for example, when executing a stored procedure or database function).  Placeholder binding is DBI driver specific, but binding by value is supported with the same syntax in all drivers.  Additionally, the <code>%d</code> numeric specifier is supported equally in all Qore DBI drivers.</para>

     <para>To bind qore data values directly in a binary format in an SQL command, use <code>%v</code> in the command string, and include the value as an argument after the string.  Binding by value means that Qore's DBI driver will take care of formatting the data properly for use in the query with the database server.  That means that strings do not need to be quoted, date/time values do not need special formatting, binary object (with BLOB columns, for example) can be used directly in queries, etc.</para>

     <para>Here is an example:</para>

     <programlisting>$rows = $db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>
	    
     <para>To insert a numeric value or a literal 'null' in a query, use <code>%d</code> in the command string, and include the value as an argument after the string.  If the value is NOTHING or NULL, a literal 'null' will be written to the string; otherwise the argument is converted to a floating-point value or integer if necessary and written to the string.  This is useful for working with DECIMAL (NUMERIC, NUMBER) types in a database-independent way; for example PostgreSQL servers do not do type conversions to DECIMAL types when a string, integer, or float is bound by value, therefore to ensure that integral decimal values can be used in a database-independent way (with 'null' substitution when no value is bound), it's best to use the <code>%d</code> code in the command string instead of <code>%v</code>.</para>

     <para>For binding placeholders for output variables, write a unique name in the string and prefix it with a colon (ex: <code>:code</code>).  In this case the method will return a hash of the output variables using the placeholder names as keys, but without the colon prefix.  By default, a string type will be bound to the position.  To bind other variable types to placeholder positions, include the type constant (see <link linkend="Qore_Type_Constants">Type Constants</link>) as an argument after the command string.  For BLOBs, use Binary, for CLOBs, use the string "clob" (constants will be provided in a future release).  Not all DBI drivers require placeholder buffer specifications; see the documentation for the DBI driver in question for more information and examples regarding placeholder buffer specifications.</para>

   </sect2>

    <sect2 id="datasource_transaction_lock">
      <title>Datasource Transaction Locks</title>
      
      <para>Datasource objects have an internal transaction lock which will be grabbed when the <link linkend="SQL::Datasource::exec">Datasource::exec()</link>, <link linkend="SQL::Datasource::vexec">Datasource::vexec()</link> or <link linkend="SQL::Datasource::beginTransaction">Datasource::beginTransaction()</link> methods are executed and autocommit is not enabled.  This enables a single datasource to be safely used for transaction management by several threads simultaneously. Note that an exception in a Datasource method that would acquire the lock (such as the Datasource::exec() method) when it's not already held, will have the effect that the transaction lock is not acquired.</para>

      <para>Any thread attempting to do transaction-relevant actions on a Datasource with auto-commit disabled while a transaction is in progress by another thread will block until the thread currently executing a transaction executes the <link linkend="SQL::Datasource::commit">Datasource::commit()</link> or <link linkend="SQL::Datasource::rollback">Datasource::rollback()</link> methods (or the Datasource is deleted, reset, or closed, in which case the lock is released and an exception is raised as well).</para>
    
      <para>There is a timeout associated with the transaction lock; if a thread waits for the transaction lock for more than the timeout period, then an exception will be raised in the waiting thread. The timeout value can be read and changed with the <link linkend="SQL::Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout()</link> and <link linkend="SQL::Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout()</link> methods, respectively. The default transaction lock timeout value is 120 seconds.</para>
    </sect2>

    <table>
      <title>SQL::Datasource Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::constructor">Datasource::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the Datasource object; attempts to load a DBI driver if the driver is not already present in Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::destructor">Datasource::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::copy">Datasource::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::open">Datasource::open()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a connection to a database.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::close">Datasource::close()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the connection to the database.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::commit">Datasource::commit()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits the transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::rollback">Datasource::rollback()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back the transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setAutoCommit">Datasource::setAutoCommit()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Turns autocommit on or off for this object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::exec">Datasource::exec()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::vexec">Datasource::vexec()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection, taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::select">Datasource::select()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::vselect">Datasource::vselect()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::selectRow">Datasource::selectRow()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::vselectRow">Datasource::vselectRow()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::selectRows">Datasource::selectRows()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::vselectRows">Datasource::vselectRows()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::beginTransaction">Datasource::beginTransaction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Manually grabs the <link linkend="datasource_transaction_lock">transaction lock</link></para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setUserName">Datasource::setUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the username parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getUserName">Datasource::getUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the username parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setPassword">Datasource::setPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the password parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getPassword">Datasource::getPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the password parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setDBName">Datasource::setDBName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the DB name parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getDBName">Datasource::getDBName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the dbname parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setDBCharset">Datasource::setDBCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the charset parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getDBCharset">Datasource::getDBCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the DBI driver specific charset name for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getOSCharset">Datasource::getOSCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the Qore charset name for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setHostName">Datasource::setHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the hostname parameter for the next open.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getHostName">Datasource::getHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the hostname parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getDriverName">Datasource::getDriverName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the name of the driver used for the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds.  Set to 0 for no timeout.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Retrieves the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value as an integer in milliseconds.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getServerVersion">Datasource::getServerVersion()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific server version data for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="SQL::Datasource::getClientVersion">Datasource::getClientVersion()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the driver-specific client library version data.  Not implemented by all drivers.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="SQL::Datasource::constructor">
      <title>Datasource::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a Datasource object. The constructor requires the datasource type as the first argument</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Datasource(<replaceable>driver_name, [username], [password], [dbname], [charset_name], [hostname]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db = <command>new</command> Datasource(DSPGSQL, "user", "pass", "database", "utf8", "localhost");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Datasource::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>driver_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the DBI driver for the Datasource.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[username]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The user name for the new connection.  Also see <link linkend="SQL::Datasource::setUserName">Datasource::setUserName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[password]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password for the new connection.  Also see <link linkend="SQL::Datasource::setPassword">Datasource::setPassword()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[dbname]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database name for the new connection.  Also see <link linkend="SQL::Datasource::setDBName">Datasource::setDBName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[charset_name]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new connection.  Also see <link linkend="SQL::Datasource::setDBCharset">Datasource::setDBCharset()</link> for a method that allows this parameter to be set after the constructor.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[hostname]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The host name for the new connection (not used by some DBI drivers).  Also see <link linkend="SQL::Datasource::setHostName">Datasource::setHostName()</link> for a method that allows this parameter to be set after the constructor.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The Datasource object created</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

      <table>
	<title>Exceptions Thrown by Datasource::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCE-PARAMETER-EEROR</code></para></entry>
	      <entry><para>Missing DBI driver identifier as first argument.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DATASOURCE-UNSUPPORTED-DATABASE</code></para></entry>
	      <entry><para>Could not load a driver for the database identified.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    <sect2 id="SQL::Datasource::destructor">
      <title>Datasource::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the datasource if it's open (if any operations are in progress, will block until the operations complete) and destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $db;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Datasource::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCE-TRANSACTION-EXCEPTION</code></para></entry>
	      <entry><para>The Datasource was destroyed while a transaction was still in progress; the transaction will be automatically rolled back.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::copy">
      <title>Datasource::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_ds = $db.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Datasource::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Datasource::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Datasource Object</para></entry>
	      <entry><para>Returns a new Datasource object with the same driver as the original and copies of all the connection parameters.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::beginTransaction">
      <title>Datasource::beginTransaction()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Manually grabs the <link linkend="datasource_transaction_lock">transaction lock</link>.  This method should be called when the Datasource object will be shared between more than 1 thread, and a transaction will be started with a <link linkend="SQL::Datasource::select">Datasource::select()</link> method.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::beginTransaction()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.beginTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::beginTransaction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOCOMMIT-ERROR</code></para></entry>
	      <entry><para>Cannot start a transaction when autocommit is enabled.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::open">
      <title>Datasource::open()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens a connection to the datasouce, using the connection parameters already set.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::open()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.open();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::open()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::close">
      <title>Datasource::close()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the connection to the database.  If any actions are in progress on the database, the close call will block until the actions complete.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::close()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.close();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::commit">
      <title>Datasource::commit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits the current transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::commit()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.commit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::commit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::rollback">
      <title>Datasource::rollback()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back the current transaction and releases the <link linkend="datasource_transaction_lock">transaction lock</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::rollback()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.rollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::rollback()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::setAutoCommit">
      <title>Datasource::setAutoCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Turns autocommit on or off for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setAutoCommit(<replaceable>status</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setAutoCommit(False);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setAutoCommit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>status</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True to turn on autocommit (a commit will be executed after every <link linkend="SQL::Datasource::exec">Datasource::exec()</link>), False to turn off autocommit (commits must be manually triggered).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setAutoCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::exec">
      <title>Datasource::exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Grabs the <link linkend="datasource_transaction_lock">transaction lock</link> (if autocommit is disabled) and executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::exec(<replaceable>sql_command, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::exec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>sql_command</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer or Hash</para></entry>
	      <entry><para>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::vexec">
      <title>Datasource::vexec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="SQL::Datasource::exec">Datasource::exec()</link> method, except this method takes a single argument after the SQL command giving the list of bind parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::vexec(<replaceable>sql_command, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $db.vexec("insert into example_table value (%v, %v, %v)", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vexec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>sql_command</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer or Hash</para></entry>
	      <entry><para>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>TRANSACTION-LOCK-TIMEOUT</code></para></entry>
	      <entry><para>Timeout trying to acquire the <link linkend="datasource_transaction_lock">transaction lock</link>.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::select">
      <title>Datasource::select()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a hash (column names) of lists (rows).  This format is suitable for use with <link linkend="context_Statements"><command>context</command> Statements</link>, for easy iteration and processing of query results.  Additionally, this format is more efficient format than that returned by the <link linkend="SQL::Datasource::selectRows">Datasource::selectRows()</link> method, because the column names are not repeated for each row returned.  Therefore, for retrieving anything greater than small amounts of data, it is recommended to use this method instead of <link linkend="SQL::Datasource::selectRows">Datasource::selectRows()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::select(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># bind a string and a date/time value by value in a query
$query = $db.select("select * from table where varchar_column = %v and timestamp_column > %v", $string, 2007-10-11T15:31:26.289);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::select()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>Returns a hash (the keys are the column names) of lists (each hash key's value is a list giving the row data).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::vselect">
      <title>Datasource::vselect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="SQL::Datasource::select">Datasource::select()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::vselect(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$query = $db.vselect("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>Returns a hash (the keys are the column names) of lists (each hash key's value is a list giving the row data).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::selectRow">
      <title>Datasource::selectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the first row as a hash (the column values).  If more than one row is returned, then all but the first row are discarded.  For a similar method taking a list for all bind arguments, see <link linkend="SQL::Datasource::vselectRow">Datasource::vselectRow()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::selectRow(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.selectRow("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::selectRow()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash or NOTHING</para></entry>
	      <entry><para>Returns a hash (column values) of the first row, NOTHING if no rows are returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::vselectRow">
      <title>Datasource::vselectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="SQL::Datasource::selectRow">Datasource::selectRow()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::vselectRow(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.vselectRow("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselectRow()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash or NOTHING</para></entry>
	      <entry><para>Returns a hash of the first row (column values).  If no rows are returned by the query, then NOTHING is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::selectRows">
      <title>Datasource::selectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a list (rows) of hashes (the column values).  This format is not as efficient as that returned by the <link linkend="SQL::Datasource::select">Datasource::select()</link> method, therefore for larger amounts of data, it is recommended to use <link linkend="SQL::Datasource::select">Datasource::select()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::selectRows(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.selectRows("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::selectRows()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>Returns a list (the rows returned) of hashes (column values).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::vselectRows">
      <title>Datasource::vselectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="SQL::Datasource::selectRows">Datasource::selectRows()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::vselectRows(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $db.vselectRows("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::vselectRows()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>Returns a list (the rows returned) of hashes (column values).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::setTransactionLockTimeout">
      <title>Datasource::setTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds; set to 0 for no timeout.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setTransactionLockTimeout(<replaceable>timeout_ms</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setTransactionLockTimeout(5m); # <link linkend="datasource_transaction_lock">transaction lock</link> timeout set to 5 minutes</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setTransactionLockTimeout()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>timeout_ms</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout value to set in seconds.  For no timeout, set to 0.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="SQL::Datasource::getTransactionLockTimeout">
      <title>Datasource::getTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the <link linkend="datasource_transaction_lock">transaction lock</link> timeout value as an integer in milliseconds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getTransactionLockTimeout()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$int = $db.getTransactionLockTimeout();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getTransactionLockTimeout()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The <link linkend="datasource_transaction_lock">transaction lock</link> timeout value in milliseconds.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::setUserName">
      <title>Datasource::setUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username to use for the connection.  Invalid usernames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setUserName(<replaceable>username</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setUserName("user");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>username</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The username to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getUserName">
      <title>Datasource::getUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the username parameter for connections to the database.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getUserName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The username connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::setPassword">
      <title>Datasource::setPassword()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the password to use for the connection.  Invalid passwords will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setPassword()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setPassword("pass");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>password</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getPassword">
      <title>Datasource::getPassword()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the password connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getPassword()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the password connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::setDBName">
      <title>Datasource::setDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database name to use for the connection.  Invalid database names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setDBName(<replaceable>dbname</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setDBName("database");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>dbname</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getDBName">
      <title>Datasource::getDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the dbname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getDBName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getDBName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getDBName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the password connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="SQL::Datasource::setDBCharset">
      <title>Datasource::setDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database-specific character encoding to use for the connection.  Invalid character encoding names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setDBCharset(<replaceable>encoding</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setDBCharset("ALU32UTF8"); # Oracle UTF-8 encoding equivalent</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>db_encoding_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database-specific name for the encoding to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::setHostName">
      <title>Datasource::setHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname to use for the connection (for DBI drivers that support this parameter, such as the <code>mysql</code> and <code>pgsql</code>, for example).  Invalid hostnames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setHostName(<replaceable>hostname</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$db.setHostName("localhost");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>hostname</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The hostname to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getDBCharset">
      <title>Datasource::getDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the database-specific charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getDBCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getDBCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getDBCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the database-specific charset set encoding for the current connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="SQL::Datasource::getOSCharset">
      <title>Datasource::getOSCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the Qore charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getOSCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getOSCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getOSCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getOSCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the Qore charset set encoding for the current connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getHostName">
      <title>Datasource::getHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the hostname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getHostName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $db.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the hostname connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getDriverName">
      <title>Datasource::getDriverName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the DBI driver used for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getDriverName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$name = $db.getDriverName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getDriverName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getDriverName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the database driver used for this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="SQL::Datasource::getServerVersion">
      <title>Datasource::getServerVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific server version information for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getServerVersion()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $db.getServerVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getServerVersion()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getServerVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Driver-Specific</para></entry>
	      <entry><para>See the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="SQL::Datasource::getClientVersion">
      <title>Datasource::getClientVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific client library version information.  Not implemented for all drivers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getClientVersion()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $db.getClientVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getClientVersion()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getClientVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Driver-Specific</para></entry>
	      <entry><para>See the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="DatasourcePool_Class">
    <title>SQL::DatasourcePool Class</title>
    
    <para>Note: This class is not available with the <link linkend="no-database"><code>PO_NO_DATABASE</code></link> parse option.</para>

    <para>The DatasourcePool class provides transparent per-thread, per-transaction <link linkend="Datasource_Class">Datasource</link> connection pooling.</para> 

    <para>In most cases, the DatasourcePool class can be used as a drop-in replacement for the <link linkend="Datasource_Class">Datasource</link> class with autocommit disabled; when a transaction begins, a datasource will be automatically assigned to the calling thread, and it will only be released when a commit or rollback is called on the object.  If no Datasource is available, the calling thread will block until a Datasource comes available.</para>

    <para>Note that the same principles apply to SQL and database driver usage as with the Datasource class, see the <link linkend="Datasource_Class">Datasource</link> class documentation for more information.</para>

    <para>The DatasourcePool class uses Qore's thread resource tracking infrastructure to raise an exception if a thread terminates while a connection is allocated to it.  If Qore user code enters a transaction with a DatasourcePool object and the thread terminates without closing the transaction (via <link linkend="DatasourcePool::commit">DatasourcePool::commit()</link> or <link linkend="DatasourcePool::rollback">DatasourcePool::rollback()</link>), an exception will automatically be raised, the transaction will be rolled back, and the Datasource connection will be freed to the pool.</para>

    <sect2 id="datasourcepool_allocations">
      <title>DatasourcePool Connection Allocations</title>

      <para>The following methods allocate a persistent connection to the calling thread: <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, and <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.  The connection is released to the pool when <link linkend="DatasourcePool::commit">DatasourcePool::commit()</link> or <link linkend="DatasourcePool::rollback">DatasourcePool::rollback()</link> are called (or in the case the thread terminates, in which case an exception is raised as well).</para>

      <para>To begin a transaction with one of the select methods (for example, with “select for update”), call <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link> first to manually dedicate a Datasource to the thread before calling the select method.  Otherwise statements that should be in the same transaction may be executed in different connections.</para>

      <para>Executing a DatasourcePool method while not in a transaction is realized by allocating a temporary connection to the calling thread which is re-released when the method returns.  No explicit commits are executed by the class, therefore it is an error to execute transaction-relevant commands without first calling <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

    </sect2>

    <table>
      <title>DatasourcePool Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="DatasourcePool::constructor">DatasourcePool::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the DatasourcePool object; attempts to load a DBI driver if the driver is not already present in Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::destructor">DatasourcePool::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::copy">DatasourcePool::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; currently DatasourcePool objects may not be copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::commit">DatasourcePool::commit()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits the transaction and releases the connection to the pool.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::rollback">DatasourcePool::rollback()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back the transaction and releases the connection to the pool.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::exec">DatasourcePool::exec()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection and dedicates a connection to the calling thread.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes SQL code on the DB connection, taking a list for all bind arguments.  Dedicates a connection to the calling thread.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::select">DatasourcePool::select()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::vselect">DatasourcePool::vselect()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::vselectRows">DatasourcePool::vselectRows()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Manually allocates a persistent connection to the calling thread.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getUserName">DatasourcePool::getUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the username parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getPassword">DatasourcePool::getPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the password parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getDBName">DatasourcePool::getDBName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the dbname parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getDBCharset">DatasourcePool::getDBCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the DBI driver specific charset name for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getOSCharset">DatasourcePool::getOSCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the Qore charset name for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getHostName">DatasourcePool::getHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the hostname parameter.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getDriverName">DatasourcePool::getDriverName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the name of the database driver used for this object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getServerVersion">DatasourcePool::getServerVersion()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the driver-specific server version data for the current connection.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="DatasourcePool::getClientVersion">DatasourcePool::getClientVersion()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the driver-specific client library version data.  Not implemented by all drivers.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="DatasourcePool::constructor">
      <title>DatasourcePool::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a DatasourcePool object. The constructor requires the database driver name as the first argument</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> DatasourcePool(<replaceable>driver_name, [username], [password], [dbname], [charset_name], [hostname], [min], [max]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># open a Datasource pool to a PostgreSQL database, username="user", password="pass", dbname="database"
# use "utf8" for the character encoding for the connection, hostname="localhost"
# minimum 5 connections (opened immediately), with a maximum of 20
$pool = <command>new</command> DatasourcePool(DSPGSQL, "user", "pass", "database", "utf8", "localhost", 5, 20);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for DatasourcePool::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>driver_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the DBI driver for the DatasourcePool.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[username]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The user name for the new connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[password]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password for the new connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[dbname]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database name for the new connection.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[charset_name]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database-specific name of the character encoding to use for the new connection.  If no value is passed for this parameter, then the database character encoding corresponding to the <link linkend="Default_Character_Encoding">default character encoding</link> for the Qore process will be used instead.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[hostname]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The host name for the new connection (not used by some DBI drivers).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[min]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The minimum number of connections to open immediately (default=5).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[max]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The maximum number of connections to open (default=20).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The DatasourcePool object created</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

      <table>
	<title>Exceptions Thrown by DatasourcePool::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-PARAM-EEROR</code></para></entry>
	      <entry><para>Missing DBI driver identifier as first argument, negative number of connections specified, or max &lt; min.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-UNSUPPORTED-DATABASE</code></para></entry>
	      <entry><para>Could not load a driver for the database identified.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    <sect2 id="DatasourcePool::destructor">
      <title>DatasourcePool::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception if any transactions are in progress and returns immediately.  The object is destroyed after any in-progress requests are completed.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $pool;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by DatasourcePool::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>DATASOURCEPOOL-ERROR</code></para></entry>
	      <entry><para>The destructor was called while a transaction was still in progress.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="DatasourcePool::copy">
      <title>DatasourcePool::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Thows an exception; DatasourcePool objects cannot be copied at the moment.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
    </sect2>

    <sect2 id="DatasourcePool::beginTransaction">
      <title>DatasourcePool::beginTransaction()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Manually allocates a persistent connection from the pool to the calling thread.  This method should be called when a transaction will be started with a <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method (or vselect*, etc).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::beginTransaction()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.beginTransaction();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::beginTransaction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::commit">
      <title>DatasourcePool::commit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits the current transaction and releases the connection to the pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::commit()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.commit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::commit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::rollback">
      <title>DatasourcePool::rollback()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back the current transaction and releases the connection to the pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::rollback()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$pool.rollback();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::rollback()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for failure (driver-specific).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="DatasourcePool::exec">
      <title>DatasourcePool::exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Allocates a persistent connection to the calling thread, executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).  This method takes a special syntax for binding values and placeholders; see the <link linkend="SQL::Datasource::exec">Datasource::exec()</link> method for more information.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::exec(<replaceable>sql_command, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $pool.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", $string, now(), $binary, 100);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::exec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>sql_command</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer or Hash</para></entry>
	      <entry><para>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vexec">
      <title>DatasourcePool::vexec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link> method, except this method takes a single argument after the SQL command giving the list of bind parameters.</para>
	    <para>This method allocates a persistent connection from the pool to the calling thread.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::vexec(<replaceable>sql_command, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rows = $pool.vexec("insert into example_table value (%v, %v, %v)", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vexec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>sql_command</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in a single list in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer or Hash</para></entry>
	      <entry><para>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vexec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::select">
      <title>DatasourcePool::select()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a hash (column names) of lists (rows).  See <link linkend="SQL::Datasource::select">Datasource::select()</link> for more information.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::select(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting># bind a string and a date/time value by value in a query
$query = $pool.select("select * from table where varchar_column = %v and timestamp_column > %v", $string, 2007-10-11T15:31:26.289);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::select()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>Returns a hash (the keys are the column names) of lists (each hash key's value is a list giving the row data).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselect">
      <title>DatasourcePool::vselect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::vselect(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$query = $pool.vselect("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>Returns a hash (the keys are the column names) of lists (each hash key's value is a list giving the row data).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vselect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    <sect2 id="DatasourcePool::selectRow">
      <title>DatasourcePool::selectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the first row as a hash (the column values).  If more than one row is returned, then all but the first row are discarded.  For a similar method taking a list for all bind arguments, see <link linkend="DatasourcePool::vselectRow">DatasourcePool::vselectRow()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::selectRow(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.selectRow("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::selectRow()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash or NOTHING</para></entry>
	      <entry><para>Returns a hash (column values) of the first row, NOTHING if no rows are returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::selectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselectRow">
      <title>DatasourcePool::vselectRow()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::selectRow">DatasourcePool::selectRow()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::vselectRow(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.vselectRow("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselectRow()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselectRow()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash or NOTHING</para></entry>
	      <entry><para>Returns a hash of the first row (column values).  If no rows are returned by the query, then NOTHING is returned.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::selectRows">
      <title>DatasourcePool::selectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a list (rows) of hashes (the column values).  This format is not as efficient as that returned by the <link linkend="DatasourcePool::select">DatasourcePool::select()</link> method, therefore for larger amounts of data, it is recommended to use <link linkend="DatasourcePool::select">DatasourcePool::select()</link>.</para>
	    <para>This method also accepts all bind parameters (%d, %v, etc) as documented in  <link linkend="datasource_binding">Datasource Binding</link>.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::selectRows(<replaceable>select_statement, [arg1, ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.selectRows("select * from example_table");</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::selectRows()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg1, ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>Returns a list (the rows returned) of hashes (column values).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::vselectRows">
      <title>DatasourcePool::vselectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Same as the <link linkend="DatasourcePool::selectRows">DatasourcePool::selectRows()</link> method, except this method takes a single argument after the SQL command giving the list of bind value parameters.</para>

	    <para>Note that this method does not allocate a persistent connection to the calling thread; if the calling thread does not already have a connection allocated to it, a temporary connection will be allocated for executing the select query and returning the results; the temporary connection will be immediately returned to the pool when this method returns.  It is an error to execute transaction relevant commands with this method without first allocating a persistent connection with  <link linkend="DatasourcePool::exec">DatasourcePool::exec()</link>, <link linkend="DatasourcePool::vexec">DatasourcePool::vexec()</link>, or <link linkend="DatasourcePool::beginTransaction">DatasourcePool::beginTransaction()</link>.</para>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::vselectRows(<replaceable>select_statement, [list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$list = $pool.vselectRows("select * from example_table where id = %v and name = %v", $arg_list);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::vselectRows()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>A list of arguments to bind by value in %v positions in the SQL string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>List</para></entry>
	      <entry><para>Returns a list (the rows returned) of hashes (column values).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by DatasourcePool::vselectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


    <sect2 id="DatasourcePool::getUserName">
      <title>DatasourcePool::getUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the username parameter for all connections in this pool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getUserName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getUserName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The username connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>


    <sect2 id="DatasourcePool::getPassword">
      <title>DatasourcePool::getPassword()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the password connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getPassword()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getPassword();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the password connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>


    <sect2 id="DatasourcePool::getDBName">
      <title>DatasourcePool::getDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the dbname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getDBName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getDBName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getDBName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the password connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getDBCharset">
      <title>DatasourcePool::getDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the database-specific charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getDBCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getDBCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getDBCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the database-specific charset set encoding for the current connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="DatasourcePool::getOSCharset">
      <title>DatasourcePool::getOSCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the Qore charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getOSCharset()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getOSCharset();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getOSCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getOSCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the Qore charset set encoding for the current connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getHostName">
      <title>DatasourcePool::getHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the hostname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getHostName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$str = $pool.getHostName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>Retrieves the hostname connection parameter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getDriverName">
      <title>DatasourcePool::getDriverName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the name of the DBI driver used for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getDriverName()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$name = $pool.getDriverName();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getDriverName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getDriverName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the database driver used for this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="DatasourcePool::getServerVersion">
      <title>DatasourcePool::getServerVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific server version information for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getServerVersion()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $pool.getServerVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getServerVersion()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getServerVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Driver-Specific</para></entry>
	      <entry><para>See the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="DatasourcePool::getClientVersion">
      <title>DatasourcePool::getClientVersion()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the driver-specific client library version information.  Not implemented for all drivers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>DatasourcePool::getClientVersion()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $pool.getClientVersion();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for DatasourcePool::getClientVersion()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for DatasourcePool::getClientVersion()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Driver-Specific</para></entry>
	      <entry><para>See the documentation for the DBI driver used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="AutoGate_Class">
    <title>Thread::AutoGate Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>AutoGate objects, when used along with a <link linkend="Gate_Class">Gate</link> object, allow Qore programmers to safely enter and exit a gate lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoGate object is created.  AutoGate objects enter the gate lock for the lifetime of the AutoGate object.  For this reason, it is only appropriate to assign an AutoGate object to a local variable, so when the local variable goes out of scope, the AutoGate object will be deleted and the gate automatically exited.</para>

    <para>For example:</para>

    <programlisting><command>our</command> $gate = <command>new</command> Gate();

<command>sub</command> check_error($error)
{
    # note that the Gate is entered in the AutoGate constructor, and
    # the Gate will be exited as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> $ag = <command>new</command> AutoGate($gate);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>
	    

    <table>
      <title>AutoGate Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="AutoGate::constructor">AutoGate::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoGate object based on the Gate argument passed and immediately calls <link linkend="Gate::enter">Gate::enter()</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoGate::destructor">AutoGate::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="Gate::exit">Gate::exit()</link> and destroys the AutoGate object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoGate::copy">AutoGate::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoGate::constructor">
      <title>AutoGate::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoGate object based on the <link linkend="Gate_Class">Gate</link> argument passed and immediately calls <link linkend="Gate::enter">Gate::enter()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> AutoGate(<replaceable>gate_object</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>my $gate = <command>new</command> AutoGate($gate);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoGate::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>gate_object</replaceable></para></entry>
	      <entry><para><link linkend="Gate_Class">Gate</link></para></entry>
	      <entry><para>The Gate object to enter for the lifetime of the AutoGate object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for AutoGate::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>AutoGate Object</para></entry>
	      <entry><para>The new AutoGate object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoGate::destructor">
      <title>AutoGate::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="Gate::exit">Gate::exit()</link> on the saved Gate object and destroys the AutoGate object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $ag;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoGate::copy">
      <title>AutoGate::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for AutoGate::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for AutoGate::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by AutoGate::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOGATE-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoLock_Class">
    <title>Thread::AutoLock Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>AutoLock objects, when used along with a <link linkend="Mutex_Class">Mutex</link> object, allow Qore programmers to safely acquire and release a Mutex lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoLock object is created.  AutoLock objects are helper objects that acquire a Mutex for the lifetime of the object.  For this reason, it is only appropriate to assign an AutoLock object to a local variable, so when the local variable goes out of scope, the AutoLock object will be deleted and the Mutex will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> $mutex = new Mutex();

<command>sub</command> check_error($error)
{
    # note that the Mutex is acquired in the AutoLock constructor, and
    # the Mutex will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> $am = <command>new</command> AutoLock($mutex);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>
	    
    <table>
      <title>AutoLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="AutoLock::constructor">AutoLock::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoLock object based on the Mutex argument passed and immediately calls <link linkend="Mutex::lock">Mutex::lock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoLock::destructor">AutoLock::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="Mutex::unlock">Mutex::unlock()</link> on the saved Mutex and destroys the AutoLock object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoLock::copy">AutoLock::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoLock::constructor">
      <title>AutoLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoLock object based on the Mutex argument passed.  The AutoLock object immediately calls <link linkend="Mutex::lock">Mutex::lock()</link> on the Mutex object passed, and saves it so it can be released when the AutoLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> AutoLock(<replaceable>mutex_object</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>my $al = <command>new</command> AutoLock($mutex);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoLock::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>$mutex</replaceable></para></entry>
	      <entry><para><link linkend="Mutex_Class">Mutex</link></para></entry>
	      <entry><para>The Mutex object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for AutoLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>AutoLock Object</para></entry>
	      <entry><para>The new AutoLock object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoLock::destructor">
      <title>AutoLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="Mutex::unlock">Mutex::unlock()</link> on the saved Mutex and destroys the AutoLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $al;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoLock::copy">
      <title>AutoLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for AutoLock::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for AutoLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by AutoLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOLOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoReadLock_Class">
    <title>Thread::AutoReadLock Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>AutoReadLock objects, when used along with a <link linkend="RWLock_Class">RWLock</link> object, allow Qore programmers to safely acquire and release a read lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoReadLock object is created.  AutoReadLock objects are helper objects that acquire a read lock for the lifetime of the AutoReadLock object.  For this reason, it is only appropriate to assign an AutoReadLock object to a local variable, so when the local variable goes out of scope, the AutoReadLock object will be deleted and the read lock will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> $rwl = new RWLock();

<command>sub</command> check_error($error)
{
    # note that the read lock is acquired in the AutoReadLock constructor, and
    # the read lock will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> $arl = <command>new</command> AutoReadLock($rwl);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>
	    
    <table>
      <title>AutoReadLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="AutoReadLock::constructor">AutoReadLock::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoReadLock object based on the RWLock argument passed and immediately calls <link linkend="RWLock::readLock">RWLock::readLock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoReadLock::destructor">AutoReadLock::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link> on the saved RWLock and destroys the AutoReadLock object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoReadLock::copy">AutoReadLock::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoReadLock::constructor">
      <title>AutoReadLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoReadLock object based on the RWLock argument passed.  The AutoReadLock object immediately calls <link linkend="RWLock::readLock">RWLock::readLock()</link> on the RWLock object passed, and saves it so it can be released when the AutoReadLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> AutoReadLock(<replaceable>rwlock_object</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>my $arl = <command>new</command> AutoReadLock($rwlock);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoReadLock::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>$rwlock</replaceable></para></entry>
	      <entry><para><link linkend="RWLock_Class">RWLock</link></para></entry>
	      <entry><para>The RWLock object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for AutoReadLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>AutoReadLock Object</para></entry>
	      <entry><para>The new AutoReadLock object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoReadLock::destructor">
      <title>AutoReadLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link> on the saved RWLock and destroys the AutoReadLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $arl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoReadLock::copy">
      <title>AutoReadLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for AutoReadLock::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for AutoReadLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by AutoReadLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOREADLOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="AutoWriteLock_Class">
    <title>Thread::AutoWriteLock Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>AutoWriteLock objects, when used along with a <link linkend="RWLock_Class">RWLock</link> object, allow Qore programmers to safely acquire and release a write lock, even if exceptions are thrown or <command>return</command> statements are executed in the block where the AutoWriteLock object is created.  AutoWriteLock objects are helper objects that acquire a write lock for the lifetime of the AutoWriteLock object.  For this reason, it is only appropriate to assign an AutoWriteLock object to a local variable, so when the local variable goes out of scope, the AutoWriteLock object will be deleted and the write lock will be automatically released.</para>

    <para>For example:</para>

    <programlisting><command>our</command> $rwl = new RWLock();

<command>sub</command> check_error($error)
{
    # note that the write lock is acquired in the AutoWriteLock constructor, and
    # the write lock will be released as soon as the block is exited below.
    # (with either the throw statement or the return statement)
    <command>my</command> $arl = <command>new</command> AutoWriteLock($rwl);
    <command>if</command> ($error)
        <command>throw</command> "ERROR", "sorry, an error happened";

    <command>return</command> "OK";
}</programlisting>
	    
    <table>
      <title>AutoWriteLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="AutoWriteLock::constructor">AutoWriteLock::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates the AutoWriteLock object based on the RWLock argument passed and immediately calls <link linkend="RWLock::writeLock">RWLock::writeLock()</link>.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoWriteLock::destructor">AutoWriteLock::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls <link linkend="RWLock::writeUnlock">RWLock::writeUnlock()</link> on the saved RWLock and destroys the AutoWriteLock object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="AutoWriteLock::copy">AutoWriteLock::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception; objects of this class cannot be copied.</para></entry>
	  </row>

	</tbody>
      </tgroup>
    </table>

    <sect2 id="AutoWriteLock::constructor">
      <title>AutoWriteLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the AutoWriteLock object based on the RWLock argument passed.  The AutoWriteLock object immediately calls <link linkend="RWLock::writeLock">RWLock::writeLock()</link> on the RWLock object passed, and saves it so it can be released when the AutoWriteLock object is destroyed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> AutoWriteLock(<replaceable>rwlock_object</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>my $awl = <command>new</command> AutoWriteLock($rwlock);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for AutoWriteLock::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>$rwlock</replaceable></para></entry>
	      <entry><para><link linkend="RWLock_Class">RWLock</link></para></entry>
	      <entry><para>The RWLock object to manage for the lifetime of this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for AutoWriteLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>AutoWriteLock Object</para></entry>
	      <entry><para>The new AutoWriteLock object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="AutoWriteLock::destructor">
      <title>AutoWriteLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls <link linkend="RWLock::writeUnlock">RWLock::writeUnlock()</link> on the saved RWLock and destroys the AutoWriteLock object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $awl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="AutoWriteLock::copy">
      <title>AutoWriteLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for AutoWriteLock::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for AutoWriteLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by AutoWriteLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>AUTOWRITELOCK-COPY-ERROR</code></para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

  </sect1>

  <sect1 id="Condition_Class">
    <title>Thread::Condition Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>Condition objects, when used along with a <link linkend="Mutex_Class">Mutex</link> object, allow Qore threads to sleep until a certain condition becomes true.</para>

    <table>
      <title>Condition Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Condition::constructor">Condition::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Condition object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::destructor">Condition::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the Condition object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::copy">Condition::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Condition object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::signal">Condition::signal()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Signals a single blocked thread to wake up.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::broadcast">Condition::broadcast()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Signals all threads blocked on this Condition object to wake up.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::wait">Condition::wait()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks a thread until signaled.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Condition::wait_count">Condition::wait_count()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Condition::constructor">
      <title>Condition::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Condition object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Condition()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$cond = <command>new</command> Condition();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Condition Object</para></entry>
	      <entry><para>The new Condition object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Condition::destructor">
      <title>Condition::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $cond;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Condition::copy">
      <title>Condition::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Condition object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_cond = $cond.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Condition::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Condition::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Condition Object</para></entry>
	      <entry><para>A new Condition object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>


  
    <sect2 id="Condition::signal">
      <title>Condition::signal()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Signals a single blocked thread to wake up.  Normally this method call will be made while the same Mutex object used for <link linkend="Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the Mutex object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::signal()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$cond.signal();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::signal()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::signal()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no values.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::signal()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-SIGNAL-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::broadcast">
      <title>Condition::broadcast()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Wakes up all threads waiting on the Condition object.  Normally this method call will be made while the same Mutex object used for <link linkend="Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the Mutex object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::broadcast()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$cond.broadcast();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::broadcast()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::broadcast()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::broadcast()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-BROADCAST-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::wait">
      <title>Condition::wait()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread on the Condition object.  Must be called with a <link linkend="Mutex_Class">Mutex</link> argument, and the Mutex must be locked before the call.  This method will atomically unlock the Mutex object and wait on this Condition object to be woken up with a <link linkend="Condition::signal">Condition::signal()</link> or <link linkend="Condition::broadcast">Condition::broadcast()</link> method call in another thread.  At this point, the Mutex will be reacquired before control returns to the blocked thread.  The wait condition should always be tested again when the thread is unblocked.</para>
	    <para>Also accepts an optional timeout value in milliseconds.   Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  Also if the call times out, the Mutex will also be acquired when the Condition::wait() call returns and a non-zero return value will be returned.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::wait(<replaceable>mutex, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex.lock();
while ($num > 0)
    $cond.wait($mutex);
# ... do something
$mutex.unlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::wait()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>mutex</replaceable></para></entry>
	      <entry><para>Mutex Object</para></entry>
	      <entry><para>The Mutex object to use for synchronization on this Condition object.  The Mutex must be locked before calling this method.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>An optional timeout value; integers are interpreted as milliseconds; <link linkend="Relative_Dates">relative date/time values</link> are interpreted literally.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for errors (timeout).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>CONDITION-WAIT-ERROR</code></para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Condition::wait_count">
      <title>Condition::wait_count()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::wait_count()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num_threads = $cond.wait_count();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::wait_count()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::wait_count()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of threads currently blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>
  <sect1 id="Counter_Class">
    <title>Thread::Counter Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>Counter objects allow Qore threads to sleep until a counter reaches zero.</para>

    <table>
      <title>Counter Method Overview</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Counter::constructor">Counter::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Counter object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::destructor">Counter::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Counter object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::copy">Counter::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Counter object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::inc">Counter::inc()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Atomically increments the counter value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::dec">Counter::dec()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Atomically decrements the counter value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::waitForZero">Counter::waitForZero()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks a thread until the counter reaches zero.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::getCount">Counter::getCount()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current counter value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Counter::getWaiting">Counter::getWaiting()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Counter::constructor">
      <title>Counter::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Counter object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Counter()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter = <command>new</command> Counter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Counter Object</entry>
	      <entry><para>The new object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Counter::destructor">
      <title>Counter::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $counter;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Counter::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Counter::copy">
      <title>Counter::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Counter object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_counter = $counter.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Counter::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Counter::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Counter Object</para></entry>
	      <entry><para>A new Counter object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Counter::inc">
      <title>Counter::inc()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::inc()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.inc();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::inc()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::inc()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Counter::dec">
      <title>Counter::dec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically decrements the counter value.  An exception can only be thrown if the object is deleted in another thread while this call is in progress; this is a race condition caused by a user programming error and should not occur in practise with correct code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::dec()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.dec();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::dec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted in another thread.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Counter::waitForZero">
      <title>Counter::waitForZero()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread until the counter reaches zero.  Takes an optional timeout value in milliseconds.   Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::waitForZero(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$counter.waitForZero();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::waitForZero()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>A value giving the number of milliseconds to wait for the Counter to reach zero.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::waitForZero()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>If a timeout value was passed, -1 means that the call timed out, 0 means that the counter reached zero.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>COUNTER-ERROR</code></para></entry>
	      <entry><para>Object deleted in another thread.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Counter::getCount">
      <title>Counter::getCount()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::getCount()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$count = $counter.getCount();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::getCount()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::getCount()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The current counter value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Counter::getWaiting">
      <title>Counter::getWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::getWaiting()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$threads = $counter.getWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::getWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::getWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of threads currently blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Queue_Class">
    <title>Thread::Queue Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>Queue objects provide a blocking, thread-safe message-passing object to Qore programs.</para>

    <table>
      <title>Queue Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Queue::constructor">Queue::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Queue object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::destructor">Queue::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Queue object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::copy">Queue::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Queue object with the same elements as the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::get">Queue::get()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::pop">Queue::pop()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::push">Queue::push()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Puts a value on the end of the queue.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::size">Queue::size()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of elements in the queue.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Queue::getWaiting">Queue::getWaiting()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads currently blocked on this queue.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Queue::constructor">
      <title>Queue::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Queue object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Queue()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$queue = <command>new</command> Queue();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Queue Object</para></entry>
	      <entry><para>The new object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Queue::destructor">
      <title>Queue::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $queue;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Queue::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted while other threads were blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Queue::copy">
      <title>Queue::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Queue object with the same elements as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_queue = $queue.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Queue::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Queue::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Queue Object</para></entry>
	      <entry><para>A new Queue object with the same elements as the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::get">
      <title>Queue::get()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.  Accepts an optional timeout value in milliseconds (1/1000 second). Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  Note that this function will throw an exception on timeout, in order to enable the case where NOTHING was pushed on the queue from a timeout.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::get(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $queue.get();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::get()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>If present, a timeout value in milliseconds (1/1000 second).  If no data is available in the timeout period, a QUEUE-TIMEOUT exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>Depends on the value put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-TIMEOUT</code></para></entry>
	      <entry><para>The timeout value was exceeded.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted in another thread while this thread was blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::pop">
      <title>Queue::pop()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.  Accepts an optional timeout value in ms (1/1000 second).  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear (ex: <code>2500ms</code> for 2.5 seconds).  Note that this function will throw an exception on timeout, in order to enable the case where NOTHING was pushed on the queue from a timeout.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::pop(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$data = $queue.pop();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::pop()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>If present, a timeout value in ms (1/1000 second).  If no data is available in the timeout period, a QUEUE-TIMEOUT exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Any</para></entry>
	      <entry><para>Depends on the value put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>QUEUE-TIMEOUT</code></para></entry>
	      <entry><para>The timeout value was exceeded.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>QUEUE-ERROR</code></para></entry>
	      <entry><para>The queue was deleted in another thread while this thread was blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::push">
      <title>Queue::push()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Adds a value to the end of the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::push(<replaceable>value</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$queue.push($value);</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::push()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>value</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Value to be put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::push()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::size">
      <title>Queue::size()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of elements in the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::size()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$size = $queue.size();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::size()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::size()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of elements in the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Queue::getWaiting">
      <title>Queue::getWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads currently blocked on this queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::getWaiting()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $queue.getWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::getWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::getWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of threads currently blocked on this queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="RWLock_Class">
    <title>Thread::RWLock Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>The RWLock class implements a read-write lock for efficient thread locking when write actions must be atomic and reads can be made in parallel if no write is in progress. When a thread holds the write lock, no other thread can grab the read or write lock. Multiple threads can hold the read lock at one time.</para>

    <para>As with all Qore threading primitives, this class supports deadlock detection and throws exceptions when threading errors are encountered (for example, trying to free the read lock while holding the write lock, etc).</para>

    <para>This read-write lock favors readers, so the read lock can be safely acquired recursively.</para>

    <para>See the <link linkend="AutoReadLock_Class">AutoReadLock</link> and the <link linkend="AutoWriteLock_Class">AutoWriteLock</link> classes for classes that assist in exception-safe RWLock locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe RWLock handling at the lexical block level as in the following example:</para>

    <programlisting>{
    $rwl.writeLock();
    <command>on_exit</command>
        $rwl.writeUnlock();

    # ... when this block exits the lock will be released, even in the
    #     case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>RWLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="RWLock::constructor">RWLock::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the RWLock object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::destructor">RWLock::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the RWLock object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::copy">RWLock::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new RWLock object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::readLock">RWLock::readLock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the read lock with an optional timeout value; blocks if the write lock is already acquired.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::readUnlock">RWLock::readUnlock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::writeLock">RWLock::writeLock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the write lock with an optional timeout; blocks if either the read lock or write lock is already acquired.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::writeUnlock">RWLock::writeUnlock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::tryReadLock">RWLock::tryReadLock()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the read lock only if it can be acquired immediately.  Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::tryWriteLock">RWLock::tryWriteLock()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the write lock only if it can be acquired immediately.  Returns 0 for success (write lock acquired) or -1 if the call would block.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::numReaders">RWLock::numReaders()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the read lock count.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::getReadWaiting">RWLock::getReadWaiting()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads waiting on the read lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="RWLock::getWriteWaiting">RWLock::getWriteWaiting()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads waiting on the write lock.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="RWLock::constructor">
      <title>RWLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the RWLock object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> RWLock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl = <command>new</command> RWLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>RWLock Object</para></entry>
	      <entry><para>The object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="RWLock::destructor">
      <title>RWLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $rwl;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by RWLock::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="RWLock::copy">
      <title>RWLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new RWLock object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_rwl = $rwl.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for RWLock::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for RWLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>RWLock Object</para></entry>
	      <entry><para>A new RWLock object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="RWLock::readLock">
      <title>RWLock::readLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock with an optional timeout value; blocks if the write lock is already acquired.  The read lock may be acquired recursively, however, each call to RWLock::readLock() requires a corresponding call to <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link>. An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::readLock(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.readLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::readLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>If an argument is present, it is interpreted as a timeout in milliseconds.  Note that it's recommended to use a <link linkend="Relative_Dates">relative time value</link> (i.e. <code>250ms</code>) to make the units clear in the source code.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for failure (only returned with a timeout)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>readLock() called while already holding the write lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::readUnlock">
      <title>RWLock::readUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::readUnlock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.readUnlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::readUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::readUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::readUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>readUnlock() called while not holding the read lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::writeLock">
      <title>RWLock::writeLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock; blocks if either the read lock or write lock is already acquired.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative date/time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	    <para>To release the write lock, use <link linkend="RWLock::readUnlock">RWLock::readUnlock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::writeLock(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.writeLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Time</link></para></entry>
	      <entry><para>If an argument is present, it is interpreted as a timeout in milliseconds.  Note that it's recommended to use a <link linkend="Relative_Dates">relative time value</link> (i.e. <code>250ms</code>) to make the units clear in the source code.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for lock acquired, -1 for timeout (only when a timeout argument is passed)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>writeLock() called while holding the read lock, writeLock() called while already holding the write lock in the same thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::writeUnlock">
      <title>RWLock::writeUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::writeUnlock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$rwl.writeUnlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>writeUnlock() called while not holding the write lock, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::tryReadLock">
      <title>RWLock::tryReadLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock only if it can be acquired immediately, returns 0 for success, -1 if it would block.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::tryReadLock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $rwl.tryReadLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::tryWriteLock">
      <title>RWLock::tryWriteLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock only if it can be acquired immediately, returns 0 for success, -1 if it would block.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::tryWriteLock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $rwl.tryWriteLock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::tryWriteLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::tryWriteLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success (write lock acquired) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="RWLock::numReaders">
      <title>RWLock::numReaders()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the read lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::numReaders()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.numReaders();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::numReaders()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::numReaders()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The read lock count.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="RWLock::getReadWaiting">
      <title>RWLock::getReadWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on the read lock (only non-zero while the write lock is held).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::getReadWaiting()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.getReadWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::getReadWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::getReadWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of threads blocked on the read lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="RWLock::getWriteWaiting">
      <title>RWLock::getWriteWaiting()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on the write lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::getWriteWaiting()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $rwl.getWriteWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::getWriteWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::getWriteWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of threads blocked on the write lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Mutex_Class">
    <title>Thread::Mutex Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>The Mutex class implements a mutual-exclusion lock for thread locking.  Like all Qore thread primitives, objects of this class participate in deadlock detection and throw exceptions when threading errors occur (ex: unlocking a Mutex object locked by another thread, etc).  See individual methods for more information on exceptions thrown.</para>

    <para>See the <link linkend="AutoLock_Class">AutoLock class</link> for a class that assists in exception-safe Mutex locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe unlocking at the lexical block level for Mutex objects as in the following example:</para>

    <programlisting>{
    $m.lock();
    <command>on_exit</command>
        $m.unlock();

    # ... when this block exits the lock will be released, even in the
    #     case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>Mutex Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Mutex::constructor">Mutex::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the Mutex object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex::destructor">Mutex::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Mutex object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex::copy">Mutex::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Mutex object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex::lock">Mutex::lock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Locks the Mutex object.  Blocks if the lock is already held.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex::unlock">Mutex::unlock()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Mutex::trylock">Mutex::trylock()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the lock only if it is not already held by another thread.  Returns 0 for success (lock acquired) or -1 if the call would block.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Mutex::constructor">
      <title>Mutex::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Mutex object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Mutex()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex = <command>new</command> Mutex();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Mutex Object</para></entry>
	      <entry><para>The new object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Mutex::destructor">
      <title>Mutex::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $mutex;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Mutex::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Mutex::copy">
      <title>Mutex::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Mutex object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_mutex = $mutex.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Mutex::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Mutex::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Mutex Object</para></entry>
	      <entry><para>A new Mutex object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Mutex::lock">
      <title>Mutex::lock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks the Mutex object.  Blocks if the lock is already held.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	    <para>To release the Mutex, use <link linkend="Mutex::unlock">Mutex::unlock()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::lock(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex.lock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::lock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>If an argument is present, it is interpreted as a timeout in milliseconds.  Note that it's recommended to use a <link linkend="Relative_Dates">relative time value</link> (i.e. <code>250ms</code>) to make the units clear in the source code.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for lock acquired, -1 for timeout (only when a timeout argument is passed)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock called twice in the same thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Mutex::unlock">
      <title>Mutex::unlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::unlock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$mutex.unlock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::unlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::unlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method return no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Mutex::unlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock not held, lock held by another thread, object deleted in another thread, etc.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Mutex::trylock">
      <title>Mutex::trylock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock only if it is not already held by another thread.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::trylock()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$bool = $mutex.trylock();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::trylock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::trylock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success (lock acquired) or -1 if the call would block.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="RMutex_Class">
    <title>Thread::RMutex Class</title>
    <para>DEPRECATED: use the <link linkend="Gate_Class">Gate</link> class instead.</para>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

  </sect1>

  <sect1 id="Sequence_Class">
    <title>Thread::Sequence Class</title>

    <para>The Sequence class implements a thread-safe increment-only object.</para>

    <table>
      <title>Sequence Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Sequence::constructor">Sequence::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Sequence object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence::destructor">Sequence::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the Sequence object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence::copy">Sequence::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Sequence object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence::next">Sequence::next()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Atomically increments the counter and returns the last value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Sequence::getCurrent">Sequence::getCurrent()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current value of the counter.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Sequence::constructor">
      <title>Sequence::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Sequence(<replaceable>[start]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$seq = <command>new</command> Sequence();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[start]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Optional start number for the sequence (default = 0).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Sequence Object</para></entry>
	      <entry><para>The new object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Sequence::destructor">
      <title>Sequence::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $seq;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Sequence::copy">
      <title>Sequence::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_seq = $seq.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Sequence::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Sequence::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Sequence Object</para></entry>
	      <entry><para>A new Sequence object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Sequence::next">
      <title>Sequence::next()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter and returns the last value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::next()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$seq.next();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::next()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::next()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The last value of the sequence.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Sequence::getCurrent">
      <title>Sequence::getCurrent()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current value of the counter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::getCurrent()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $seq.getCurrent();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::getCurrent()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::getCurrent()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The current value of the counter.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="Gate_Class">
    <title>Thread::Gate Class</title>

    <para>Note: This class is not available with the <link linkend="no-thread-classes"><code>PO_NO_THREAD_CLASSES</code></link> parse option.</para>

    <para>The Gate class implements a reentrant thread lock.  Once a thread grabs the lock, it can call the <link linkend="Gate::enter">Gate::enter()</link> method again without blocking.  Other threads that try to enter the lock will block until the thread holding the lock calls <link linkend="Gate::exit">Gate::exit()</link> an equal number of times to <link linkend="Gate::enter">Gate::enter()</link> calls.</para>

    <para>See the <link linkend="AutoGate_Class">AutoGate class</link> for a class that assists in exception-safe Gate locking.</para>

    <para>Additionally, the <link linkend="on_exit_Statements"><command>on_exit</command></link> statement can provide exception-safe Gate handling at the lexical block level as in the following example:</para>

    <programlisting>{
    $g.enter();
    <command>on_exit</command>
        $g.exit();

    # ... when this block exits the gate lock counter will be decremented,
    #     even in the case of <code>return</code> statements or exceptions
}</programlisting>

    <table>
      <title>Gate Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Gate::constructor">Gate::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Create a new Gate object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::destructor">Gate::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Destroys the Gate object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::copy">Gate::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new Gate object, not based on the original.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::enter">Gate::enter()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Acquires the lock if it is unlocked or locked by the same thread, otherwise blocks until the lock counter reaches zero.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::tryEnter">Gate::tryEnter()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Acquires the lock if it is unlocked or locked by the same thread, otherwise returns immediately with -1.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::exit">Gate::exit()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::numInside">Gate::numInside()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the current lock count.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Gate::numWaiting">Gate::numWaiting()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the number of threads blocked on the Gate.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  
    <sect2 id="Gate::constructor">
      <title>Gate::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Gate()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate = <command>new</command> Gate();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Gate Object</para></entry>
	      <entry><para>The new object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Gate::destructor">
      <title>Gate::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  Note that it is a programming error to delete this object while other threads are blocked on it; in this case an exception is thrown in the deleting thread, and in each thread blocked on this object when it is deleted.</para>
	  </listitem>
	</varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Example</term>
          <listitem>
	    <programlisting><command>delete</command> $gate;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <table>
	<title>Exceptions Thrown by Gate::destructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>Object deleted while other threads blocked on it.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Gate::copy">
      <title>Gate::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::copy()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$new_gate = $gate.copy();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Gate::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Gate::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Gate Object</para></entry>
	      <entry><para>A new Gate object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Gate::enter">
      <title>Gate::enter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked by the same thread, otherwise blocks until the lock counter reaches zero.  An optional timeout value may be passed to this method, giving a time in milliseconds to wait for the lock to become free.  Like all Qore functions and methods taking timeout values, a <link linkend="Relative_Dates">relative time value</link> may be passed instead of an integer to make the timeout units clear.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::enter(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.enter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::enter()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>An optional timeout value in milliseconds for acquiring the lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for lock acquired, -1 for timeout (only when a timeout argument is passed)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>THREAD-DEADLOCK</code></para></entry>
	      <entry><para>A deadlock was detected while trying to acquire the lock.</para></entry>
	    </row>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>object deleted in another thread</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Gate::tryEnter">
      <title>Gate::tryEnter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked by the same thread, otherwise returns immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::tryEnter(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.tryEnter();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::tryEnter()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer or <link linkend="Relative_Dates">Relative Date/Time</link></para></entry>
	      <entry><para>An optional timeout value in milliseconds for acquiring the lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::tryEnter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success (acquired the lock) or -1 for failure (would block).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  <sect2 id="Gate::exit">
    <title>Gate::exit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::exit()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$gate.exit();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::exit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::exit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Gate::exit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><code>LOCK-ERROR</code></para></entry>
	      <entry><para>lock not held by this thread, object deleted in another thread</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

  <sect2 id="Gate::numInside">
    <title>Gate::numInside()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::numInside()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $gate.numInside();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::numInside()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::numInside()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns the current lock count.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Gate::numWaiting">
      <title>Gate::numWaiting()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::numWaiting()</programlisting>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Example</term>
	  <listitem>
	    <programlisting>$num = $gate.numWaiting();</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Gate::numWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Gate::numWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns the number of threads blocked on this object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>
</chapter>
