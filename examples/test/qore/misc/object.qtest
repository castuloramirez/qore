#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-our
%enable-all-warnings
%old-style

%requires UnitTest

my UnitTest $unit();

our int $calls_constructor = 0;
our int $calls_destructor  = 0;
our int $calls_hello  = 0;

class Test {
    constructor($a) {
        $.data = $a;
        $calls_constructor++;
    }
    destructor() {
        $calls_destructor++;
    }
    getData() {
        return $.data;
    }
    getType() {
        return get_class_name($self);
    }
    private p1() {
    }
}

private Test::p2() {
    $.p1();
}

Test::hello() {
    $.p2();
    $calls_hello++;
}

sub et(Test $t) {
    $t.a = "123";
}

our Test $t = new Test(1);
$unit.cmp($calls_constructor, 1, 'constructor called');
(new Test(3)).hello();
$unit.cmp($calls_constructor, 2, 'constructor called');
$unit.cmp($calls_hello, 1, 'hello called');
$unit.cmp("Test", $t.getType(), 'class name check');
$t.hello();
$unit.cmp($calls_hello, 2, 'hello called');
et($t);
$unit.cmp($t.a, "123", 'variable changed in method');

const Methods = ('p2', 'getData', 'hello', 'destructor', 'getType', 'p1', 'constructor');

# test fails on OSX, method return order is not guaranteed across platforms
#$unit.cmp(getMethodList($t), Methods, 'got method list');

# test each method separately
my list $ml = get_method_list($t);
$unit.cmp(Methods.size(), $ml.size(), "method list size");
map $unit.cmp(True, inlist_hard($1, Methods), "method list " + $1), $ml;

# unless we explicitly delete, we get the following exception on OSX (but not on Linux):
#   DESTRUCTOR-ERROR: illegal variable assignment after second phase of variable destruction
delete $t;
